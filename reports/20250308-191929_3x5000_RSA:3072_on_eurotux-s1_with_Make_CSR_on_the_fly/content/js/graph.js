/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 112.0, "minX": 0.0, "maxY": 2122.0, "series": [{"data": [[0.0, 112.0], [0.1, 119.0], [0.2, 123.0], [0.3, 125.0], [0.4, 127.0], [0.5, 129.0], [0.6, 131.0], [0.7, 132.0], [0.8, 133.0], [0.9, 134.0], [1.0, 136.0], [1.1, 137.0], [1.2, 138.0], [1.3, 140.0], [1.4, 142.0], [1.5, 143.0], [1.6, 144.0], [1.7, 145.0], [1.8, 146.0], [1.9, 147.0], [2.0, 148.0], [2.1, 149.0], [2.2, 149.0], [2.3, 150.0], [2.4, 151.0], [2.5, 152.0], [2.6, 153.0], [2.7, 153.0], [2.8, 154.0], [2.9, 155.0], [3.0, 156.0], [3.1, 157.0], [3.2, 158.0], [3.3, 159.0], [3.4, 160.0], [3.5, 161.0], [3.6, 161.0], [3.7, 162.0], [3.8, 163.0], [3.9, 163.0], [4.0, 164.0], [4.1, 165.0], [4.2, 166.0], [4.3, 167.0], [4.4, 167.0], [4.5, 168.0], [4.6, 169.0], [4.7, 169.0], [4.8, 170.0], [4.9, 171.0], [5.0, 171.0], [5.1, 172.0], [5.2, 173.0], [5.3, 174.0], [5.4, 174.0], [5.5, 175.0], [5.6, 175.0], [5.7, 176.0], [5.8, 177.0], [5.9, 178.0], [6.0, 178.0], [6.1, 179.0], [6.2, 180.0], [6.3, 180.0], [6.4, 181.0], [6.5, 182.0], [6.6, 182.0], [6.7, 183.0], [6.8, 183.0], [6.9, 184.0], [7.0, 184.0], [7.1, 185.0], [7.2, 186.0], [7.3, 186.0], [7.4, 187.0], [7.5, 187.0], [7.6, 188.0], [7.7, 189.0], [7.8, 189.0], [7.9, 190.0], [8.0, 190.0], [8.1, 191.0], [8.2, 191.0], [8.3, 192.0], [8.4, 192.0], [8.5, 193.0], [8.6, 194.0], [8.7, 195.0], [8.8, 195.0], [8.9, 196.0], [9.0, 196.0], [9.1, 197.0], [9.2, 197.0], [9.3, 198.0], [9.4, 198.0], [9.5, 199.0], [9.6, 199.0], [9.7, 200.0], [9.8, 200.0], [9.9, 201.0], [10.0, 201.0], [10.1, 202.0], [10.2, 202.0], [10.3, 203.0], [10.4, 204.0], [10.5, 204.0], [10.6, 204.0], [10.7, 205.0], [10.8, 205.0], [10.9, 206.0], [11.0, 207.0], [11.1, 207.0], [11.2, 208.0], [11.3, 208.0], [11.4, 209.0], [11.5, 209.0], [11.6, 210.0], [11.7, 210.0], [11.8, 211.0], [11.9, 212.0], [12.0, 212.0], [12.1, 213.0], [12.2, 213.0], [12.3, 213.0], [12.4, 214.0], [12.5, 215.0], [12.6, 215.0], [12.7, 216.0], [12.8, 216.0], [12.9, 217.0], [13.0, 218.0], [13.1, 218.0], [13.2, 218.0], [13.3, 219.0], [13.4, 219.0], [13.5, 220.0], [13.6, 221.0], [13.7, 221.0], [13.8, 222.0], [13.9, 222.0], [14.0, 223.0], [14.1, 223.0], [14.2, 224.0], [14.3, 224.0], [14.4, 225.0], [14.5, 225.0], [14.6, 226.0], [14.7, 226.0], [14.8, 227.0], [14.9, 227.0], [15.0, 227.0], [15.1, 228.0], [15.2, 228.0], [15.3, 229.0], [15.4, 229.0], [15.5, 229.0], [15.6, 230.0], [15.7, 230.0], [15.8, 231.0], [15.9, 231.0], [16.0, 232.0], [16.1, 232.0], [16.2, 233.0], [16.3, 234.0], [16.4, 234.0], [16.5, 235.0], [16.6, 235.0], [16.7, 236.0], [16.8, 237.0], [16.9, 237.0], [17.0, 237.0], [17.1, 238.0], [17.2, 239.0], [17.3, 239.0], [17.4, 240.0], [17.5, 240.0], [17.6, 241.0], [17.7, 242.0], [17.8, 242.0], [17.9, 243.0], [18.0, 243.0], [18.1, 243.0], [18.2, 244.0], [18.3, 244.0], [18.4, 245.0], [18.5, 245.0], [18.6, 246.0], [18.7, 246.0], [18.8, 247.0], [18.9, 247.0], [19.0, 248.0], [19.1, 248.0], [19.2, 249.0], [19.3, 249.0], [19.4, 249.0], [19.5, 250.0], [19.6, 250.0], [19.7, 251.0], [19.8, 251.0], [19.9, 252.0], [20.0, 252.0], [20.1, 253.0], [20.2, 253.0], [20.3, 254.0], [20.4, 254.0], [20.5, 255.0], [20.6, 255.0], [20.7, 256.0], [20.8, 256.0], [20.9, 257.0], [21.0, 257.0], [21.1, 257.0], [21.2, 258.0], [21.3, 258.0], [21.4, 259.0], [21.5, 259.0], [21.6, 260.0], [21.7, 261.0], [21.8, 261.0], [21.9, 261.0], [22.0, 262.0], [22.1, 263.0], [22.2, 263.0], [22.3, 264.0], [22.4, 264.0], [22.5, 265.0], [22.6, 265.0], [22.7, 265.0], [22.8, 266.0], [22.9, 266.0], [23.0, 267.0], [23.1, 267.0], [23.2, 268.0], [23.3, 269.0], [23.4, 269.0], [23.5, 270.0], [23.6, 270.0], [23.7, 270.0], [23.8, 271.0], [23.9, 271.0], [24.0, 272.0], [24.1, 272.0], [24.2, 273.0], [24.3, 273.0], [24.4, 274.0], [24.5, 274.0], [24.6, 275.0], [24.7, 275.0], [24.8, 276.0], [24.9, 276.0], [25.0, 277.0], [25.1, 277.0], [25.2, 278.0], [25.3, 278.0], [25.4, 279.0], [25.5, 279.0], [25.6, 280.0], [25.7, 280.0], [25.8, 281.0], [25.9, 281.0], [26.0, 282.0], [26.1, 282.0], [26.2, 283.0], [26.3, 283.0], [26.4, 284.0], [26.5, 284.0], [26.6, 284.0], [26.7, 285.0], [26.8, 285.0], [26.9, 286.0], [27.0, 286.0], [27.1, 287.0], [27.2, 287.0], [27.3, 288.0], [27.4, 288.0], [27.5, 289.0], [27.6, 289.0], [27.7, 290.0], [27.8, 290.0], [27.9, 291.0], [28.0, 291.0], [28.1, 292.0], [28.2, 292.0], [28.3, 293.0], [28.4, 293.0], [28.5, 293.0], [28.6, 294.0], [28.7, 294.0], [28.8, 295.0], [28.9, 295.0], [29.0, 296.0], [29.1, 296.0], [29.2, 297.0], [29.3, 297.0], [29.4, 298.0], [29.5, 298.0], [29.6, 298.0], [29.7, 299.0], [29.8, 299.0], [29.9, 299.0], [30.0, 300.0], [30.1, 300.0], [30.2, 301.0], [30.3, 302.0], [30.4, 302.0], [30.5, 302.0], [30.6, 303.0], [30.7, 303.0], [30.8, 304.0], [30.9, 305.0], [31.0, 305.0], [31.1, 306.0], [31.2, 306.0], [31.3, 307.0], [31.4, 308.0], [31.5, 308.0], [31.6, 308.0], [31.7, 309.0], [31.8, 309.0], [31.9, 310.0], [32.0, 311.0], [32.1, 311.0], [32.2, 311.0], [32.3, 312.0], [32.4, 312.0], [32.5, 312.0], [32.6, 313.0], [32.7, 313.0], [32.8, 314.0], [32.9, 314.0], [33.0, 315.0], [33.1, 315.0], [33.2, 316.0], [33.3, 316.0], [33.4, 316.0], [33.5, 317.0], [33.6, 317.0], [33.7, 318.0], [33.8, 318.0], [33.9, 319.0], [34.0, 320.0], [34.1, 320.0], [34.2, 321.0], [34.3, 321.0], [34.4, 322.0], [34.5, 322.0], [34.6, 322.0], [34.7, 323.0], [34.8, 324.0], [34.9, 324.0], [35.0, 324.0], [35.1, 325.0], [35.2, 326.0], [35.3, 326.0], [35.4, 326.0], [35.5, 327.0], [35.6, 327.0], [35.7, 327.0], [35.8, 328.0], [35.9, 329.0], [36.0, 329.0], [36.1, 330.0], [36.2, 331.0], [36.3, 331.0], [36.4, 332.0], [36.5, 332.0], [36.6, 333.0], [36.7, 333.0], [36.8, 334.0], [36.9, 334.0], [37.0, 335.0], [37.1, 335.0], [37.2, 336.0], [37.3, 336.0], [37.4, 337.0], [37.5, 337.0], [37.6, 338.0], [37.7, 338.0], [37.8, 339.0], [37.9, 340.0], [38.0, 340.0], [38.1, 340.0], [38.2, 341.0], [38.3, 342.0], [38.4, 342.0], [38.5, 342.0], [38.6, 343.0], [38.7, 343.0], [38.8, 343.0], [38.9, 344.0], [39.0, 344.0], [39.1, 345.0], [39.2, 345.0], [39.3, 346.0], [39.4, 346.0], [39.5, 347.0], [39.6, 347.0], [39.7, 348.0], [39.8, 348.0], [39.9, 349.0], [40.0, 349.0], [40.1, 350.0], [40.2, 351.0], [40.3, 351.0], [40.4, 351.0], [40.5, 352.0], [40.6, 353.0], [40.7, 353.0], [40.8, 353.0], [40.9, 354.0], [41.0, 354.0], [41.1, 355.0], [41.2, 356.0], [41.3, 356.0], [41.4, 357.0], [41.5, 357.0], [41.6, 357.0], [41.7, 358.0], [41.8, 358.0], [41.9, 359.0], [42.0, 359.0], [42.1, 360.0], [42.2, 360.0], [42.3, 361.0], [42.4, 361.0], [42.5, 362.0], [42.6, 362.0], [42.7, 363.0], [42.8, 363.0], [42.9, 364.0], [43.0, 365.0], [43.1, 365.0], [43.2, 366.0], [43.3, 366.0], [43.4, 366.0], [43.5, 367.0], [43.6, 367.0], [43.7, 368.0], [43.8, 368.0], [43.9, 369.0], [44.0, 369.0], [44.1, 370.0], [44.2, 370.0], [44.3, 371.0], [44.4, 371.0], [44.5, 371.0], [44.6, 372.0], [44.7, 373.0], [44.8, 373.0], [44.9, 373.0], [45.0, 374.0], [45.1, 375.0], [45.2, 375.0], [45.3, 375.0], [45.4, 376.0], [45.5, 376.0], [45.6, 376.0], [45.7, 377.0], [45.8, 378.0], [45.9, 378.0], [46.0, 379.0], [46.1, 379.0], [46.2, 380.0], [46.3, 380.0], [46.4, 381.0], [46.5, 381.0], [46.6, 382.0], [46.7, 382.0], [46.8, 383.0], [46.9, 383.0], [47.0, 384.0], [47.1, 384.0], [47.2, 385.0], [47.3, 385.0], [47.4, 386.0], [47.5, 386.0], [47.6, 387.0], [47.7, 388.0], [47.8, 388.0], [47.9, 389.0], [48.0, 390.0], [48.1, 390.0], [48.2, 391.0], [48.3, 391.0], [48.4, 392.0], [48.5, 392.0], [48.6, 393.0], [48.7, 393.0], [48.8, 393.0], [48.9, 394.0], [49.0, 394.0], [49.1, 395.0], [49.2, 395.0], [49.3, 396.0], [49.4, 396.0], [49.5, 397.0], [49.6, 397.0], [49.7, 398.0], [49.8, 398.0], [49.9, 399.0], [50.0, 399.0], [50.1, 400.0], [50.2, 401.0], [50.3, 401.0], [50.4, 402.0], [50.5, 402.0], [50.6, 403.0], [50.7, 403.0], [50.8, 404.0], [50.9, 405.0], [51.0, 405.0], [51.1, 406.0], [51.2, 406.0], [51.3, 407.0], [51.4, 408.0], [51.5, 408.0], [51.6, 409.0], [51.7, 409.0], [51.8, 410.0], [51.9, 411.0], [52.0, 411.0], [52.1, 412.0], [52.2, 412.0], [52.3, 413.0], [52.4, 413.0], [52.5, 414.0], [52.6, 414.0], [52.7, 415.0], [52.8, 416.0], [52.9, 416.0], [53.0, 417.0], [53.1, 418.0], [53.2, 418.0], [53.3, 419.0], [53.4, 420.0], [53.5, 420.0], [53.6, 421.0], [53.7, 422.0], [53.8, 422.0], [53.9, 423.0], [54.0, 424.0], [54.1, 424.0], [54.2, 424.0], [54.3, 425.0], [54.4, 425.0], [54.5, 426.0], [54.6, 426.0], [54.7, 427.0], [54.8, 427.0], [54.9, 428.0], [55.0, 428.0], [55.1, 429.0], [55.2, 429.0], [55.3, 430.0], [55.4, 431.0], [55.5, 431.0], [55.6, 432.0], [55.7, 432.0], [55.8, 433.0], [55.9, 434.0], [56.0, 434.0], [56.1, 435.0], [56.2, 435.0], [56.3, 436.0], [56.4, 436.0], [56.5, 437.0], [56.6, 437.0], [56.7, 438.0], [56.8, 439.0], [56.9, 439.0], [57.0, 440.0], [57.1, 440.0], [57.2, 441.0], [57.3, 441.0], [57.4, 442.0], [57.5, 442.0], [57.6, 443.0], [57.7, 443.0], [57.8, 444.0], [57.9, 445.0], [58.0, 445.0], [58.1, 446.0], [58.2, 446.0], [58.3, 447.0], [58.4, 448.0], [58.5, 448.0], [58.6, 449.0], [58.7, 450.0], [58.8, 450.0], [58.9, 451.0], [59.0, 451.0], [59.1, 452.0], [59.2, 452.0], [59.3, 453.0], [59.4, 454.0], [59.5, 454.0], [59.6, 455.0], [59.7, 456.0], [59.8, 457.0], [59.9, 457.0], [60.0, 458.0], [60.1, 458.0], [60.2, 459.0], [60.3, 460.0], [60.4, 460.0], [60.5, 461.0], [60.6, 462.0], [60.7, 462.0], [60.8, 463.0], [60.9, 463.0], [61.0, 464.0], [61.1, 465.0], [61.2, 465.0], [61.3, 466.0], [61.4, 466.0], [61.5, 467.0], [61.6, 468.0], [61.7, 469.0], [61.8, 469.0], [61.9, 470.0], [62.0, 471.0], [62.1, 472.0], [62.2, 472.0], [62.3, 473.0], [62.4, 474.0], [62.5, 474.0], [62.6, 475.0], [62.7, 476.0], [62.8, 476.0], [62.9, 477.0], [63.0, 478.0], [63.1, 479.0], [63.2, 479.0], [63.3, 480.0], [63.4, 481.0], [63.5, 481.0], [63.6, 482.0], [63.7, 483.0], [63.8, 483.0], [63.9, 484.0], [64.0, 485.0], [64.1, 486.0], [64.2, 486.0], [64.3, 487.0], [64.4, 487.0], [64.5, 489.0], [64.6, 490.0], [64.7, 491.0], [64.8, 491.0], [64.9, 492.0], [65.0, 492.0], [65.1, 493.0], [65.2, 494.0], [65.3, 495.0], [65.4, 495.0], [65.5, 496.0], [65.6, 496.0], [65.7, 497.0], [65.8, 498.0], [65.9, 498.0], [66.0, 499.0], [66.1, 500.0], [66.2, 501.0], [66.3, 502.0], [66.4, 502.0], [66.5, 503.0], [66.6, 504.0], [66.7, 504.0], [66.8, 505.0], [66.9, 506.0], [67.0, 506.0], [67.1, 508.0], [67.2, 509.0], [67.3, 510.0], [67.4, 511.0], [67.5, 511.0], [67.6, 512.0], [67.7, 513.0], [67.8, 513.0], [67.9, 514.0], [68.0, 515.0], [68.1, 515.0], [68.2, 516.0], [68.3, 517.0], [68.4, 517.0], [68.5, 518.0], [68.6, 519.0], [68.7, 520.0], [68.8, 521.0], [68.9, 522.0], [69.0, 523.0], [69.1, 524.0], [69.2, 524.0], [69.3, 525.0], [69.4, 526.0], [69.5, 526.0], [69.6, 527.0], [69.7, 528.0], [69.8, 529.0], [69.9, 530.0], [70.0, 530.0], [70.1, 531.0], [70.2, 532.0], [70.3, 533.0], [70.4, 533.0], [70.5, 534.0], [70.6, 535.0], [70.7, 536.0], [70.8, 536.0], [70.9, 537.0], [71.0, 538.0], [71.1, 538.0], [71.2, 539.0], [71.3, 540.0], [71.4, 541.0], [71.5, 542.0], [71.6, 543.0], [71.7, 544.0], [71.8, 544.0], [71.9, 545.0], [72.0, 546.0], [72.1, 547.0], [72.2, 547.0], [72.3, 548.0], [72.4, 549.0], [72.5, 550.0], [72.6, 551.0], [72.7, 552.0], [72.8, 553.0], [72.9, 554.0], [73.0, 554.0], [73.1, 555.0], [73.2, 556.0], [73.3, 557.0], [73.4, 557.0], [73.5, 559.0], [73.6, 560.0], [73.7, 561.0], [73.8, 561.0], [73.9, 562.0], [74.0, 563.0], [74.1, 563.0], [74.2, 564.0], [74.3, 566.0], [74.4, 567.0], [74.5, 567.0], [74.6, 568.0], [74.7, 570.0], [74.8, 571.0], [74.9, 572.0], [75.0, 572.0], [75.1, 573.0], [75.2, 574.0], [75.3, 575.0], [75.4, 576.0], [75.5, 577.0], [75.6, 578.0], [75.7, 579.0], [75.8, 580.0], [75.9, 582.0], [76.0, 583.0], [76.1, 584.0], [76.2, 585.0], [76.3, 586.0], [76.4, 587.0], [76.5, 588.0], [76.6, 589.0], [76.7, 590.0], [76.8, 591.0], [76.9, 592.0], [77.0, 593.0], [77.1, 594.0], [77.2, 595.0], [77.3, 596.0], [77.4, 596.0], [77.5, 597.0], [77.6, 599.0], [77.7, 600.0], [77.8, 601.0], [77.9, 602.0], [78.0, 603.0], [78.1, 604.0], [78.2, 605.0], [78.3, 606.0], [78.4, 608.0], [78.5, 608.0], [78.6, 609.0], [78.7, 610.0], [78.8, 611.0], [78.9, 612.0], [79.0, 614.0], [79.1, 614.0], [79.2, 616.0], [79.3, 617.0], [79.4, 619.0], [79.5, 620.0], [79.6, 621.0], [79.7, 622.0], [79.8, 623.0], [79.9, 624.0], [80.0, 626.0], [80.1, 627.0], [80.2, 628.0], [80.3, 630.0], [80.4, 631.0], [80.5, 632.0], [80.6, 634.0], [80.7, 635.0], [80.8, 636.0], [80.9, 637.0], [81.0, 638.0], [81.1, 639.0], [81.2, 640.0], [81.3, 641.0], [81.4, 642.0], [81.5, 643.0], [81.6, 644.0], [81.7, 646.0], [81.8, 647.0], [81.9, 648.0], [82.0, 649.0], [82.1, 650.0], [82.2, 653.0], [82.3, 654.0], [82.4, 655.0], [82.5, 657.0], [82.6, 658.0], [82.7, 659.0], [82.8, 661.0], [82.9, 662.0], [83.0, 663.0], [83.1, 664.0], [83.2, 666.0], [83.3, 667.0], [83.4, 668.0], [83.5, 669.0], [83.6, 670.0], [83.7, 672.0], [83.8, 674.0], [83.9, 676.0], [84.0, 678.0], [84.1, 679.0], [84.2, 680.0], [84.3, 681.0], [84.4, 683.0], [84.5, 684.0], [84.6, 686.0], [84.7, 688.0], [84.8, 689.0], [84.9, 690.0], [85.0, 691.0], [85.1, 693.0], [85.2, 694.0], [85.3, 695.0], [85.4, 697.0], [85.5, 698.0], [85.6, 700.0], [85.7, 701.0], [85.8, 703.0], [85.9, 704.0], [86.0, 705.0], [86.1, 707.0], [86.2, 709.0], [86.3, 710.0], [86.4, 712.0], [86.5, 713.0], [86.6, 715.0], [86.7, 716.0], [86.8, 717.0], [86.9, 718.0], [87.0, 721.0], [87.1, 723.0], [87.2, 725.0], [87.3, 727.0], [87.4, 729.0], [87.5, 730.0], [87.6, 732.0], [87.7, 733.0], [87.8, 734.0], [87.9, 736.0], [88.0, 738.0], [88.1, 741.0], [88.2, 742.0], [88.3, 744.0], [88.4, 746.0], [88.5, 748.0], [88.6, 749.0], [88.7, 751.0], [88.8, 753.0], [88.9, 754.0], [89.0, 756.0], [89.1, 758.0], [89.2, 762.0], [89.3, 764.0], [89.4, 765.0], [89.5, 767.0], [89.6, 769.0], [89.7, 772.0], [89.8, 774.0], [89.9, 776.0], [90.0, 778.0], [90.1, 780.0], [90.2, 782.0], [90.3, 786.0], [90.4, 788.0], [90.5, 790.0], [90.6, 793.0], [90.7, 794.0], [90.8, 796.0], [90.9, 799.0], [91.0, 801.0], [91.1, 803.0], [91.2, 806.0], [91.3, 809.0], [91.4, 812.0], [91.5, 815.0], [91.6, 818.0], [91.7, 820.0], [91.8, 823.0], [91.9, 827.0], [92.0, 830.0], [92.1, 832.0], [92.2, 835.0], [92.3, 838.0], [92.4, 842.0], [92.5, 844.0], [92.6, 846.0], [92.7, 850.0], [92.8, 853.0], [92.9, 854.0], [93.0, 857.0], [93.1, 861.0], [93.2, 864.0], [93.3, 867.0], [93.4, 869.0], [93.5, 871.0], [93.6, 874.0], [93.7, 877.0], [93.8, 879.0], [93.9, 883.0], [94.0, 886.0], [94.1, 889.0], [94.2, 892.0], [94.3, 896.0], [94.4, 900.0], [94.5, 904.0], [94.6, 909.0], [94.7, 913.0], [94.8, 917.0], [94.9, 921.0], [95.0, 925.0], [95.1, 928.0], [95.2, 931.0], [95.3, 937.0], [95.4, 940.0], [95.5, 943.0], [95.6, 946.0], [95.7, 950.0], [95.8, 952.0], [95.9, 957.0], [96.0, 964.0], [96.1, 969.0], [96.2, 972.0], [96.3, 978.0], [96.4, 982.0], [96.5, 986.0], [96.6, 993.0], [96.7, 999.0], [96.8, 1004.0], [96.9, 1011.0], [97.0, 1017.0], [97.1, 1024.0], [97.2, 1029.0], [97.3, 1037.0], [97.4, 1042.0], [97.5, 1046.0], [97.6, 1057.0], [97.7, 1063.0], [97.8, 1070.0], [97.9, 1081.0], [98.0, 1090.0], [98.1, 1103.0], [98.2, 1112.0], [98.3, 1126.0], [98.4, 1139.0], [98.5, 1150.0], [98.6, 1170.0], [98.7, 1187.0], [98.8, 1198.0], [98.9, 1217.0], [99.0, 1242.0], [99.1, 1264.0], [99.2, 1288.0], [99.3, 1310.0], [99.4, 1351.0], [99.5, 1385.0], [99.6, 1432.0], [99.7, 1476.0], [99.8, 1553.0], [99.9, 1690.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 228.0], [0.1, 233.0], [0.2, 235.0], [0.3, 235.0], [0.4, 236.0], [0.5, 236.0], [0.6, 236.0], [0.7, 237.0], [0.8, 237.0], [0.9, 238.0], [1.0, 238.0], [1.1, 238.0], [1.2, 239.0], [1.3, 239.0], [1.4, 239.0], [1.5, 240.0], [1.6, 240.0], [1.7, 240.0], [1.8, 240.0], [1.9, 240.0], [2.0, 240.0], [2.1, 241.0], [2.2, 241.0], [2.3, 241.0], [2.4, 241.0], [2.5, 241.0], [2.6, 241.0], [2.7, 242.0], [2.8, 242.0], [2.9, 242.0], [3.0, 242.0], [3.1, 242.0], [3.2, 242.0], [3.3, 242.0], [3.4, 242.0], [3.5, 243.0], [3.6, 243.0], [3.7, 243.0], [3.8, 243.0], [3.9, 243.0], [4.0, 243.0], [4.1, 243.0], [4.2, 243.0], [4.3, 243.0], [4.4, 244.0], [4.5, 244.0], [4.6, 244.0], [4.7, 244.0], [4.8, 244.0], [4.9, 244.0], [5.0, 244.0], [5.1, 244.0], [5.2, 244.0], [5.3, 244.0], [5.4, 244.0], [5.5, 245.0], [5.6, 245.0], [5.7, 245.0], [5.8, 245.0], [5.9, 245.0], [6.0, 245.0], [6.1, 245.0], [6.2, 245.0], [6.3, 245.0], [6.4, 246.0], [6.5, 246.0], [6.6, 246.0], [6.7, 246.0], [6.8, 246.0], [6.9, 246.0], [7.0, 246.0], [7.1, 246.0], [7.2, 246.0], [7.3, 246.0], [7.4, 246.0], [7.5, 247.0], [7.6, 247.0], [7.7, 247.0], [7.8, 247.0], [7.9, 247.0], [8.0, 247.0], [8.1, 247.0], [8.2, 247.0], [8.3, 247.0], [8.4, 247.0], [8.5, 247.0], [8.6, 247.0], [8.7, 247.0], [8.8, 248.0], [8.9, 248.0], [9.0, 248.0], [9.1, 248.0], [9.2, 248.0], [9.3, 248.0], [9.4, 248.0], [9.5, 248.0], [9.6, 248.0], [9.7, 248.0], [9.8, 248.0], [9.9, 248.0], [10.0, 248.0], [10.1, 249.0], [10.2, 249.0], [10.3, 249.0], [10.4, 249.0], [10.5, 249.0], [10.6, 249.0], [10.7, 249.0], [10.8, 249.0], [10.9, 249.0], [11.0, 249.0], [11.1, 249.0], [11.2, 249.0], [11.3, 250.0], [11.4, 250.0], [11.5, 250.0], [11.6, 250.0], [11.7, 250.0], [11.8, 250.0], [11.9, 250.0], [12.0, 250.0], [12.1, 250.0], [12.2, 250.0], [12.3, 250.0], [12.4, 250.0], [12.5, 250.0], [12.6, 250.0], [12.7, 251.0], [12.8, 251.0], [12.9, 251.0], [13.0, 251.0], [13.1, 251.0], [13.2, 251.0], [13.3, 251.0], [13.4, 251.0], [13.5, 251.0], [13.6, 251.0], [13.7, 251.0], [13.8, 251.0], [13.9, 251.0], [14.0, 252.0], [14.1, 252.0], [14.2, 252.0], [14.3, 252.0], [14.4, 252.0], [14.5, 252.0], [14.6, 252.0], [14.7, 252.0], [14.8, 252.0], [14.9, 252.0], [15.0, 252.0], [15.1, 252.0], [15.2, 252.0], [15.3, 252.0], [15.4, 253.0], [15.5, 253.0], [15.6, 253.0], [15.7, 253.0], [15.8, 253.0], [15.9, 253.0], [16.0, 253.0], [16.1, 253.0], [16.2, 253.0], [16.3, 253.0], [16.4, 253.0], [16.5, 253.0], [16.6, 253.0], [16.7, 253.0], [16.8, 253.0], [16.9, 254.0], [17.0, 254.0], [17.1, 254.0], [17.2, 254.0], [17.3, 254.0], [17.4, 254.0], [17.5, 254.0], [17.6, 254.0], [17.7, 254.0], [17.8, 254.0], [17.9, 254.0], [18.0, 254.0], [18.1, 254.0], [18.2, 254.0], [18.3, 254.0], [18.4, 255.0], [18.5, 255.0], [18.6, 255.0], [18.7, 255.0], [18.8, 255.0], [18.9, 255.0], [19.0, 255.0], [19.1, 255.0], [19.2, 255.0], [19.3, 255.0], [19.4, 255.0], [19.5, 255.0], [19.6, 255.0], [19.7, 255.0], [19.8, 255.0], [19.9, 256.0], [20.0, 256.0], [20.1, 256.0], [20.2, 256.0], [20.3, 256.0], [20.4, 256.0], [20.5, 256.0], [20.6, 256.0], [20.7, 256.0], [20.8, 256.0], [20.9, 256.0], [21.0, 256.0], [21.1, 256.0], [21.2, 256.0], [21.3, 257.0], [21.4, 257.0], [21.5, 257.0], [21.6, 257.0], [21.7, 257.0], [21.8, 257.0], [21.9, 257.0], [22.0, 257.0], [22.1, 257.0], [22.2, 257.0], [22.3, 257.0], [22.4, 257.0], [22.5, 257.0], [22.6, 257.0], [22.7, 258.0], [22.8, 258.0], [22.9, 258.0], [23.0, 258.0], [23.1, 258.0], [23.2, 258.0], [23.3, 258.0], [23.4, 258.0], [23.5, 258.0], [23.6, 258.0], [23.7, 258.0], [23.8, 258.0], [23.9, 259.0], [24.0, 259.0], [24.1, 259.0], [24.2, 259.0], [24.3, 259.0], [24.4, 259.0], [24.5, 259.0], [24.6, 259.0], [24.7, 259.0], [24.8, 259.0], [24.9, 259.0], [25.0, 259.0], [25.1, 259.0], [25.2, 259.0], [25.3, 259.0], [25.4, 260.0], [25.5, 260.0], [25.6, 260.0], [25.7, 260.0], [25.8, 260.0], [25.9, 260.0], [26.0, 260.0], [26.1, 260.0], [26.2, 260.0], [26.3, 260.0], [26.4, 260.0], [26.5, 260.0], [26.6, 260.0], [26.7, 261.0], [26.8, 261.0], [26.9, 261.0], [27.0, 261.0], [27.1, 261.0], [27.2, 261.0], [27.3, 261.0], [27.4, 261.0], [27.5, 261.0], [27.6, 261.0], [27.7, 261.0], [27.8, 261.0], [27.9, 262.0], [28.0, 262.0], [28.1, 262.0], [28.2, 262.0], [28.3, 262.0], [28.4, 262.0], [28.5, 262.0], [28.6, 262.0], [28.7, 262.0], [28.8, 262.0], [28.9, 263.0], [29.0, 263.0], [29.1, 263.0], [29.2, 263.0], [29.3, 263.0], [29.4, 263.0], [29.5, 263.0], [29.6, 263.0], [29.7, 263.0], [29.8, 263.0], [29.9, 264.0], [30.0, 264.0], [30.1, 264.0], [30.2, 264.0], [30.3, 264.0], [30.4, 264.0], [30.5, 264.0], [30.6, 264.0], [30.7, 265.0], [30.8, 265.0], [30.9, 265.0], [31.0, 265.0], [31.1, 265.0], [31.2, 265.0], [31.3, 265.0], [31.4, 265.0], [31.5, 265.0], [31.6, 265.0], [31.7, 265.0], [31.8, 266.0], [31.9, 266.0], [32.0, 266.0], [32.1, 266.0], [32.2, 266.0], [32.3, 266.0], [32.4, 267.0], [32.5, 267.0], [32.6, 267.0], [32.7, 267.0], [32.8, 267.0], [32.9, 267.0], [33.0, 267.0], [33.1, 268.0], [33.2, 268.0], [33.3, 268.0], [33.4, 268.0], [33.5, 268.0], [33.6, 269.0], [33.7, 269.0], [33.8, 269.0], [33.9, 269.0], [34.0, 269.0], [34.1, 270.0], [34.2, 270.0], [34.3, 270.0], [34.4, 270.0], [34.5, 271.0], [34.6, 271.0], [34.7, 271.0], [34.8, 271.0], [34.9, 272.0], [35.0, 272.0], [35.1, 272.0], [35.2, 272.0], [35.3, 273.0], [35.4, 273.0], [35.5, 274.0], [35.6, 274.0], [35.7, 274.0], [35.8, 275.0], [35.9, 275.0], [36.0, 276.0], [36.1, 276.0], [36.2, 277.0], [36.3, 278.0], [36.4, 279.0], [36.5, 280.0], [36.6, 281.0], [36.7, 282.0], [36.8, 283.0], [36.9, 285.0], [37.0, 287.0], [37.1, 290.0], [37.2, 296.0], [37.3, 299.0], [37.4, 301.0], [37.5, 302.0], [37.6, 303.0], [37.7, 303.0], [37.8, 304.0], [37.9, 304.0], [38.0, 304.0], [38.1, 305.0], [38.2, 305.0], [38.3, 305.0], [38.4, 305.0], [38.5, 306.0], [38.6, 306.0], [38.7, 306.0], [38.8, 306.0], [38.9, 307.0], [39.0, 307.0], [39.1, 307.0], [39.2, 307.0], [39.3, 307.0], [39.4, 308.0], [39.5, 308.0], [39.6, 308.0], [39.7, 308.0], [39.8, 308.0], [39.9, 308.0], [40.0, 308.0], [40.1, 308.0], [40.2, 309.0], [40.3, 309.0], [40.4, 309.0], [40.5, 309.0], [40.6, 309.0], [40.7, 309.0], [40.8, 309.0], [40.9, 310.0], [41.0, 310.0], [41.1, 310.0], [41.2, 310.0], [41.3, 310.0], [41.4, 310.0], [41.5, 310.0], [41.6, 310.0], [41.7, 310.0], [41.8, 310.0], [41.9, 311.0], [42.0, 311.0], [42.1, 311.0], [42.2, 311.0], [42.3, 311.0], [42.4, 311.0], [42.5, 311.0], [42.6, 311.0], [42.7, 311.0], [42.8, 311.0], [42.9, 311.0], [43.0, 312.0], [43.1, 312.0], [43.2, 312.0], [43.3, 312.0], [43.4, 312.0], [43.5, 312.0], [43.6, 312.0], [43.7, 312.0], [43.8, 312.0], [43.9, 312.0], [44.0, 312.0], [44.1, 312.0], [44.2, 313.0], [44.3, 313.0], [44.4, 313.0], [44.5, 313.0], [44.6, 313.0], [44.7, 313.0], [44.8, 313.0], [44.9, 313.0], [45.0, 313.0], [45.1, 313.0], [45.2, 313.0], [45.3, 313.0], [45.4, 314.0], [45.5, 314.0], [45.6, 314.0], [45.7, 314.0], [45.8, 314.0], [45.9, 314.0], [46.0, 314.0], [46.1, 314.0], [46.2, 314.0], [46.3, 314.0], [46.4, 314.0], [46.5, 314.0], [46.6, 314.0], [46.7, 314.0], [46.8, 314.0], [46.9, 315.0], [47.0, 315.0], [47.1, 315.0], [47.2, 315.0], [47.3, 315.0], [47.4, 315.0], [47.5, 315.0], [47.6, 315.0], [47.7, 315.0], [47.8, 315.0], [47.9, 315.0], [48.0, 315.0], [48.1, 315.0], [48.2, 315.0], [48.3, 315.0], [48.4, 316.0], [48.5, 316.0], [48.6, 316.0], [48.7, 316.0], [48.8, 316.0], [48.9, 316.0], [49.0, 316.0], [49.1, 316.0], [49.2, 316.0], [49.3, 316.0], [49.4, 316.0], [49.5, 316.0], [49.6, 316.0], [49.7, 316.0], [49.8, 316.0], [49.9, 316.0], [50.0, 316.0], [50.1, 317.0], [50.2, 317.0], [50.3, 317.0], [50.4, 317.0], [50.5, 317.0], [50.6, 317.0], [50.7, 317.0], [50.8, 317.0], [50.9, 317.0], [51.0, 317.0], [51.1, 317.0], [51.2, 317.0], [51.3, 317.0], [51.4, 317.0], [51.5, 317.0], [51.6, 317.0], [51.7, 318.0], [51.8, 318.0], [51.9, 318.0], [52.0, 318.0], [52.1, 318.0], [52.2, 318.0], [52.3, 318.0], [52.4, 318.0], [52.5, 318.0], [52.6, 318.0], [52.7, 318.0], [52.8, 318.0], [52.9, 318.0], [53.0, 318.0], [53.1, 318.0], [53.2, 318.0], [53.3, 318.0], [53.4, 318.0], [53.5, 319.0], [53.6, 319.0], [53.7, 319.0], [53.8, 319.0], [53.9, 319.0], [54.0, 319.0], [54.1, 319.0], [54.2, 319.0], [54.3, 319.0], [54.4, 319.0], [54.5, 319.0], [54.6, 319.0], [54.7, 319.0], [54.8, 319.0], [54.9, 319.0], [55.0, 319.0], [55.1, 319.0], [55.2, 319.0], [55.3, 319.0], [55.4, 320.0], [55.5, 320.0], [55.6, 320.0], [55.7, 320.0], [55.8, 320.0], [55.9, 320.0], [56.0, 320.0], [56.1, 320.0], [56.2, 320.0], [56.3, 320.0], [56.4, 320.0], [56.5, 320.0], [56.6, 320.0], [56.7, 320.0], [56.8, 320.0], [56.9, 320.0], [57.0, 320.0], [57.1, 320.0], [57.2, 320.0], [57.3, 320.0], [57.4, 321.0], [57.5, 321.0], [57.6, 321.0], [57.7, 321.0], [57.8, 321.0], [57.9, 321.0], [58.0, 321.0], [58.1, 321.0], [58.2, 321.0], [58.3, 321.0], [58.4, 321.0], [58.5, 321.0], [58.6, 321.0], [58.7, 321.0], [58.8, 321.0], [58.9, 321.0], [59.0, 321.0], [59.1, 321.0], [59.2, 321.0], [59.3, 321.0], [59.4, 322.0], [59.5, 322.0], [59.6, 322.0], [59.7, 322.0], [59.8, 322.0], [59.9, 322.0], [60.0, 322.0], [60.1, 322.0], [60.2, 322.0], [60.3, 322.0], [60.4, 322.0], [60.5, 322.0], [60.6, 322.0], [60.7, 322.0], [60.8, 322.0], [60.9, 322.0], [61.0, 322.0], [61.1, 322.0], [61.2, 323.0], [61.3, 323.0], [61.4, 323.0], [61.5, 323.0], [61.6, 323.0], [61.7, 323.0], [61.8, 323.0], [61.9, 323.0], [62.0, 323.0], [62.1, 323.0], [62.2, 323.0], [62.3, 323.0], [62.4, 323.0], [62.5, 323.0], [62.6, 323.0], [62.7, 323.0], [62.8, 323.0], [62.9, 323.0], [63.0, 323.0], [63.1, 324.0], [63.2, 324.0], [63.3, 324.0], [63.4, 324.0], [63.5, 324.0], [63.6, 324.0], [63.7, 324.0], [63.8, 324.0], [63.9, 324.0], [64.0, 324.0], [64.1, 324.0], [64.2, 324.0], [64.3, 324.0], [64.4, 324.0], [64.5, 324.0], [64.6, 324.0], [64.7, 324.0], [64.8, 324.0], [64.9, 324.0], [65.0, 324.0], [65.1, 324.0], [65.2, 325.0], [65.3, 325.0], [65.4, 325.0], [65.5, 325.0], [65.6, 325.0], [65.7, 325.0], [65.8, 325.0], [65.9, 325.0], [66.0, 325.0], [66.1, 325.0], [66.2, 325.0], [66.3, 325.0], [66.4, 325.0], [66.5, 325.0], [66.6, 325.0], [66.7, 325.0], [66.8, 325.0], [66.9, 325.0], [67.0, 325.0], [67.1, 325.0], [67.2, 325.0], [67.3, 326.0], [67.4, 326.0], [67.5, 326.0], [67.6, 326.0], [67.7, 326.0], [67.8, 326.0], [67.9, 326.0], [68.0, 326.0], [68.1, 326.0], [68.2, 326.0], [68.3, 326.0], [68.4, 326.0], [68.5, 326.0], [68.6, 326.0], [68.7, 326.0], [68.8, 326.0], [68.9, 326.0], [69.0, 326.0], [69.1, 326.0], [69.2, 326.0], [69.3, 327.0], [69.4, 327.0], [69.5, 327.0], [69.6, 327.0], [69.7, 327.0], [69.8, 327.0], [69.9, 327.0], [70.0, 327.0], [70.1, 327.0], [70.2, 327.0], [70.3, 327.0], [70.4, 327.0], [70.5, 327.0], [70.6, 327.0], [70.7, 327.0], [70.8, 327.0], [70.9, 327.0], [71.0, 327.0], [71.1, 327.0], [71.2, 327.0], [71.3, 327.0], [71.4, 327.0], [71.5, 328.0], [71.6, 328.0], [71.7, 328.0], [71.8, 328.0], [71.9, 328.0], [72.0, 328.0], [72.1, 328.0], [72.2, 328.0], [72.3, 328.0], [72.4, 328.0], [72.5, 328.0], [72.6, 328.0], [72.7, 328.0], [72.8, 328.0], [72.9, 328.0], [73.0, 328.0], [73.1, 328.0], [73.2, 328.0], [73.3, 328.0], [73.4, 328.0], [73.5, 329.0], [73.6, 329.0], [73.7, 329.0], [73.8, 329.0], [73.9, 329.0], [74.0, 329.0], [74.1, 329.0], [74.2, 329.0], [74.3, 329.0], [74.4, 329.0], [74.5, 329.0], [74.6, 329.0], [74.7, 329.0], [74.8, 329.0], [74.9, 329.0], [75.0, 329.0], [75.1, 329.0], [75.2, 329.0], [75.3, 329.0], [75.4, 329.0], [75.5, 330.0], [75.6, 330.0], [75.7, 330.0], [75.8, 330.0], [75.9, 330.0], [76.0, 330.0], [76.1, 330.0], [76.2, 330.0], [76.3, 330.0], [76.4, 330.0], [76.5, 330.0], [76.6, 330.0], [76.7, 330.0], [76.8, 330.0], [76.9, 330.0], [77.0, 330.0], [77.1, 330.0], [77.2, 330.0], [77.3, 331.0], [77.4, 331.0], [77.5, 331.0], [77.6, 331.0], [77.7, 331.0], [77.8, 331.0], [77.9, 331.0], [78.0, 331.0], [78.1, 331.0], [78.2, 331.0], [78.3, 331.0], [78.4, 331.0], [78.5, 331.0], [78.6, 331.0], [78.7, 331.0], [78.8, 331.0], [78.9, 331.0], [79.0, 331.0], [79.1, 331.0], [79.2, 332.0], [79.3, 332.0], [79.4, 332.0], [79.5, 332.0], [79.6, 332.0], [79.7, 332.0], [79.8, 332.0], [79.9, 332.0], [80.0, 332.0], [80.1, 332.0], [80.2, 332.0], [80.3, 332.0], [80.4, 332.0], [80.5, 332.0], [80.6, 332.0], [80.7, 332.0], [80.8, 332.0], [80.9, 332.0], [81.0, 333.0], [81.1, 333.0], [81.2, 333.0], [81.3, 333.0], [81.4, 333.0], [81.5, 333.0], [81.6, 333.0], [81.7, 333.0], [81.8, 333.0], [81.9, 333.0], [82.0, 333.0], [82.1, 333.0], [82.2, 333.0], [82.3, 333.0], [82.4, 333.0], [82.5, 333.0], [82.6, 334.0], [82.7, 334.0], [82.8, 334.0], [82.9, 334.0], [83.0, 334.0], [83.1, 334.0], [83.2, 334.0], [83.3, 334.0], [83.4, 334.0], [83.5, 334.0], [83.6, 334.0], [83.7, 334.0], [83.8, 334.0], [83.9, 334.0], [84.0, 334.0], [84.1, 335.0], [84.2, 335.0], [84.3, 335.0], [84.4, 335.0], [84.5, 335.0], [84.6, 335.0], [84.7, 335.0], [84.8, 335.0], [84.9, 335.0], [85.0, 335.0], [85.1, 335.0], [85.2, 335.0], [85.3, 335.0], [85.4, 335.0], [85.5, 336.0], [85.6, 336.0], [85.7, 336.0], [85.8, 336.0], [85.9, 336.0], [86.0, 336.0], [86.1, 336.0], [86.2, 336.0], [86.3, 336.0], [86.4, 336.0], [86.5, 336.0], [86.6, 336.0], [86.7, 336.0], [86.8, 336.0], [86.9, 337.0], [87.0, 337.0], [87.1, 337.0], [87.2, 337.0], [87.3, 337.0], [87.4, 337.0], [87.5, 337.0], [87.6, 337.0], [87.7, 337.0], [87.8, 337.0], [87.9, 338.0], [88.0, 338.0], [88.1, 338.0], [88.2, 338.0], [88.3, 338.0], [88.4, 338.0], [88.5, 338.0], [88.6, 338.0], [88.7, 338.0], [88.8, 338.0], [88.9, 338.0], [89.0, 339.0], [89.1, 339.0], [89.2, 339.0], [89.3, 339.0], [89.4, 339.0], [89.5, 339.0], [89.6, 339.0], [89.7, 339.0], [89.8, 339.0], [89.9, 339.0], [90.0, 339.0], [90.1, 340.0], [90.2, 340.0], [90.3, 340.0], [90.4, 340.0], [90.5, 340.0], [90.6, 340.0], [90.7, 340.0], [90.8, 340.0], [90.9, 340.0], [91.0, 340.0], [91.1, 341.0], [91.2, 341.0], [91.3, 341.0], [91.4, 341.0], [91.5, 341.0], [91.6, 341.0], [91.7, 341.0], [91.8, 341.0], [91.9, 341.0], [92.0, 342.0], [92.1, 342.0], [92.2, 342.0], [92.3, 342.0], [92.4, 342.0], [92.5, 342.0], [92.6, 342.0], [92.7, 342.0], [92.8, 343.0], [92.9, 343.0], [93.0, 343.0], [93.1, 343.0], [93.2, 343.0], [93.3, 343.0], [93.4, 343.0], [93.5, 343.0], [93.6, 344.0], [93.7, 344.0], [93.8, 344.0], [93.9, 344.0], [94.0, 344.0], [94.1, 344.0], [94.2, 345.0], [94.3, 345.0], [94.4, 345.0], [94.5, 345.0], [94.6, 345.0], [94.7, 345.0], [94.8, 345.0], [94.9, 346.0], [95.0, 346.0], [95.1, 346.0], [95.2, 346.0], [95.3, 346.0], [95.4, 346.0], [95.5, 347.0], [95.6, 347.0], [95.7, 347.0], [95.8, 347.0], [95.9, 347.0], [96.0, 348.0], [96.1, 348.0], [96.2, 348.0], [96.3, 348.0], [96.4, 349.0], [96.5, 349.0], [96.6, 349.0], [96.7, 349.0], [96.8, 350.0], [96.9, 350.0], [97.0, 350.0], [97.1, 350.0], [97.2, 351.0], [97.3, 351.0], [97.4, 351.0], [97.5, 352.0], [97.6, 352.0], [97.7, 352.0], [97.8, 352.0], [97.9, 353.0], [98.0, 353.0], [98.1, 353.0], [98.2, 354.0], [98.3, 354.0], [98.4, 355.0], [98.5, 355.0], [98.6, 356.0], [98.7, 357.0], [98.8, 357.0], [98.9, 358.0], [99.0, 359.0], [99.1, 360.0], [99.2, 361.0], [99.3, 361.0], [99.4, 363.0], [99.5, 364.0], [99.6, 365.0], [99.7, 367.0], [99.8, 372.0], [99.9, 376.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 9399.0, "series": [{"data": [[2100.0, 1.0], [600.0, 1185.0], [700.0, 802.0], [200.0, 3039.0], [800.0, 517.0], [900.0, 347.0], [1000.0, 206.0], [1100.0, 110.0], [300.0, 3017.0], [1200.0, 70.0], [1300.0, 43.0], [1400.0, 25.0], [1500.0, 19.0], [400.0, 2402.0], [100.0, 1447.0], [1600.0, 9.0], [1700.0, 4.0], [1800.0, 4.0], [1900.0, 4.0], [500.0, 1749.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1100.0, 1.0], [300.0, 9399.0], [1300.0, 1.0], [1400.0, 1.0], [200.0, 5596.0], [400.0, 2.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 41.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 24922.0, "series": [{"data": [[0.0, 24922.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 5037.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 41.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.6415094339622645, "minX": 1.74146154E12, "maxY": 3.0, "series": [{"data": [[1.74146184E12, 3.0], [1.74146286E12, 3.0], [1.74146508E12, 3.0], [1.74146346E12, 3.0], [1.74146244E12, 3.0], [1.74146406E12, 3.0], [1.74146304E12, 3.0], [1.74146466E12, 3.0], [1.74146268E12, 3.0], [1.7414643E12, 3.0], [1.74146328E12, 3.0], [1.7414649E12, 3.0], [1.74146226E12, 3.0], [1.74146388E12, 3.0], [1.74146166E12, 3.0], [1.74146448E12, 3.0], [1.74146412E12, 3.0], [1.7414619E12, 3.0], [1.7414625E12, 3.0], [1.74146472E12, 3.0], [1.74146208E12, 3.0], [1.7414631E12, 3.0], [1.74146532E12, 2.6415094339622645], [1.7414637E12, 3.0], [1.74146232E12, 3.0], [1.74146334E12, 3.0], [1.74146172E12, 3.0], [1.74146394E12, 3.0], [1.74146292E12, 3.0], [1.74146454E12, 3.0], [1.74146352E12, 3.0], [1.74146514E12, 3.0], [1.74146154E12, 2.9954751131221746], [1.74146316E12, 3.0], [1.74146478E12, 3.0], [1.74146376E12, 3.0], [1.74146436E12, 3.0], [1.74146214E12, 3.0], [1.74146274E12, 3.0], [1.74146496E12, 3.0], [1.7414646E12, 3.0], [1.74146238E12, 3.0], [1.74146298E12, 3.0], [1.7414652E12, 3.0], [1.74146358E12, 3.0], [1.74146256E12, 3.0], [1.74146196E12, 3.0], [1.74146418E12, 3.0], [1.74146382E12, 3.0], [1.7414628E12, 3.0], [1.7414622E12, 3.0], [1.74146442E12, 3.0], [1.74146178E12, 3.0], [1.7414634E12, 3.0], [1.74146502E12, 3.0], [1.741464E12, 3.0], [1.74146202E12, 3.0], [1.74146364E12, 3.0], [1.74146526E12, 3.0], [1.74146424E12, 3.0], [1.7414616E12, 3.0], [1.74146262E12, 3.0], [1.74146484E12, 3.0], [1.74146322E12, 3.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74146532E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 300.60467758102345, "minX": 1.0, "maxY": 540.75, "series": [{"data": [[2.0, 512.1333333333333], [1.0, 540.75], [3.0, 453.95944140050864]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[2.997466666666673, 454.0989333333342]], "isOverall": false, "label": "Create CSR-Aggregated", "isController": false}, {"data": [[2.0, 313.4838709677419], [1.0, 343.5], [3.0, 300.60467758102345]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}, {"data": [[2.9974000000000003, 300.6427333333344]], "isOverall": false, "label": "HTTP Request - enroll-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3168.983333333333, "minX": 1.74146154E12, "maxY": 37510.0, "series": [{"data": [[1.74146184E12, 35491.75], [1.74146286E12, 35029.23333333333], [1.74146508E12, 33011.0], [1.74146346E12, 34398.1], [1.74146244E12, 35891.11666666667], [1.74146406E12, 34146.11666666667], [1.74146304E12, 34608.76666666667], [1.74146466E12, 34335.46666666667], [1.74146268E12, 35617.816666666666], [1.7414643E12, 36353.8], [1.74146328E12, 34882.03333333333], [1.7414649E12, 34250.933333333334], [1.74146226E12, 36164.416666666664], [1.74146388E12, 35596.71666666667], [1.74146166E12, 35870.0], [1.74146448E12, 35112.9], [1.74146412E12, 34314.4], [1.7414619E12, 35134.083333333336], [1.7414625E12, 35302.3], [1.74146472E12, 34250.95], [1.74146208E12, 37510.0], [1.7414631E12, 35891.183333333334], [1.74146532E12, 15706.2], [1.7414637E12, 34734.7], [1.74146232E12, 35764.86666666667], [1.74146334E12, 34860.85], [1.74146172E12, 36101.566666666666], [1.74146394E12, 34587.65], [1.74146292E12, 34881.833333333336], [1.74146454E12, 34608.78333333333], [1.74146352E12, 35596.76666666667], [1.74146514E12, 34124.7], [1.74146154E12, 16210.9], [1.74146316E12, 35029.066666666666], [1.74146478E12, 33704.6], [1.74146376E12, 35933.46666666667], [1.74146436E12, 35197.45], [1.74146214E12, 35344.65], [1.74146274E12, 36206.566666666666], [1.74146496E12, 35218.5], [1.7414646E12, 35617.916666666664], [1.74146238E12, 35344.566666666666], [1.74146298E12, 34734.73333333333], [1.7414652E12, 34461.63333333333], [1.74146358E12, 34651.066666666666], [1.74146256E12, 35092.4], [1.74146196E12, 33599.63333333333], [1.74146418E12, 34986.8], [1.74146382E12, 35491.75], [1.7414628E12, 34734.8], [1.7414622E12, 34167.183333333334], [1.74146442E12, 34755.816666666666], [1.74146178E12, 34566.53333333333], [1.7414634E12, 36122.65], [1.74146502E12, 35722.88333333333], [1.741464E12, 35891.1], [1.74146202E12, 35470.7], [1.74146364E12, 35134.066666666666], [1.74146526E12, 34734.73333333333], [1.74146424E12, 34903.0], [1.7414616E12, 35933.26666666667], [1.74146262E12, 35575.683333333334], [1.74146484E12, 32842.666666666664], [1.74146322E12, 36206.63333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74146184E12, 7137.616666666667], [1.74146286E12, 7048.766666666666], [1.74146508E12, 6634.133333333333], [1.74146346E12, 6930.3], [1.74146244E12, 7226.466666666666], [1.74146406E12, 6871.066666666667], [1.74146304E12, 6959.916666666667], [1.74146466E12, 6900.683333333333], [1.74146268E12, 7167.233333333334], [1.7414643E12, 7315.316666666667], [1.74146328E12, 7019.15], [1.7414649E12, 6900.683333333333], [1.74146226E12, 7285.7], [1.74146388E12, 7167.233333333334], [1.74146166E12, 7226.466666666666], [1.74146448E12, 7078.383333333333], [1.74146412E12, 6900.683333333333], [1.7414619E12, 7078.383333333333], [1.7414625E12, 7108.0], [1.74146472E12, 6900.683333333333], [1.74146208E12, 7552.25], [1.7414631E12, 7226.466666666666], [1.74146532E12, 3168.983333333333], [1.7414637E12, 6989.533333333334], [1.74146232E12, 7196.85], [1.74146334E12, 7019.15], [1.74146172E12, 7256.083333333333], [1.74146394E12, 6959.916666666667], [1.74146292E12, 7019.15], [1.74146454E12, 6959.916666666667], [1.74146352E12, 7167.233333333334], [1.74146514E12, 6871.066666666667], [1.74146154E12, 3257.8333333333335], [1.74146316E12, 7048.766666666666], [1.74146478E12, 6782.216666666666], [1.74146376E12, 7226.466666666666], [1.74146436E12, 7078.383333333333], [1.74146214E12, 7108.0], [1.74146274E12, 7285.7], [1.74146496E12, 7078.383333333333], [1.7414646E12, 7167.233333333334], [1.74146238E12, 7108.0], [1.74146298E12, 6989.533333333334], [1.7414652E12, 6930.3], [1.74146358E12, 6959.916666666667], [1.74146256E12, 7048.766666666666], [1.74146196E12, 6752.6], [1.74146418E12, 7048.766666666666], [1.74146382E12, 7137.616666666667], [1.7414628E12, 6989.533333333334], [1.7414622E12, 6871.066666666667], [1.74146442E12, 6989.533333333334], [1.74146178E12, 6959.916666666667], [1.7414634E12, 7256.083333333333], [1.74146502E12, 7196.85], [1.741464E12, 7226.466666666666], [1.74146202E12, 7137.616666666667], [1.74146364E12, 7078.383333333333], [1.74146526E12, 6989.533333333334], [1.74146424E12, 7019.15], [1.7414616E12, 7226.466666666666], [1.74146262E12, 7167.233333333334], [1.74146484E12, 6604.516666666666], [1.74146322E12, 7285.7]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74146532E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 287.4081632653062, "minX": 1.74146154E12, "maxY": 497.5999999999999, "series": [{"data": [[1.74146184E12, 458.60330578512423], [1.74146286E12, 461.50420168067234], [1.74146508E12, 485.6902654867257], [1.74146346E12, 473.8534482758618], [1.74146244E12, 439.67901234567887], [1.74146406E12, 472.4698275862069], [1.74146304E12, 463.4788135593222], [1.74146466E12, 457.6680851063831], [1.74146268E12, 441.690082644628], [1.7414643E12, 426.75303643724703], [1.74146328E12, 456.5063291139239], [1.7414649E12, 464.4285714285714], [1.74146226E12, 439.97950819672127], [1.74146388E12, 444.53112033195], [1.74146166E12, 448.6033057851238], [1.74146448E12, 449.9152542372881], [1.74146412E12, 465.6324786324788], [1.7414619E12, 457.7679324894515], [1.7414625E12, 462.13807531380746], [1.74146472E12, 464.3030303030303], [1.74146208E12, 417.22047244094495], [1.7414631E12, 445.3086419753086], [1.74146532E12, 481.16190476190474], [1.7414637E12, 462.1610169491525], [1.74146232E12, 444.7818930041152], [1.74146334E12, 458.5635593220338], [1.74146172E12, 445.0404858299596], [1.74146394E12, 458.51914893617015], [1.74146292E12, 459.2194092827005], [1.74146454E12, 454.7118644067796], [1.74146352E12, 442.49377593361], [1.74146514E12, 465.81385281385275], [1.74146154E12, 468.2072072072071], [1.74146316E12, 452.34453781512605], [1.74146478E12, 472.6986899563318], [1.74146376E12, 434.91020408163274], [1.74146436E12, 448.9374999999998], [1.74146214E12, 459.54771784232366], [1.74146274E12, 434.9146341463413], [1.74146496E12, 439.0414937759336], [1.7414646E12, 437.8553719008263], [1.74146238E12, 456.1203319502075], [1.74146298E12, 469.68220338983053], [1.7414652E12, 458.8382978723406], [1.74146358E12, 459.12184873949604], [1.74146256E12, 451.12033195020757], [1.74146196E12, 497.5999999999999], [1.74146418E12, 449.62711864406776], [1.74146382E12, 439.4090909090909], [1.7414628E12, 463.83898305084745], [1.7414622E12, 483.92703862660943], [1.74146442E12, 452.0337552742615], [1.74146178E12, 477.49572649572644], [1.7414634E12, 430.90322580645153], [1.74146502E12, 431.36929460580905], [1.741464E12, 435.1646090534981], [1.74146202E12, 450.6265560165977], [1.74146364E12, 455.55274261603387], [1.74146526E12, 447.86016949152514], [1.74146424E12, 449.9747899159665], [1.7414616E12, 444.6816326530615], [1.74146262E12, 450.49583333333356], [1.74146484E12, 495.3214285714288], [1.74146322E12, 435.26016260162606]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74146184E12, 288.2365145228217], [1.74146286E12, 297.55042016806715], [1.74146508E12, 310.0357142857143], [1.74146346E12, 299.2051282051281], [1.74146244E12, 295.0860655737704], [1.74146406E12, 303.7413793103445], [1.74146304E12, 295.8425531914894], [1.74146466E12, 311.8540772532189], [1.74146268E12, 300.3016528925621], [1.7414643E12, 304.95546558704467], [1.74146328E12, 302.0506329113925], [1.7414649E12, 311.3004291845491], [1.74146226E12, 293.1544715447157], [1.74146388E12, 300.3512396694217], [1.74146166E12, 288.389344262295], [1.74146448E12, 307.85774058577414], [1.74146412E12, 303.80686695278973], [1.7414619E12, 291.7447698744768], [1.7414625E12, 293.88333333333344], [1.74146472E12, 309.83261802575095], [1.74146208E12, 289.3254901960782], [1.7414631E12, 296.8155737704918], [1.74146532E12, 315.84112149532706], [1.7414637E12, 298.89830508474586], [1.74146232E12, 293.4320987654318], [1.74146334E12, 299.51054852320675], [1.74146172E12, 287.4081632653062], [1.74146394E12, 307.4893617021276], [1.74146292E12, 296.62025316455697], [1.74146454E12, 306.25106382978726], [1.74146352E12, 300.10330578512384], [1.74146514E12, 311.9094827586208], [1.74146154E12, 317.7545454545455], [1.74146316E12, 300.6638655462187], [1.74146478E12, 312.30131004366825], [1.74146376E12, 302.49180327868845], [1.74146436E12, 301.347280334728], [1.74146214E12, 291.41249999999974], [1.74146274E12, 295.69105691056916], [1.74146496E12, 310.38912133891176], [1.7414646E12, 307.4545454545453], [1.74146238E12, 293.02499999999975], [1.74146298E12, 295.36864406779694], [1.7414652E12, 311.8974358974358], [1.74146358E12, 302.2468085106383], [1.74146256E12, 298.4747899159665], [1.74146196E12, 292.37280701754366], [1.74146418E12, 306.73949579831907], [1.74146382E12, 304.33195020746876], [1.7414628E12, 297.6822033898305], [1.7414622E12, 290.0517241379308], [1.74146442E12, 307.4745762711866], [1.74146178E12, 289.08510638297884], [1.7414634E12, 301.8081632653062], [1.74146502E12, 310.5802469135803], [1.741464E12, 302.8196721311474], [1.74146202E12, 292.4066390041494], [1.74146364E12, 301.0460251046026], [1.74146526E12, 312.5296610169491], [1.74146424E12, 307.8059071729956], [1.7414616E12, 288.34016393442647], [1.74146262E12, 296.4710743801655], [1.74146484E12, 311.64573991031386], [1.74146322E12, 297.1666666666665]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74146532E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74146154E12, "maxY": 317.7181818181819, "series": [{"data": [[1.74146184E12, 0.0], [1.74146286E12, 0.0], [1.74146508E12, 0.0], [1.74146346E12, 0.0], [1.74146244E12, 0.0], [1.74146406E12, 0.0], [1.74146304E12, 0.0], [1.74146466E12, 0.0], [1.74146268E12, 0.0], [1.7414643E12, 0.0], [1.74146328E12, 0.0], [1.7414649E12, 0.0], [1.74146226E12, 0.0], [1.74146388E12, 0.0], [1.74146166E12, 0.0], [1.74146448E12, 0.0], [1.74146412E12, 0.0], [1.7414619E12, 0.0], [1.7414625E12, 0.0], [1.74146472E12, 0.0], [1.74146208E12, 0.0], [1.7414631E12, 0.0], [1.74146532E12, 0.0], [1.7414637E12, 0.0], [1.74146232E12, 0.0], [1.74146334E12, 0.0], [1.74146172E12, 0.0], [1.74146394E12, 0.0], [1.74146292E12, 0.0], [1.74146454E12, 0.0], [1.74146352E12, 0.0], [1.74146514E12, 0.0], [1.74146154E12, 0.0], [1.74146316E12, 0.0], [1.74146478E12, 0.0], [1.74146376E12, 0.0], [1.74146436E12, 0.0], [1.74146214E12, 0.0], [1.74146274E12, 0.0], [1.74146496E12, 0.0], [1.7414646E12, 0.0], [1.74146238E12, 0.0], [1.74146298E12, 0.0], [1.7414652E12, 0.0], [1.74146358E12, 0.0], [1.74146256E12, 0.0], [1.74146196E12, 0.0], [1.74146418E12, 0.0], [1.74146382E12, 0.0], [1.7414628E12, 0.0], [1.7414622E12, 0.0], [1.74146442E12, 0.0], [1.74146178E12, 0.0], [1.7414634E12, 0.0], [1.74146502E12, 0.0], [1.741464E12, 0.0], [1.74146202E12, 0.0], [1.74146364E12, 0.0], [1.74146526E12, 0.0], [1.74146424E12, 0.0], [1.7414616E12, 0.0], [1.74146262E12, 0.0], [1.74146484E12, 0.0], [1.74146322E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74146184E12, 288.2282157676349], [1.74146286E12, 297.54201680672287], [1.74146508E12, 310.03125000000017], [1.74146346E12, 299.2051282051281], [1.74146244E12, 295.07786885245895], [1.74146406E12, 303.73706896551704], [1.74146304E12, 295.8340425531915], [1.74146466E12, 311.8540772532189], [1.74146268E12, 300.28925619834706], [1.7414643E12, 304.9514170040488], [1.74146328E12, 302.0506329113925], [1.7414649E12, 311.29613733905575], [1.74146226E12, 293.15040650406513], [1.74146388E12, 300.3388429752067], [1.74146166E12, 288.36885245901675], [1.74146448E12, 307.853556485356], [1.74146412E12, 303.7982832618028], [1.7414619E12, 291.7322175732218], [1.7414625E12, 293.87916666666644], [1.74146472E12, 309.8240343347639], [1.74146208E12, 289.32156862745103], [1.7414631E12, 296.8114754098361], [1.74146532E12, 315.83177570093443], [1.7414637E12, 298.8898305084745], [1.74146232E12, 293.4279835390947], [1.74146334E12, 299.5063291139242], [1.74146172E12, 287.404081632653], [1.74146394E12, 307.4680851063831], [1.74146292E12, 296.61603375527454], [1.74146454E12, 306.25106382978726], [1.74146352E12, 300.0950413223139], [1.74146514E12, 311.9094827586208], [1.74146154E12, 317.7181818181819], [1.74146316E12, 300.65126050420156], [1.74146478E12, 312.30131004366825], [1.74146376E12, 302.49180327868845], [1.74146436E12, 301.3305439330542], [1.74146214E12, 291.395833333333], [1.74146274E12, 295.67886178861795], [1.74146496E12, 310.38493723849376], [1.7414646E12, 307.4504132231404], [1.74146238E12, 293.0208333333334], [1.74146298E12, 295.364406779661], [1.7414652E12, 311.8846153846153], [1.74146358E12, 302.2382978723404], [1.74146256E12, 298.46218487394947], [1.74146196E12, 292.3552631578948], [1.74146418E12, 306.73529411764673], [1.74146382E12, 304.32780082987546], [1.7414628E12, 297.67372881355914], [1.7414622E12, 290.03017241379297], [1.74146442E12, 307.46186440677997], [1.74146178E12, 289.04680851063836], [1.7414634E12, 301.80000000000007], [1.74146502E12, 310.5761316872429], [1.741464E12, 302.8032786885246], [1.74146202E12, 292.38174273858937], [1.74146364E12, 301.03765690376565], [1.74146526E12, 312.5296610169491], [1.74146424E12, 307.8016877637131], [1.7414616E12, 288.3032786885246], [1.74146262E12, 296.4545454545458], [1.74146484E12, 311.63228699551564], [1.74146322E12, 297.1666666666665]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74146532E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74146154E12, "maxY": 2.681818181818183, "series": [{"data": [[1.74146184E12, 0.0], [1.74146286E12, 0.0], [1.74146508E12, 0.0], [1.74146346E12, 0.0], [1.74146244E12, 0.0], [1.74146406E12, 0.0], [1.74146304E12, 0.0], [1.74146466E12, 0.0], [1.74146268E12, 0.0], [1.7414643E12, 0.0], [1.74146328E12, 0.0], [1.7414649E12, 0.0], [1.74146226E12, 0.0], [1.74146388E12, 0.0], [1.74146166E12, 0.0], [1.74146448E12, 0.0], [1.74146412E12, 0.0], [1.7414619E12, 0.0], [1.7414625E12, 0.0], [1.74146472E12, 0.0], [1.74146208E12, 0.0], [1.7414631E12, 0.0], [1.74146532E12, 0.0], [1.7414637E12, 0.0], [1.74146232E12, 0.0], [1.74146334E12, 0.0], [1.74146172E12, 0.0], [1.74146394E12, 0.0], [1.74146292E12, 0.0], [1.74146454E12, 0.0], [1.74146352E12, 0.0], [1.74146514E12, 0.0], [1.74146154E12, 0.0], [1.74146316E12, 0.0], [1.74146478E12, 0.0], [1.74146376E12, 0.0], [1.74146436E12, 0.0], [1.74146214E12, 0.0], [1.74146274E12, 0.0], [1.74146496E12, 0.0], [1.7414646E12, 0.0], [1.74146238E12, 0.0], [1.74146298E12, 0.0], [1.7414652E12, 0.0], [1.74146358E12, 0.0], [1.74146256E12, 0.0], [1.74146196E12, 0.0], [1.74146418E12, 0.0], [1.74146382E12, 0.0], [1.7414628E12, 0.0], [1.7414622E12, 0.0], [1.74146442E12, 0.0], [1.74146178E12, 0.0], [1.7414634E12, 0.0], [1.74146502E12, 0.0], [1.741464E12, 0.0], [1.74146202E12, 0.0], [1.74146364E12, 0.0], [1.74146526E12, 0.0], [1.74146424E12, 0.0], [1.7414616E12, 0.0], [1.74146262E12, 0.0], [1.74146484E12, 0.0], [1.74146322E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74146184E12, 0.04564315352697098], [1.74146286E12, 0.037815126050420186], [1.74146508E12, 0.00892857142857143], [1.74146346E12, 0.029914529914529937], [1.74146244E12, 0.03688524590163935], [1.74146406E12, 0.03879310344827587], [1.74146304E12, 0.034042553191489355], [1.74146466E12, 0.034334763948497854], [1.74146268E12, 0.033057851239669415], [1.7414643E12, 0.04048582995951418], [1.74146328E12, 0.04219409282700421], [1.7414649E12, 0.030042918454935622], [1.74146226E12, 0.032520325203252036], [1.74146388E12, 0.037190082644628114], [1.74146166E12, 0.04508196721311479], [1.74146448E12, 0.033472803347280325], [1.74146412E12, 0.030042918454935636], [1.7414619E12, 0.0460251046025105], [1.7414625E12, 0.045833333333333344], [1.74146472E12, 0.03004291845493562], [1.74146208E12, 0.031372549019607836], [1.7414631E12, 0.032786885245901634], [1.74146532E12, 0.05607476635514022], [1.7414637E12, 0.038135593220339], [1.74146232E12, 0.04115226337448559], [1.74146334E12, 0.03375527426160337], [1.74146172E12, 0.04489795918367351], [1.74146394E12, 0.03404255319148937], [1.74146292E12, 0.029535864978902975], [1.74146454E12, 0.025531914893617034], [1.74146352E12, 0.04132231404958677], [1.74146514E12, 0.03017241379310347], [1.74146154E12, 2.681818181818183], [1.74146316E12, 0.042016806722689065], [1.74146478E12, 0.034934497816593885], [1.74146376E12, 0.03278688524590164], [1.74146436E12, 0.025104602510460265], [1.74146214E12, 0.04166666666666666], [1.74146274E12, 0.04065040650406503], [1.74146496E12, 0.03347280334728034], [1.7414646E12, 0.024793388429752067], [1.74146238E12, 0.037500000000000006], [1.74146298E12, 0.038135593220339006], [1.7414652E12, 0.02564102564102566], [1.74146358E12, 0.029787234042553214], [1.74146256E12, 0.03781512605042018], [1.74146196E12, 0.05263157894736845], [1.74146418E12, 0.033613445378151266], [1.74146382E12, 0.033195020746887974], [1.7414628E12, 0.042372881355932195], [1.7414622E12, 0.03879310344827587], [1.74146442E12, 0.046610169491525445], [1.74146178E12, 0.046808510638297905], [1.7414634E12, 0.03673469387755103], [1.74146502E12, 0.024691358024691357], [1.741464E12, 0.040983606557377046], [1.74146202E12, 0.04149377593360995], [1.74146364E12, 0.03765690376569039], [1.74146526E12, 0.03813559322033902], [1.74146424E12, 0.02953586497890296], [1.7414616E12, 0.06147540983606555], [1.74146262E12, 0.037190082644628114], [1.74146484E12, 0.04484304932735425], [1.74146322E12, 0.03658536585365855]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74146532E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 112.0, "minX": 1.74146154E12, "maxY": 2122.0, "series": [{"data": [[1.74146184E12, 1307.0], [1.74146286E12, 1682.0], [1.74146508E12, 1563.0], [1.74146346E12, 1325.0], [1.74146244E12, 1333.0], [1.74146406E12, 1900.0], [1.74146304E12, 1789.0], [1.74146466E12, 1393.0], [1.74146268E12, 1364.0], [1.7414643E12, 1458.0], [1.74146328E12, 1359.0], [1.7414649E12, 1668.0], [1.74146226E12, 1444.0], [1.74146388E12, 1524.0], [1.74146166E12, 1650.0], [1.74146448E12, 1877.0], [1.74146412E12, 1277.0], [1.7414619E12, 1810.0], [1.7414625E12, 1979.0], [1.74146472E12, 1387.0], [1.74146208E12, 1366.0], [1.7414631E12, 1518.0], [1.74146532E12, 1883.0], [1.7414637E12, 1578.0], [1.74146232E12, 1505.0], [1.74146334E12, 1391.0], [1.74146172E12, 1296.0], [1.74146394E12, 1223.0], [1.74146292E12, 1385.0], [1.74146454E12, 1421.0], [1.74146352E12, 1450.0], [1.74146514E12, 1485.0], [1.74146154E12, 1486.0], [1.74146316E12, 1439.0], [1.74146478E12, 1377.0], [1.74146376E12, 1393.0], [1.74146436E12, 1111.0], [1.74146214E12, 1583.0], [1.74146274E12, 1271.0], [1.74146496E12, 1260.0], [1.7414646E12, 1520.0], [1.74146238E12, 1426.0], [1.74146298E12, 1595.0], [1.7414652E12, 1665.0], [1.74146358E12, 1844.0], [1.74146256E12, 1488.0], [1.74146196E12, 1571.0], [1.74146418E12, 1227.0], [1.74146382E12, 1690.0], [1.7414628E12, 1707.0], [1.7414622E12, 1432.0], [1.74146442E12, 1994.0], [1.74146178E12, 1698.0], [1.7414634E12, 1585.0], [1.74146502E12, 1451.0], [1.741464E12, 1139.0], [1.74146202E12, 1627.0], [1.74146364E12, 1498.0], [1.74146526E12, 1373.0], [1.74146424E12, 1702.0], [1.7414616E12, 1341.0], [1.74146262E12, 1940.0], [1.74146484E12, 2122.0], [1.74146322E12, 1202.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.74146184E12, 635.0], [1.74146286E12, 640.3], [1.74146508E12, 697.5000000000002], [1.74146346E12, 649.4000000000001], [1.74146244E12, 582.9999999999999], [1.74146406E12, 666.5], [1.74146304E12, 629.8000000000002], [1.74146466E12, 616.1], [1.74146268E12, 595.5], [1.7414643E12, 588.5], [1.74146328E12, 602.5], [1.7414649E12, 649.0], [1.74146226E12, 636.9000000000001], [1.74146388E12, 607.6], [1.74146166E12, 651.1000000000001], [1.74146448E12, 603.6000000000005], [1.74146412E12, 631.8], [1.7414619E12, 615.3], [1.7414625E12, 632.0], [1.74146472E12, 639.0], [1.74146208E12, 567.0], [1.7414631E12, 619.4], [1.74146532E12, 658.3000000000003], [1.7414637E12, 659.1999999999999], [1.74146232E12, 622.1000000000001], [1.74146334E12, 639.6000000000001], [1.74146172E12, 615.0999999999999], [1.74146394E12, 657.0], [1.74146292E12, 641.0], [1.74146454E12, 618.4000000000001], [1.74146352E12, 579.8000000000003], [1.74146514E12, 646.6000000000001], [1.74146154E12, 643.2], [1.74146316E12, 641.7000000000003], [1.74146478E12, 646.2], [1.74146376E12, 589.0], [1.74146436E12, 627.0], [1.74146214E12, 661.0000000000001], [1.74146274E12, 626.8], [1.74146496E12, 575.8000000000001], [1.7414646E12, 608.0], [1.74146238E12, 628.8000000000001], [1.74146298E12, 656.8], [1.7414652E12, 648.0], [1.74146358E12, 618.6], [1.74146256E12, 648.0], [1.74146196E12, 695.1], [1.74146418E12, 632.0], [1.74146382E12, 630.8000000000002], [1.7414628E12, 622.7], [1.7414622E12, 694.4000000000001], [1.74146442E12, 605.4000000000002], [1.74146178E12, 685.0], [1.7414634E12, 595.2], [1.74146502E12, 603.5], [1.741464E12, 592.4], [1.74146202E12, 632.7], [1.74146364E12, 618.0], [1.74146526E12, 628.1999999999999], [1.74146424E12, 625.0000000000003], [1.7414616E12, 593.0], [1.74146262E12, 619.0], [1.74146484E12, 660.7999999999998], [1.74146322E12, 576.7]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.74146184E12, 1107.5199999999993], [1.74146286E12, 1128.38], [1.74146508E12, 1185.7600000000002], [1.74146346E12, 1157.489999999999], [1.74146244E12, 1268.12], [1.74146406E12, 1133.9500000000003], [1.74146304E12, 1068.3199999999995], [1.74146466E12, 1096.3900000000003], [1.74146268E12, 1073.099999999997], [1.7414643E12, 978.9000000000002], [1.74146328E12, 1166.0], [1.7414649E12, 1164.1500000000078], [1.74146226E12, 988.8399999999981], [1.74146388E12, 940.1599999999992], [1.74146166E12, 1160.4399999999996], [1.74146448E12, 1081.0400000000004], [1.74146412E12, 1071.6399999999999], [1.7414619E12, 1213.69], [1.7414625E12, 1186.7999999999984], [1.74146472E12, 1197.0], [1.74146208E12, 950.5999999999988], [1.7414631E12, 1072.8400000000001], [1.74146532E12, 1282.8900000000003], [1.7414637E12, 1275.8299999999995], [1.74146232E12, 1032.12], [1.74146334E12, 1080.4799999999977], [1.74146172E12, 1005.2899999999997], [1.74146394E12, 1074.0300000000002], [1.74146292E12, 1252.0], [1.74146454E12, 1083.8399999999979], [1.74146352E12, 1117.7199999999993], [1.74146514E12, 1101.0000000000007], [1.74146154E12, 1301.6000000000001], [1.74146316E12, 1040.38], [1.74146478E12, 1235.6799999999985], [1.74146376E12, 1073.200000000001], [1.74146436E12, 1010.3999999999994], [1.74146214E12, 1190.72], [1.74146274E12, 1082.77], [1.74146496E12, 1050.09], [1.7414646E12, 1084.0499999999975], [1.74146238E12, 1110.7200000000003], [1.74146298E12, 1171.5099999999998], [1.7414652E12, 1134.800000000001], [1.74146358E12, 1317.4199999999985], [1.74146256E12, 1172.7999999999988], [1.74146196E12, 1409.369999999998], [1.74146418E12, 1028.0], [1.74146382E12, 1017.2799999999997], [1.7414628E12, 1194.1399999999985], [1.7414622E12, 1166.04], [1.74146442E12, 1183.6399999999994], [1.74146178E12, 1219.400000000002], [1.7414634E12, 1074.1200000000003], [1.74146502E12, 1051.5999999999995], [1.741464E12, 1006.6800000000002], [1.74146202E12, 1045.0600000000004], [1.74146364E12, 1192.46], [1.74146526E12, 1089.1899999999982], [1.74146424E12, 1018.0800000000004], [1.7414616E12, 1122.8000000000018], [1.74146262E12, 1069.500000000001], [1.74146484E12, 1230.9199999999996], [1.74146322E12, 1045.8199999999997]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.74146184E12, 840.5999999999997], [1.74146286E12, 786.0499999999998], [1.74146508E12, 856.6999999999997], [1.74146346E12, 840.8499999999998], [1.74146244E12, 770.7999999999993], [1.74146406E12, 822.75], [1.74146304E12, 743.5999999999995], [1.74146466E12, 780.1999999999998], [1.74146268E12, 744.0], [1.7414643E12, 678.5], [1.74146328E12, 815.0], [1.7414649E12, 797.75], [1.74146226E12, 750.8499999999999], [1.74146388E12, 751.5999999999999], [1.74146166E12, 764.65], [1.74146448E12, 742.4], [1.74146412E12, 752.3999999999999], [1.7414619E12, 764.8999999999999], [1.7414625E12, 758.0], [1.74146472E12, 772.0], [1.74146208E12, 680.5], [1.7414631E12, 830.0], [1.74146532E12, 848.4499999999999], [1.7414637E12, 820.799999999999], [1.74146232E12, 809.1999999999998], [1.74146334E12, 766.1999999999994], [1.74146172E12, 806.3999999999999], [1.74146394E12, 774.9999999999998], [1.74146292E12, 791.5], [1.74146454E12, 754.8], [1.74146352E12, 796.3999999999999], [1.74146514E12, 802.9999999999995], [1.74146154E12, 906.1999999999966], [1.74146316E12, 796.5499999999996], [1.74146478E12, 794.5499999999986], [1.74146376E12, 738.5], [1.74146436E12, 788.0], [1.74146214E12, 824.6999999999999], [1.74146274E12, 763.0999999999998], [1.74146496E12, 740.1499999999999], [1.7414646E12, 793.0], [1.74146238E12, 815.7999999999997], [1.74146298E12, 788.3499999999999], [1.7414652E12, 766.0], [1.74146358E12, 774.6999999999991], [1.74146256E12, 749.0], [1.74146196E12, 884.9999999999991], [1.74146418E12, 753.0], [1.74146382E12, 782.7999999999988], [1.7414628E12, 765.05], [1.7414622E12, 853.1999999999998], [1.74146442E12, 802.6999999999996], [1.74146178E12, 825.5], [1.7414634E12, 750.7999999999993], [1.74146502E12, 803.75], [1.741464E12, 732.3999999999999], [1.74146202E12, 761.8999999999995], [1.74146364E12, 793.6499999999997], [1.74146526E12, 788.6999999999999], [1.74146424E12, 746.9999999999998], [1.7414616E12, 728.5], [1.74146262E12, 745.8499999999999], [1.74146484E12, 892.9999999999991], [1.74146322E12, 793.3499999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.74146184E12, 117.0], [1.74146286E12, 112.0], [1.74146508E12, 134.0], [1.74146346E12, 137.0], [1.74146244E12, 136.0], [1.74146406E12, 128.0], [1.74146304E12, 117.0], [1.74146466E12, 131.0], [1.74146268E12, 124.0], [1.7414643E12, 123.0], [1.74146328E12, 134.0], [1.7414649E12, 118.0], [1.74146226E12, 122.0], [1.74146388E12, 126.0], [1.74146166E12, 121.0], [1.74146448E12, 133.0], [1.74146412E12, 127.0], [1.7414619E12, 123.0], [1.7414625E12, 131.0], [1.74146472E12, 118.0], [1.74146208E12, 125.0], [1.7414631E12, 126.0], [1.74146532E12, 119.0], [1.7414637E12, 123.0], [1.74146232E12, 122.0], [1.74146334E12, 133.0], [1.74146172E12, 123.0], [1.74146394E12, 133.0], [1.74146292E12, 134.0], [1.74146454E12, 149.0], [1.74146352E12, 130.0], [1.74146514E12, 113.0], [1.74146154E12, 154.0], [1.74146316E12, 131.0], [1.74146478E12, 123.0], [1.74146376E12, 135.0], [1.74146436E12, 121.0], [1.74146214E12, 125.0], [1.74146274E12, 126.0], [1.74146496E12, 126.0], [1.7414646E12, 127.0], [1.74146238E12, 127.0], [1.74146298E12, 150.0], [1.7414652E12, 114.0], [1.74146358E12, 127.0], [1.74146256E12, 122.0], [1.74146196E12, 140.0], [1.74146418E12, 125.0], [1.74146382E12, 119.0], [1.7414628E12, 130.0], [1.7414622E12, 150.0], [1.74146442E12, 116.0], [1.74146178E12, 132.0], [1.7414634E12, 132.0], [1.74146502E12, 129.0], [1.741464E12, 134.0], [1.74146202E12, 124.0], [1.74146364E12, 123.0], [1.74146526E12, 122.0], [1.74146424E12, 131.0], [1.7414616E12, 116.0], [1.74146262E12, 120.0], [1.74146484E12, 125.0], [1.74146322E12, 120.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.74146184E12, 313.0], [1.74146286E12, 321.0], [1.74146508E12, 335.0], [1.74146346E12, 324.0], [1.74146244E12, 319.0], [1.74146406E12, 331.0], [1.74146304E12, 322.0], [1.74146466E12, 335.0], [1.74146268E12, 320.0], [1.7414643E12, 327.0], [1.74146328E12, 325.0], [1.7414649E12, 335.0], [1.74146226E12, 315.0], [1.74146388E12, 324.0], [1.74146166E12, 312.0], [1.74146448E12, 330.0], [1.74146412E12, 330.0], [1.7414619E12, 315.0], [1.7414625E12, 319.0], [1.74146472E12, 333.5], [1.74146208E12, 316.0], [1.7414631E12, 320.0], [1.74146532E12, 338.0], [1.7414637E12, 324.0], [1.74146232E12, 318.0], [1.74146334E12, 324.0], [1.74146172E12, 312.0], [1.74146394E12, 329.0], [1.74146292E12, 320.0], [1.74146454E12, 332.0], [1.74146352E12, 325.0], [1.74146514E12, 336.0], [1.74146154E12, 315.0], [1.74146316E12, 321.5], [1.74146478E12, 333.0], [1.74146376E12, 325.0], [1.74146436E12, 328.0], [1.74146214E12, 316.0], [1.74146274E12, 319.0], [1.74146496E12, 332.0], [1.7414646E12, 329.0], [1.74146238E12, 320.0], [1.74146298E12, 320.0], [1.7414652E12, 334.0], [1.74146358E12, 325.0], [1.74146256E12, 321.0], [1.74146196E12, 315.0], [1.74146418E12, 330.0], [1.74146382E12, 327.0], [1.7414628E12, 322.0], [1.7414622E12, 317.0], [1.74146442E12, 329.0], [1.74146178E12, 314.0], [1.7414634E12, 322.0], [1.74146502E12, 332.0], [1.741464E12, 327.0], [1.74146202E12, 315.0], [1.74146364E12, 323.0], [1.74146526E12, 335.0], [1.74146424E12, 333.0], [1.7414616E12, 312.0], [1.74146262E12, 319.0], [1.74146484E12, 335.0], [1.74146322E12, 321.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74146532E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 253.0, "minX": 1.0, "maxY": 353.5, "series": [{"data": [[2.0, 349.0], [8.0, 325.0], [9.0, 321.0], [10.0, 317.0], [11.0, 306.0], [12.0, 274.5], [3.0, 333.0], [13.0, 253.0], [1.0, 297.0], [4.0, 353.5], [5.0, 340.5], [6.0, 332.0], [7.0, 329.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 13.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 247.5, "series": [{"data": [[2.0, 0.0], [8.0, 0.0], [9.0, 239.0], [10.0, 241.0], [11.0, 239.0], [12.0, 236.0], [3.0, 247.5], [13.0, 240.0], [1.0, 172.0], [4.0, 0.0], [5.0, 0.0], [6.0, 0.0], [7.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 13.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.4833333333333334, "minX": 1.74146154E12, "maxY": 8.483333333333333, "series": [{"data": [[1.74146184E12, 8.05], [1.74146286E12, 7.933333333333334], [1.74146508E12, 7.5], [1.74146346E12, 7.766666666666667], [1.74146244E12, 8.116666666666667], [1.74146406E12, 7.733333333333333], [1.74146304E12, 7.85], [1.74146466E12, 7.8], [1.74146268E12, 8.066666666666666], [1.7414643E12, 8.233333333333333], [1.74146328E12, 7.9], [1.7414649E12, 7.733333333333333], [1.74146226E12, 8.166666666666666], [1.74146388E12, 8.05], [1.74146166E12, 8.1], [1.74146448E12, 7.916666666666667], [1.74146412E12, 7.783333333333333], [1.7414619E12, 7.933333333333334], [1.7414625E12, 7.983333333333333], [1.74146472E12, 7.733333333333333], [1.74146208E12, 8.483333333333333], [1.7414631E12, 8.116666666666667], [1.74146532E12, 3.4833333333333334], [1.7414637E12, 7.866666666666666], [1.74146232E12, 8.1], [1.74146334E12, 7.883333333333334], [1.74146172E12, 8.2], [1.74146394E12, 7.833333333333333], [1.74146292E12, 7.9], [1.74146454E12, 7.85], [1.74146352E12, 8.05], [1.74146514E12, 7.716666666666667], [1.74146154E12, 3.7333333333333334], [1.74146316E12, 7.933333333333334], [1.74146478E12, 7.633333333333334], [1.74146376E12, 8.15], [1.74146436E12, 7.983333333333333], [1.74146214E12, 8.016666666666667], [1.74146274E12, 8.2], [1.74146496E12, 8.0], [1.7414646E12, 8.066666666666666], [1.74146238E12, 8.016666666666667], [1.74146298E12, 7.866666666666666], [1.7414652E12, 7.816666666666666], [1.74146358E12, 7.883333333333334], [1.74146256E12, 7.983333333333333], [1.74146196E12, 7.633333333333334], [1.74146418E12, 7.9], [1.74146382E12, 8.05], [1.7414628E12, 7.866666666666666], [1.7414622E12, 7.75], [1.74146442E12, 7.883333333333334], [1.74146178E12, 7.816666666666666], [1.7414634E12, 8.216666666666667], [1.74146502E12, 8.066666666666666], [1.741464E12, 8.116666666666667], [1.74146202E12, 8.033333333333333], [1.74146364E12, 7.933333333333334], [1.74146526E12, 7.866666666666666], [1.74146424E12, 7.916666666666667], [1.7414616E12, 8.15], [1.74146262E12, 8.033333333333333], [1.74146484E12, 7.45], [1.74146322E12, 8.2]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74146532E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.75, "minX": 1.74146154E12, "maxY": 4.25, "series": [{"data": [[1.74146184E12, 4.033333333333333], [1.74146286E12, 3.966666666666667], [1.74146508E12, 3.7666666666666666], [1.74146346E12, 3.8666666666666667], [1.74146244E12, 4.05], [1.74146406E12, 3.8666666666666667], [1.74146304E12, 3.933333333333333], [1.74146466E12, 3.9166666666666665], [1.74146268E12, 4.033333333333333], [1.7414643E12, 4.116666666666666], [1.74146328E12, 3.95], [1.7414649E12, 3.85], [1.74146226E12, 4.066666666666666], [1.74146388E12, 4.016666666666667], [1.74146166E12, 4.033333333333333], [1.74146448E12, 3.933333333333333], [1.74146412E12, 3.9], [1.7414619E12, 3.95], [1.7414625E12, 3.9833333333333334], [1.74146472E12, 3.85], [1.74146208E12, 4.233333333333333], [1.7414631E12, 4.05], [1.74146532E12, 1.75], [1.7414637E12, 3.933333333333333], [1.74146232E12, 4.05], [1.74146334E12, 3.933333333333333], [1.74146172E12, 4.116666666666666], [1.74146394E12, 3.9166666666666665], [1.74146292E12, 3.95], [1.74146454E12, 3.933333333333333], [1.74146352E12, 4.016666666666667], [1.74146514E12, 3.85], [1.74146154E12, 1.85], [1.74146316E12, 3.966666666666667], [1.74146478E12, 3.816666666666667], [1.74146376E12, 4.083333333333333], [1.74146436E12, 4.0], [1.74146214E12, 4.016666666666667], [1.74146274E12, 4.1], [1.74146496E12, 4.016666666666667], [1.7414646E12, 4.033333333333333], [1.74146238E12, 4.016666666666667], [1.74146298E12, 3.933333333333333], [1.7414652E12, 3.9166666666666665], [1.74146358E12, 3.966666666666667], [1.74146256E12, 4.016666666666667], [1.74146196E12, 3.8333333333333335], [1.74146418E12, 3.933333333333333], [1.74146382E12, 4.033333333333333], [1.7414628E12, 3.933333333333333], [1.7414622E12, 3.8833333333333333], [1.74146442E12, 3.95], [1.74146178E12, 3.9], [1.7414634E12, 4.133333333333334], [1.74146502E12, 4.016666666666667], [1.741464E12, 4.05], [1.74146202E12, 4.016666666666667], [1.74146364E12, 3.95], [1.74146526E12, 3.933333333333333], [1.74146424E12, 3.966666666666667], [1.7414616E12, 4.083333333333333], [1.74146262E12, 4.0], [1.74146484E12, 3.7333333333333334], [1.74146322E12, 4.1]], "isOverall": false, "label": "0", "isController": false}, {"data": [[1.74146184E12, 4.016666666666667], [1.74146286E12, 3.966666666666667], [1.74146508E12, 3.7333333333333334], [1.74146346E12, 3.9], [1.74146244E12, 4.066666666666666], [1.74146406E12, 3.8666666666666667], [1.74146304E12, 3.9166666666666665], [1.74146466E12, 3.8833333333333333], [1.74146268E12, 4.033333333333333], [1.7414643E12, 4.116666666666666], [1.74146328E12, 3.95], [1.7414649E12, 3.8833333333333333], [1.74146226E12, 4.1], [1.74146388E12, 4.033333333333333], [1.74146166E12, 4.066666666666666], [1.74146448E12, 3.9833333333333334], [1.74146412E12, 3.8833333333333333], [1.7414619E12, 3.9833333333333334], [1.7414625E12, 4.0], [1.74146472E12, 3.8833333333333333], [1.74146208E12, 4.25], [1.7414631E12, 4.066666666666666], [1.74146532E12, 1.7833333333333334], [1.7414637E12, 3.933333333333333], [1.74146232E12, 4.05], [1.74146334E12, 3.95], [1.74146172E12, 4.083333333333333], [1.74146394E12, 3.9166666666666665], [1.74146292E12, 3.95], [1.74146454E12, 3.9166666666666665], [1.74146352E12, 4.033333333333333], [1.74146514E12, 3.8666666666666667], [1.74146154E12, 1.8333333333333333], [1.74146316E12, 3.966666666666667], [1.74146478E12, 3.816666666666667], [1.74146376E12, 4.066666666666666], [1.74146436E12, 3.9833333333333334], [1.74146214E12, 4.0], [1.74146274E12, 4.1], [1.74146496E12, 3.9833333333333334], [1.7414646E12, 4.033333333333333], [1.74146238E12, 4.0], [1.74146298E12, 3.933333333333333], [1.7414652E12, 3.9], [1.74146358E12, 3.9166666666666665], [1.74146256E12, 3.966666666666667], [1.74146196E12, 3.8], [1.74146418E12, 3.966666666666667], [1.74146382E12, 4.016666666666667], [1.7414628E12, 3.933333333333333], [1.7414622E12, 3.8666666666666667], [1.74146442E12, 3.933333333333333], [1.74146178E12, 3.9166666666666665], [1.7414634E12, 4.083333333333333], [1.74146502E12, 4.05], [1.741464E12, 4.066666666666666], [1.74146202E12, 4.016666666666667], [1.74146364E12, 3.9833333333333334], [1.74146526E12, 3.933333333333333], [1.74146424E12, 3.95], [1.7414616E12, 4.066666666666666], [1.74146262E12, 4.033333333333333], [1.74146484E12, 3.716666666666667], [1.74146322E12, 4.1]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74146532E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.75, "minX": 1.74146154E12, "maxY": 4.25, "series": [{"data": [[1.74146184E12, 4.016666666666667], [1.74146286E12, 3.966666666666667], [1.74146508E12, 3.7333333333333334], [1.74146346E12, 3.9], [1.74146244E12, 4.066666666666666], [1.74146406E12, 3.8666666666666667], [1.74146304E12, 3.9166666666666665], [1.74146466E12, 3.8833333333333333], [1.74146268E12, 4.033333333333333], [1.7414643E12, 4.116666666666666], [1.74146328E12, 3.95], [1.7414649E12, 3.8833333333333333], [1.74146226E12, 4.1], [1.74146388E12, 4.033333333333333], [1.74146166E12, 4.066666666666666], [1.74146448E12, 3.9833333333333334], [1.74146412E12, 3.8833333333333333], [1.7414619E12, 3.9833333333333334], [1.7414625E12, 4.0], [1.74146472E12, 3.8833333333333333], [1.74146208E12, 4.25], [1.7414631E12, 4.066666666666666], [1.74146532E12, 1.7833333333333334], [1.7414637E12, 3.933333333333333], [1.74146232E12, 4.05], [1.74146334E12, 3.95], [1.74146172E12, 4.083333333333333], [1.74146394E12, 3.9166666666666665], [1.74146292E12, 3.95], [1.74146454E12, 3.9166666666666665], [1.74146352E12, 4.033333333333333], [1.74146514E12, 3.8666666666666667], [1.74146154E12, 1.8333333333333333], [1.74146316E12, 3.966666666666667], [1.74146478E12, 3.816666666666667], [1.74146376E12, 4.066666666666666], [1.74146436E12, 3.9833333333333334], [1.74146214E12, 4.0], [1.74146274E12, 4.1], [1.74146496E12, 3.9833333333333334], [1.7414646E12, 4.033333333333333], [1.74146238E12, 4.0], [1.74146298E12, 3.933333333333333], [1.7414652E12, 3.9], [1.74146358E12, 3.9166666666666665], [1.74146256E12, 3.966666666666667], [1.74146196E12, 3.8], [1.74146418E12, 3.966666666666667], [1.74146382E12, 4.016666666666667], [1.7414628E12, 3.933333333333333], [1.7414622E12, 3.8666666666666667], [1.74146442E12, 3.933333333333333], [1.74146178E12, 3.9166666666666665], [1.7414634E12, 4.083333333333333], [1.74146502E12, 4.05], [1.741464E12, 4.066666666666666], [1.74146202E12, 4.016666666666667], [1.74146364E12, 3.9833333333333334], [1.74146526E12, 3.933333333333333], [1.74146424E12, 3.95], [1.7414616E12, 4.066666666666666], [1.74146262E12, 4.033333333333333], [1.74146484E12, 3.716666666666667], [1.74146322E12, 4.1]], "isOverall": false, "label": "HTTP Request - enroll-success", "isController": false}, {"data": [[1.74146184E12, 4.033333333333333], [1.74146286E12, 3.966666666666667], [1.74146508E12, 3.7666666666666666], [1.74146346E12, 3.8666666666666667], [1.74146244E12, 4.05], [1.74146406E12, 3.8666666666666667], [1.74146304E12, 3.933333333333333], [1.74146466E12, 3.9166666666666665], [1.74146268E12, 4.033333333333333], [1.7414643E12, 4.116666666666666], [1.74146328E12, 3.95], [1.7414649E12, 3.85], [1.74146226E12, 4.066666666666666], [1.74146388E12, 4.016666666666667], [1.74146166E12, 4.033333333333333], [1.74146448E12, 3.933333333333333], [1.74146412E12, 3.9], [1.7414619E12, 3.95], [1.7414625E12, 3.9833333333333334], [1.74146472E12, 3.85], [1.74146208E12, 4.233333333333333], [1.7414631E12, 4.05], [1.74146532E12, 1.75], [1.7414637E12, 3.933333333333333], [1.74146232E12, 4.05], [1.74146334E12, 3.933333333333333], [1.74146172E12, 4.116666666666666], [1.74146394E12, 3.9166666666666665], [1.74146292E12, 3.95], [1.74146454E12, 3.933333333333333], [1.74146352E12, 4.016666666666667], [1.74146514E12, 3.85], [1.74146154E12, 1.85], [1.74146316E12, 3.966666666666667], [1.74146478E12, 3.816666666666667], [1.74146376E12, 4.083333333333333], [1.74146436E12, 4.0], [1.74146214E12, 4.016666666666667], [1.74146274E12, 4.1], [1.74146496E12, 4.016666666666667], [1.7414646E12, 4.033333333333333], [1.74146238E12, 4.016666666666667], [1.74146298E12, 3.933333333333333], [1.7414652E12, 3.9166666666666665], [1.74146358E12, 3.966666666666667], [1.74146256E12, 4.016666666666667], [1.74146196E12, 3.8333333333333335], [1.74146418E12, 3.933333333333333], [1.74146382E12, 4.033333333333333], [1.7414628E12, 3.933333333333333], [1.7414622E12, 3.8833333333333333], [1.74146442E12, 3.95], [1.74146178E12, 3.9], [1.7414634E12, 4.133333333333334], [1.74146502E12, 4.016666666666667], [1.741464E12, 4.05], [1.74146202E12, 4.016666666666667], [1.74146364E12, 3.95], [1.74146526E12, 3.933333333333333], [1.74146424E12, 3.966666666666667], [1.7414616E12, 4.083333333333333], [1.74146262E12, 4.0], [1.74146484E12, 3.7333333333333334], [1.74146322E12, 4.1]], "isOverall": false, "label": "Create CSR-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74146532E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 3.533333333333333, "minX": 1.74146154E12, "maxY": 8.483333333333333, "series": [{"data": [[1.74146184E12, 8.05], [1.74146286E12, 7.933333333333334], [1.74146508E12, 7.5], [1.74146346E12, 7.766666666666667], [1.74146244E12, 8.116666666666667], [1.74146406E12, 7.733333333333333], [1.74146304E12, 7.85], [1.74146466E12, 7.8], [1.74146268E12, 8.066666666666666], [1.7414643E12, 8.233333333333333], [1.74146328E12, 7.9], [1.7414649E12, 7.733333333333333], [1.74146226E12, 8.166666666666666], [1.74146388E12, 8.05], [1.74146166E12, 8.1], [1.74146448E12, 7.916666666666667], [1.74146412E12, 7.783333333333333], [1.7414619E12, 7.933333333333334], [1.7414625E12, 7.983333333333333], [1.74146472E12, 7.733333333333333], [1.74146208E12, 8.483333333333333], [1.7414631E12, 8.116666666666667], [1.74146532E12, 3.533333333333333], [1.7414637E12, 7.866666666666666], [1.74146232E12, 8.1], [1.74146334E12, 7.883333333333334], [1.74146172E12, 8.2], [1.74146394E12, 7.833333333333333], [1.74146292E12, 7.9], [1.74146454E12, 7.85], [1.74146352E12, 8.05], [1.74146514E12, 7.716666666666667], [1.74146154E12, 3.683333333333333], [1.74146316E12, 7.933333333333334], [1.74146478E12, 7.633333333333334], [1.74146376E12, 8.15], [1.74146436E12, 7.983333333333333], [1.74146214E12, 8.016666666666667], [1.74146274E12, 8.2], [1.74146496E12, 8.0], [1.7414646E12, 8.066666666666666], [1.74146238E12, 8.016666666666667], [1.74146298E12, 7.866666666666666], [1.7414652E12, 7.816666666666666], [1.74146358E12, 7.883333333333334], [1.74146256E12, 7.983333333333333], [1.74146196E12, 7.633333333333334], [1.74146418E12, 7.9], [1.74146382E12, 8.05], [1.7414628E12, 7.866666666666666], [1.7414622E12, 7.75], [1.74146442E12, 7.883333333333334], [1.74146178E12, 7.816666666666666], [1.7414634E12, 8.216666666666667], [1.74146502E12, 8.066666666666666], [1.741464E12, 8.116666666666667], [1.74146202E12, 8.033333333333333], [1.74146364E12, 7.933333333333334], [1.74146526E12, 7.866666666666666], [1.74146424E12, 7.916666666666667], [1.7414616E12, 8.15], [1.74146262E12, 8.033333333333333], [1.74146484E12, 7.45], [1.74146322E12, 8.2]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74146532E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

