/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "maxY": 4154.0, "series": [{"data": [[0.0, 9.0], [0.1, 10.0], [0.2, 12.0], [0.3, 20.0], [0.4, 27.0], [0.5, 36.0], [0.6, 39.0], [0.7, 40.0], [0.8, 42.0], [0.9, 43.0], [1.0, 44.0], [1.1, 45.0], [1.2, 46.0], [1.3, 47.0], [1.4, 47.0], [1.5, 48.0], [1.6, 48.0], [1.7, 48.0], [1.8, 49.0], [1.9, 50.0], [2.0, 50.0], [2.1, 50.0], [2.2, 51.0], [2.3, 51.0], [2.4, 51.0], [2.5, 52.0], [2.6, 52.0], [2.7, 52.0], [2.8, 52.0], [2.9, 52.0], [3.0, 53.0], [3.1, 53.0], [3.2, 53.0], [3.3, 53.0], [3.4, 54.0], [3.5, 54.0], [3.6, 54.0], [3.7, 54.0], [3.8, 54.0], [3.9, 55.0], [4.0, 55.0], [4.1, 55.0], [4.2, 55.0], [4.3, 55.0], [4.4, 55.0], [4.5, 55.0], [4.6, 56.0], [4.7, 56.0], [4.8, 56.0], [4.9, 56.0], [5.0, 56.0], [5.1, 56.0], [5.2, 56.0], [5.3, 56.0], [5.4, 56.0], [5.5, 56.0], [5.6, 56.0], [5.7, 56.0], [5.8, 57.0], [5.9, 57.0], [6.0, 57.0], [6.1, 57.0], [6.2, 57.0], [6.3, 57.0], [6.4, 58.0], [6.5, 58.0], [6.6, 58.0], [6.7, 58.0], [6.8, 58.0], [6.9, 58.0], [7.0, 58.0], [7.1, 58.0], [7.2, 59.0], [7.3, 59.0], [7.4, 59.0], [7.5, 59.0], [7.6, 59.0], [7.7, 59.0], [7.8, 59.0], [7.9, 59.0], [8.0, 59.0], [8.1, 59.0], [8.2, 59.0], [8.3, 59.0], [8.4, 59.0], [8.5, 59.0], [8.6, 60.0], [8.7, 60.0], [8.8, 60.0], [8.9, 60.0], [9.0, 60.0], [9.1, 60.0], [9.2, 60.0], [9.3, 60.0], [9.4, 60.0], [9.5, 60.0], [9.6, 60.0], [9.7, 60.0], [9.8, 60.0], [9.9, 60.0], [10.0, 60.0], [10.1, 60.0], [10.2, 60.0], [10.3, 60.0], [10.4, 60.0], [10.5, 61.0], [10.6, 61.0], [10.7, 61.0], [10.8, 61.0], [10.9, 61.0], [11.0, 61.0], [11.1, 61.0], [11.2, 61.0], [11.3, 61.0], [11.4, 61.0], [11.5, 62.0], [11.6, 62.0], [11.7, 62.0], [11.8, 62.0], [11.9, 62.0], [12.0, 62.0], [12.1, 62.0], [12.2, 62.0], [12.3, 62.0], [12.4, 62.0], [12.5, 62.0], [12.6, 62.0], [12.7, 62.0], [12.8, 62.0], [12.9, 63.0], [13.0, 63.0], [13.1, 63.0], [13.2, 63.0], [13.3, 63.0], [13.4, 63.0], [13.5, 63.0], [13.6, 63.0], [13.7, 63.0], [13.8, 63.0], [13.9, 63.0], [14.0, 63.0], [14.1, 63.0], [14.2, 63.0], [14.3, 63.0], [14.4, 63.0], [14.5, 63.0], [14.6, 63.0], [14.7, 63.0], [14.8, 63.0], [14.9, 63.0], [15.0, 64.0], [15.1, 64.0], [15.2, 64.0], [15.3, 64.0], [15.4, 64.0], [15.5, 64.0], [15.6, 64.0], [15.7, 64.0], [15.8, 64.0], [15.9, 64.0], [16.0, 64.0], [16.1, 64.0], [16.2, 64.0], [16.3, 64.0], [16.4, 64.0], [16.5, 64.0], [16.6, 64.0], [16.7, 64.0], [16.8, 64.0], [16.9, 64.0], [17.0, 64.0], [17.1, 64.0], [17.2, 64.0], [17.3, 64.0], [17.4, 64.0], [17.5, 64.0], [17.6, 65.0], [17.7, 65.0], [17.8, 65.0], [17.9, 65.0], [18.0, 65.0], [18.1, 65.0], [18.2, 65.0], [18.3, 65.0], [18.4, 65.0], [18.5, 65.0], [18.6, 65.0], [18.7, 65.0], [18.8, 65.0], [18.9, 65.0], [19.0, 65.0], [19.1, 65.0], [19.2, 66.0], [19.3, 66.0], [19.4, 66.0], [19.5, 66.0], [19.6, 66.0], [19.7, 66.0], [19.8, 66.0], [19.9, 66.0], [20.0, 66.0], [20.1, 66.0], [20.2, 66.0], [20.3, 66.0], [20.4, 66.0], [20.5, 66.0], [20.6, 66.0], [20.7, 66.0], [20.8, 66.0], [20.9, 66.0], [21.0, 66.0], [21.1, 66.0], [21.2, 66.0], [21.3, 66.0], [21.4, 66.0], [21.5, 67.0], [21.6, 67.0], [21.7, 67.0], [21.8, 67.0], [21.9, 67.0], [22.0, 67.0], [22.1, 67.0], [22.2, 67.0], [22.3, 67.0], [22.4, 67.0], [22.5, 67.0], [22.6, 67.0], [22.7, 67.0], [22.8, 67.0], [22.9, 67.0], [23.0, 67.0], [23.1, 67.0], [23.2, 67.0], [23.3, 67.0], [23.4, 67.0], [23.5, 67.0], [23.6, 67.0], [23.7, 67.0], [23.8, 67.0], [23.9, 67.0], [24.0, 67.0], [24.1, 67.0], [24.2, 67.0], [24.3, 67.0], [24.4, 67.0], [24.5, 68.0], [24.6, 68.0], [24.7, 68.0], [24.8, 68.0], [24.9, 68.0], [25.0, 68.0], [25.1, 68.0], [25.2, 68.0], [25.3, 68.0], [25.4, 68.0], [25.5, 68.0], [25.6, 68.0], [25.7, 68.0], [25.8, 68.0], [25.9, 68.0], [26.0, 68.0], [26.1, 68.0], [26.2, 68.0], [26.3, 68.0], [26.4, 68.0], [26.5, 68.0], [26.6, 68.0], [26.7, 68.0], [26.8, 68.0], [26.9, 68.0], [27.0, 68.0], [27.1, 68.0], [27.2, 68.0], [27.3, 68.0], [27.4, 68.0], [27.5, 68.0], [27.6, 68.0], [27.7, 68.0], [27.8, 68.0], [27.9, 68.0], [28.0, 68.0], [28.1, 68.0], [28.2, 69.0], [28.3, 69.0], [28.4, 69.0], [28.5, 69.0], [28.6, 69.0], [28.7, 69.0], [28.8, 69.0], [28.9, 69.0], [29.0, 69.0], [29.1, 69.0], [29.2, 69.0], [29.3, 69.0], [29.4, 69.0], [29.5, 69.0], [29.6, 69.0], [29.7, 69.0], [29.8, 69.0], [29.9, 69.0], [30.0, 69.0], [30.1, 69.0], [30.2, 70.0], [30.3, 70.0], [30.4, 70.0], [30.5, 70.0], [30.6, 70.0], [30.7, 70.0], [30.8, 70.0], [30.9, 70.0], [31.0, 70.0], [31.1, 70.0], [31.2, 70.0], [31.3, 70.0], [31.4, 70.0], [31.5, 70.0], [31.6, 70.0], [31.7, 70.0], [31.8, 70.0], [31.9, 70.0], [32.0, 70.0], [32.1, 70.0], [32.2, 70.0], [32.3, 70.0], [32.4, 70.0], [32.5, 70.0], [32.6, 70.0], [32.7, 70.0], [32.8, 71.0], [32.9, 71.0], [33.0, 71.0], [33.1, 71.0], [33.2, 71.0], [33.3, 71.0], [33.4, 71.0], [33.5, 71.0], [33.6, 71.0], [33.7, 71.0], [33.8, 71.0], [33.9, 71.0], [34.0, 71.0], [34.1, 71.0], [34.2, 71.0], [34.3, 71.0], [34.4, 71.0], [34.5, 71.0], [34.6, 71.0], [34.7, 71.0], [34.8, 71.0], [34.9, 71.0], [35.0, 71.0], [35.1, 71.0], [35.2, 71.0], [35.3, 71.0], [35.4, 71.0], [35.5, 71.0], [35.6, 71.0], [35.7, 71.0], [35.8, 71.0], [35.9, 71.0], [36.0, 71.0], [36.1, 71.0], [36.2, 71.0], [36.3, 71.0], [36.4, 72.0], [36.5, 72.0], [36.6, 72.0], [36.7, 72.0], [36.8, 72.0], [36.9, 72.0], [37.0, 72.0], [37.1, 72.0], [37.2, 72.0], [37.3, 72.0], [37.4, 72.0], [37.5, 72.0], [37.6, 72.0], [37.7, 72.0], [37.8, 72.0], [37.9, 72.0], [38.0, 72.0], [38.1, 72.0], [38.2, 72.0], [38.3, 72.0], [38.4, 72.0], [38.5, 72.0], [38.6, 72.0], [38.7, 72.0], [38.8, 72.0], [38.9, 72.0], [39.0, 72.0], [39.1, 72.0], [39.2, 72.0], [39.3, 72.0], [39.4, 72.0], [39.5, 72.0], [39.6, 72.0], [39.7, 72.0], [39.8, 72.0], [39.9, 72.0], [40.0, 72.0], [40.1, 72.0], [40.2, 72.0], [40.3, 72.0], [40.4, 72.0], [40.5, 72.0], [40.6, 72.0], [40.7, 72.0], [40.8, 72.0], [40.9, 72.0], [41.0, 73.0], [41.1, 73.0], [41.2, 73.0], [41.3, 73.0], [41.4, 73.0], [41.5, 73.0], [41.6, 73.0], [41.7, 73.0], [41.8, 73.0], [41.9, 73.0], [42.0, 73.0], [42.1, 73.0], [42.2, 73.0], [42.3, 73.0], [42.4, 73.0], [42.5, 73.0], [42.6, 73.0], [42.7, 73.0], [42.8, 73.0], [42.9, 73.0], [43.0, 73.0], [43.1, 73.0], [43.2, 73.0], [43.3, 73.0], [43.4, 74.0], [43.5, 74.0], [43.6, 74.0], [43.7, 74.0], [43.8, 74.0], [43.9, 74.0], [44.0, 74.0], [44.1, 74.0], [44.2, 74.0], [44.3, 74.0], [44.4, 74.0], [44.5, 74.0], [44.6, 74.0], [44.7, 74.0], [44.8, 74.0], [44.9, 74.0], [45.0, 74.0], [45.1, 74.0], [45.2, 74.0], [45.3, 74.0], [45.4, 74.0], [45.5, 74.0], [45.6, 74.0], [45.7, 74.0], [45.8, 74.0], [45.9, 74.0], [46.0, 74.0], [46.1, 74.0], [46.2, 74.0], [46.3, 74.0], [46.4, 75.0], [46.5, 75.0], [46.6, 75.0], [46.7, 75.0], [46.8, 75.0], [46.9, 75.0], [47.0, 75.0], [47.1, 75.0], [47.2, 75.0], [47.3, 75.0], [47.4, 75.0], [47.5, 75.0], [47.6, 75.0], [47.7, 75.0], [47.8, 75.0], [47.9, 75.0], [48.0, 75.0], [48.1, 75.0], [48.2, 75.0], [48.3, 75.0], [48.4, 75.0], [48.5, 75.0], [48.6, 75.0], [48.7, 75.0], [48.8, 75.0], [48.9, 75.0], [49.0, 75.0], [49.1, 75.0], [49.2, 75.0], [49.3, 75.0], [49.4, 75.0], [49.5, 75.0], [49.6, 75.0], [49.7, 75.0], [49.8, 75.0], [49.9, 75.0], [50.0, 75.0], [50.1, 75.0], [50.2, 75.0], [50.3, 76.0], [50.4, 76.0], [50.5, 76.0], [50.6, 76.0], [50.7, 76.0], [50.8, 76.0], [50.9, 76.0], [51.0, 76.0], [51.1, 76.0], [51.2, 76.0], [51.3, 76.0], [51.4, 76.0], [51.5, 76.0], [51.6, 76.0], [51.7, 76.0], [51.8, 76.0], [51.9, 76.0], [52.0, 76.0], [52.1, 76.0], [52.2, 76.0], [52.3, 76.0], [52.4, 76.0], [52.5, 76.0], [52.6, 76.0], [52.7, 76.0], [52.8, 76.0], [52.9, 76.0], [53.0, 76.0], [53.1, 76.0], [53.2, 76.0], [53.3, 76.0], [53.4, 76.0], [53.5, 76.0], [53.6, 76.0], [53.7, 76.0], [53.8, 76.0], [53.9, 76.0], [54.0, 76.0], [54.1, 76.0], [54.2, 76.0], [54.3, 76.0], [54.4, 76.0], [54.5, 76.0], [54.6, 76.0], [54.7, 76.0], [54.8, 76.0], [54.9, 76.0], [55.0, 76.0], [55.1, 76.0], [55.2, 77.0], [55.3, 77.0], [55.4, 77.0], [55.5, 77.0], [55.6, 77.0], [55.7, 77.0], [55.8, 77.0], [55.9, 77.0], [56.0, 77.0], [56.1, 77.0], [56.2, 77.0], [56.3, 77.0], [56.4, 77.0], [56.5, 77.0], [56.6, 77.0], [56.7, 77.0], [56.8, 77.0], [56.9, 77.0], [57.0, 77.0], [57.1, 77.0], [57.2, 77.0], [57.3, 77.0], [57.4, 77.0], [57.5, 78.0], [57.6, 78.0], [57.7, 78.0], [57.8, 78.0], [57.9, 78.0], [58.0, 78.0], [58.1, 78.0], [58.2, 78.0], [58.3, 78.0], [58.4, 78.0], [58.5, 78.0], [58.6, 78.0], [58.7, 78.0], [58.8, 78.0], [58.9, 78.0], [59.0, 78.0], [59.1, 78.0], [59.2, 78.0], [59.3, 78.0], [59.4, 78.0], [59.5, 78.0], [59.6, 78.0], [59.7, 78.0], [59.8, 78.0], [59.9, 78.0], [60.0, 78.0], [60.1, 78.0], [60.2, 78.0], [60.3, 78.0], [60.4, 78.0], [60.5, 79.0], [60.6, 79.0], [60.7, 79.0], [60.8, 79.0], [60.9, 79.0], [61.0, 79.0], [61.1, 79.0], [61.2, 79.0], [61.3, 79.0], [61.4, 79.0], [61.5, 79.0], [61.6, 79.0], [61.7, 79.0], [61.8, 79.0], [61.9, 79.0], [62.0, 79.0], [62.1, 79.0], [62.2, 79.0], [62.3, 79.0], [62.4, 79.0], [62.5, 79.0], [62.6, 79.0], [62.7, 79.0], [62.8, 79.0], [62.9, 79.0], [63.0, 79.0], [63.1, 79.0], [63.2, 79.0], [63.3, 79.0], [63.4, 79.0], [63.5, 79.0], [63.6, 79.0], [63.7, 79.0], [63.8, 79.0], [63.9, 79.0], [64.0, 80.0], [64.1, 80.0], [64.2, 80.0], [64.3, 80.0], [64.4, 80.0], [64.5, 80.0], [64.6, 80.0], [64.7, 80.0], [64.8, 80.0], [64.9, 80.0], [65.0, 80.0], [65.1, 80.0], [65.2, 80.0], [65.3, 80.0], [65.4, 80.0], [65.5, 80.0], [65.6, 80.0], [65.7, 80.0], [65.8, 80.0], [65.9, 80.0], [66.0, 80.0], [66.1, 80.0], [66.2, 80.0], [66.3, 80.0], [66.4, 80.0], [66.5, 80.0], [66.6, 80.0], [66.7, 80.0], [66.8, 80.0], [66.9, 80.0], [67.0, 80.0], [67.1, 80.0], [67.2, 80.0], [67.3, 80.0], [67.4, 80.0], [67.5, 80.0], [67.6, 80.0], [67.7, 80.0], [67.8, 80.0], [67.9, 80.0], [68.0, 80.0], [68.1, 80.0], [68.2, 80.0], [68.3, 80.0], [68.4, 80.0], [68.5, 81.0], [68.6, 81.0], [68.7, 81.0], [68.8, 81.0], [68.9, 81.0], [69.0, 81.0], [69.1, 81.0], [69.2, 81.0], [69.3, 81.0], [69.4, 81.0], [69.5, 81.0], [69.6, 81.0], [69.7, 81.0], [69.8, 81.0], [69.9, 81.0], [70.0, 81.0], [70.1, 81.0], [70.2, 81.0], [70.3, 81.0], [70.4, 81.0], [70.5, 82.0], [70.6, 82.0], [70.7, 82.0], [70.8, 82.0], [70.9, 82.0], [71.0, 82.0], [71.1, 82.0], [71.2, 82.0], [71.3, 82.0], [71.4, 82.0], [71.5, 82.0], [71.6, 82.0], [71.7, 82.0], [71.8, 82.0], [71.9, 82.0], [72.0, 82.0], [72.1, 82.0], [72.2, 82.0], [72.3, 82.0], [72.4, 82.0], [72.5, 82.0], [72.6, 82.0], [72.7, 82.0], [72.8, 82.0], [72.9, 83.0], [73.0, 83.0], [73.1, 83.0], [73.2, 83.0], [73.3, 83.0], [73.4, 83.0], [73.5, 83.0], [73.6, 83.0], [73.7, 83.0], [73.8, 83.0], [73.9, 83.0], [74.0, 83.0], [74.1, 83.0], [74.2, 83.0], [74.3, 83.0], [74.4, 83.0], [74.5, 83.0], [74.6, 83.0], [74.7, 83.0], [74.8, 83.0], [74.9, 83.0], [75.0, 83.0], [75.1, 83.0], [75.2, 83.0], [75.3, 83.0], [75.4, 83.0], [75.5, 83.0], [75.6, 83.0], [75.7, 83.0], [75.8, 83.0], [75.9, 83.0], [76.0, 83.0], [76.1, 83.0], [76.2, 84.0], [76.3, 84.0], [76.4, 84.0], [76.5, 84.0], [76.6, 84.0], [76.7, 84.0], [76.8, 84.0], [76.9, 84.0], [77.0, 84.0], [77.1, 84.0], [77.2, 84.0], [77.3, 84.0], [77.4, 84.0], [77.5, 84.0], [77.6, 84.0], [77.7, 84.0], [77.8, 84.0], [77.9, 84.0], [78.0, 84.0], [78.1, 84.0], [78.2, 84.0], [78.3, 84.0], [78.4, 84.0], [78.5, 84.0], [78.6, 84.0], [78.7, 84.0], [78.8, 84.0], [78.9, 84.0], [79.0, 84.0], [79.1, 84.0], [79.2, 84.0], [79.3, 84.0], [79.4, 84.0], [79.5, 84.0], [79.6, 84.0], [79.7, 84.0], [79.8, 84.0], [79.9, 84.0], [80.0, 84.0], [80.1, 84.0], [80.2, 85.0], [80.3, 85.0], [80.4, 85.0], [80.5, 85.0], [80.6, 85.0], [80.7, 85.0], [80.8, 85.0], [80.9, 85.0], [81.0, 85.0], [81.1, 85.0], [81.2, 85.0], [81.3, 85.0], [81.4, 85.0], [81.5, 85.0], [81.6, 85.0], [81.7, 86.0], [81.8, 86.0], [81.9, 86.0], [82.0, 86.0], [82.1, 86.0], [82.2, 86.0], [82.3, 86.0], [82.4, 86.0], [82.5, 86.0], [82.6, 86.0], [82.7, 86.0], [82.8, 86.0], [82.9, 86.0], [83.0, 86.0], [83.1, 86.0], [83.2, 86.0], [83.3, 86.0], [83.4, 86.0], [83.5, 86.0], [83.6, 87.0], [83.7, 87.0], [83.8, 87.0], [83.9, 87.0], [84.0, 87.0], [84.1, 87.0], [84.2, 87.0], [84.3, 87.0], [84.4, 87.0], [84.5, 87.0], [84.6, 87.0], [84.7, 87.0], [84.8, 87.0], [84.9, 87.0], [85.0, 87.0], [85.1, 87.0], [85.2, 87.0], [85.3, 87.0], [85.4, 87.0], [85.5, 87.0], [85.6, 87.0], [85.7, 87.0], [85.8, 87.0], [85.9, 88.0], [86.0, 88.0], [86.1, 88.0], [86.2, 88.0], [86.3, 88.0], [86.4, 88.0], [86.5, 88.0], [86.6, 88.0], [86.7, 88.0], [86.8, 88.0], [86.9, 88.0], [87.0, 88.0], [87.1, 88.0], [87.2, 88.0], [87.3, 88.0], [87.4, 88.0], [87.5, 88.0], [87.6, 88.0], [87.7, 88.0], [87.8, 88.0], [87.9, 88.0], [88.0, 88.0], [88.1, 88.0], [88.2, 88.0], [88.3, 88.0], [88.4, 88.0], [88.5, 88.0], [88.6, 88.0], [88.7, 88.0], [88.8, 89.0], [88.9, 89.0], [89.0, 89.0], [89.1, 89.0], [89.2, 89.0], [89.3, 89.0], [89.4, 89.0], [89.5, 89.0], [89.6, 89.0], [89.7, 89.0], [89.8, 90.0], [89.9, 90.0], [90.0, 90.0], [90.1, 90.0], [90.2, 90.0], [90.3, 90.0], [90.4, 90.0], [90.5, 90.0], [90.6, 90.0], [90.7, 90.0], [90.8, 90.0], [90.9, 91.0], [91.0, 91.0], [91.1, 91.0], [91.2, 91.0], [91.3, 91.0], [91.4, 91.0], [91.5, 91.0], [91.6, 91.0], [91.7, 91.0], [91.8, 91.0], [91.9, 91.0], [92.0, 91.0], [92.1, 91.0], [92.2, 91.0], [92.3, 91.0], [92.4, 91.0], [92.5, 92.0], [92.6, 92.0], [92.7, 92.0], [92.8, 92.0], [92.9, 92.0], [93.0, 92.0], [93.1, 92.0], [93.2, 92.0], [93.3, 92.0], [93.4, 92.0], [93.5, 92.0], [93.6, 92.0], [93.7, 92.0], [93.8, 92.0], [93.9, 92.0], [94.0, 92.0], [94.1, 93.0], [94.2, 93.0], [94.3, 93.0], [94.4, 93.0], [94.5, 93.0], [94.6, 93.0], [94.7, 94.0], [94.8, 94.0], [94.9, 94.0], [95.0, 94.0], [95.1, 94.0], [95.2, 94.0], [95.3, 94.0], [95.4, 95.0], [95.5, 95.0], [95.6, 95.0], [95.7, 95.0], [95.8, 95.0], [95.9, 95.0], [96.0, 95.0], [96.1, 95.0], [96.2, 95.0], [96.3, 96.0], [96.4, 96.0], [96.5, 96.0], [96.6, 96.0], [96.7, 96.0], [96.8, 96.0], [96.9, 96.0], [97.0, 96.0], [97.1, 96.0], [97.2, 97.0], [97.3, 97.0], [97.4, 97.0], [97.5, 98.0], [97.6, 98.0], [97.7, 98.0], [97.8, 99.0], [97.9, 99.0], [98.0, 99.0], [98.1, 99.0], [98.2, 99.0], [98.3, 100.0], [98.4, 100.0], [98.5, 100.0], [98.6, 100.0], [98.7, 101.0], [98.8, 102.0], [98.9, 102.0], [99.0, 103.0], [99.1, 103.0], [99.2, 104.0], [99.3, 104.0], [99.4, 105.0], [99.5, 106.0], [99.6, 108.0], [99.7, 109.0], [99.8, 112.0], [99.9, 119.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 477.0], [0.1, 527.0], [0.2, 725.0], [0.3, 1047.0], [0.4, 1120.0], [0.5, 1190.0], [0.6, 1220.0], [0.7, 1247.0], [0.8, 1268.0], [0.9, 1295.0], [1.0, 1311.0], [1.1, 1330.0], [1.2, 1347.0], [1.3, 1360.0], [1.4, 1372.0], [1.5, 1386.0], [1.6, 1397.0], [1.7, 1404.0], [1.8, 1411.0], [1.9, 1418.0], [2.0, 1425.0], [2.1, 1433.0], [2.2, 1440.0], [2.3, 1448.0], [2.4, 1453.0], [2.5, 1460.0], [2.6, 1467.0], [2.7, 1474.0], [2.8, 1480.0], [2.9, 1485.0], [3.0, 1488.0], [3.1, 1493.0], [3.2, 1498.0], [3.3, 1505.0], [3.4, 1512.0], [3.5, 1516.0], [3.6, 1520.0], [3.7, 1526.0], [3.8, 1528.0], [3.9, 1533.0], [4.0, 1538.0], [4.1, 1543.0], [4.2, 1548.0], [4.3, 1552.0], [4.4, 1555.0], [4.5, 1560.0], [4.6, 1564.0], [4.7, 1570.0], [4.8, 1574.0], [4.9, 1578.0], [5.0, 1583.0], [5.1, 1586.0], [5.2, 1588.0], [5.3, 1595.0], [5.4, 1598.0], [5.5, 1600.0], [5.6, 1604.0], [5.7, 1608.0], [5.8, 1612.0], [5.9, 1615.0], [6.0, 1616.0], [6.1, 1620.0], [6.2, 1626.0], [6.3, 1629.0], [6.4, 1633.0], [6.5, 1636.0], [6.6, 1639.0], [6.7, 1640.0], [6.8, 1645.0], [6.9, 1648.0], [7.0, 1651.0], [7.1, 1653.0], [7.2, 1656.0], [7.3, 1658.0], [7.4, 1660.0], [7.5, 1664.0], [7.6, 1668.0], [7.7, 1669.0], [7.8, 1673.0], [7.9, 1676.0], [8.0, 1678.0], [8.1, 1680.0], [8.2, 1684.0], [8.3, 1685.0], [8.4, 1688.0], [8.5, 1692.0], [8.6, 1694.0], [8.7, 1696.0], [8.8, 1700.0], [8.9, 1702.0], [9.0, 1704.0], [9.1, 1708.0], [9.2, 1711.0], [9.3, 1713.0], [9.4, 1716.0], [9.5, 1719.0], [9.6, 1721.0], [9.7, 1724.0], [9.8, 1725.0], [9.9, 1728.0], [10.0, 1730.0], [10.1, 1732.0], [10.2, 1734.0], [10.3, 1736.0], [10.4, 1738.0], [10.5, 1740.0], [10.6, 1743.0], [10.7, 1744.0], [10.8, 1747.0], [10.9, 1748.0], [11.0, 1749.0], [11.1, 1750.0], [11.2, 1753.0], [11.3, 1756.0], [11.4, 1758.0], [11.5, 1760.0], [11.6, 1764.0], [11.7, 1767.0], [11.8, 1768.0], [11.9, 1771.0], [12.0, 1772.0], [12.1, 1775.0], [12.2, 1776.0], [12.3, 1779.0], [12.4, 1780.0], [12.5, 1783.0], [12.6, 1785.0], [12.7, 1787.0], [12.8, 1788.0], [12.9, 1791.0], [13.0, 1792.0], [13.1, 1794.0], [13.2, 1796.0], [13.3, 1799.0], [13.4, 1800.0], [13.5, 1803.0], [13.6, 1804.0], [13.7, 1807.0], [13.8, 1808.0], [13.9, 1811.0], [14.0, 1812.0], [14.1, 1814.0], [14.2, 1816.0], [14.3, 1816.0], [14.4, 1819.0], [14.5, 1822.0], [14.6, 1824.0], [14.7, 1826.0], [14.8, 1828.0], [14.9, 1829.0], [15.0, 1831.0], [15.1, 1832.0], [15.2, 1835.0], [15.3, 1836.0], [15.4, 1839.0], [15.5, 1840.0], [15.6, 1843.0], [15.7, 1844.0], [15.8, 1847.0], [15.9, 1849.0], [16.0, 1851.0], [16.1, 1853.0], [16.2, 1855.0], [16.3, 1857.0], [16.4, 1860.0], [16.5, 1861.0], [16.6, 1863.0], [16.7, 1865.0], [16.8, 1867.0], [16.9, 1868.0], [17.0, 1870.0], [17.1, 1872.0], [17.2, 1874.0], [17.3, 1876.0], [17.4, 1877.0], [17.5, 1880.0], [17.6, 1881.0], [17.7, 1882.0], [17.8, 1884.0], [17.9, 1886.0], [18.0, 1888.0], [18.1, 1889.0], [18.2, 1891.0], [18.3, 1892.0], [18.4, 1895.0], [18.5, 1896.0], [18.6, 1898.0], [18.7, 1900.0], [18.8, 1900.0], [18.9, 1903.0], [19.0, 1904.0], [19.1, 1905.0], [19.2, 1907.0], [19.3, 1909.0], [19.4, 1910.0], [19.5, 1911.0], [19.6, 1913.0], [19.7, 1915.0], [19.8, 1916.0], [19.9, 1918.0], [20.0, 1920.0], [20.1, 1920.0], [20.2, 1922.0], [20.3, 1924.0], [20.4, 1925.0], [20.5, 1928.0], [20.6, 1928.0], [20.7, 1930.0], [20.8, 1932.0], [20.9, 1933.0], [21.0, 1935.0], [21.1, 1936.0], [21.2, 1938.0], [21.3, 1940.0], [21.4, 1941.0], [21.5, 1942.0], [21.6, 1944.0], [21.7, 1944.0], [21.8, 1946.0], [21.9, 1948.0], [22.0, 1949.0], [22.1, 1952.0], [22.2, 1953.0], [22.3, 1955.0], [22.4, 1956.0], [22.5, 1956.0], [22.6, 1957.0], [22.7, 1959.0], [22.8, 1961.0], [22.9, 1962.0], [23.0, 1964.0], [23.1, 1965.0], [23.2, 1966.0], [23.3, 1968.0], [23.4, 1968.0], [23.5, 1969.0], [23.6, 1971.0], [23.7, 1972.0], [23.8, 1972.0], [23.9, 1974.0], [24.0, 1976.0], [24.1, 1977.0], [24.2, 1979.0], [24.3, 1980.0], [24.4, 1981.0], [24.5, 1983.0], [24.6, 1984.0], [24.7, 1985.0], [24.8, 1986.0], [24.9, 1988.0], [25.0, 1989.0], [25.1, 1991.0], [25.2, 1992.0], [25.3, 1993.0], [25.4, 1994.0], [25.5, 1996.0], [25.6, 1997.0], [25.7, 1999.0], [25.8, 2000.0], [25.9, 2000.0], [26.0, 2002.0], [26.1, 2004.0], [26.2, 2005.0], [26.3, 2007.0], [26.4, 2008.0], [26.5, 2010.0], [26.6, 2012.0], [26.7, 2013.0], [26.8, 2015.0], [26.9, 2016.0], [27.0, 2017.0], [27.1, 2018.0], [27.2, 2019.0], [27.3, 2020.0], [27.4, 2021.0], [27.5, 2023.0], [27.6, 2024.0], [27.7, 2026.0], [27.8, 2028.0], [27.9, 2029.0], [28.0, 2031.0], [28.1, 2032.0], [28.2, 2033.0], [28.3, 2035.0], [28.4, 2036.0], [28.5, 2037.0], [28.6, 2039.0], [28.7, 2040.0], [28.8, 2041.0], [28.9, 2043.0], [29.0, 2044.0], [29.1, 2045.0], [29.2, 2047.0], [29.3, 2048.0], [29.4, 2048.0], [29.5, 2049.0], [29.6, 2051.0], [29.7, 2052.0], [29.8, 2053.0], [29.9, 2054.0], [30.0, 2056.0], [30.1, 2056.0], [30.2, 2058.0], [30.3, 2060.0], [30.4, 2061.0], [30.5, 2063.0], [30.6, 2064.0], [30.7, 2064.0], [30.8, 2067.0], [30.9, 2068.0], [31.0, 2069.0], [31.1, 2071.0], [31.2, 2072.0], [31.3, 2073.0], [31.4, 2075.0], [31.5, 2076.0], [31.6, 2076.0], [31.7, 2078.0], [31.8, 2079.0], [31.9, 2080.0], [32.0, 2081.0], [32.1, 2083.0], [32.2, 2084.0], [32.3, 2086.0], [32.4, 2088.0], [32.5, 2088.0], [32.6, 2091.0], [32.7, 2092.0], [32.8, 2093.0], [32.9, 2094.0], [33.0, 2096.0], [33.1, 2096.0], [33.2, 2099.0], [33.3, 2100.0], [33.4, 2101.0], [33.5, 2103.0], [33.6, 2104.0], [33.7, 2105.0], [33.8, 2106.0], [33.9, 2108.0], [34.0, 2109.0], [34.1, 2111.0], [34.2, 2111.0], [34.3, 2112.0], [34.4, 2113.0], [34.5, 2115.0], [34.6, 2116.0], [34.7, 2116.0], [34.8, 2117.0], [34.9, 2119.0], [35.0, 2121.0], [35.1, 2123.0], [35.2, 2124.0], [35.3, 2124.0], [35.4, 2126.0], [35.5, 2128.0], [35.6, 2129.0], [35.7, 2131.0], [35.8, 2132.0], [35.9, 2132.0], [36.0, 2134.0], [36.1, 2135.0], [36.2, 2136.0], [36.3, 2137.0], [36.4, 2138.0], [36.5, 2139.0], [36.6, 2140.0], [36.7, 2141.0], [36.8, 2143.0], [36.9, 2144.0], [37.0, 2144.0], [37.1, 2146.0], [37.2, 2147.0], [37.3, 2148.0], [37.4, 2150.0], [37.5, 2151.0], [37.6, 2152.0], [37.7, 2153.0], [37.8, 2155.0], [37.9, 2156.0], [38.0, 2156.0], [38.1, 2158.0], [38.2, 2159.0], [38.3, 2160.0], [38.4, 2161.0], [38.5, 2163.0], [38.6, 2164.0], [38.7, 2164.0], [38.8, 2165.0], [38.9, 2166.0], [39.0, 2167.0], [39.1, 2168.0], [39.2, 2168.0], [39.3, 2170.0], [39.4, 2171.0], [39.5, 2172.0], [39.6, 2173.0], [39.7, 2174.0], [39.8, 2175.0], [39.9, 2176.0], [40.0, 2176.0], [40.1, 2178.0], [40.2, 2180.0], [40.3, 2180.0], [40.4, 2182.0], [40.5, 2183.0], [40.6, 2184.0], [40.7, 2185.0], [40.8, 2186.0], [40.9, 2188.0], [41.0, 2189.0], [41.1, 2190.0], [41.2, 2191.0], [41.3, 2192.0], [41.4, 2195.0], [41.5, 2196.0], [41.6, 2197.0], [41.7, 2198.0], [41.8, 2199.0], [41.9, 2200.0], [42.0, 2200.0], [42.1, 2201.0], [42.2, 2203.0], [42.3, 2204.0], [42.4, 2205.0], [42.5, 2206.0], [42.6, 2208.0], [42.7, 2209.0], [42.8, 2211.0], [42.9, 2212.0], [43.0, 2213.0], [43.1, 2214.0], [43.2, 2215.0], [43.3, 2216.0], [43.4, 2217.0], [43.5, 2218.0], [43.6, 2219.0], [43.7, 2220.0], [43.8, 2220.0], [43.9, 2222.0], [44.0, 2223.0], [44.1, 2224.0], [44.2, 2224.0], [44.3, 2225.0], [44.4, 2227.0], [44.5, 2228.0], [44.6, 2229.0], [44.7, 2230.0], [44.8, 2232.0], [44.9, 2232.0], [45.0, 2234.0], [45.1, 2236.0], [45.2, 2236.0], [45.3, 2238.0], [45.4, 2239.0], [45.5, 2240.0], [45.6, 2241.0], [45.7, 2243.0], [45.8, 2244.0], [45.9, 2244.0], [46.0, 2247.0], [46.1, 2248.0], [46.2, 2249.0], [46.3, 2251.0], [46.4, 2252.0], [46.5, 2252.0], [46.6, 2254.0], [46.7, 2255.0], [46.8, 2256.0], [46.9, 2257.0], [47.0, 2259.0], [47.1, 2260.0], [47.2, 2261.0], [47.3, 2263.0], [47.4, 2264.0], [47.5, 2264.0], [47.6, 2265.0], [47.7, 2266.0], [47.8, 2268.0], [47.9, 2269.0], [48.0, 2270.0], [48.1, 2272.0], [48.2, 2273.0], [48.3, 2275.0], [48.4, 2276.0], [48.5, 2278.0], [48.6, 2280.0], [48.7, 2280.0], [48.8, 2282.0], [48.9, 2283.0], [49.0, 2284.0], [49.1, 2286.0], [49.2, 2287.0], [49.3, 2288.0], [49.4, 2290.0], [49.5, 2292.0], [49.6, 2292.0], [49.7, 2293.0], [49.8, 2295.0], [49.9, 2296.0], [50.0, 2297.0], [50.1, 2298.0], [50.2, 2299.0], [50.3, 2300.0], [50.4, 2301.0], [50.5, 2302.0], [50.6, 2303.0], [50.7, 2304.0], [50.8, 2306.0], [50.9, 2307.0], [51.0, 2308.0], [51.1, 2308.0], [51.2, 2310.0], [51.3, 2312.0], [51.4, 2313.0], [51.5, 2314.0], [51.6, 2316.0], [51.7, 2316.0], [51.8, 2317.0], [51.9, 2319.0], [52.0, 2320.0], [52.1, 2322.0], [52.2, 2323.0], [52.3, 2324.0], [52.4, 2326.0], [52.5, 2327.0], [52.6, 2328.0], [52.7, 2329.0], [52.8, 2330.0], [52.9, 2331.0], [53.0, 2332.0], [53.1, 2333.0], [53.2, 2334.0], [53.3, 2336.0], [53.4, 2336.0], [53.5, 2337.0], [53.6, 2338.0], [53.7, 2339.0], [53.8, 2340.0], [53.9, 2341.0], [54.0, 2343.0], [54.1, 2344.0], [54.2, 2346.0], [54.3, 2347.0], [54.4, 2348.0], [54.5, 2350.0], [54.6, 2351.0], [54.7, 2352.0], [54.8, 2353.0], [54.9, 2354.0], [55.0, 2355.0], [55.1, 2356.0], [55.2, 2357.0], [55.3, 2359.0], [55.4, 2360.0], [55.5, 2361.0], [55.6, 2363.0], [55.7, 2364.0], [55.8, 2365.0], [55.9, 2367.0], [56.0, 2368.0], [56.1, 2368.0], [56.2, 2370.0], [56.3, 2371.0], [56.4, 2372.0], [56.5, 2375.0], [56.6, 2376.0], [56.7, 2377.0], [56.8, 2379.0], [56.9, 2380.0], [57.0, 2380.0], [57.1, 2383.0], [57.2, 2383.0], [57.3, 2384.0], [57.4, 2386.0], [57.5, 2387.0], [57.6, 2388.0], [57.7, 2389.0], [57.8, 2391.0], [57.9, 2392.0], [58.0, 2396.0], [58.1, 2397.0], [58.2, 2399.0], [58.3, 2400.0], [58.4, 2401.0], [58.5, 2402.0], [58.6, 2403.0], [58.7, 2404.0], [58.8, 2405.0], [58.9, 2407.0], [59.0, 2408.0], [59.1, 2409.0], [59.2, 2410.0], [59.3, 2411.0], [59.4, 2412.0], [59.5, 2413.0], [59.6, 2415.0], [59.7, 2416.0], [59.8, 2417.0], [59.9, 2418.0], [60.0, 2419.0], [60.1, 2420.0], [60.2, 2422.0], [60.3, 2423.0], [60.4, 2424.0], [60.5, 2425.0], [60.6, 2426.0], [60.7, 2428.0], [60.8, 2429.0], [60.9, 2431.0], [61.0, 2432.0], [61.1, 2433.0], [61.2, 2435.0], [61.3, 2436.0], [61.4, 2437.0], [61.5, 2439.0], [61.6, 2440.0], [61.7, 2441.0], [61.8, 2443.0], [61.9, 2444.0], [62.0, 2445.0], [62.1, 2448.0], [62.2, 2449.0], [62.3, 2450.0], [62.4, 2451.0], [62.5, 2452.0], [62.6, 2453.0], [62.7, 2456.0], [62.8, 2457.0], [62.9, 2458.0], [63.0, 2459.0], [63.1, 2460.0], [63.2, 2461.0], [63.3, 2463.0], [63.4, 2464.0], [63.5, 2464.0], [63.6, 2466.0], [63.7, 2467.0], [63.8, 2468.0], [63.9, 2468.0], [64.0, 2470.0], [64.1, 2472.0], [64.2, 2474.0], [64.3, 2476.0], [64.4, 2477.0], [64.5, 2479.0], [64.6, 2480.0], [64.7, 2481.0], [64.8, 2483.0], [64.9, 2484.0], [65.0, 2486.0], [65.1, 2488.0], [65.2, 2489.0], [65.3, 2490.0], [65.4, 2491.0], [65.5, 2492.0], [65.6, 2493.0], [65.7, 2494.0], [65.8, 2496.0], [65.9, 2497.0], [66.0, 2499.0], [66.1, 2500.0], [66.2, 2501.0], [66.3, 2503.0], [66.4, 2504.0], [66.5, 2506.0], [66.6, 2508.0], [66.7, 2508.0], [66.8, 2510.0], [66.9, 2511.0], [67.0, 2513.0], [67.1, 2515.0], [67.2, 2516.0], [67.3, 2517.0], [67.4, 2519.0], [67.5, 2520.0], [67.6, 2521.0], [67.7, 2523.0], [67.8, 2524.0], [67.9, 2526.0], [68.0, 2527.0], [68.1, 2528.0], [68.2, 2530.0], [68.3, 2531.0], [68.4, 2532.0], [68.5, 2534.0], [68.6, 2535.0], [68.7, 2536.0], [68.8, 2536.0], [68.9, 2538.0], [69.0, 2539.0], [69.1, 2540.0], [69.2, 2541.0], [69.3, 2543.0], [69.4, 2544.0], [69.5, 2545.0], [69.6, 2547.0], [69.7, 2548.0], [69.8, 2549.0], [69.9, 2551.0], [70.0, 2552.0], [70.1, 2555.0], [70.2, 2556.0], [70.3, 2556.0], [70.4, 2558.0], [70.5, 2560.0], [70.6, 2561.0], [70.7, 2562.0], [70.8, 2564.0], [70.9, 2565.0], [71.0, 2567.0], [71.1, 2568.0], [71.2, 2570.0], [71.3, 2572.0], [71.4, 2572.0], [71.5, 2574.0], [71.6, 2575.0], [71.7, 2576.0], [71.8, 2578.0], [71.9, 2580.0], [72.0, 2580.0], [72.1, 2582.0], [72.2, 2583.0], [72.3, 2584.0], [72.4, 2586.0], [72.5, 2587.0], [72.6, 2589.0], [72.7, 2591.0], [72.8, 2592.0], [72.9, 2593.0], [73.0, 2595.0], [73.1, 2596.0], [73.2, 2598.0], [73.3, 2600.0], [73.4, 2601.0], [73.5, 2603.0], [73.6, 2604.0], [73.7, 2606.0], [73.8, 2607.0], [73.9, 2609.0], [74.0, 2611.0], [74.1, 2612.0], [74.2, 2613.0], [74.3, 2615.0], [74.4, 2616.0], [74.5, 2617.0], [74.6, 2619.0], [74.7, 2620.0], [74.8, 2622.0], [74.9, 2624.0], [75.0, 2626.0], [75.1, 2628.0], [75.2, 2629.0], [75.3, 2632.0], [75.4, 2632.0], [75.5, 2634.0], [75.6, 2636.0], [75.7, 2637.0], [75.8, 2640.0], [75.9, 2640.0], [76.0, 2642.0], [76.1, 2643.0], [76.2, 2644.0], [76.3, 2647.0], [76.4, 2648.0], [76.5, 2650.0], [76.6, 2652.0], [76.7, 2654.0], [76.8, 2656.0], [76.9, 2657.0], [77.0, 2658.0], [77.1, 2660.0], [77.2, 2661.0], [77.3, 2663.0], [77.4, 2665.0], [77.5, 2667.0], [77.6, 2668.0], [77.7, 2669.0], [77.8, 2672.0], [77.9, 2673.0], [78.0, 2675.0], [78.1, 2676.0], [78.2, 2679.0], [78.3, 2681.0], [78.4, 2683.0], [78.5, 2684.0], [78.6, 2686.0], [78.7, 2687.0], [78.8, 2688.0], [78.9, 2691.0], [79.0, 2693.0], [79.1, 2695.0], [79.2, 2696.0], [79.3, 2698.0], [79.4, 2700.0], [79.5, 2701.0], [79.6, 2703.0], [79.7, 2704.0], [79.8, 2707.0], [79.9, 2709.0], [80.0, 2712.0], [80.1, 2713.0], [80.2, 2716.0], [80.3, 2718.0], [80.4, 2720.0], [80.5, 2723.0], [80.6, 2725.0], [80.7, 2727.0], [80.8, 2728.0], [80.9, 2730.0], [81.0, 2732.0], [81.1, 2734.0], [81.2, 2735.0], [81.3, 2737.0], [81.4, 2739.0], [81.5, 2742.0], [81.6, 2745.0], [81.7, 2747.0], [81.8, 2748.0], [81.9, 2750.0], [82.0, 2752.0], [82.1, 2754.0], [82.2, 2756.0], [82.3, 2759.0], [82.4, 2760.0], [82.5, 2762.0], [82.6, 2764.0], [82.7, 2766.0], [82.8, 2768.0], [82.9, 2771.0], [83.0, 2773.0], [83.1, 2774.0], [83.2, 2776.0], [83.3, 2778.0], [83.4, 2780.0], [83.5, 2782.0], [83.6, 2784.0], [83.7, 2785.0], [83.8, 2787.0], [83.9, 2788.0], [84.0, 2791.0], [84.1, 2793.0], [84.2, 2796.0], [84.3, 2798.0], [84.4, 2800.0], [84.5, 2801.0], [84.6, 2803.0], [84.7, 2805.0], [84.8, 2808.0], [84.9, 2811.0], [85.0, 2813.0], [85.1, 2815.0], [85.2, 2816.0], [85.3, 2820.0], [85.4, 2822.0], [85.5, 2825.0], [85.6, 2827.0], [85.7, 2830.0], [85.8, 2832.0], [85.9, 2835.0], [86.0, 2836.0], [86.1, 2839.0], [86.2, 2841.0], [86.3, 2844.0], [86.4, 2846.0], [86.5, 2848.0], [86.6, 2851.0], [86.7, 2853.0], [86.8, 2856.0], [86.9, 2858.0], [87.0, 2861.0], [87.1, 2864.0], [87.2, 2867.0], [87.3, 2868.0], [87.4, 2872.0], [87.5, 2874.0], [87.6, 2876.0], [87.7, 2879.0], [87.8, 2882.0], [87.9, 2885.0], [88.0, 2888.0], [88.1, 2892.0], [88.2, 2894.0], [88.3, 2896.0], [88.4, 2899.0], [88.5, 2903.0], [88.6, 2906.0], [88.7, 2909.0], [88.8, 2911.0], [88.9, 2914.0], [89.0, 2916.0], [89.1, 2918.0], [89.2, 2921.0], [89.3, 2924.0], [89.4, 2927.0], [89.5, 2929.0], [89.6, 2931.0], [89.7, 2932.0], [89.8, 2935.0], [89.9, 2939.0], [90.0, 2940.0], [90.1, 2944.0], [90.2, 2947.0], [90.3, 2950.0], [90.4, 2954.0], [90.5, 2957.0], [90.6, 2960.0], [90.7, 2964.0], [90.8, 2968.0], [90.9, 2970.0], [91.0, 2973.0], [91.1, 2976.0], [91.2, 2979.0], [91.3, 2983.0], [91.4, 2985.0], [91.5, 2991.0], [91.6, 2994.0], [91.7, 2997.0], [91.8, 3000.0], [91.9, 3006.0], [92.0, 3010.0], [92.1, 3014.0], [92.2, 3017.0], [92.3, 3020.0], [92.4, 3027.0], [92.5, 3031.0], [92.6, 3033.0], [92.7, 3036.0], [92.8, 3039.0], [92.9, 3041.0], [93.0, 3044.0], [93.1, 3049.0], [93.2, 3052.0], [93.3, 3056.0], [93.4, 3059.0], [93.5, 3063.0], [93.6, 3067.0], [93.7, 3072.0], [93.8, 3076.0], [93.9, 3082.0], [94.0, 3086.0], [94.1, 3090.0], [94.2, 3093.0], [94.3, 3097.0], [94.4, 3102.0], [94.5, 3109.0], [94.6, 3116.0], [94.7, 3120.0], [94.8, 3127.0], [94.9, 3130.0], [95.0, 3135.0], [95.1, 3140.0], [95.2, 3144.0], [95.3, 3152.0], [95.4, 3159.0], [95.5, 3164.0], [95.6, 3171.0], [95.7, 3176.0], [95.8, 3183.0], [95.9, 3189.0], [96.0, 3193.0], [96.1, 3198.0], [96.2, 3205.0], [96.3, 3210.0], [96.4, 3216.0], [96.5, 3220.0], [96.6, 3228.0], [96.7, 3235.0], [96.8, 3240.0], [96.9, 3246.0], [97.0, 3256.0], [97.1, 3264.0], [97.2, 3269.0], [97.3, 3280.0], [97.4, 3285.0], [97.5, 3292.0], [97.6, 3300.0], [97.7, 3309.0], [97.8, 3320.0], [97.9, 3330.0], [98.0, 3340.0], [98.1, 3348.0], [98.2, 3360.0], [98.3, 3376.0], [98.4, 3389.0], [98.5, 3404.0], [98.6, 3417.0], [98.7, 3430.0], [98.8, 3440.0], [98.9, 3454.0], [99.0, 3476.0], [99.1, 3498.0], [99.2, 3527.0], [99.3, 3549.0], [99.4, 3584.0], [99.5, 3617.0], [99.6, 3658.0], [99.7, 3697.0], [99.8, 3740.0], [99.9, 3887.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "maxY": 15715.0, "series": [{"data": [[0.0, 15715.0], [100.0, 285.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[600.0, 5.0], [700.0, 4.0], [800.0, 9.0], [900.0, 4.0], [1000.0, 14.0], [1100.0, 26.0], [1200.0, 62.0], [1300.0, 112.0], [1400.0, 260.0], [1500.0, 352.0], [1600.0, 534.0], [1700.0, 728.0], [1800.0, 857.0], [1900.0, 1129.0], [2000.0, 1199.0], [2100.0, 1373.0], [2200.0, 1343.0], [2300.0, 1292.0], [2400.0, 1246.0], [2500.0, 1153.0], [2600.0, 970.0], [2700.0, 804.0], [2800.0, 645.0], [2900.0, 538.0], [3000.0, 412.0], [3100.0, 286.0], [3200.0, 233.0], [3300.0, 142.0], [3400.0, 104.0], [3500.0, 52.0], [3700.0, 23.0], [3600.0, 42.0], [3800.0, 9.0], [3900.0, 5.0], [4000.0, 6.0], [4100.0, 3.0], [400.0, 9.0], [500.0, 15.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 512.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 16009.0, "series": [{"data": [[0.0, 16009.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 512.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 15479.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 27.95903010033444, "minX": 1.74601644E12, "maxY": 32.0, "series": [{"data": [[1.7460165E12, 32.0], [1.7460168E12, 32.0], [1.74601686E12, 32.0], [1.74601716E12, 32.0], [1.74601746E12, 32.0], [1.74601722E12, 32.0], [1.74601656E12, 32.0], [1.74601758E12, 32.0], [1.74601662E12, 32.0], [1.74601752E12, 32.0], [1.74601692E12, 32.0], [1.74601698E12, 32.0], [1.74601764E12, 27.95903010033444], [1.74601728E12, 32.0], [1.74601734E12, 32.0], [1.74601668E12, 32.0], [1.74601674E12, 32.0], [1.74601704E12, 32.0], [1.7460171E12, 32.0], [1.74601644E12, 31.041570438799088], [1.7460174E12, 32.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74601764E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 9.4, "minX": 1.0, "maxY": 2430.285714285714, "series": [{"data": [[32.0, 75.37158435300825], [2.0, 9.5], [3.0, 9.4], [5.0, 10.0], [6.0, 11.0], [7.0, 10.75], [9.0, 15.0], [10.0, 17.75], [11.0, 15.0], [12.0, 23.769230769230766], [13.0, 45.666666666666664], [14.0, 68.8], [15.0, 68.0], [16.0, 56.61111111111111], [1.0, 10.0], [17.0, 42.0], [18.0, 30.5], [19.0, 76.90476190476188], [20.0, 12.0], [21.0, 49.66666666666667], [22.0, 69.99999999999999], [23.0, 58.166666666666664], [24.0, 63.25], [25.0, 65.08333333333334], [26.0, 60.25], [27.0, 73.81250000000001], [28.0, 73.08823529411764], [29.0, 56.4], [30.0, 66.5], [31.0, 68.22727272727272]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[31.838062500000056, 75.09456249999963]], "isOverall": false, "label": "Create CSR-Aggregated", "isController": false}, {"data": [[32.0, 2328.179483928227], [2.0, 492.3333333333333], [3.0, 515.1666666666667], [4.0, 534.0], [5.0, 578.75], [6.0, 585.4], [7.0, 672.25], [8.0, 668.0], [9.0, 785.0], [10.0, 856.1666666666666], [11.0, 887.0], [12.0, 1087.1249999999998], [13.0, 1103.6666666666667], [14.0, 1108.0], [15.0, 1112.6666666666667], [16.0, 1252.1666666666665], [1.0, 487.42857142857144], [17.0, 1313.0], [18.0, 1384.0], [19.0, 1512.7142857142858], [20.0, 1730.0], [21.0, 1651.0], [22.0, 1769.1666666666667], [23.0, 1571.3333333333333], [24.0, 2021.4166666666665], [25.0, 1872.1666666666665], [26.0, 1853.5], [27.0, 2121.533333333333], [28.0, 2172.121212121212], [29.0, 2052.2], [30.0, 2430.285714285714], [31.0, 2258.9999999999995]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}, {"data": [[31.833937499999966, 2317.9296874999955]], "isOverall": false, "label": "HTTP Request - enroll-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 32.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3060.766666666667, "minX": 1.74601644E12, "maxY": 47304.2, "series": [{"data": [[1.7460165E12, 47304.2], [1.7460168E12, 47180.4], [1.74601686E12, 46894.416666666664], [1.74601716E12, 46783.55], [1.74601746E12, 46543.433333333334], [1.74601722E12, 46412.316666666666], [1.74601656E12, 47119.45], [1.74601758E12, 45436.333333333336], [1.74601662E12, 46713.53333333333], [1.74601752E12, 46465.53333333333], [1.74601692E12, 46464.433333333334], [1.74601698E12, 46424.5], [1.74601764E12, 35725.75], [1.74601728E12, 46829.88333333333], [1.74601734E12, 47070.48333333333], [1.74601668E12, 47108.11666666667], [1.74601674E12, 47130.416666666664], [1.74601704E12, 47179.75], [1.7460171E12, 46528.73333333333], [1.74601644E12, 11974.15], [1.7460174E12, 47294.11666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7460165E12, 12303.066666666668], [1.7460168E12, 12273.5], [1.74601686E12, 12196.2], [1.74601716E12, 12165.9], [1.74601746E12, 12105.666666666666], [1.74601722E12, 12074.5], [1.74601656E12, 12256.533333333333], [1.74601758E12, 11814.633333333333], [1.74601662E12, 12150.766666666666], [1.74601752E12, 12090.966666666667], [1.74601692E12, 12089.533333333333], [1.74601698E12, 12073.966666666667], [1.74601764E12, 9348.0], [1.74601728E12, 12182.433333333332], [1.74601734E12, 12242.433333333332], [1.74601668E12, 12257.033333333333], [1.74601674E12, 12259.266666666666], [1.74601704E12, 12271.966666666667], [1.7460171E12, 12104.266666666666], [1.74601644E12, 3060.766666666667], [1.7460174E12, 12305.066666666668]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74601764E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 70.37628865979383, "minX": 1.74601644E12, "maxY": 2400.8855721393033, "series": [{"data": [[1.7460165E12, 76.15080346106294], [1.7460168E12, 75.07568238213409], [1.74601686E12, 76.15586034912721], [1.74601716E12, 75.07615480649173], [1.74601746E12, 73.61432160804017], [1.74601722E12, 76.1388888888889], [1.74601656E12, 76.85590062111801], [1.74601758E12, 74.96015424164527], [1.74601662E12, 75.48872180451134], [1.74601752E12, 75.53156565656572], [1.74601692E12, 75.43813131313136], [1.74601698E12, 76.03274559193956], [1.74601764E12, 70.37628865979383], [1.74601728E12, 74.35374999999996], [1.74601734E12, 73.52919254658394], [1.74601668E12, 75.53922789539226], [1.74601674E12, 75.15508684863525], [1.74601704E12, 76.06451612903214], [1.7460171E12, 76.0239294710327], [1.74601644E12, 72.18965517241377], [1.7460174E12, 73.89467162329608]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.7460165E12, 2301.263613861384], [1.7460168E12, 2307.848635235735], [1.74601686E12, 2322.207240948815], [1.74601716E12, 2333.7571964956205], [1.74601746E12, 2338.6855345911927], [1.74601722E12, 2329.4022698612825], [1.74601656E12, 2297.119254658385], [1.74601758E12, 2379.7654639175257], [1.74601662E12, 2334.3859649122787], [1.74601752E12, 2354.2871536523944], [1.74601692E12, 2335.2997481108337], [1.74601698E12, 2335.5775535939465], [1.74601764E12, 2106.136807817592], [1.74601728E12, 2343.8712500000006], [1.74601734E12, 2303.8644278606957], [1.74601668E12, 2307.3788819875786], [1.74601674E12, 2311.347826086957], [1.74601704E12, 2323.9900744416873], [1.7460171E12, 2327.3937106918233], [1.74601644E12, 2400.8855721393033], [1.7460174E12, 2298.3836633663336]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74601764E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74601644E12, "maxY": 2400.825870646769, "series": [{"data": [[1.7460165E12, 0.0], [1.7460168E12, 0.0], [1.74601686E12, 0.0], [1.74601716E12, 0.0], [1.74601746E12, 0.0], [1.74601722E12, 0.0], [1.74601656E12, 0.0], [1.74601758E12, 0.0], [1.74601662E12, 0.0], [1.74601752E12, 0.0], [1.74601692E12, 0.0], [1.74601698E12, 0.0], [1.74601764E12, 0.0], [1.74601728E12, 0.0], [1.74601734E12, 0.0], [1.74601668E12, 0.0], [1.74601674E12, 0.0], [1.74601704E12, 0.0], [1.7460171E12, 0.0], [1.74601644E12, 0.0], [1.7460174E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.7460165E12, 2301.240099009899], [1.7460168E12, 2307.837468982631], [1.74601686E12, 2322.1935081148554], [1.74601716E12, 2333.7559449311643], [1.74601746E12, 2338.6792452830164], [1.74601722E12, 2329.3972257250966], [1.74601656E12, 2297.1068322981355], [1.74601758E12, 2379.7590206185564], [1.74601662E12, 2334.369674185467], [1.74601752E12, 2354.283375314861], [1.74601692E12, 2335.29219143577], [1.74601698E12, 2335.572509457756], [1.74601764E12, 2106.1286644951124], [1.74601728E12, 2343.865000000003], [1.74601734E12, 2303.8594527363175], [1.74601668E12, 2307.3590062111793], [1.74601674E12, 2311.330434782609], [1.74601704E12, 2323.9826302729502], [1.7460171E12, 2327.382389937111], [1.74601644E12, 2400.825870646769], [1.7460174E12, 2298.372524752477]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74601764E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74601644E12, "maxY": 69.76119402985066, "series": [{"data": [[1.7460165E12, 0.0], [1.7460168E12, 0.0], [1.74601686E12, 0.0], [1.74601716E12, 0.0], [1.74601746E12, 0.0], [1.74601722E12, 0.0], [1.74601656E12, 0.0], [1.74601758E12, 0.0], [1.74601662E12, 0.0], [1.74601752E12, 0.0], [1.74601692E12, 0.0], [1.74601698E12, 0.0], [1.74601764E12, 0.0], [1.74601728E12, 0.0], [1.74601734E12, 0.0], [1.74601668E12, 0.0], [1.74601674E12, 0.0], [1.74601704E12, 0.0], [1.7460171E12, 0.0], [1.74601644E12, 0.0], [1.7460174E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.7460165E12, 0.38366336633663356], [1.7460168E12, 0.25930521091811404], [1.74601686E12, 0.23345817727840193], [1.74601716E12, 0.24155193992490634], [1.74601746E12, 0.2138364779874218], [1.74601722E12, 0.22824716267339248], [1.74601656E12, 0.30186335403726705], [1.74601758E12, 0.2242268041237115], [1.74601662E12, 0.35714285714285743], [1.74601752E12, 0.23551637279596951], [1.74601692E12, 0.22921914357682624], [1.74601698E12, 0.253467843631778], [1.74601764E12, 0.2671009771986975], [1.74601728E12, 0.20124999999999982], [1.74601734E12, 0.18781094527363187], [1.74601668E12, 0.2571428571428572], [1.74601674E12, 0.24720496894409935], [1.74601704E12, 0.2208436724565756], [1.7460171E12, 0.20377358490566033], [1.74601644E12, 69.76119402985066], [1.7460174E12, 0.23391089108910898]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74601764E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 9.0, "minX": 1.74601644E12, "maxY": 4154.0, "series": [{"data": [[1.7460165E12, 3803.0], [1.7460168E12, 3813.0], [1.74601686E12, 3895.0], [1.74601716E12, 3680.0], [1.74601746E12, 3959.0], [1.74601722E12, 4013.0], [1.74601656E12, 3590.0], [1.74601758E12, 3698.0], [1.74601662E12, 4032.0], [1.74601752E12, 4154.0], [1.74601692E12, 4103.0], [1.74601698E12, 3644.0], [1.74601764E12, 3753.0], [1.74601728E12, 3986.0], [1.74601734E12, 3670.0], [1.74601668E12, 3937.0], [1.74601674E12, 3683.0], [1.74601704E12, 3887.0], [1.7460171E12, 3544.0], [1.74601644E12, 3918.0], [1.7460174E12, 3728.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7460165E12, 2720.6000000000004], [1.7460168E12, 2731.1000000000004], [1.74601686E12, 2688.0], [1.74601716E12, 2732.0], [1.74601746E12, 2735.0], [1.74601722E12, 2713.4000000000005], [1.74601656E12, 2680.2000000000007], [1.74601758E12, 2747.0], [1.74601662E12, 2771.3], [1.74601752E12, 2768.3], [1.74601692E12, 2726.0], [1.74601698E12, 2726.4], [1.74601764E12, 2702.3999999999996], [1.74601728E12, 2714.700000000001], [1.74601734E12, 2651.0], [1.74601668E12, 2700.1000000000004], [1.74601674E12, 2666.3999999999996], [1.74601704E12, 2715.1000000000004], [1.7460171E12, 2708.0], [1.74601644E12, 2812.6000000000004], [1.7460174E12, 2687.2000000000003]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7460165E12, 3384.119999999999], [1.7460168E12, 3334.6099999999997], [1.74601686E12, 3419.84], [1.74601716E12, 3291.92], [1.74601746E12, 3373.399999999996], [1.74601722E12, 3438.4199999999996], [1.74601656E12, 3347.5599999999995], [1.74601758E12, 3331.3000000000006], [1.74601662E12, 3432.12], [1.74601752E12, 3442.2499999999973], [1.74601692E12, 3530.8999999999965], [1.74601698E12, 3285.8399999999992], [1.74601764E12, 3261.45], [1.74601728E12, 3320.98], [1.74601734E12, 3190.700000000001], [1.74601668E12, 3347.600000000005], [1.74601674E12, 3234.88], [1.74601704E12, 3436.959999999999], [1.7460171E12, 3257.199999999999], [1.74601644E12, 3531.099999999999], [1.7460174E12, 3160.84]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7460165E12, 2968.2999999999997], [1.7460168E12, 2965.35], [1.74601686E12, 2995.0], [1.74601716E12, 2928.8999999999996], [1.74601746E12, 3002.5999999999985], [1.74601722E12, 2940.7], [1.74601656E12, 2892.0], [1.74601758E12, 2976.5], [1.74601662E12, 3032.0], [1.74601752E12, 3003.7999999999984], [1.74601692E12, 3036.899999999999], [1.74601698E12, 2940.399999999999], [1.74601764E12, 2945.45], [1.74601728E12, 2926.3499999999976], [1.74601734E12, 2836.5], [1.74601668E12, 2903.2], [1.74601674E12, 2895.2], [1.74601704E12, 2968.7], [1.7460171E12, 2936.5], [1.74601644E12, 3036.7], [1.7460174E12, 2881.5999999999995]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7460165E12, 35.0], [1.7460168E12, 20.0], [1.74601686E12, 27.0], [1.74601716E12, 30.0], [1.74601746E12, 36.0], [1.74601722E12, 39.0], [1.74601656E12, 26.0], [1.74601758E12, 36.0], [1.74601662E12, 38.0], [1.74601752E12, 39.0], [1.74601692E12, 38.0], [1.74601698E12, 28.0], [1.74601764E12, 9.0], [1.74601728E12, 39.0], [1.74601734E12, 22.0], [1.74601668E12, 38.0], [1.74601674E12, 37.0], [1.74601704E12, 43.0], [1.7460171E12, 25.0], [1.74601644E12, 10.0], [1.7460174E12, 41.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7460165E12, 120.0], [1.7460168E12, 664.0], [1.74601686E12, 124.0], [1.74601716E12, 118.0], [1.74601746E12, 112.0], [1.74601722E12, 1087.0], [1.74601656E12, 671.5], [1.74601758E12, 112.0], [1.74601662E12, 614.0], [1.74601752E12, 1184.0], [1.74601692E12, 1147.0], [1.74601698E12, 116.0], [1.74601764E12, 530.5], [1.74601728E12, 644.0], [1.74601734E12, 112.0], [1.74601668E12, 1099.5], [1.74601674E12, 127.0], [1.74601704E12, 688.5], [1.7460171E12, 1211.0], [1.74601644E12, 99.0], [1.7460174E12, 1193.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74601764E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 88.0, "minX": 3.0, "maxY": 1775.0, "series": [{"data": [[32.0, 1314.0], [33.0, 105.0], [35.0, 1190.0], [34.0, 1156.5], [36.0, 107.0], [37.0, 1040.0], [38.0, 99.0], [39.0, 96.5], [40.0, 119.0], [41.0, 94.5], [43.0, 1775.0], [42.0, 763.0], [44.0, 89.0], [46.0, 98.0], [3.0, 477.0], [4.0, 247.0], [7.0, 486.0], [10.0, 998.0], [11.0, 501.0], [12.0, 794.5], [13.0, 110.0], [14.0, 88.0], [15.0, 1556.0], [16.0, 674.0], [17.0, 589.0], [18.0, 101.0], [19.0, 117.0], [20.0, 100.0], [21.0, 104.0], [22.0, 1355.0], [23.0, 105.0], [24.0, 120.5], [25.0, 106.0], [26.0, 1099.5], [27.0, 1343.0], [28.0, 106.0], [29.0, 611.0], [30.0, 1314.5], [31.0, 1383.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 46.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 3.0, "maxY": 1775.0, "series": [{"data": [[32.0, 1314.0], [33.0, 0.0], [35.0, 1190.0], [34.0, 1156.5], [36.0, 0.0], [37.0, 1040.0], [38.0, 0.0], [39.0, 0.0], [40.0, 0.0], [41.0, 0.0], [43.0, 1775.0], [42.0, 711.0], [44.0, 0.0], [46.0, 0.0], [3.0, 477.0], [4.0, 242.0], [7.0, 486.0], [10.0, 954.0], [11.0, 501.0], [12.0, 743.5], [13.0, 0.0], [14.0, 0.0], [15.0, 1556.0], [16.0, 624.0], [17.0, 589.0], [18.0, 0.0], [19.0, 0.0], [20.0, 0.0], [21.0, 0.0], [22.0, 1355.0], [23.0, 0.0], [24.0, 0.0], [25.0, 0.0], [26.0, 1099.5], [27.0, 1343.0], [28.0, 0.0], [29.0, 611.0], [30.0, 1314.5], [31.0, 1383.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 46.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 7.75, "minX": 1.74601644E12, "maxY": 26.95, "series": [{"data": [[1.7460165E12, 26.95], [1.7460168E12, 26.866666666666667], [1.74601686E12, 26.716666666666665], [1.74601716E12, 26.666666666666668], [1.74601746E12, 26.516666666666666], [1.74601722E12, 26.416666666666668], [1.74601656E12, 26.833333333333332], [1.74601758E12, 25.9], [1.74601662E12, 26.6], [1.74601752E12, 26.433333333333334], [1.74601692E12, 26.433333333333334], [1.74601698E12, 26.45], [1.74601764E12, 19.4], [1.74601728E12, 26.666666666666668], [1.74601734E12, 26.816666666666666], [1.74601668E12, 26.8], [1.74601674E12, 26.85], [1.74601704E12, 26.866666666666667], [1.7460171E12, 26.483333333333334], [1.74601644E12, 7.75], [1.7460174E12, 26.916666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74601764E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 3.35, "minX": 1.74601644E12, "maxY": 13.483333333333333, "series": [{"data": [[1.7460165E12, 13.483333333333333], [1.7460168E12, 13.433333333333334], [1.74601686E12, 13.366666666666667], [1.74601716E12, 13.35], [1.74601746E12, 13.266666666666667], [1.74601722E12, 13.2], [1.74601656E12, 13.416666666666666], [1.74601758E12, 12.966666666666667], [1.74601662E12, 13.3], [1.74601752E12, 13.2], [1.74601692E12, 13.2], [1.74601698E12, 13.233333333333333], [1.74601764E12, 9.7], [1.74601728E12, 13.333333333333334], [1.74601734E12, 13.416666666666666], [1.74601668E12, 13.383333333333333], [1.74601674E12, 13.433333333333334], [1.74601704E12, 13.433333333333334], [1.7460171E12, 13.233333333333333], [1.74601644E12, 3.8666666666666667], [1.7460174E12, 13.45]], "isOverall": false, "label": "0", "isController": false}, {"data": [[1.7460165E12, 13.466666666666667], [1.7460168E12, 13.433333333333334], [1.74601686E12, 13.35], [1.74601716E12, 13.316666666666666], [1.74601746E12, 13.25], [1.74601722E12, 13.216666666666667], [1.74601656E12, 13.416666666666666], [1.74601758E12, 12.933333333333334], [1.74601662E12, 13.3], [1.74601752E12, 13.233333333333333], [1.74601692E12, 13.233333333333333], [1.74601698E12, 13.216666666666667], [1.74601764E12, 10.233333333333333], [1.74601728E12, 13.333333333333334], [1.74601734E12, 13.4], [1.74601668E12, 13.416666666666666], [1.74601674E12, 13.416666666666666], [1.74601704E12, 13.433333333333334], [1.7460171E12, 13.25], [1.74601644E12, 3.35], [1.7460174E12, 13.466666666666667]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74601764E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 3.35, "minX": 1.74601644E12, "maxY": 13.483333333333333, "series": [{"data": [[1.7460165E12, 13.466666666666667], [1.7460168E12, 13.433333333333334], [1.74601686E12, 13.35], [1.74601716E12, 13.316666666666666], [1.74601746E12, 13.25], [1.74601722E12, 13.216666666666667], [1.74601656E12, 13.416666666666666], [1.74601758E12, 12.933333333333334], [1.74601662E12, 13.3], [1.74601752E12, 13.233333333333333], [1.74601692E12, 13.233333333333333], [1.74601698E12, 13.216666666666667], [1.74601764E12, 10.233333333333333], [1.74601728E12, 13.333333333333334], [1.74601734E12, 13.4], [1.74601668E12, 13.416666666666666], [1.74601674E12, 13.416666666666666], [1.74601704E12, 13.433333333333334], [1.7460171E12, 13.25], [1.74601644E12, 3.35], [1.7460174E12, 13.466666666666667]], "isOverall": false, "label": "HTTP Request - enroll-success", "isController": false}, {"data": [[1.7460165E12, 13.483333333333333], [1.7460168E12, 13.433333333333334], [1.74601686E12, 13.366666666666667], [1.74601716E12, 13.35], [1.74601746E12, 13.266666666666667], [1.74601722E12, 13.2], [1.74601656E12, 13.416666666666666], [1.74601758E12, 12.966666666666667], [1.74601662E12, 13.3], [1.74601752E12, 13.2], [1.74601692E12, 13.2], [1.74601698E12, 13.233333333333333], [1.74601764E12, 9.7], [1.74601728E12, 13.333333333333334], [1.74601734E12, 13.416666666666666], [1.74601668E12, 13.383333333333333], [1.74601674E12, 13.433333333333334], [1.74601704E12, 13.433333333333334], [1.7460171E12, 13.233333333333333], [1.74601644E12, 3.8666666666666667], [1.7460174E12, 13.45]], "isOverall": false, "label": "Create CSR-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74601764E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 7.216666666666667, "minX": 1.74601644E12, "maxY": 26.95, "series": [{"data": [[1.7460165E12, 26.95], [1.7460168E12, 26.866666666666667], [1.74601686E12, 26.716666666666665], [1.74601716E12, 26.666666666666668], [1.74601746E12, 26.516666666666666], [1.74601722E12, 26.416666666666668], [1.74601656E12, 26.833333333333332], [1.74601758E12, 25.9], [1.74601662E12, 26.6], [1.74601752E12, 26.433333333333334], [1.74601692E12, 26.433333333333334], [1.74601698E12, 26.45], [1.74601764E12, 19.933333333333334], [1.74601728E12, 26.666666666666668], [1.74601734E12, 26.816666666666666], [1.74601668E12, 26.8], [1.74601674E12, 26.85], [1.74601704E12, 26.866666666666667], [1.7460171E12, 26.483333333333334], [1.74601644E12, 7.216666666666667], [1.7460174E12, 26.916666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74601764E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

