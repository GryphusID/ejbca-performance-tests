/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 25.0, "minX": 0.0, "maxY": 14760.0, "series": [{"data": [[0.0, 144.0], [0.1, 191.0], [0.2, 215.0], [0.3, 249.0], [0.4, 278.0], [0.5, 306.0], [0.6, 317.0], [0.7, 343.0], [0.8, 367.0], [0.9, 381.0], [1.0, 398.0], [1.1, 408.0], [1.2, 424.0], [1.3, 435.0], [1.4, 447.0], [1.5, 456.0], [1.6, 463.0], [1.7, 471.0], [1.8, 478.0], [1.9, 482.0], [2.0, 488.0], [2.1, 495.0], [2.2, 500.0], [2.3, 509.0], [2.4, 519.0], [2.5, 525.0], [2.6, 531.0], [2.7, 538.0], [2.8, 542.0], [2.9, 547.0], [3.0, 554.0], [3.1, 560.0], [3.2, 565.0], [3.3, 571.0], [3.4, 577.0], [3.5, 580.0], [3.6, 583.0], [3.7, 587.0], [3.8, 592.0], [3.9, 596.0], [4.0, 602.0], [4.1, 608.0], [4.2, 611.0], [4.3, 614.0], [4.4, 617.0], [4.5, 620.0], [4.6, 626.0], [4.7, 630.0], [4.8, 632.0], [4.9, 638.0], [5.0, 642.0], [5.1, 645.0], [5.2, 649.0], [5.3, 655.0], [5.4, 658.0], [5.5, 661.0], [5.6, 665.0], [5.7, 668.0], [5.8, 671.0], [5.9, 674.0], [6.0, 677.0], [6.1, 680.0], [6.2, 684.0], [6.3, 687.0], [6.4, 689.0], [6.5, 692.0], [6.6, 696.0], [6.7, 701.0], [6.8, 705.0], [6.9, 707.0], [7.0, 710.0], [7.1, 713.0], [7.2, 716.0], [7.3, 719.0], [7.4, 723.0], [7.5, 726.0], [7.6, 729.0], [7.7, 733.0], [7.8, 735.0], [7.9, 740.0], [8.0, 742.0], [8.1, 745.0], [8.2, 748.0], [8.3, 751.0], [8.4, 753.0], [8.5, 756.0], [8.6, 759.0], [8.7, 761.0], [8.8, 763.0], [8.9, 766.0], [9.0, 770.0], [9.1, 773.0], [9.2, 776.0], [9.3, 781.0], [9.4, 785.0], [9.5, 788.0], [9.6, 791.0], [9.7, 793.0], [9.8, 796.0], [9.9, 798.0], [10.0, 802.0], [10.1, 804.0], [10.2, 808.0], [10.3, 811.0], [10.4, 813.0], [10.5, 815.0], [10.6, 817.0], [10.7, 820.0], [10.8, 822.0], [10.9, 825.0], [11.0, 827.0], [11.1, 831.0], [11.2, 832.0], [11.3, 834.0], [11.4, 836.0], [11.5, 840.0], [11.6, 842.0], [11.7, 844.0], [11.8, 846.0], [11.9, 849.0], [12.0, 851.0], [12.1, 854.0], [12.2, 857.0], [12.3, 859.0], [12.4, 861.0], [12.5, 863.0], [12.6, 865.0], [12.7, 869.0], [12.8, 871.0], [12.9, 873.0], [13.0, 875.0], [13.1, 879.0], [13.2, 880.0], [13.3, 883.0], [13.4, 885.0], [13.5, 888.0], [13.6, 890.0], [13.7, 894.0], [13.8, 896.0], [13.9, 899.0], [14.0, 902.0], [14.1, 904.0], [14.2, 907.0], [14.3, 909.0], [14.4, 912.0], [14.5, 914.0], [14.6, 916.0], [14.7, 919.0], [14.8, 921.0], [14.9, 924.0], [15.0, 927.0], [15.1, 930.0], [15.2, 933.0], [15.3, 936.0], [15.4, 939.0], [15.5, 941.0], [15.6, 944.0], [15.7, 946.0], [15.8, 948.0], [15.9, 949.0], [16.0, 951.0], [16.1, 953.0], [16.2, 954.0], [16.3, 957.0], [16.4, 960.0], [16.5, 963.0], [16.6, 965.0], [16.7, 968.0], [16.8, 971.0], [16.9, 974.0], [17.0, 977.0], [17.1, 980.0], [17.2, 983.0], [17.3, 985.0], [17.4, 988.0], [17.5, 990.0], [17.6, 992.0], [17.7, 994.0], [17.8, 997.0], [17.9, 1001.0], [18.0, 1002.0], [18.1, 1005.0], [18.2, 1007.0], [18.3, 1009.0], [18.4, 1011.0], [18.5, 1014.0], [18.6, 1016.0], [18.7, 1019.0], [18.8, 1021.0], [18.9, 1024.0], [19.0, 1025.0], [19.1, 1028.0], [19.2, 1030.0], [19.3, 1033.0], [19.4, 1035.0], [19.5, 1038.0], [19.6, 1040.0], [19.7, 1042.0], [19.8, 1045.0], [19.9, 1046.0], [20.0, 1049.0], [20.1, 1050.0], [20.2, 1052.0], [20.3, 1055.0], [20.4, 1057.0], [20.5, 1059.0], [20.6, 1061.0], [20.7, 1063.0], [20.8, 1065.0], [20.9, 1068.0], [21.0, 1070.0], [21.1, 1072.0], [21.2, 1075.0], [21.3, 1076.0], [21.4, 1079.0], [21.5, 1081.0], [21.6, 1083.0], [21.7, 1085.0], [21.8, 1087.0], [21.9, 1089.0], [22.0, 1092.0], [22.1, 1094.0], [22.2, 1096.0], [22.3, 1098.0], [22.4, 1101.0], [22.5, 1103.0], [22.6, 1105.0], [22.7, 1108.0], [22.8, 1110.0], [22.9, 1113.0], [23.0, 1116.0], [23.1, 1118.0], [23.2, 1120.0], [23.3, 1122.0], [23.4, 1124.0], [23.5, 1126.0], [23.6, 1128.0], [23.7, 1131.0], [23.8, 1133.0], [23.9, 1136.0], [24.0, 1138.0], [24.1, 1140.0], [24.2, 1142.0], [24.3, 1145.0], [24.4, 1146.0], [24.5, 1149.0], [24.6, 1151.0], [24.7, 1153.0], [24.8, 1156.0], [24.9, 1158.0], [25.0, 1160.0], [25.1, 1162.0], [25.2, 1165.0], [25.3, 1167.0], [25.4, 1168.0], [25.5, 1171.0], [25.6, 1173.0], [25.7, 1176.0], [25.8, 1177.0], [25.9, 1179.0], [26.0, 1181.0], [26.1, 1183.0], [26.2, 1185.0], [26.3, 1188.0], [26.4, 1190.0], [26.5, 1192.0], [26.6, 1195.0], [26.7, 1197.0], [26.8, 1199.0], [26.9, 1201.0], [27.0, 1203.0], [27.1, 1206.0], [27.2, 1208.0], [27.3, 1211.0], [27.4, 1213.0], [27.5, 1216.0], [27.6, 1219.0], [27.7, 1221.0], [27.8, 1224.0], [27.9, 1226.0], [28.0, 1228.0], [28.1, 1231.0], [28.2, 1234.0], [28.3, 1236.0], [28.4, 1239.0], [28.5, 1241.0], [28.6, 1243.0], [28.7, 1245.0], [28.8, 1248.0], [28.9, 1249.0], [29.0, 1252.0], [29.1, 1254.0], [29.2, 1257.0], [29.3, 1259.0], [29.4, 1261.0], [29.5, 1263.0], [29.6, 1265.0], [29.7, 1268.0], [29.8, 1269.0], [29.9, 1271.0], [30.0, 1274.0], [30.1, 1276.0], [30.2, 1279.0], [30.3, 1282.0], [30.4, 1284.0], [30.5, 1287.0], [30.6, 1289.0], [30.7, 1291.0], [30.8, 1293.0], [30.9, 1296.0], [31.0, 1299.0], [31.1, 1301.0], [31.2, 1303.0], [31.3, 1305.0], [31.4, 1308.0], [31.5, 1310.0], [31.6, 1312.0], [31.7, 1314.0], [31.8, 1316.0], [31.9, 1318.0], [32.0, 1321.0], [32.1, 1323.0], [32.2, 1325.0], [32.3, 1327.0], [32.4, 1330.0], [32.5, 1333.0], [32.6, 1335.0], [32.7, 1337.0], [32.8, 1339.0], [32.9, 1341.0], [33.0, 1343.0], [33.1, 1345.0], [33.2, 1348.0], [33.3, 1351.0], [33.4, 1353.0], [33.5, 1355.0], [33.6, 1358.0], [33.7, 1361.0], [33.8, 1363.0], [33.9, 1364.0], [34.0, 1367.0], [34.1, 1370.0], [34.2, 1374.0], [34.3, 1376.0], [34.4, 1379.0], [34.5, 1382.0], [34.6, 1384.0], [34.7, 1386.0], [34.8, 1389.0], [34.9, 1391.0], [35.0, 1393.0], [35.1, 1395.0], [35.2, 1398.0], [35.3, 1399.0], [35.4, 1401.0], [35.5, 1403.0], [35.6, 1405.0], [35.7, 1407.0], [35.8, 1410.0], [35.9, 1413.0], [36.0, 1416.0], [36.1, 1419.0], [36.2, 1422.0], [36.3, 1423.0], [36.4, 1426.0], [36.5, 1427.0], [36.6, 1429.0], [36.7, 1432.0], [36.8, 1435.0], [36.9, 1437.0], [37.0, 1440.0], [37.1, 1443.0], [37.2, 1444.0], [37.3, 1448.0], [37.4, 1451.0], [37.5, 1453.0], [37.6, 1455.0], [37.7, 1457.0], [37.8, 1460.0], [37.9, 1462.0], [38.0, 1464.0], [38.1, 1466.0], [38.2, 1469.0], [38.3, 1472.0], [38.4, 1474.0], [38.5, 1477.0], [38.6, 1479.0], [38.7, 1481.0], [38.8, 1484.0], [38.9, 1486.0], [39.0, 1488.0], [39.1, 1491.0], [39.2, 1494.0], [39.3, 1496.0], [39.4, 1498.0], [39.5, 1501.0], [39.6, 1503.0], [39.7, 1507.0], [39.8, 1510.0], [39.9, 1512.0], [40.0, 1515.0], [40.1, 1518.0], [40.2, 1523.0], [40.3, 1524.0], [40.4, 1527.0], [40.5, 1528.0], [40.6, 1531.0], [40.7, 1533.0], [40.8, 1536.0], [40.9, 1539.0], [41.0, 1543.0], [41.1, 1544.0], [41.2, 1547.0], [41.3, 1549.0], [41.4, 1551.0], [41.5, 1553.0], [41.6, 1555.0], [41.7, 1557.0], [41.8, 1561.0], [41.9, 1563.0], [42.0, 1565.0], [42.1, 1568.0], [42.2, 1569.0], [42.3, 1572.0], [42.4, 1574.0], [42.5, 1578.0], [42.6, 1581.0], [42.7, 1583.0], [42.8, 1586.0], [42.9, 1588.0], [43.0, 1591.0], [43.1, 1594.0], [43.2, 1595.0], [43.3, 1600.0], [43.4, 1603.0], [43.5, 1605.0], [43.6, 1607.0], [43.7, 1608.0], [43.8, 1612.0], [43.9, 1615.0], [44.0, 1617.0], [44.1, 1619.0], [44.2, 1622.0], [44.3, 1625.0], [44.4, 1627.0], [44.5, 1629.0], [44.6, 1632.0], [44.7, 1635.0], [44.8, 1637.0], [44.9, 1639.0], [45.0, 1641.0], [45.1, 1644.0], [45.2, 1647.0], [45.3, 1648.0], [45.4, 1651.0], [45.5, 1654.0], [45.6, 1657.0], [45.7, 1659.0], [45.8, 1662.0], [45.9, 1664.0], [46.0, 1667.0], [46.1, 1669.0], [46.2, 1672.0], [46.3, 1674.0], [46.4, 1676.0], [46.5, 1680.0], [46.6, 1682.0], [46.7, 1685.0], [46.8, 1689.0], [46.9, 1692.0], [47.0, 1695.0], [47.1, 1698.0], [47.2, 1700.0], [47.3, 1703.0], [47.4, 1705.0], [47.5, 1707.0], [47.6, 1709.0], [47.7, 1712.0], [47.8, 1716.0], [47.9, 1720.0], [48.0, 1722.0], [48.1, 1725.0], [48.2, 1728.0], [48.3, 1731.0], [48.4, 1734.0], [48.5, 1735.0], [48.6, 1738.0], [48.7, 1741.0], [48.8, 1744.0], [48.9, 1746.0], [49.0, 1749.0], [49.1, 1752.0], [49.2, 1754.0], [49.3, 1757.0], [49.4, 1760.0], [49.5, 1763.0], [49.6, 1765.0], [49.7, 1768.0], [49.8, 1771.0], [49.9, 1773.0], [50.0, 1776.0], [50.1, 1778.0], [50.2, 1783.0], [50.3, 1787.0], [50.4, 1791.0], [50.5, 1793.0], [50.6, 1797.0], [50.7, 1800.0], [50.8, 1804.0], [50.9, 1806.0], [51.0, 1809.0], [51.1, 1811.0], [51.2, 1812.0], [51.3, 1817.0], [51.4, 1821.0], [51.5, 1823.0], [51.6, 1826.0], [51.7, 1828.0], [51.8, 1832.0], [51.9, 1835.0], [52.0, 1837.0], [52.1, 1840.0], [52.2, 1842.0], [52.3, 1845.0], [52.4, 1848.0], [52.5, 1850.0], [52.6, 1853.0], [52.7, 1857.0], [52.8, 1859.0], [52.9, 1863.0], [53.0, 1866.0], [53.1, 1870.0], [53.2, 1872.0], [53.3, 1874.0], [53.4, 1876.0], [53.5, 1880.0], [53.6, 1883.0], [53.7, 1885.0], [53.8, 1889.0], [53.9, 1891.0], [54.0, 1894.0], [54.1, 1897.0], [54.2, 1900.0], [54.3, 1903.0], [54.4, 1905.0], [54.5, 1908.0], [54.6, 1912.0], [54.7, 1915.0], [54.8, 1917.0], [54.9, 1920.0], [55.0, 1924.0], [55.1, 1926.0], [55.2, 1927.0], [55.3, 1930.0], [55.4, 1932.0], [55.5, 1934.0], [55.6, 1936.0], [55.7, 1938.0], [55.8, 1940.0], [55.9, 1943.0], [56.0, 1946.0], [56.1, 1948.0], [56.2, 1952.0], [56.3, 1956.0], [56.4, 1959.0], [56.5, 1960.0], [56.6, 1963.0], [56.7, 1967.0], [56.8, 1970.0], [56.9, 1973.0], [57.0, 1976.0], [57.1, 1978.0], [57.2, 1980.0], [57.3, 1984.0], [57.4, 1987.0], [57.5, 1990.0], [57.6, 1993.0], [57.7, 1995.0], [57.8, 1998.0], [57.9, 2000.0], [58.0, 2004.0], [58.1, 2008.0], [58.2, 2011.0], [58.3, 2013.0], [58.4, 2016.0], [58.5, 2019.0], [58.6, 2024.0], [58.7, 2028.0], [58.8, 2031.0], [58.9, 2035.0], [59.0, 2037.0], [59.1, 2041.0], [59.2, 2044.0], [59.3, 2047.0], [59.4, 2050.0], [59.5, 2052.0], [59.6, 2056.0], [59.7, 2059.0], [59.8, 2061.0], [59.9, 2064.0], [60.0, 2068.0], [60.1, 2072.0], [60.2, 2076.0], [60.3, 2080.0], [60.4, 2082.0], [60.5, 2085.0], [60.6, 2088.0], [60.7, 2091.0], [60.8, 2095.0], [60.9, 2100.0], [61.0, 2104.0], [61.1, 2108.0], [61.2, 2111.0], [61.3, 2114.0], [61.4, 2118.0], [61.5, 2120.0], [61.6, 2124.0], [61.7, 2127.0], [61.8, 2130.0], [61.9, 2133.0], [62.0, 2136.0], [62.1, 2139.0], [62.2, 2143.0], [62.3, 2145.0], [62.4, 2148.0], [62.5, 2151.0], [62.6, 2154.0], [62.7, 2157.0], [62.8, 2159.0], [62.9, 2161.0], [63.0, 2165.0], [63.1, 2168.0], [63.2, 2170.0], [63.3, 2175.0], [63.4, 2180.0], [63.5, 2184.0], [63.6, 2186.0], [63.7, 2189.0], [63.8, 2192.0], [63.9, 2195.0], [64.0, 2199.0], [64.1, 2203.0], [64.2, 2208.0], [64.3, 2211.0], [64.4, 2214.0], [64.5, 2217.0], [64.6, 2222.0], [64.7, 2228.0], [64.8, 2232.0], [64.9, 2236.0], [65.0, 2240.0], [65.1, 2243.0], [65.2, 2247.0], [65.3, 2251.0], [65.4, 2253.0], [65.5, 2256.0], [65.6, 2259.0], [65.7, 2264.0], [65.8, 2268.0], [65.9, 2272.0], [66.0, 2276.0], [66.1, 2280.0], [66.2, 2283.0], [66.3, 2287.0], [66.4, 2290.0], [66.5, 2294.0], [66.6, 2298.0], [66.7, 2300.0], [66.8, 2303.0], [66.9, 2307.0], [67.0, 2310.0], [67.1, 2313.0], [67.2, 2316.0], [67.3, 2318.0], [67.4, 2323.0], [67.5, 2326.0], [67.6, 2332.0], [67.7, 2335.0], [67.8, 2339.0], [67.9, 2342.0], [68.0, 2345.0], [68.1, 2350.0], [68.2, 2353.0], [68.3, 2357.0], [68.4, 2361.0], [68.5, 2363.0], [68.6, 2367.0], [68.7, 2371.0], [68.8, 2376.0], [68.9, 2378.0], [69.0, 2380.0], [69.1, 2385.0], [69.2, 2390.0], [69.3, 2393.0], [69.4, 2397.0], [69.5, 2401.0], [69.6, 2406.0], [69.7, 2411.0], [69.8, 2415.0], [69.9, 2419.0], [70.0, 2421.0], [70.1, 2424.0], [70.2, 2429.0], [70.3, 2432.0], [70.4, 2439.0], [70.5, 2442.0], [70.6, 2446.0], [70.7, 2450.0], [70.8, 2454.0], [70.9, 2458.0], [71.0, 2464.0], [71.1, 2468.0], [71.2, 2472.0], [71.3, 2477.0], [71.4, 2481.0], [71.5, 2485.0], [71.6, 2489.0], [71.7, 2494.0], [71.8, 2497.0], [71.9, 2501.0], [72.0, 2506.0], [72.1, 2510.0], [72.2, 2516.0], [72.3, 2519.0], [72.4, 2524.0], [72.5, 2528.0], [72.6, 2533.0], [72.7, 2537.0], [72.8, 2542.0], [72.9, 2545.0], [73.0, 2549.0], [73.1, 2553.0], [73.2, 2558.0], [73.3, 2564.0], [73.4, 2569.0], [73.5, 2574.0], [73.6, 2578.0], [73.7, 2582.0], [73.8, 2586.0], [73.9, 2591.0], [74.0, 2597.0], [74.1, 2600.0], [74.2, 2605.0], [74.3, 2609.0], [74.4, 2612.0], [74.5, 2616.0], [74.6, 2621.0], [74.7, 2626.0], [74.8, 2631.0], [74.9, 2636.0], [75.0, 2643.0], [75.1, 2648.0], [75.2, 2654.0], [75.3, 2658.0], [75.4, 2661.0], [75.5, 2666.0], [75.6, 2672.0], [75.7, 2678.0], [75.8, 2684.0], [75.9, 2688.0], [76.0, 2692.0], [76.1, 2698.0], [76.2, 2704.0], [76.3, 2710.0], [76.4, 2714.0], [76.5, 2718.0], [76.6, 2722.0], [76.7, 2727.0], [76.8, 2732.0], [76.9, 2738.0], [77.0, 2743.0], [77.1, 2748.0], [77.2, 2755.0], [77.3, 2761.0], [77.4, 2767.0], [77.5, 2772.0], [77.6, 2774.0], [77.7, 2780.0], [77.8, 2784.0], [77.9, 2790.0], [78.0, 2796.0], [78.1, 2804.0], [78.2, 2808.0], [78.3, 2815.0], [78.4, 2819.0], [78.5, 2823.0], [78.6, 2828.0], [78.7, 2832.0], [78.8, 2837.0], [78.9, 2842.0], [79.0, 2850.0], [79.1, 2853.0], [79.2, 2859.0], [79.3, 2863.0], [79.4, 2868.0], [79.5, 2875.0], [79.6, 2881.0], [79.7, 2887.0], [79.8, 2894.0], [79.9, 2899.0], [80.0, 2905.0], [80.1, 2912.0], [80.2, 2918.0], [80.3, 2926.0], [80.4, 2932.0], [80.5, 2937.0], [80.6, 2944.0], [80.7, 2950.0], [80.8, 2956.0], [80.9, 2960.0], [81.0, 2964.0], [81.1, 2970.0], [81.2, 2979.0], [81.3, 2984.0], [81.4, 2990.0], [81.5, 2997.0], [81.6, 3004.0], [81.7, 3010.0], [81.8, 3017.0], [81.9, 3022.0], [82.0, 3028.0], [82.1, 3036.0], [82.2, 3041.0], [82.3, 3049.0], [82.4, 3057.0], [82.5, 3066.0], [82.6, 3071.0], [82.7, 3076.0], [82.8, 3081.0], [82.9, 3088.0], [83.0, 3092.0], [83.1, 3101.0], [83.2, 3108.0], [83.3, 3117.0], [83.4, 3121.0], [83.5, 3127.0], [83.6, 3136.0], [83.7, 3144.0], [83.8, 3151.0], [83.9, 3157.0], [84.0, 3161.0], [84.1, 3167.0], [84.2, 3176.0], [84.3, 3184.0], [84.4, 3193.0], [84.5, 3201.0], [84.6, 3209.0], [84.7, 3215.0], [84.8, 3221.0], [84.9, 3224.0], [85.0, 3233.0], [85.1, 3241.0], [85.2, 3247.0], [85.3, 3255.0], [85.4, 3268.0], [85.5, 3273.0], [85.6, 3282.0], [85.7, 3291.0], [85.8, 3300.0], [85.9, 3308.0], [86.0, 3318.0], [86.1, 3327.0], [86.2, 3336.0], [86.3, 3346.0], [86.4, 3356.0], [86.5, 3365.0], [86.6, 3371.0], [86.7, 3379.0], [86.8, 3386.0], [86.9, 3393.0], [87.0, 3402.0], [87.1, 3414.0], [87.2, 3426.0], [87.3, 3430.0], [87.4, 3440.0], [87.5, 3446.0], [87.6, 3458.0], [87.7, 3464.0], [87.8, 3475.0], [87.9, 3488.0], [88.0, 3493.0], [88.1, 3501.0], [88.2, 3511.0], [88.3, 3520.0], [88.4, 3526.0], [88.5, 3536.0], [88.6, 3544.0], [88.7, 3550.0], [88.8, 3559.0], [88.9, 3567.0], [89.0, 3573.0], [89.1, 3581.0], [89.2, 3592.0], [89.3, 3600.0], [89.4, 3610.0], [89.5, 3621.0], [89.6, 3628.0], [89.7, 3639.0], [89.8, 3649.0], [89.9, 3664.0], [90.0, 3674.0], [90.1, 3685.0], [90.2, 3704.0], [90.3, 3719.0], [90.4, 3734.0], [90.5, 3748.0], [90.6, 3757.0], [90.7, 3765.0], [90.8, 3774.0], [90.9, 3787.0], [91.0, 3796.0], [91.1, 3807.0], [91.2, 3816.0], [91.3, 3828.0], [91.4, 3838.0], [91.5, 3853.0], [91.6, 3864.0], [91.7, 3876.0], [91.8, 3889.0], [91.9, 3898.0], [92.0, 3909.0], [92.1, 3930.0], [92.2, 3946.0], [92.3, 3963.0], [92.4, 3977.0], [92.5, 3990.0], [92.6, 4001.0], [92.7, 4016.0], [92.8, 4025.0], [92.9, 4036.0], [93.0, 4059.0], [93.1, 4078.0], [93.2, 4106.0], [93.3, 4125.0], [93.4, 4138.0], [93.5, 4147.0], [93.6, 4170.0], [93.7, 4195.0], [93.8, 4212.0], [93.9, 4228.0], [94.0, 4246.0], [94.1, 4267.0], [94.2, 4286.0], [94.3, 4298.0], [94.4, 4311.0], [94.5, 4343.0], [94.6, 4362.0], [94.7, 4388.0], [94.8, 4412.0], [94.9, 4428.0], [95.0, 4450.0], [95.1, 4478.0], [95.2, 4494.0], [95.3, 4520.0], [95.4, 4538.0], [95.5, 4572.0], [95.6, 4605.0], [95.7, 4637.0], [95.8, 4666.0], [95.9, 4691.0], [96.0, 4723.0], [96.1, 4751.0], [96.2, 4786.0], [96.3, 4813.0], [96.4, 4844.0], [96.5, 4872.0], [96.6, 4897.0], [96.7, 4934.0], [96.8, 4962.0], [96.9, 4992.0], [97.0, 5041.0], [97.1, 5073.0], [97.2, 5103.0], [97.3, 5139.0], [97.4, 5172.0], [97.5, 5217.0], [97.6, 5261.0], [97.7, 5303.0], [97.8, 5350.0], [97.9, 5412.0], [98.0, 5457.0], [98.1, 5517.0], [98.2, 5586.0], [98.3, 5663.0], [98.4, 5741.0], [98.5, 5798.0], [98.6, 5869.0], [98.7, 5959.0], [98.8, 6057.0], [98.9, 6118.0], [99.0, 6171.0], [99.1, 6274.0], [99.2, 6434.0], [99.3, 6587.0], [99.4, 6765.0], [99.5, 6983.0], [99.6, 7153.0], [99.7, 7465.0], [99.8, 7822.0], [99.9, 8505.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 25.0], [0.1, 28.0], [0.2, 29.0], [0.3, 31.0], [0.4, 34.0], [0.5, 34.0], [0.6, 35.0], [0.7, 35.0], [0.8, 35.0], [0.9, 35.0], [1.0, 35.0], [1.1, 35.0], [1.2, 35.0], [1.3, 35.0], [1.4, 35.0], [1.5, 36.0], [1.6, 36.0], [1.7, 36.0], [1.8, 36.0], [1.9, 36.0], [2.0, 36.0], [2.1, 36.0], [2.2, 36.0], [2.3, 36.0], [2.4, 36.0], [2.5, 36.0], [2.6, 36.0], [2.7, 36.0], [2.8, 36.0], [2.9, 36.0], [3.0, 36.0], [3.1, 36.0], [3.2, 36.0], [3.3, 36.0], [3.4, 36.0], [3.5, 36.0], [3.6, 36.0], [3.7, 37.0], [3.8, 37.0], [3.9, 37.0], [4.0, 37.0], [4.1, 37.0], [4.2, 37.0], [4.3, 37.0], [4.4, 37.0], [4.5, 37.0], [4.6, 37.0], [4.7, 37.0], [4.8, 37.0], [4.9, 37.0], [5.0, 37.0], [5.1, 37.0], [5.2, 37.0], [5.3, 37.0], [5.4, 37.0], [5.5, 37.0], [5.6, 37.0], [5.7, 37.0], [5.8, 37.0], [5.9, 37.0], [6.0, 37.0], [6.1, 37.0], [6.2, 37.0], [6.3, 37.0], [6.4, 37.0], [6.5, 37.0], [6.6, 37.0], [6.7, 37.0], [6.8, 37.0], [6.9, 37.0], [7.0, 37.0], [7.1, 37.0], [7.2, 37.0], [7.3, 38.0], [7.4, 38.0], [7.5, 38.0], [7.6, 38.0], [7.7, 38.0], [7.8, 38.0], [7.9, 38.0], [8.0, 38.0], [8.1, 38.0], [8.2, 38.0], [8.3, 38.0], [8.4, 38.0], [8.5, 38.0], [8.6, 38.0], [8.7, 38.0], [8.8, 38.0], [8.9, 38.0], [9.0, 38.0], [9.1, 38.0], [9.2, 38.0], [9.3, 38.0], [9.4, 38.0], [9.5, 38.0], [9.6, 38.0], [9.7, 38.0], [9.8, 38.0], [9.9, 38.0], [10.0, 38.0], [10.1, 38.0], [10.2, 38.0], [10.3, 38.0], [10.4, 38.0], [10.5, 38.0], [10.6, 38.0], [10.7, 38.0], [10.8, 38.0], [10.9, 38.0], [11.0, 38.0], [11.1, 38.0], [11.2, 38.0], [11.3, 38.0], [11.4, 38.0], [11.5, 38.0], [11.6, 38.0], [11.7, 38.0], [11.8, 38.0], [11.9, 38.0], [12.0, 38.0], [12.1, 38.0], [12.2, 38.0], [12.3, 38.0], [12.4, 38.0], [12.5, 38.0], [12.6, 38.0], [12.7, 38.0], [12.8, 39.0], [12.9, 39.0], [13.0, 39.0], [13.1, 39.0], [13.2, 39.0], [13.3, 39.0], [13.4, 39.0], [13.5, 39.0], [13.6, 39.0], [13.7, 39.0], [13.8, 39.0], [13.9, 39.0], [14.0, 39.0], [14.1, 39.0], [14.2, 39.0], [14.3, 39.0], [14.4, 39.0], [14.5, 39.0], [14.6, 39.0], [14.7, 39.0], [14.8, 39.0], [14.9, 39.0], [15.0, 39.0], [15.1, 39.0], [15.2, 39.0], [15.3, 39.0], [15.4, 39.0], [15.5, 39.0], [15.6, 39.0], [15.7, 39.0], [15.8, 39.0], [15.9, 39.0], [16.0, 39.0], [16.1, 39.0], [16.2, 39.0], [16.3, 39.0], [16.4, 39.0], [16.5, 39.0], [16.6, 39.0], [16.7, 39.0], [16.8, 39.0], [16.9, 39.0], [17.0, 39.0], [17.1, 39.0], [17.2, 39.0], [17.3, 39.0], [17.4, 39.0], [17.5, 39.0], [17.6, 39.0], [17.7, 39.0], [17.8, 39.0], [17.9, 39.0], [18.0, 39.0], [18.1, 39.0], [18.2, 39.0], [18.3, 39.0], [18.4, 39.0], [18.5, 39.0], [18.6, 39.0], [18.7, 39.0], [18.8, 39.0], [18.9, 39.0], [19.0, 39.0], [19.1, 39.0], [19.2, 39.0], [19.3, 39.0], [19.4, 39.0], [19.5, 39.0], [19.6, 39.0], [19.7, 39.0], [19.8, 39.0], [19.9, 39.0], [20.0, 39.0], [20.1, 39.0], [20.2, 39.0], [20.3, 39.0], [20.4, 39.0], [20.5, 39.0], [20.6, 39.0], [20.7, 39.0], [20.8, 39.0], [20.9, 39.0], [21.0, 39.0], [21.1, 39.0], [21.2, 39.0], [21.3, 39.0], [21.4, 39.0], [21.5, 39.0], [21.6, 39.0], [21.7, 39.0], [21.8, 39.0], [21.9, 39.0], [22.0, 39.0], [22.1, 39.0], [22.2, 39.0], [22.3, 39.0], [22.4, 39.0], [22.5, 39.0], [22.6, 39.0], [22.7, 39.0], [22.8, 39.0], [22.9, 39.0], [23.0, 39.0], [23.1, 39.0], [23.2, 40.0], [23.3, 40.0], [23.4, 40.0], [23.5, 40.0], [23.6, 40.0], [23.7, 40.0], [23.8, 40.0], [23.9, 40.0], [24.0, 40.0], [24.1, 40.0], [24.2, 40.0], [24.3, 40.0], [24.4, 40.0], [24.5, 40.0], [24.6, 40.0], [24.7, 40.0], [24.8, 40.0], [24.9, 40.0], [25.0, 40.0], [25.1, 40.0], [25.2, 40.0], [25.3, 40.0], [25.4, 40.0], [25.5, 40.0], [25.6, 40.0], [25.7, 40.0], [25.8, 40.0], [25.9, 40.0], [26.0, 40.0], [26.1, 40.0], [26.2, 40.0], [26.3, 40.0], [26.4, 40.0], [26.5, 40.0], [26.6, 40.0], [26.7, 40.0], [26.8, 40.0], [26.9, 40.0], [27.0, 40.0], [27.1, 40.0], [27.2, 40.0], [27.3, 40.0], [27.4, 40.0], [27.5, 40.0], [27.6, 40.0], [27.7, 40.0], [27.8, 40.0], [27.9, 40.0], [28.0, 40.0], [28.1, 40.0], [28.2, 40.0], [28.3, 40.0], [28.4, 40.0], [28.5, 40.0], [28.6, 40.0], [28.7, 40.0], [28.8, 40.0], [28.9, 40.0], [29.0, 40.0], [29.1, 40.0], [29.2, 40.0], [29.3, 40.0], [29.4, 40.0], [29.5, 40.0], [29.6, 40.0], [29.7, 40.0], [29.8, 40.0], [29.9, 40.0], [30.0, 40.0], [30.1, 40.0], [30.2, 40.0], [30.3, 40.0], [30.4, 40.0], [30.5, 40.0], [30.6, 40.0], [30.7, 40.0], [30.8, 40.0], [30.9, 40.0], [31.0, 40.0], [31.1, 40.0], [31.2, 40.0], [31.3, 40.0], [31.4, 40.0], [31.5, 40.0], [31.6, 40.0], [31.7, 40.0], [31.8, 40.0], [31.9, 40.0], [32.0, 40.0], [32.1, 40.0], [32.2, 40.0], [32.3, 40.0], [32.4, 40.0], [32.5, 40.0], [32.6, 40.0], [32.7, 40.0], [32.8, 40.0], [32.9, 40.0], [33.0, 40.0], [33.1, 40.0], [33.2, 40.0], [33.3, 40.0], [33.4, 40.0], [33.5, 40.0], [33.6, 40.0], [33.7, 40.0], [33.8, 40.0], [33.9, 40.0], [34.0, 40.0], [34.1, 41.0], [34.2, 41.0], [34.3, 41.0], [34.4, 41.0], [34.5, 41.0], [34.6, 41.0], [34.7, 41.0], [34.8, 41.0], [34.9, 41.0], [35.0, 41.0], [35.1, 41.0], [35.2, 41.0], [35.3, 41.0], [35.4, 41.0], [35.5, 41.0], [35.6, 41.0], [35.7, 41.0], [35.8, 41.0], [35.9, 41.0], [36.0, 41.0], [36.1, 41.0], [36.2, 41.0], [36.3, 41.0], [36.4, 41.0], [36.5, 41.0], [36.6, 41.0], [36.7, 41.0], [36.8, 41.0], [36.9, 41.0], [37.0, 41.0], [37.1, 41.0], [37.2, 41.0], [37.3, 41.0], [37.4, 41.0], [37.5, 41.0], [37.6, 41.0], [37.7, 41.0], [37.8, 41.0], [37.9, 41.0], [38.0, 41.0], [38.1, 41.0], [38.2, 41.0], [38.3, 41.0], [38.4, 41.0], [38.5, 41.0], [38.6, 41.0], [38.7, 41.0], [38.8, 41.0], [38.9, 41.0], [39.0, 41.0], [39.1, 41.0], [39.2, 41.0], [39.3, 41.0], [39.4, 41.0], [39.5, 41.0], [39.6, 41.0], [39.7, 41.0], [39.8, 41.0], [39.9, 41.0], [40.0, 41.0], [40.1, 41.0], [40.2, 41.0], [40.3, 41.0], [40.4, 41.0], [40.5, 41.0], [40.6, 41.0], [40.7, 41.0], [40.8, 41.0], [40.9, 41.0], [41.0, 41.0], [41.1, 41.0], [41.2, 41.0], [41.3, 41.0], [41.4, 41.0], [41.5, 41.0], [41.6, 41.0], [41.7, 41.0], [41.8, 41.0], [41.9, 41.0], [42.0, 41.0], [42.1, 41.0], [42.2, 41.0], [42.3, 41.0], [42.4, 41.0], [42.5, 41.0], [42.6, 41.0], [42.7, 41.0], [42.8, 41.0], [42.9, 41.0], [43.0, 41.0], [43.1, 41.0], [43.2, 41.0], [43.3, 41.0], [43.4, 41.0], [43.5, 41.0], [43.6, 41.0], [43.7, 41.0], [43.8, 41.0], [43.9, 41.0], [44.0, 41.0], [44.1, 41.0], [44.2, 41.0], [44.3, 41.0], [44.4, 41.0], [44.5, 41.0], [44.6, 41.0], [44.7, 41.0], [44.8, 41.0], [44.9, 41.0], [45.0, 41.0], [45.1, 41.0], [45.2, 42.0], [45.3, 42.0], [45.4, 42.0], [45.5, 42.0], [45.6, 42.0], [45.7, 42.0], [45.8, 42.0], [45.9, 42.0], [46.0, 42.0], [46.1, 42.0], [46.2, 42.0], [46.3, 42.0], [46.4, 42.0], [46.5, 42.0], [46.6, 42.0], [46.7, 42.0], [46.8, 42.0], [46.9, 42.0], [47.0, 42.0], [47.1, 42.0], [47.2, 42.0], [47.3, 42.0], [47.4, 42.0], [47.5, 42.0], [47.6, 42.0], [47.7, 42.0], [47.8, 42.0], [47.9, 42.0], [48.0, 42.0], [48.1, 42.0], [48.2, 42.0], [48.3, 42.0], [48.4, 42.0], [48.5, 42.0], [48.6, 42.0], [48.7, 42.0], [48.8, 42.0], [48.9, 42.0], [49.0, 42.0], [49.1, 42.0], [49.2, 42.0], [49.3, 42.0], [49.4, 42.0], [49.5, 42.0], [49.6, 42.0], [49.7, 42.0], [49.8, 42.0], [49.9, 42.0], [50.0, 42.0], [50.1, 42.0], [50.2, 42.0], [50.3, 42.0], [50.4, 42.0], [50.5, 42.0], [50.6, 42.0], [50.7, 42.0], [50.8, 42.0], [50.9, 42.0], [51.0, 42.0], [51.1, 42.0], [51.2, 42.0], [51.3, 42.0], [51.4, 42.0], [51.5, 42.0], [51.6, 42.0], [51.7, 42.0], [51.8, 42.0], [51.9, 42.0], [52.0, 42.0], [52.1, 42.0], [52.2, 42.0], [52.3, 42.0], [52.4, 42.0], [52.5, 42.0], [52.6, 42.0], [52.7, 42.0], [52.8, 42.0], [52.9, 42.0], [53.0, 42.0], [53.1, 42.0], [53.2, 42.0], [53.3, 42.0], [53.4, 42.0], [53.5, 42.0], [53.6, 42.0], [53.7, 42.0], [53.8, 42.0], [53.9, 42.0], [54.0, 42.0], [54.1, 42.0], [54.2, 42.0], [54.3, 42.0], [54.4, 42.0], [54.5, 42.0], [54.6, 42.0], [54.7, 42.0], [54.8, 42.0], [54.9, 42.0], [55.0, 42.0], [55.1, 42.0], [55.2, 42.0], [55.3, 42.0], [55.4, 42.0], [55.5, 42.0], [55.6, 42.0], [55.7, 42.0], [55.8, 42.0], [55.9, 42.0], [56.0, 42.0], [56.1, 42.0], [56.2, 42.0], [56.3, 42.0], [56.4, 43.0], [56.5, 43.0], [56.6, 43.0], [56.7, 43.0], [56.8, 43.0], [56.9, 43.0], [57.0, 43.0], [57.1, 43.0], [57.2, 43.0], [57.3, 43.0], [57.4, 43.0], [57.5, 43.0], [57.6, 43.0], [57.7, 43.0], [57.8, 43.0], [57.9, 43.0], [58.0, 43.0], [58.1, 43.0], [58.2, 43.0], [58.3, 43.0], [58.4, 43.0], [58.5, 43.0], [58.6, 43.0], [58.7, 43.0], [58.8, 43.0], [58.9, 43.0], [59.0, 43.0], [59.1, 43.0], [59.2, 43.0], [59.3, 43.0], [59.4, 43.0], [59.5, 43.0], [59.6, 43.0], [59.7, 43.0], [59.8, 43.0], [59.9, 43.0], [60.0, 43.0], [60.1, 43.0], [60.2, 43.0], [60.3, 43.0], [60.4, 43.0], [60.5, 43.0], [60.6, 43.0], [60.7, 43.0], [60.8, 43.0], [60.9, 43.0], [61.0, 43.0], [61.1, 43.0], [61.2, 43.0], [61.3, 43.0], [61.4, 43.0], [61.5, 43.0], [61.6, 43.0], [61.7, 43.0], [61.8, 43.0], [61.9, 43.0], [62.0, 43.0], [62.1, 43.0], [62.2, 43.0], [62.3, 43.0], [62.4, 43.0], [62.5, 43.0], [62.6, 43.0], [62.7, 43.0], [62.8, 43.0], [62.9, 43.0], [63.0, 43.0], [63.1, 43.0], [63.2, 43.0], [63.3, 43.0], [63.4, 43.0], [63.5, 43.0], [63.6, 43.0], [63.7, 43.0], [63.8, 43.0], [63.9, 43.0], [64.0, 43.0], [64.1, 43.0], [64.2, 43.0], [64.3, 43.0], [64.4, 43.0], [64.5, 43.0], [64.6, 43.0], [64.7, 43.0], [64.8, 43.0], [64.9, 43.0], [65.0, 43.0], [65.1, 43.0], [65.2, 43.0], [65.3, 43.0], [65.4, 43.0], [65.5, 43.0], [65.6, 43.0], [65.7, 43.0], [65.8, 43.0], [65.9, 43.0], [66.0, 43.0], [66.1, 43.0], [66.2, 43.0], [66.3, 43.0], [66.4, 43.0], [66.5, 43.0], [66.6, 43.0], [66.7, 43.0], [66.8, 43.0], [66.9, 43.0], [67.0, 43.0], [67.1, 43.0], [67.2, 43.0], [67.3, 43.0], [67.4, 43.0], [67.5, 43.0], [67.6, 43.0], [67.7, 43.0], [67.8, 43.0], [67.9, 43.0], [68.0, 44.0], [68.1, 44.0], [68.2, 44.0], [68.3, 44.0], [68.4, 44.0], [68.5, 44.0], [68.6, 44.0], [68.7, 44.0], [68.8, 44.0], [68.9, 44.0], [69.0, 44.0], [69.1, 44.0], [69.2, 44.0], [69.3, 44.0], [69.4, 44.0], [69.5, 44.0], [69.6, 44.0], [69.7, 44.0], [69.8, 44.0], [69.9, 44.0], [70.0, 44.0], [70.1, 44.0], [70.2, 44.0], [70.3, 44.0], [70.4, 44.0], [70.5, 44.0], [70.6, 44.0], [70.7, 44.0], [70.8, 44.0], [70.9, 44.0], [71.0, 44.0], [71.1, 44.0], [71.2, 44.0], [71.3, 44.0], [71.4, 44.0], [71.5, 44.0], [71.6, 44.0], [71.7, 44.0], [71.8, 44.0], [71.9, 44.0], [72.0, 44.0], [72.1, 44.0], [72.2, 44.0], [72.3, 44.0], [72.4, 44.0], [72.5, 44.0], [72.6, 44.0], [72.7, 44.0], [72.8, 44.0], [72.9, 44.0], [73.0, 44.0], [73.1, 44.0], [73.2, 44.0], [73.3, 44.0], [73.4, 44.0], [73.5, 44.0], [73.6, 44.0], [73.7, 44.0], [73.8, 44.0], [73.9, 44.0], [74.0, 44.0], [74.1, 44.0], [74.2, 44.0], [74.3, 44.0], [74.4, 44.0], [74.5, 44.0], [74.6, 44.0], [74.7, 44.0], [74.8, 44.0], [74.9, 45.0], [75.0, 45.0], [75.1, 45.0], [75.2, 45.0], [75.3, 45.0], [75.4, 45.0], [75.5, 45.0], [75.6, 45.0], [75.7, 45.0], [75.8, 45.0], [75.9, 45.0], [76.0, 45.0], [76.1, 45.0], [76.2, 45.0], [76.3, 45.0], [76.4, 45.0], [76.5, 45.0], [76.6, 45.0], [76.7, 45.0], [76.8, 45.0], [76.9, 45.0], [77.0, 45.0], [77.1, 45.0], [77.2, 45.0], [77.3, 45.0], [77.4, 45.0], [77.5, 45.0], [77.6, 45.0], [77.7, 45.0], [77.8, 45.0], [77.9, 45.0], [78.0, 45.0], [78.1, 45.0], [78.2, 45.0], [78.3, 45.0], [78.4, 45.0], [78.5, 45.0], [78.6, 46.0], [78.7, 46.0], [78.8, 46.0], [78.9, 46.0], [79.0, 46.0], [79.1, 46.0], [79.2, 46.0], [79.3, 46.0], [79.4, 46.0], [79.5, 46.0], [79.6, 46.0], [79.7, 46.0], [79.8, 46.0], [79.9, 46.0], [80.0, 46.0], [80.1, 46.0], [80.2, 46.0], [80.3, 46.0], [80.4, 46.0], [80.5, 46.0], [80.6, 46.0], [80.7, 46.0], [80.8, 46.0], [80.9, 46.0], [81.0, 46.0], [81.1, 47.0], [81.2, 47.0], [81.3, 47.0], [81.4, 47.0], [81.5, 47.0], [81.6, 47.0], [81.7, 47.0], [81.8, 47.0], [81.9, 47.0], [82.0, 47.0], [82.1, 47.0], [82.2, 47.0], [82.3, 47.0], [82.4, 47.0], [82.5, 47.0], [82.6, 47.0], [82.7, 47.0], [82.8, 47.0], [82.9, 47.0], [83.0, 47.0], [83.1, 47.0], [83.2, 47.0], [83.3, 47.0], [83.4, 48.0], [83.5, 48.0], [83.6, 48.0], [83.7, 48.0], [83.8, 48.0], [83.9, 48.0], [84.0, 48.0], [84.1, 48.0], [84.2, 48.0], [84.3, 48.0], [84.4, 48.0], [84.5, 48.0], [84.6, 48.0], [84.7, 48.0], [84.8, 48.0], [84.9, 48.0], [85.0, 48.0], [85.1, 48.0], [85.2, 49.0], [85.3, 49.0], [85.4, 49.0], [85.5, 49.0], [85.6, 49.0], [85.7, 49.0], [85.8, 49.0], [85.9, 49.0], [86.0, 49.0], [86.1, 49.0], [86.2, 49.0], [86.3, 49.0], [86.4, 49.0], [86.5, 50.0], [86.6, 50.0], [86.7, 50.0], [86.8, 50.0], [86.9, 50.0], [87.0, 50.0], [87.1, 50.0], [87.2, 50.0], [87.3, 50.0], [87.4, 51.0], [87.5, 51.0], [87.6, 51.0], [87.7, 51.0], [87.8, 51.0], [87.9, 51.0], [88.0, 51.0], [88.1, 51.0], [88.2, 52.0], [88.3, 52.0], [88.4, 52.0], [88.5, 52.0], [88.6, 52.0], [88.7, 53.0], [88.8, 53.0], [88.9, 53.0], [89.0, 53.0], [89.1, 53.0], [89.2, 54.0], [89.3, 54.0], [89.4, 54.0], [89.5, 54.0], [89.6, 55.0], [89.7, 55.0], [89.8, 55.0], [89.9, 55.0], [90.0, 56.0], [90.1, 56.0], [90.2, 56.0], [90.3, 56.0], [90.4, 56.0], [90.5, 57.0], [90.6, 57.0], [90.7, 57.0], [90.8, 57.0], [90.9, 58.0], [91.0, 58.0], [91.1, 59.0], [91.2, 59.0], [91.3, 59.0], [91.4, 59.0], [91.5, 60.0], [91.6, 60.0], [91.7, 60.0], [91.8, 61.0], [91.9, 61.0], [92.0, 61.0], [92.1, 61.0], [92.2, 62.0], [92.3, 62.0], [92.4, 62.0], [92.5, 63.0], [92.6, 63.0], [92.7, 64.0], [92.8, 64.0], [92.9, 64.0], [93.0, 65.0], [93.1, 65.0], [93.2, 66.0], [93.3, 66.0], [93.4, 67.0], [93.5, 67.0], [93.6, 67.0], [93.7, 68.0], [93.8, 68.0], [93.9, 69.0], [94.0, 69.0], [94.1, 71.0], [94.2, 71.0], [94.3, 72.0], [94.4, 73.0], [94.5, 74.0], [94.6, 74.0], [94.7, 75.0], [94.8, 76.0], [94.9, 77.0], [95.0, 78.0], [95.1, 80.0], [95.2, 81.0], [95.3, 83.0], [95.4, 84.0], [95.5, 85.0], [95.6, 87.0], [95.7, 89.0], [95.8, 91.0], [95.9, 93.0], [96.0, 96.0], [96.1, 97.0], [96.2, 100.0], [96.3, 103.0], [96.4, 106.0], [96.5, 110.0], [96.6, 113.0], [96.7, 118.0], [96.8, 122.0], [96.9, 131.0], [97.0, 140.0], [97.1, 180.0], [97.2, 1186.0], [97.3, 1910.0], [97.4, 2300.0], [97.5, 2675.0], [97.6, 3458.0], [97.7, 4108.0], [97.8, 4269.0], [97.9, 4405.0], [98.0, 4556.0], [98.1, 4832.0], [98.2, 5053.0], [98.3, 5899.0], [98.4, 6300.0], [98.5, 6478.0], [98.6, 6623.0], [98.7, 6800.0], [98.8, 7031.0], [98.9, 7243.0], [99.0, 7372.0], [99.1, 7622.0], [99.2, 8763.0], [99.3, 8951.0], [99.4, 9153.0], [99.5, 9337.0], [99.6, 9493.0], [99.7, 9767.0], [99.8, 11224.0], [99.9, 11811.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 15390.0, "series": [{"data": [[600.0, 437.0], [700.0, 519.0], [800.0, 639.0], [900.0, 633.0], [1000.0, 714.0], [1100.0, 717.0], [1200.0, 673.0], [1300.0, 688.0], [1400.0, 660.0], [1500.0, 616.0], [1600.0, 620.0], [1700.0, 561.0], [1800.0, 560.0], [1900.0, 593.0], [2000.0, 480.0], [2100.0, 500.0], [2300.0, 441.0], [2200.0, 427.0], [2400.0, 387.0], [2500.0, 359.0], [2600.0, 323.0], [2800.0, 301.0], [2700.0, 308.0], [2900.0, 260.0], [3000.0, 245.0], [3100.0, 224.0], [3300.0, 188.0], [3200.0, 210.0], [3400.0, 179.0], [3500.0, 194.0], [3700.0, 137.0], [3600.0, 139.0], [3800.0, 146.0], [3900.0, 105.0], [4000.0, 97.0], [4100.0, 88.0], [4200.0, 91.0], [4300.0, 70.0], [4500.0, 60.0], [4400.0, 76.0], [4600.0, 53.0], [4800.0, 54.0], [4700.0, 54.0], [5100.0, 41.0], [5000.0, 42.0], [4900.0, 52.0], [5200.0, 38.0], [5300.0, 30.0], [5400.0, 34.0], [5600.0, 21.0], [5500.0, 19.0], [5800.0, 21.0], [5700.0, 27.0], [5900.0, 15.0], [6000.0, 20.0], [6100.0, 29.0], [6200.0, 15.0], [6300.0, 7.0], [6400.0, 12.0], [6500.0, 10.0], [6600.0, 4.0], [6900.0, 10.0], [6700.0, 13.0], [6800.0, 7.0], [7100.0, 5.0], [7000.0, 8.0], [7300.0, 4.0], [7200.0, 7.0], [7400.0, 7.0], [7500.0, 7.0], [7600.0, 2.0], [7800.0, 5.0], [7900.0, 2.0], [7700.0, 3.0], [8000.0, 4.0], [8100.0, 3.0], [8500.0, 4.0], [8700.0, 1.0], [8200.0, 3.0], [9100.0, 1.0], [8900.0, 1.0], [8800.0, 3.0], [9000.0, 1.0], [9600.0, 1.0], [9400.0, 1.0], [9300.0, 1.0], [10100.0, 1.0], [10400.0, 1.0], [100.0, 22.0], [200.0, 55.0], [300.0, 87.0], [400.0, 185.0], [500.0, 282.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 15390.0], [100.0, 147.0], [200.0, 4.0], [500.0, 1.0], [600.0, 1.0], [700.0, 2.0], [800.0, 1.0], [900.0, 3.0], [1000.0, 2.0], [1100.0, 2.0], [1200.0, 3.0], [1300.0, 3.0], [1400.0, 2.0], [1500.0, 1.0], [1600.0, 1.0], [1700.0, 2.0], [1800.0, 2.0], [1900.0, 4.0], [2000.0, 5.0], [2100.0, 6.0], [2300.0, 3.0], [2200.0, 2.0], [2400.0, 5.0], [2500.0, 5.0], [2600.0, 4.0], [2800.0, 9.0], [2700.0, 1.0], [3000.0, 2.0], [3100.0, 1.0], [3400.0, 3.0], [3500.0, 1.0], [3700.0, 2.0], [3800.0, 4.0], [3900.0, 5.0], [4000.0, 3.0], [4100.0, 10.0], [4200.0, 11.0], [4300.0, 9.0], [4600.0, 6.0], [4500.0, 10.0], [4400.0, 12.0], [4800.0, 10.0], [4700.0, 3.0], [5100.0, 3.0], [5000.0, 3.0], [4900.0, 8.0], [5200.0, 5.0], [5300.0, 3.0], [5700.0, 2.0], [5800.0, 2.0], [5900.0, 4.0], [6100.0, 4.0], [6000.0, 3.0], [6200.0, 4.0], [6300.0, 8.0], [6500.0, 14.0], [6400.0, 9.0], [6600.0, 11.0], [6900.0, 12.0], [6800.0, 4.0], [6700.0, 6.0], [7100.0, 10.0], [7000.0, 3.0], [7400.0, 7.0], [7300.0, 13.0], [7200.0, 8.0], [7600.0, 4.0], [7500.0, 6.0], [7700.0, 1.0], [8000.0, 2.0], [8700.0, 3.0], [8600.0, 4.0], [8500.0, 2.0], [8400.0, 1.0], [8300.0, 2.0], [9000.0, 8.0], [9200.0, 10.0], [9100.0, 8.0], [8800.0, 9.0], [8900.0, 9.0], [9400.0, 12.0], [9300.0, 8.0], [9700.0, 4.0], [9600.0, 5.0], [9500.0, 7.0], [9800.0, 4.0], [9900.0, 1.0], [10700.0, 1.0], [11200.0, 4.0], [11100.0, 3.0], [11000.0, 2.0], [10900.0, 2.0], [11400.0, 6.0], [11300.0, 2.0], [11500.0, 1.0], [11600.0, 3.0], [11700.0, 1.0], [11900.0, 2.0], [11800.0, 1.0], [12000.0, 1.0], [12100.0, 3.0], [12300.0, 1.0], [13300.0, 1.0], [12800.0, 1.0], [13400.0, 2.0], [13500.0, 1.0], [13800.0, 1.0], [14600.0, 1.0], [14700.0, 1.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 14700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 102.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 15893.0, "series": [{"data": [[0.0, 15893.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 5986.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 10019.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 102.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 12.989208633093533, "minX": 1.7475933E12, "maxY": 32.0, "series": [{"data": [[1.74759378E12, 32.0], [1.74759408E12, 32.0], [1.74759414E12, 32.0], [1.74759348E12, 32.0], [1.74759444E12, 28.64245810055862], [1.74759354E12, 32.0], [1.7475945E12, 12.989208633093533], [1.74759384E12, 32.0], [1.7475939E12, 32.0], [1.7475942E12, 32.0], [1.74759426E12, 32.0], [1.7475933E12, 31.5], [1.7475936E12, 32.0], [1.74759366E12, 32.0], [1.74759396E12, 32.0], [1.74759402E12, 32.0], [1.74759432E12, 32.0], [1.74759336E12, 32.0], [1.74759438E12, 32.0], [1.74759342E12, 32.0], [1.74759372E12, 32.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7475945E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 28.0, "minX": 1.0, "maxY": 2268.611111111111, "series": [{"data": [[32.0, 2089.5148324725283], [2.0, 553.25], [3.0, 293.5], [4.0, 506.2], [5.0, 438.0], [6.0, 459.33333333333337], [7.0, 514.625], [8.0, 576.8124999999999], [9.0, 822.3684210526317], [10.0, 760.6666666666666], [11.0, 624.0625], [12.0, 1197.5], [13.0, 1155.0], [14.0, 871.0000000000001], [15.0, 1337.6666666666667], [16.0, 1035.318181818182], [1.0, 535.8181818181819], [17.0, 1007.7291666666666], [18.0, 992.2], [19.0, 1823.1666666666667], [20.0, 1348.6875], [21.0, 1071.5], [22.0, 1499.375], [23.0, 1521.57627118644], [24.0, 2034.5], [25.0, 1897.7241379310346], [26.0, 1694.2352941176473], [27.0, 1930.175], [28.0, 1868.934426229508], [29.0, 1810.371428571429], [30.0, 1900.4923076923087], [31.0, 2268.611111111111]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[31.48187500000007, 2057.352312500008]], "isOverall": false, "label": "Create CSR-Aggregated", "isController": false}, {"data": [[32.0, 239.38226724937346], [2.0, 28.5], [3.0, 28.0], [4.0, 28.0], [5.0, 31.2], [6.0, 28.666666666666668], [7.0, 31.0], [8.0, 32.87499999999999], [9.0, 33.99999999999999], [10.0, 37.666666666666664], [11.0, 33.87499999999999], [12.0, 37.357142857142854], [13.0, 40.0], [14.0, 39.142857142857146], [15.0, 44.0], [16.0, 43.28571428571429], [1.0, 30.363636363636363], [17.0, 45.42708333333332], [18.0, 64.75000000000001], [19.0, 44.6], [20.0, 44.40425531914893], [21.0, 51.25], [22.0, 42.8], [23.0, 46.99999999999999], [24.0, 54.4], [25.0, 44.8909090909091], [26.0, 44.89855072463768], [27.0, 45.37499999999999], [28.0, 49.393442622950815], [29.0, 47.05035971223022], [30.0, 44.4], [31.0, 42.21052631578948]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}, {"data": [[31.48125000000001, 228.42462500000235]], "isOverall": false, "label": "HTTP Request - enroll-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 32.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 0.0, "minX": 1.7475933E12, "maxY": 132863.9, "series": [{"data": [[1.74759378E12, 127351.75], [1.74759408E12, 131076.11666666667], [1.74759414E12, 132863.9], [1.74759348E12, 128677.05], [1.74759444E12, 131814.86666666667], [1.74759354E12, 131981.45], [1.7475945E12, 40942.98333333333], [1.74759384E12, 130358.41666666667], [1.7475939E12, 127710.08333333333], [1.7475942E12, 131644.83333333334], [1.74759426E12, 129161.23333333334], [1.7475933E12, 423.53333333333336], [1.7475936E12, 128992.88333333333], [1.74759366E12, 131812.28333333333], [1.74759396E12, 127648.91666666667], [1.74759402E12, 125479.78333333334], [1.74759432E12, 132297.9], [1.74759336E12, 32923.63333333333], [1.74759438E12, 130005.15], [1.74759342E12, 60830.2], [1.74759372E12, 129941.95]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74759378E12, 25680.216666666667], [1.74759408E12, 26422.433333333334], [1.74759414E12, 26778.133333333335], [1.74759348E12, 25947.166666666668], [1.74759444E12, 26572.816666666666], [1.74759354E12, 26601.033333333333], [1.7475945E12, 8253.333333333334], [1.74759384E12, 26272.25], [1.7475939E12, 25739.75], [1.7475942E12, 26541.7], [1.74759426E12, 26036.316666666666], [1.7475933E12, 0.0], [1.7475936E12, 26006.6], [1.74759366E12, 26570.916666666668], [1.74759396E12, 25741.55], [1.74759402E12, 25294.6], [1.74759432E12, 26660.866666666665], [1.74759336E12, 8224.016666666666], [1.74759438E12, 26216.416666666668], [1.74759342E12, 13270.35], [1.74759372E12, 26186.2]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7475945E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 40.29136690647486, "minX": 1.7475933E12, "maxY": 5755.884476534294, "series": [{"data": [[1.74759378E12, 2172.003476245655], [1.74759408E12, 2109.2078651685406], [1.74759414E12, 2077.830564784051], [1.74759348E12, 2154.892201834863], [1.74759444E12, 1907.627932960893], [1.74759354E12, 2105.09810479376], [1.7475945E12, 899.8237410071946], [1.74759384E12, 2126.284424379234], [1.7475939E12, 2154.3410138248864], [1.7475942E12, 2095.9675251959693], [1.74759426E12, 2162.6966932725227], [1.7475933E12, 1256.6000000000001], [1.7475936E12, 2140.8880000000013], [1.74759366E12, 2095.164245810056], [1.74759396E12, 2177.66705202312], [1.74759402E12, 2221.0950704225306], [1.74759432E12, 2095.1666666666633], [1.74759336E12, 794.202090592334], [1.74759438E12, 2119.6322360953486], [1.74759342E12, 1494.6229116945096], [1.74759372E12, 2133.2579185520353]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74759378E12, 43.53063583815026], [1.74759408E12, 44.47752808988767], [1.74759414E12, 44.002217294900184], [1.74759348E12, 44.54347826086956], [1.74759444E12, 45.36983240223466], [1.74759354E12, 43.98772321428574], [1.7475945E12, 40.29136690647486], [1.74759384E12, 44.25423728813562], [1.7475939E12, 45.033448673587124], [1.7475942E12, 45.05257270693508], [1.74759426E12, 44.661345496009105], [1.7475936E12, 43.71461187214614], [1.74759366E12, 45.30837988826816], [1.74759396E12, 43.86966551326415], [1.74759402E12, 43.456572769953034], [1.74759432E12, 44.12917594654787], [1.74759336E12, 5755.884476534294], [1.74759438E12, 44.47112117780295], [1.74759342E12, 3095.4921700223713], [1.74759372E12, 44.43764172335606]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7475945E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.7475933E12, "maxY": 5755.815884476536, "series": [{"data": [[1.74759378E12, 0.0], [1.74759408E12, 0.0], [1.74759414E12, 0.0], [1.74759348E12, 0.0], [1.74759444E12, 0.0], [1.74759354E12, 0.0], [1.7475945E12, 0.0], [1.74759384E12, 0.0], [1.7475939E12, 0.0], [1.7475942E12, 0.0], [1.74759426E12, 0.0], [1.7475933E12, 0.0], [1.7475936E12, 0.0], [1.74759366E12, 0.0], [1.74759396E12, 0.0], [1.74759402E12, 0.0], [1.74759432E12, 0.0], [1.74759336E12, 0.0], [1.74759438E12, 0.0], [1.74759342E12, 0.0], [1.74759372E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74759378E12, 43.519075144508726], [1.74759408E12, 44.47415730337075], [1.74759414E12, 43.99778270509974], [1.74759348E12, 44.53546910755148], [1.74759444E12, 45.36089385474862], [1.74759354E12, 43.975446428571395], [1.7475945E12, 40.28057553956834], [1.74759384E12, 44.250847457627096], [1.7475939E12, 45.02537485582463], [1.7475942E12, 45.05033557046975], [1.74759426E12, 44.66020524515397], [1.7475936E12, 43.697488584474925], [1.74759366E12, 45.301675977653616], [1.74759396E12, 43.863898500576695], [1.74759402E12, 43.4049295774648], [1.74759432E12, 44.12360801781738], [1.74759336E12, 5755.815884476536], [1.74759438E12, 44.46659116647791], [1.74759342E12, 3095.4563758389227], [1.74759372E12, 44.426303854875286]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7475945E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.7475933E12, "maxY": 58.068592057761755, "series": [{"data": [[1.74759378E12, 0.0], [1.74759408E12, 0.0], [1.74759414E12, 0.0], [1.74759348E12, 0.0], [1.74759444E12, 0.0], [1.74759354E12, 0.0], [1.7475945E12, 0.0], [1.74759384E12, 0.0], [1.7475939E12, 0.0], [1.7475942E12, 0.0], [1.74759426E12, 0.0], [1.7475933E12, 0.0], [1.7475936E12, 0.0], [1.74759366E12, 0.0], [1.74759396E12, 0.0], [1.74759402E12, 0.0], [1.74759432E12, 0.0], [1.74759336E12, 0.0], [1.74759438E12, 0.0], [1.74759342E12, 0.0], [1.74759372E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74759378E12, 0.11329479768786097], [1.74759408E12, 0.09550561797752832], [1.74759414E12, 0.10199556541019952], [1.74759348E12, 0.1578947368421056], [1.74759444E12, 0.08044692737430163], [1.74759354E12, 0.15513392857142827], [1.7475945E12, 0.0], [1.74759384E12, 0.10960451977401159], [1.7475939E12, 0.12226066897347193], [1.7475942E12, 0.1062639821029083], [1.74759426E12, 0.1106043329532498], [1.7475936E12, 0.12899543378995454], [1.74759366E12, 0.1318435754189945], [1.74759396E12, 0.1130334486735868], [1.74759402E12, 0.11150234741784032], [1.74759432E12, 0.1102449888641426], [1.74759336E12, 58.068592057761755], [1.74759438E12, 0.09852774631936598], [1.74759342E12, 0.20805369127516782], [1.74759372E12, 0.17233560090702937]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7475945E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.7475933E12, "maxY": 14760.0, "series": [{"data": [[1.74759378E12, 9484.0], [1.74759408E12, 6970.0], [1.74759414E12, 9316.0], [1.74759348E12, 9130.0], [1.74759444E12, 7015.0], [1.74759354E12, 8930.0], [1.7475945E12, 3346.0], [1.74759384E12, 7236.0], [1.7475939E12, 7842.0], [1.7475942E12, 10428.0], [1.74759426E12, 6866.0], [1.7475933E12, 2042.0], [1.7475936E12, 8171.0], [1.74759366E12, 8754.0], [1.74759396E12, 8549.0], [1.74759402E12, 10123.0], [1.74759432E12, 8167.0], [1.74759336E12, 11994.0], [1.74759438E12, 8222.0], [1.74759342E12, 14760.0], [1.74759372E12, 9601.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.74759378E12, 2947.800000000001], [1.74759408E12, 2982.8], [1.74759414E12, 2910.2000000000003], [1.74759348E12, 3015.3], [1.74759444E12, 2688.2000000000007], [1.74759354E12, 2943.0], [1.7475945E12, 1280.6], [1.74759384E12, 2994.999999999999], [1.7475939E12, 3027.2000000000003], [1.7475942E12, 2891.6000000000004], [1.74759426E12, 3085.5], [1.7475933E12, 1909.3000000000004], [1.7475936E12, 2960.8], [1.74759366E12, 2865.0], [1.74759396E12, 3109.7000000000007], [1.74759402E12, 3060.5], [1.74759432E12, 2967.100000000003], [1.74759336E12, 7576.500000000001], [1.74759438E12, 3053.0], [1.74759342E12, 7153.4], [1.74759372E12, 2970.5999999999995]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.74759378E12, 5927.300000000005], [1.74759408E12, 5150.610000000022], [1.74759414E12, 5326.9000000000015], [1.74759348E12, 5447.019999999999], [1.74759444E12, 5119.519999999998], [1.74759354E12, 5175.199999999991], [1.7475945E12, 2590.2599999999957], [1.74759384E12, 5354.039999999999], [1.7475939E12, 5892.679999999995], [1.7475942E12, 5672.159999999998], [1.74759426E12, 5460.350000000003], [1.7475933E12, 2042.0], [1.7475936E12, 5471.880000000001], [1.74759366E12, 5735.539999999999], [1.74759396E12, 5400.100000000002], [1.74759402E12, 6431.650000000002], [1.74759432E12, 5367.01], [1.74759336E12, 11102.179999999998], [1.74759438E12, 5852.899999999991], [1.74759342E12, 12695.399999999967], [1.74759372E12, 5675.969999999992]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.74759378E12, 3862.1], [1.74759408E12, 3797.8999999999996], [1.74759414E12, 3709.5999999999985], [1.74759348E12, 3908.0499999999975], [1.74759444E12, 3359.499999999998], [1.74759354E12, 3583.7999999999997], [1.7475945E12, 1690.0499999999997], [1.74759384E12, 3702.7999999999997], [1.7475939E12, 3891.5999999999976], [1.7475942E12, 3703.5999999999995], [1.74759426E12, 3835.5], [1.7475933E12, 2036.5], [1.7475936E12, 3840.3999999999996], [1.74759366E12, 3811.399999999998], [1.74759396E12, 3771.149999999999], [1.74759402E12, 3762.25], [1.74759432E12, 3748.5999999999995], [1.74759336E12, 9191.0], [1.74759438E12, 3768.5], [1.74759342E12, 9479.449999999999], [1.74759372E12, 3651.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.74759378E12, 35.0], [1.74759408E12, 35.0], [1.74759414E12, 34.0], [1.74759348E12, 34.0], [1.74759444E12, 33.0], [1.74759354E12, 35.0], [1.7475945E12, 25.0], [1.74759384E12, 35.0], [1.7475939E12, 34.0], [1.7475942E12, 34.0], [1.74759426E12, 35.0], [1.7475933E12, 320.0], [1.7475936E12, 34.0], [1.74759366E12, 35.0], [1.74759396E12, 33.0], [1.74759402E12, 34.0], [1.74759432E12, 34.0], [1.74759336E12, 144.0], [1.74759438E12, 33.0], [1.74759342E12, 35.0], [1.74759372E12, 34.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.74759378E12, 125.5], [1.74759408E12, 260.0], [1.74759414E12, 390.0], [1.74759348E12, 117.0], [1.74759444E12, 231.0], [1.74759354E12, 482.0], [1.7475945E12, 165.5], [1.74759384E12, 425.0], [1.7475939E12, 411.0], [1.7475942E12, 164.0], [1.74759426E12, 236.0], [1.7475933E12, 1293.0], [1.7475936E12, 121.0], [1.74759366E12, 263.0], [1.74759396E12, 131.0], [1.74759402E12, 282.0], [1.74759432E12, 402.0], [1.74759336E12, 1182.5], [1.74759438E12, 132.5], [1.74759342E12, 812.5], [1.74759372E12, 424.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7475945E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 99.0, "minX": 1.0, "maxY": 11462.5, "series": [{"data": [[32.0, 469.5], [2.0, 727.0], [33.0, 393.5], [34.0, 99.0], [35.0, 168.0], [37.0, 125.0], [36.0, 139.5], [39.0, 416.0], [38.0, 133.5], [40.0, 492.5], [41.0, 132.0], [42.0, 117.0], [43.0, 139.0], [45.0, 164.0], [44.0, 389.0], [46.0, 283.5], [3.0, 948.0], [4.0, 629.5], [5.0, 397.0], [6.0, 4632.5], [7.0, 772.0], [8.0, 647.5], [9.0, 786.0], [10.0, 694.5], [11.0, 1212.5], [12.0, 1591.0], [13.0, 794.0], [14.0, 5407.0], [15.0, 749.0], [1.0, 1347.0], [16.0, 823.0], [17.0, 969.0], [18.0, 700.5], [19.0, 739.5], [20.0, 572.0], [21.0, 630.0], [22.0, 514.0], [23.0, 677.5], [24.0, 474.0], [25.0, 285.0], [26.0, 144.0], [27.0, 470.0], [28.0, 451.0], [29.0, 413.0], [30.0, 477.5], [31.0, 101.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 6488.5], [11.0, 4281.0], [12.0, 8233.0], [3.0, 4372.0], [13.0, 6415.0], [16.0, 6437.0], [17.0, 11462.5], [18.0, 3974.5], [19.0, 5296.0], [5.0, 4368.0], [20.0, 6247.0], [22.0, 5518.5], [23.0, 4139.0], [6.0, 6110.5], [25.0, 7475.0], [7.0, 6459.0], [29.0, 9617.0], [30.0, 3242.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 46.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 11462.5, "series": [{"data": [[32.0, 36.0], [2.0, 0.0], [33.0, 0.0], [34.0, 35.0], [35.0, 35.0], [37.0, 35.0], [36.0, 35.0], [39.0, 0.0], [38.0, 36.0], [40.0, 0.0], [41.0, 35.0], [42.0, 35.0], [43.0, 37.0], [45.0, 36.0], [44.0, 19.5], [46.0, 18.5], [3.0, 0.0], [4.0, 0.0], [5.0, 29.0], [6.0, 4632.5], [7.0, 0.0], [8.0, 0.0], [9.0, 0.0], [10.0, 28.5], [11.0, 0.0], [12.0, 39.0], [13.0, 0.0], [14.0, 3537.5], [15.0, 0.0], [1.0, 0.0], [16.0, 0.0], [17.0, 0.0], [18.0, 26.5], [19.0, 37.0], [20.0, 0.0], [21.0, 0.0], [22.0, 36.0], [23.0, 0.0], [24.0, 0.0], [25.0, 30.5], [26.0, 13.0], [27.0, 0.0], [28.0, 0.0], [29.0, 29.0], [30.0, 34.0], [31.0, 35.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 6488.5], [11.0, 4281.0], [12.0, 8233.0], [3.0, 4372.0], [13.0, 6415.0], [16.0, 6437.0], [17.0, 11462.5], [18.0, 3974.5], [19.0, 5296.0], [5.0, 4368.0], [20.0, 6247.0], [22.0, 5518.0], [23.0, 4139.0], [6.0, 6110.5], [25.0, 7475.0], [7.0, 6459.0], [29.0, 9617.0], [30.0, 3242.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 46.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.85, "minX": 1.7475933E12, "maxY": 30.083333333333332, "series": [{"data": [[1.74759378E12, 28.8], [1.74759408E12, 29.666666666666668], [1.74759414E12, 30.083333333333332], [1.74759348E12, 29.1], [1.74759444E12, 29.633333333333333], [1.74759354E12, 29.883333333333333], [1.7475945E12, 8.933333333333334], [1.74759384E12, 29.516666666666666], [1.7475939E12, 28.916666666666668], [1.7475942E12, 29.783333333333335], [1.74759426E12, 29.233333333333334], [1.7475933E12, 0.85], [1.7475936E12, 29.183333333333334], [1.74759366E12, 29.833333333333332], [1.74759396E12, 28.866666666666667], [1.74759402E12, 28.4], [1.74759432E12, 29.966666666666665], [1.74759336E12, 9.416666666666666], [1.74759438E12, 29.4], [1.74759342E12, 14.433333333333334], [1.74759372E12, 29.433333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7475945E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.3333333333333333, "minX": 1.7475933E12, "maxY": 15.05, "series": [{"data": [[1.74759378E12, 14.383333333333333], [1.74759408E12, 14.833333333333334], [1.74759414E12, 15.05], [1.74759348E12, 14.533333333333333], [1.74759444E12, 14.916666666666666], [1.74759354E12, 14.95], [1.7475945E12, 4.633333333333334], [1.74759384E12, 14.766666666666667], [1.7475939E12, 14.466666666666667], [1.7475942E12, 14.883333333333333], [1.74759426E12, 14.616666666666667], [1.7475933E12, 0.3333333333333333], [1.7475936E12, 14.583333333333334], [1.74759366E12, 14.916666666666666], [1.74759396E12, 14.416666666666666], [1.74759402E12, 14.2], [1.74759432E12, 15.0], [1.74759336E12, 4.783333333333333], [1.74759438E12, 14.683333333333334], [1.74759342E12, 6.983333333333333], [1.74759372E12, 14.733333333333333]], "isOverall": false, "label": "0", "isController": false}, {"data": [[1.74759378E12, 14.416666666666666], [1.74759408E12, 14.833333333333334], [1.74759414E12, 15.033333333333333], [1.74759348E12, 14.566666666666666], [1.74759444E12, 14.916666666666666], [1.74759354E12, 14.933333333333334], [1.7475945E12, 4.633333333333334], [1.74759384E12, 14.75], [1.7475939E12, 14.45], [1.7475942E12, 14.9], [1.74759426E12, 14.616666666666667], [1.7475936E12, 14.6], [1.74759366E12, 14.916666666666666], [1.74759396E12, 14.45], [1.74759402E12, 14.2], [1.74759432E12, 14.966666666666667], [1.74759336E12, 3.5166666666666666], [1.74759438E12, 14.716666666666667], [1.74759342E12, 6.85], [1.74759372E12, 14.7]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.74759336E12, 1.1], [1.74759342E12, 0.6]], "isOverall": false, "label": "400", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7475945E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.3333333333333333, "minX": 1.7475933E12, "maxY": 15.05, "series": [{"data": [[1.74759378E12, 14.416666666666666], [1.74759408E12, 14.833333333333334], [1.74759414E12, 15.033333333333333], [1.74759348E12, 14.566666666666666], [1.74759444E12, 14.916666666666666], [1.74759354E12, 14.933333333333334], [1.7475945E12, 4.633333333333334], [1.74759384E12, 14.75], [1.7475939E12, 14.45], [1.7475942E12, 14.9], [1.74759426E12, 14.616666666666667], [1.7475936E12, 14.6], [1.74759366E12, 14.916666666666666], [1.74759396E12, 14.45], [1.74759402E12, 14.2], [1.74759432E12, 14.966666666666667], [1.74759336E12, 3.5166666666666666], [1.74759438E12, 14.716666666666667], [1.74759342E12, 6.85], [1.74759372E12, 14.7]], "isOverall": false, "label": "HTTP Request - enroll-success", "isController": false}, {"data": [[1.74759336E12, 1.1], [1.74759342E12, 0.6]], "isOverall": false, "label": "HTTP Request - enroll-failure", "isController": false}, {"data": [[1.74759378E12, 14.383333333333333], [1.74759408E12, 14.833333333333334], [1.74759414E12, 15.05], [1.74759348E12, 14.533333333333333], [1.74759444E12, 14.916666666666666], [1.74759354E12, 14.95], [1.7475945E12, 4.633333333333334], [1.74759384E12, 14.766666666666667], [1.7475939E12, 14.466666666666667], [1.7475942E12, 14.883333333333333], [1.74759426E12, 14.616666666666667], [1.7475933E12, 0.3333333333333333], [1.7475936E12, 14.583333333333334], [1.74759366E12, 14.916666666666666], [1.74759396E12, 14.416666666666666], [1.74759402E12, 14.2], [1.74759432E12, 15.0], [1.74759336E12, 4.783333333333333], [1.74759438E12, 14.683333333333334], [1.74759342E12, 6.983333333333333], [1.74759372E12, 14.733333333333333]], "isOverall": false, "label": "Create CSR-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7475945E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.3333333333333333, "minX": 1.7475933E12, "maxY": 30.083333333333332, "series": [{"data": [[1.74759378E12, 28.8], [1.74759408E12, 29.666666666666668], [1.74759414E12, 30.083333333333332], [1.74759348E12, 29.1], [1.74759444E12, 29.833333333333332], [1.74759354E12, 29.883333333333333], [1.7475945E12, 9.266666666666667], [1.74759384E12, 29.516666666666666], [1.7475939E12, 28.916666666666668], [1.7475942E12, 29.783333333333335], [1.74759426E12, 29.233333333333334], [1.7475933E12, 0.3333333333333333], [1.7475936E12, 29.183333333333334], [1.74759366E12, 29.833333333333332], [1.74759396E12, 28.866666666666667], [1.74759402E12, 28.4], [1.74759432E12, 29.966666666666665], [1.74759336E12, 8.3], [1.74759438E12, 29.4], [1.74759342E12, 13.833333333333334], [1.74759372E12, 29.433333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.74759336E12, 1.1], [1.74759342E12, 0.6]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7475945E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

