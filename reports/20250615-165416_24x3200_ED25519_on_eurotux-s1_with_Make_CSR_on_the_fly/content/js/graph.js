/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 7.0, "minX": 0.0, "maxY": 1592.0, "series": [{"data": [[0.0, 7.0], [0.1, 10.0], [0.2, 14.0], [0.3, 15.0], [0.4, 16.0], [0.5, 17.0], [0.6, 18.0], [0.7, 18.0], [0.8, 19.0], [0.9, 19.0], [1.0, 20.0], [1.1, 20.0], [1.2, 20.0], [1.3, 21.0], [1.4, 21.0], [1.5, 22.0], [1.6, 22.0], [1.7, 22.0], [1.8, 22.0], [1.9, 23.0], [2.0, 23.0], [2.1, 23.0], [2.2, 24.0], [2.3, 24.0], [2.4, 24.0], [2.5, 24.0], [2.6, 24.0], [2.7, 25.0], [2.8, 25.0], [2.9, 25.0], [3.0, 25.0], [3.1, 25.0], [3.2, 26.0], [3.3, 26.0], [3.4, 26.0], [3.5, 26.0], [3.6, 26.0], [3.7, 27.0], [3.8, 27.0], [3.9, 27.0], [4.0, 27.0], [4.1, 27.0], [4.2, 27.0], [4.3, 27.0], [4.4, 28.0], [4.5, 28.0], [4.6, 28.0], [4.7, 28.0], [4.8, 28.0], [4.9, 28.0], [5.0, 28.0], [5.1, 29.0], [5.2, 29.0], [5.3, 29.0], [5.4, 29.0], [5.5, 29.0], [5.6, 29.0], [5.7, 29.0], [5.8, 30.0], [5.9, 30.0], [6.0, 30.0], [6.1, 30.0], [6.2, 30.0], [6.3, 30.0], [6.4, 30.0], [6.5, 30.0], [6.6, 31.0], [6.7, 31.0], [6.8, 31.0], [6.9, 31.0], [7.0, 31.0], [7.1, 31.0], [7.2, 31.0], [7.3, 31.0], [7.4, 31.0], [7.5, 31.0], [7.6, 32.0], [7.7, 32.0], [7.8, 32.0], [7.9, 32.0], [8.0, 32.0], [8.1, 32.0], [8.2, 32.0], [8.3, 32.0], [8.4, 32.0], [8.5, 32.0], [8.6, 33.0], [8.7, 33.0], [8.8, 33.0], [8.9, 33.0], [9.0, 33.0], [9.1, 33.0], [9.2, 33.0], [9.3, 33.0], [9.4, 33.0], [9.5, 34.0], [9.6, 34.0], [9.7, 34.0], [9.8, 34.0], [9.9, 34.0], [10.0, 34.0], [10.1, 34.0], [10.2, 34.0], [10.3, 34.0], [10.4, 34.0], [10.5, 34.0], [10.6, 35.0], [10.7, 35.0], [10.8, 35.0], [10.9, 35.0], [11.0, 35.0], [11.1, 35.0], [11.2, 35.0], [11.3, 35.0], [11.4, 35.0], [11.5, 35.0], [11.6, 35.0], [11.7, 35.0], [11.8, 35.0], [11.9, 35.0], [12.0, 36.0], [12.1, 36.0], [12.2, 36.0], [12.3, 36.0], [12.4, 36.0], [12.5, 36.0], [12.6, 36.0], [12.7, 36.0], [12.8, 36.0], [12.9, 36.0], [13.0, 36.0], [13.1, 36.0], [13.2, 36.0], [13.3, 36.0], [13.4, 36.0], [13.5, 37.0], [13.6, 37.0], [13.7, 37.0], [13.8, 37.0], [13.9, 37.0], [14.0, 37.0], [14.1, 37.0], [14.2, 37.0], [14.3, 37.0], [14.4, 37.0], [14.5, 37.0], [14.6, 37.0], [14.7, 37.0], [14.8, 38.0], [14.9, 38.0], [15.0, 38.0], [15.1, 38.0], [15.2, 38.0], [15.3, 38.0], [15.4, 38.0], [15.5, 38.0], [15.6, 38.0], [15.7, 38.0], [15.8, 38.0], [15.9, 38.0], [16.0, 38.0], [16.1, 38.0], [16.2, 38.0], [16.3, 39.0], [16.4, 39.0], [16.5, 39.0], [16.6, 39.0], [16.7, 39.0], [16.8, 39.0], [16.9, 39.0], [17.0, 39.0], [17.1, 39.0], [17.2, 39.0], [17.3, 39.0], [17.4, 39.0], [17.5, 39.0], [17.6, 39.0], [17.7, 39.0], [17.8, 39.0], [17.9, 39.0], [18.0, 39.0], [18.1, 40.0], [18.2, 40.0], [18.3, 40.0], [18.4, 40.0], [18.5, 40.0], [18.6, 40.0], [18.7, 40.0], [18.8, 40.0], [18.9, 40.0], [19.0, 40.0], [19.1, 40.0], [19.2, 40.0], [19.3, 40.0], [19.4, 40.0], [19.5, 40.0], [19.6, 40.0], [19.7, 40.0], [19.8, 40.0], [19.9, 40.0], [20.0, 41.0], [20.1, 41.0], [20.2, 41.0], [20.3, 41.0], [20.4, 41.0], [20.5, 41.0], [20.6, 41.0], [20.7, 41.0], [20.8, 41.0], [20.9, 41.0], [21.0, 41.0], [21.1, 41.0], [21.2, 41.0], [21.3, 41.0], [21.4, 41.0], [21.5, 41.0], [21.6, 42.0], [21.7, 42.0], [21.8, 42.0], [21.9, 42.0], [22.0, 42.0], [22.1, 42.0], [22.2, 42.0], [22.3, 42.0], [22.4, 42.0], [22.5, 42.0], [22.6, 42.0], [22.7, 42.0], [22.8, 42.0], [22.9, 42.0], [23.0, 42.0], [23.1, 42.0], [23.2, 42.0], [23.3, 42.0], [23.4, 43.0], [23.5, 43.0], [23.6, 43.0], [23.7, 43.0], [23.8, 43.0], [23.9, 43.0], [24.0, 43.0], [24.1, 43.0], [24.2, 43.0], [24.3, 43.0], [24.4, 43.0], [24.5, 43.0], [24.6, 43.0], [24.7, 43.0], [24.8, 43.0], [24.9, 43.0], [25.0, 43.0], [25.1, 43.0], [25.2, 43.0], [25.3, 43.0], [25.4, 43.0], [25.5, 43.0], [25.6, 43.0], [25.7, 43.0], [25.8, 43.0], [25.9, 44.0], [26.0, 44.0], [26.1, 44.0], [26.2, 44.0], [26.3, 44.0], [26.4, 44.0], [26.5, 44.0], [26.6, 44.0], [26.7, 44.0], [26.8, 44.0], [26.9, 44.0], [27.0, 44.0], [27.1, 44.0], [27.2, 44.0], [27.3, 44.0], [27.4, 44.0], [27.5, 44.0], [27.6, 44.0], [27.7, 44.0], [27.8, 44.0], [27.9, 44.0], [28.0, 44.0], [28.1, 44.0], [28.2, 44.0], [28.3, 45.0], [28.4, 45.0], [28.5, 45.0], [28.6, 45.0], [28.7, 45.0], [28.8, 45.0], [28.9, 45.0], [29.0, 45.0], [29.1, 45.0], [29.2, 45.0], [29.3, 45.0], [29.4, 45.0], [29.5, 45.0], [29.6, 45.0], [29.7, 45.0], [29.8, 45.0], [29.9, 45.0], [30.0, 45.0], [30.1, 45.0], [30.2, 45.0], [30.3, 46.0], [30.4, 46.0], [30.5, 46.0], [30.6, 46.0], [30.7, 46.0], [30.8, 46.0], [30.9, 46.0], [31.0, 46.0], [31.1, 46.0], [31.2, 46.0], [31.3, 46.0], [31.4, 46.0], [31.5, 46.0], [31.6, 46.0], [31.7, 46.0], [31.8, 46.0], [31.9, 46.0], [32.0, 46.0], [32.1, 46.0], [32.2, 46.0], [32.3, 46.0], [32.4, 46.0], [32.5, 46.0], [32.6, 47.0], [32.7, 47.0], [32.8, 47.0], [32.9, 47.0], [33.0, 47.0], [33.1, 47.0], [33.2, 47.0], [33.3, 47.0], [33.4, 47.0], [33.5, 47.0], [33.6, 47.0], [33.7, 47.0], [33.8, 47.0], [33.9, 47.0], [34.0, 47.0], [34.1, 47.0], [34.2, 47.0], [34.3, 47.0], [34.4, 47.0], [34.5, 47.0], [34.6, 47.0], [34.7, 47.0], [34.8, 47.0], [34.9, 47.0], [35.0, 47.0], [35.1, 47.0], [35.2, 47.0], [35.3, 47.0], [35.4, 47.0], [35.5, 47.0], [35.6, 48.0], [35.7, 48.0], [35.8, 48.0], [35.9, 48.0], [36.0, 48.0], [36.1, 48.0], [36.2, 48.0], [36.3, 48.0], [36.4, 48.0], [36.5, 48.0], [36.6, 48.0], [36.7, 48.0], [36.8, 48.0], [36.9, 48.0], [37.0, 48.0], [37.1, 48.0], [37.2, 48.0], [37.3, 48.0], [37.4, 48.0], [37.5, 48.0], [37.6, 48.0], [37.7, 48.0], [37.8, 48.0], [37.9, 48.0], [38.0, 48.0], [38.1, 48.0], [38.2, 48.0], [38.3, 48.0], [38.4, 48.0], [38.5, 48.0], [38.6, 49.0], [38.7, 49.0], [38.8, 49.0], [38.9, 49.0], [39.0, 49.0], [39.1, 49.0], [39.2, 49.0], [39.3, 49.0], [39.4, 49.0], [39.5, 49.0], [39.6, 49.0], [39.7, 49.0], [39.8, 49.0], [39.9, 49.0], [40.0, 49.0], [40.1, 49.0], [40.2, 49.0], [40.3, 49.0], [40.4, 49.0], [40.5, 49.0], [40.6, 49.0], [40.7, 49.0], [40.8, 50.0], [40.9, 50.0], [41.0, 50.0], [41.1, 50.0], [41.2, 50.0], [41.3, 50.0], [41.4, 50.0], [41.5, 50.0], [41.6, 50.0], [41.7, 50.0], [41.8, 50.0], [41.9, 50.0], [42.0, 50.0], [42.1, 50.0], [42.2, 50.0], [42.3, 50.0], [42.4, 50.0], [42.5, 50.0], [42.6, 50.0], [42.7, 50.0], [42.8, 50.0], [42.9, 50.0], [43.0, 50.0], [43.1, 50.0], [43.2, 50.0], [43.3, 50.0], [43.4, 51.0], [43.5, 51.0], [43.6, 51.0], [43.7, 51.0], [43.8, 51.0], [43.9, 51.0], [44.0, 51.0], [44.1, 51.0], [44.2, 51.0], [44.3, 51.0], [44.4, 51.0], [44.5, 51.0], [44.6, 51.0], [44.7, 51.0], [44.8, 51.0], [44.9, 51.0], [45.0, 51.0], [45.1, 51.0], [45.2, 51.0], [45.3, 51.0], [45.4, 51.0], [45.5, 51.0], [45.6, 51.0], [45.7, 51.0], [45.8, 51.0], [45.9, 51.0], [46.0, 51.0], [46.1, 51.0], [46.2, 51.0], [46.3, 51.0], [46.4, 51.0], [46.5, 51.0], [46.6, 51.0], [46.7, 51.0], [46.8, 52.0], [46.9, 52.0], [47.0, 52.0], [47.1, 52.0], [47.2, 52.0], [47.3, 52.0], [47.4, 52.0], [47.5, 52.0], [47.6, 52.0], [47.7, 52.0], [47.8, 52.0], [47.9, 52.0], [48.0, 52.0], [48.1, 52.0], [48.2, 52.0], [48.3, 52.0], [48.4, 52.0], [48.5, 52.0], [48.6, 52.0], [48.7, 52.0], [48.8, 52.0], [48.9, 52.0], [49.0, 52.0], [49.1, 52.0], [49.2, 52.0], [49.3, 52.0], [49.4, 52.0], [49.5, 52.0], [49.6, 52.0], [49.7, 52.0], [49.8, 52.0], [49.9, 52.0], [50.0, 52.0], [50.1, 53.0], [50.2, 53.0], [50.3, 53.0], [50.4, 53.0], [50.5, 53.0], [50.6, 53.0], [50.7, 53.0], [50.8, 53.0], [50.9, 53.0], [51.0, 53.0], [51.1, 53.0], [51.2, 53.0], [51.3, 53.0], [51.4, 53.0], [51.5, 53.0], [51.6, 53.0], [51.7, 53.0], [51.8, 53.0], [51.9, 53.0], [52.0, 53.0], [52.1, 53.0], [52.2, 53.0], [52.3, 53.0], [52.4, 54.0], [52.5, 54.0], [52.6, 54.0], [52.7, 54.0], [52.8, 54.0], [52.9, 54.0], [53.0, 54.0], [53.1, 54.0], [53.2, 54.0], [53.3, 54.0], [53.4, 54.0], [53.5, 54.0], [53.6, 54.0], [53.7, 54.0], [53.8, 54.0], [53.9, 54.0], [54.0, 54.0], [54.1, 54.0], [54.2, 54.0], [54.3, 54.0], [54.4, 54.0], [54.5, 54.0], [54.6, 54.0], [54.7, 54.0], [54.8, 54.0], [54.9, 54.0], [55.0, 54.0], [55.1, 55.0], [55.2, 55.0], [55.3, 55.0], [55.4, 55.0], [55.5, 55.0], [55.6, 55.0], [55.7, 55.0], [55.8, 55.0], [55.9, 55.0], [56.0, 55.0], [56.1, 55.0], [56.2, 55.0], [56.3, 55.0], [56.4, 55.0], [56.5, 55.0], [56.6, 55.0], [56.7, 55.0], [56.8, 55.0], [56.9, 55.0], [57.0, 55.0], [57.1, 55.0], [57.2, 55.0], [57.3, 55.0], [57.4, 55.0], [57.5, 55.0], [57.6, 55.0], [57.7, 55.0], [57.8, 55.0], [57.9, 55.0], [58.0, 55.0], [58.1, 55.0], [58.2, 55.0], [58.3, 55.0], [58.4, 55.0], [58.5, 55.0], [58.6, 56.0], [58.7, 56.0], [58.8, 56.0], [58.9, 56.0], [59.0, 56.0], [59.1, 56.0], [59.2, 56.0], [59.3, 56.0], [59.4, 56.0], [59.5, 56.0], [59.6, 56.0], [59.7, 56.0], [59.8, 56.0], [59.9, 56.0], [60.0, 56.0], [60.1, 56.0], [60.2, 56.0], [60.3, 56.0], [60.4, 56.0], [60.5, 56.0], [60.6, 56.0], [60.7, 56.0], [60.8, 56.0], [60.9, 56.0], [61.0, 56.0], [61.1, 56.0], [61.2, 56.0], [61.3, 56.0], [61.4, 56.0], [61.5, 56.0], [61.6, 56.0], [61.7, 56.0], [61.8, 56.0], [61.9, 56.0], [62.0, 56.0], [62.1, 57.0], [62.2, 57.0], [62.3, 57.0], [62.4, 57.0], [62.5, 57.0], [62.6, 57.0], [62.7, 57.0], [62.8, 57.0], [62.9, 57.0], [63.0, 57.0], [63.1, 57.0], [63.2, 57.0], [63.3, 57.0], [63.4, 57.0], [63.5, 57.0], [63.6, 57.0], [63.7, 57.0], [63.8, 57.0], [63.9, 57.0], [64.0, 57.0], [64.1, 57.0], [64.2, 58.0], [64.3, 58.0], [64.4, 58.0], [64.5, 58.0], [64.6, 58.0], [64.7, 58.0], [64.8, 58.0], [64.9, 58.0], [65.0, 58.0], [65.1, 58.0], [65.2, 58.0], [65.3, 58.0], [65.4, 58.0], [65.5, 58.0], [65.6, 58.0], [65.7, 58.0], [65.8, 58.0], [65.9, 58.0], [66.0, 58.0], [66.1, 58.0], [66.2, 58.0], [66.3, 58.0], [66.4, 58.0], [66.5, 58.0], [66.6, 58.0], [66.7, 59.0], [66.8, 59.0], [66.9, 59.0], [67.0, 59.0], [67.1, 59.0], [67.2, 59.0], [67.3, 59.0], [67.4, 59.0], [67.5, 59.0], [67.6, 59.0], [67.7, 59.0], [67.8, 59.0], [67.9, 59.0], [68.0, 59.0], [68.1, 59.0], [68.2, 59.0], [68.3, 59.0], [68.4, 59.0], [68.5, 59.0], [68.6, 59.0], [68.7, 59.0], [68.8, 59.0], [68.9, 59.0], [69.0, 59.0], [69.1, 59.0], [69.2, 59.0], [69.3, 59.0], [69.4, 59.0], [69.5, 59.0], [69.6, 59.0], [69.7, 59.0], [69.8, 59.0], [69.9, 59.0], [70.0, 59.0], [70.1, 59.0], [70.2, 60.0], [70.3, 60.0], [70.4, 60.0], [70.5, 60.0], [70.6, 60.0], [70.7, 60.0], [70.8, 60.0], [70.9, 60.0], [71.0, 60.0], [71.1, 60.0], [71.2, 60.0], [71.3, 60.0], [71.4, 60.0], [71.5, 60.0], [71.6, 60.0], [71.7, 60.0], [71.8, 60.0], [71.9, 60.0], [72.0, 60.0], [72.1, 60.0], [72.2, 60.0], [72.3, 60.0], [72.4, 60.0], [72.5, 60.0], [72.6, 60.0], [72.7, 60.0], [72.8, 60.0], [72.9, 60.0], [73.0, 60.0], [73.1, 60.0], [73.2, 60.0], [73.3, 60.0], [73.4, 60.0], [73.5, 61.0], [73.6, 61.0], [73.7, 61.0], [73.8, 61.0], [73.9, 61.0], [74.0, 61.0], [74.1, 61.0], [74.2, 61.0], [74.3, 61.0], [74.4, 61.0], [74.5, 61.0], [74.6, 61.0], [74.7, 61.0], [74.8, 61.0], [74.9, 61.0], [75.0, 61.0], [75.1, 61.0], [75.2, 61.0], [75.3, 61.0], [75.4, 61.0], [75.5, 62.0], [75.6, 62.0], [75.7, 62.0], [75.8, 62.0], [75.9, 62.0], [76.0, 62.0], [76.1, 62.0], [76.2, 62.0], [76.3, 62.0], [76.4, 62.0], [76.5, 62.0], [76.6, 62.0], [76.7, 62.0], [76.8, 62.0], [76.9, 62.0], [77.0, 62.0], [77.1, 62.0], [77.2, 62.0], [77.3, 62.0], [77.4, 62.0], [77.5, 62.0], [77.6, 62.0], [77.7, 63.0], [77.8, 63.0], [77.9, 63.0], [78.0, 63.0], [78.1, 63.0], [78.2, 63.0], [78.3, 63.0], [78.4, 63.0], [78.5, 63.0], [78.6, 63.0], [78.7, 63.0], [78.8, 63.0], [78.9, 63.0], [79.0, 63.0], [79.1, 63.0], [79.2, 63.0], [79.3, 63.0], [79.4, 63.0], [79.5, 63.0], [79.6, 63.0], [79.7, 63.0], [79.8, 63.0], [79.9, 63.0], [80.0, 63.0], [80.1, 63.0], [80.2, 63.0], [80.3, 63.0], [80.4, 63.0], [80.5, 63.0], [80.6, 63.0], [80.7, 64.0], [80.8, 64.0], [80.9, 64.0], [81.0, 64.0], [81.1, 64.0], [81.2, 64.0], [81.3, 64.0], [81.4, 64.0], [81.5, 64.0], [81.6, 64.0], [81.7, 64.0], [81.8, 64.0], [81.9, 64.0], [82.0, 64.0], [82.1, 64.0], [82.2, 64.0], [82.3, 64.0], [82.4, 64.0], [82.5, 64.0], [82.6, 64.0], [82.7, 64.0], [82.8, 64.0], [82.9, 64.0], [83.0, 64.0], [83.1, 64.0], [83.2, 64.0], [83.3, 64.0], [83.4, 64.0], [83.5, 65.0], [83.6, 65.0], [83.7, 65.0], [83.8, 65.0], [83.9, 65.0], [84.0, 65.0], [84.1, 65.0], [84.2, 65.0], [84.3, 65.0], [84.4, 65.0], [84.5, 65.0], [84.6, 65.0], [84.7, 65.0], [84.8, 65.0], [84.9, 65.0], [85.0, 66.0], [85.1, 66.0], [85.2, 66.0], [85.3, 66.0], [85.4, 66.0], [85.5, 66.0], [85.6, 66.0], [85.7, 66.0], [85.8, 66.0], [85.9, 66.0], [86.0, 66.0], [86.1, 66.0], [86.2, 66.0], [86.3, 66.0], [86.4, 66.0], [86.5, 66.0], [86.6, 66.0], [86.7, 67.0], [86.8, 67.0], [86.9, 67.0], [87.0, 67.0], [87.1, 67.0], [87.2, 67.0], [87.3, 67.0], [87.4, 67.0], [87.5, 67.0], [87.6, 67.0], [87.7, 67.0], [87.8, 67.0], [87.9, 67.0], [88.0, 67.0], [88.1, 67.0], [88.2, 67.0], [88.3, 67.0], [88.4, 67.0], [88.5, 67.0], [88.6, 67.0], [88.7, 68.0], [88.8, 68.0], [88.9, 68.0], [89.0, 68.0], [89.1, 68.0], [89.2, 68.0], [89.3, 68.0], [89.4, 68.0], [89.5, 68.0], [89.6, 68.0], [89.7, 68.0], [89.8, 68.0], [89.9, 68.0], [90.0, 68.0], [90.1, 68.0], [90.2, 68.0], [90.3, 68.0], [90.4, 68.0], [90.5, 68.0], [90.6, 68.0], [90.7, 69.0], [90.8, 69.0], [90.9, 69.0], [91.0, 69.0], [91.1, 69.0], [91.2, 69.0], [91.3, 69.0], [91.4, 69.0], [91.5, 69.0], [91.6, 69.0], [91.7, 70.0], [91.8, 70.0], [91.9, 70.0], [92.0, 70.0], [92.1, 70.0], [92.2, 70.0], [92.3, 70.0], [92.4, 70.0], [92.5, 70.0], [92.6, 70.0], [92.7, 71.0], [92.8, 71.0], [92.9, 71.0], [93.0, 71.0], [93.1, 71.0], [93.2, 71.0], [93.3, 71.0], [93.4, 71.0], [93.5, 71.0], [93.6, 71.0], [93.7, 71.0], [93.8, 71.0], [93.9, 72.0], [94.0, 72.0], [94.1, 72.0], [94.2, 72.0], [94.3, 72.0], [94.4, 72.0], [94.5, 72.0], [94.6, 72.0], [94.7, 72.0], [94.8, 72.0], [94.9, 72.0], [95.0, 72.0], [95.1, 72.0], [95.2, 72.0], [95.3, 73.0], [95.4, 73.0], [95.5, 73.0], [95.6, 73.0], [95.7, 73.0], [95.8, 73.0], [95.9, 74.0], [96.0, 74.0], [96.1, 74.0], [96.2, 74.0], [96.3, 74.0], [96.4, 75.0], [96.5, 75.0], [96.6, 75.0], [96.7, 75.0], [96.8, 75.0], [96.9, 75.0], [97.0, 75.0], [97.1, 75.0], [97.2, 76.0], [97.3, 76.0], [97.4, 76.0], [97.5, 76.0], [97.6, 76.0], [97.7, 76.0], [97.8, 76.0], [97.9, 76.0], [98.0, 77.0], [98.1, 77.0], [98.2, 78.0], [98.3, 78.0], [98.4, 78.0], [98.5, 79.0], [98.6, 79.0], [98.7, 79.0], [98.8, 80.0], [98.9, 80.0], [99.0, 80.0], [99.1, 80.0], [99.2, 81.0], [99.3, 82.0], [99.4, 83.0], [99.5, 83.0], [99.6, 84.0], [99.7, 86.0], [99.8, 88.0], [99.9, 92.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 185.0], [0.1, 220.0], [0.2, 231.0], [0.3, 238.0], [0.4, 243.0], [0.5, 248.0], [0.6, 252.0], [0.7, 255.0], [0.8, 258.0], [0.9, 261.0], [1.0, 264.0], [1.1, 266.0], [1.2, 269.0], [1.3, 271.0], [1.4, 273.0], [1.5, 275.0], [1.6, 277.0], [1.7, 279.0], [1.8, 280.0], [1.9, 282.0], [2.0, 284.0], [2.1, 285.0], [2.2, 287.0], [2.3, 288.0], [2.4, 289.0], [2.5, 291.0], [2.6, 292.0], [2.7, 293.0], [2.8, 294.0], [2.9, 296.0], [3.0, 297.0], [3.1, 298.0], [3.2, 299.0], [3.3, 300.0], [3.4, 301.0], [3.5, 303.0], [3.6, 304.0], [3.7, 305.0], [3.8, 306.0], [3.9, 307.0], [4.0, 308.0], [4.1, 309.0], [4.2, 310.0], [4.3, 311.0], [4.4, 312.0], [4.5, 313.0], [4.6, 314.0], [4.7, 315.0], [4.8, 316.0], [4.9, 317.0], [5.0, 318.0], [5.1, 319.0], [5.2, 320.0], [5.3, 321.0], [5.4, 321.0], [5.5, 322.0], [5.6, 323.0], [5.7, 324.0], [5.8, 325.0], [5.9, 326.0], [6.0, 326.0], [6.1, 327.0], [6.2, 328.0], [6.3, 329.0], [6.4, 330.0], [6.5, 331.0], [6.6, 331.0], [6.7, 332.0], [6.8, 333.0], [6.9, 334.0], [7.0, 335.0], [7.1, 335.0], [7.2, 336.0], [7.3, 337.0], [7.4, 337.0], [7.5, 338.0], [7.6, 339.0], [7.7, 340.0], [7.8, 340.0], [7.9, 341.0], [8.0, 342.0], [8.1, 342.0], [8.2, 343.0], [8.3, 344.0], [8.4, 345.0], [8.5, 345.0], [8.6, 346.0], [8.7, 347.0], [8.8, 348.0], [8.9, 348.0], [9.0, 349.0], [9.1, 350.0], [9.2, 350.0], [9.3, 351.0], [9.4, 352.0], [9.5, 353.0], [9.6, 353.0], [9.7, 354.0], [9.8, 355.0], [9.9, 356.0], [10.0, 356.0], [10.1, 357.0], [10.2, 358.0], [10.3, 358.0], [10.4, 359.0], [10.5, 360.0], [10.6, 360.0], [10.7, 361.0], [10.8, 362.0], [10.9, 362.0], [11.0, 363.0], [11.1, 364.0], [11.2, 364.0], [11.3, 365.0], [11.4, 365.0], [11.5, 366.0], [11.6, 367.0], [11.7, 368.0], [11.8, 368.0], [11.9, 369.0], [12.0, 370.0], [12.1, 371.0], [12.2, 371.0], [12.3, 372.0], [12.4, 372.0], [12.5, 373.0], [12.6, 374.0], [12.7, 374.0], [12.8, 375.0], [12.9, 376.0], [13.0, 376.0], [13.1, 377.0], [13.2, 378.0], [13.3, 378.0], [13.4, 379.0], [13.5, 380.0], [13.6, 380.0], [13.7, 381.0], [13.8, 381.0], [13.9, 382.0], [14.0, 383.0], [14.1, 384.0], [14.2, 384.0], [14.3, 385.0], [14.4, 385.0], [14.5, 386.0], [14.6, 387.0], [14.7, 387.0], [14.8, 388.0], [14.9, 389.0], [15.0, 389.0], [15.1, 390.0], [15.2, 390.0], [15.3, 391.0], [15.4, 392.0], [15.5, 392.0], [15.6, 393.0], [15.7, 394.0], [15.8, 394.0], [15.9, 395.0], [16.0, 396.0], [16.1, 396.0], [16.2, 397.0], [16.3, 397.0], [16.4, 398.0], [16.5, 399.0], [16.6, 399.0], [16.7, 400.0], [16.8, 400.0], [16.9, 401.0], [17.0, 402.0], [17.1, 402.0], [17.2, 403.0], [17.3, 404.0], [17.4, 404.0], [17.5, 405.0], [17.6, 405.0], [17.7, 406.0], [17.8, 407.0], [17.9, 407.0], [18.0, 408.0], [18.1, 408.0], [18.2, 409.0], [18.3, 409.0], [18.4, 410.0], [18.5, 411.0], [18.6, 411.0], [18.7, 412.0], [18.8, 412.0], [18.9, 413.0], [19.0, 413.0], [19.1, 414.0], [19.2, 415.0], [19.3, 415.0], [19.4, 416.0], [19.5, 417.0], [19.6, 417.0], [19.7, 418.0], [19.8, 419.0], [19.9, 419.0], [20.0, 420.0], [20.1, 420.0], [20.2, 421.0], [20.3, 421.0], [20.4, 422.0], [20.5, 423.0], [20.6, 423.0], [20.7, 424.0], [20.8, 425.0], [20.9, 425.0], [21.0, 426.0], [21.1, 426.0], [21.2, 427.0], [21.3, 428.0], [21.4, 428.0], [21.5, 429.0], [21.6, 429.0], [21.7, 430.0], [21.8, 431.0], [21.9, 431.0], [22.0, 432.0], [22.1, 432.0], [22.2, 433.0], [22.3, 434.0], [22.4, 434.0], [22.5, 435.0], [22.6, 436.0], [22.7, 436.0], [22.8, 437.0], [22.9, 437.0], [23.0, 438.0], [23.1, 439.0], [23.2, 439.0], [23.3, 440.0], [23.4, 440.0], [23.5, 441.0], [23.6, 441.0], [23.7, 442.0], [23.8, 443.0], [23.9, 444.0], [24.0, 444.0], [24.1, 445.0], [24.2, 445.0], [24.3, 446.0], [24.4, 447.0], [24.5, 447.0], [24.6, 448.0], [24.7, 449.0], [24.8, 449.0], [24.9, 450.0], [25.0, 450.0], [25.1, 451.0], [25.2, 452.0], [25.3, 452.0], [25.4, 453.0], [25.5, 453.0], [25.6, 454.0], [25.7, 455.0], [25.8, 455.0], [25.9, 456.0], [26.0, 457.0], [26.1, 457.0], [26.2, 458.0], [26.3, 458.0], [26.4, 459.0], [26.5, 460.0], [26.6, 460.0], [26.7, 461.0], [26.8, 461.0], [26.9, 462.0], [27.0, 463.0], [27.1, 463.0], [27.2, 464.0], [27.3, 464.0], [27.4, 465.0], [27.5, 465.0], [27.6, 466.0], [27.7, 467.0], [27.8, 468.0], [27.9, 468.0], [28.0, 469.0], [28.1, 469.0], [28.2, 470.0], [28.3, 470.0], [28.4, 471.0], [28.5, 472.0], [28.6, 472.0], [28.7, 473.0], [28.8, 473.0], [28.9, 473.0], [29.0, 474.0], [29.1, 475.0], [29.2, 475.0], [29.3, 476.0], [29.4, 476.0], [29.5, 477.0], [29.6, 477.0], [29.7, 478.0], [29.8, 479.0], [29.9, 480.0], [30.0, 480.0], [30.1, 481.0], [30.2, 481.0], [30.3, 481.0], [30.4, 482.0], [30.5, 483.0], [30.6, 483.0], [30.7, 484.0], [30.8, 485.0], [30.9, 485.0], [31.0, 485.0], [31.1, 486.0], [31.2, 487.0], [31.3, 487.0], [31.4, 488.0], [31.5, 488.0], [31.6, 489.0], [31.7, 489.0], [31.8, 490.0], [31.9, 491.0], [32.0, 491.0], [32.1, 492.0], [32.2, 493.0], [32.3, 493.0], [32.4, 493.0], [32.5, 494.0], [32.6, 495.0], [32.7, 496.0], [32.8, 496.0], [32.9, 497.0], [33.0, 497.0], [33.1, 497.0], [33.2, 498.0], [33.3, 499.0], [33.4, 500.0], [33.5, 500.0], [33.6, 501.0], [33.7, 501.0], [33.8, 502.0], [33.9, 503.0], [34.0, 503.0], [34.1, 504.0], [34.2, 504.0], [34.3, 505.0], [34.4, 505.0], [34.5, 506.0], [34.6, 507.0], [34.7, 508.0], [34.8, 508.0], [34.9, 509.0], [35.0, 509.0], [35.1, 509.0], [35.2, 510.0], [35.3, 511.0], [35.4, 512.0], [35.5, 512.0], [35.6, 513.0], [35.7, 513.0], [35.8, 514.0], [35.9, 514.0], [36.0, 515.0], [36.1, 516.0], [36.2, 516.0], [36.3, 517.0], [36.4, 517.0], [36.5, 518.0], [36.6, 518.0], [36.7, 519.0], [36.8, 520.0], [36.9, 520.0], [37.0, 521.0], [37.1, 521.0], [37.2, 522.0], [37.3, 523.0], [37.4, 523.0], [37.5, 524.0], [37.6, 524.0], [37.7, 525.0], [37.8, 525.0], [37.9, 526.0], [38.0, 527.0], [38.1, 527.0], [38.2, 528.0], [38.3, 528.0], [38.4, 529.0], [38.5, 529.0], [38.6, 530.0], [38.7, 531.0], [38.8, 532.0], [38.9, 532.0], [39.0, 533.0], [39.1, 533.0], [39.2, 534.0], [39.3, 535.0], [39.4, 536.0], [39.5, 536.0], [39.6, 537.0], [39.7, 537.0], [39.8, 537.0], [39.9, 538.0], [40.0, 539.0], [40.1, 539.0], [40.2, 540.0], [40.3, 540.0], [40.4, 541.0], [40.5, 541.0], [40.6, 542.0], [40.7, 543.0], [40.8, 543.0], [40.9, 544.0], [41.0, 544.0], [41.1, 545.0], [41.2, 545.0], [41.3, 546.0], [41.4, 547.0], [41.5, 548.0], [41.6, 548.0], [41.7, 549.0], [41.8, 549.0], [41.9, 550.0], [42.0, 550.0], [42.1, 551.0], [42.2, 552.0], [42.3, 552.0], [42.4, 553.0], [42.5, 553.0], [42.6, 554.0], [42.7, 555.0], [42.8, 556.0], [42.9, 556.0], [43.0, 557.0], [43.1, 557.0], [43.2, 558.0], [43.3, 559.0], [43.4, 559.0], [43.5, 560.0], [43.6, 560.0], [43.7, 561.0], [43.8, 561.0], [43.9, 562.0], [44.0, 563.0], [44.1, 563.0], [44.2, 564.0], [44.3, 564.0], [44.4, 565.0], [44.5, 565.0], [44.6, 566.0], [44.7, 567.0], [44.8, 568.0], [44.9, 568.0], [45.0, 569.0], [45.1, 569.0], [45.2, 569.0], [45.3, 570.0], [45.4, 571.0], [45.5, 572.0], [45.6, 572.0], [45.7, 573.0], [45.8, 573.0], [45.9, 574.0], [46.0, 575.0], [46.1, 576.0], [46.2, 576.0], [46.3, 577.0], [46.4, 577.0], [46.5, 578.0], [46.6, 578.0], [46.7, 579.0], [46.8, 580.0], [46.9, 580.0], [47.0, 581.0], [47.1, 581.0], [47.2, 582.0], [47.3, 583.0], [47.4, 583.0], [47.5, 584.0], [47.6, 584.0], [47.7, 585.0], [47.8, 585.0], [47.9, 586.0], [48.0, 587.0], [48.1, 588.0], [48.2, 588.0], [48.3, 589.0], [48.4, 589.0], [48.5, 590.0], [48.6, 591.0], [48.7, 591.0], [48.8, 592.0], [48.9, 593.0], [49.0, 593.0], [49.1, 594.0], [49.2, 594.0], [49.3, 595.0], [49.4, 596.0], [49.5, 596.0], [49.6, 597.0], [49.7, 597.0], [49.8, 598.0], [49.9, 599.0], [50.0, 599.0], [50.1, 600.0], [50.2, 601.0], [50.3, 601.0], [50.4, 602.0], [50.5, 603.0], [50.6, 603.0], [50.7, 604.0], [50.8, 604.0], [50.9, 605.0], [51.0, 605.0], [51.1, 606.0], [51.2, 607.0], [51.3, 608.0], [51.4, 608.0], [51.5, 609.0], [51.6, 609.0], [51.7, 610.0], [51.8, 610.0], [51.9, 611.0], [52.0, 612.0], [52.1, 612.0], [52.2, 613.0], [52.3, 613.0], [52.4, 614.0], [52.5, 615.0], [52.6, 616.0], [52.7, 616.0], [52.8, 617.0], [52.9, 617.0], [53.0, 618.0], [53.1, 618.0], [53.2, 619.0], [53.3, 620.0], [53.4, 620.0], [53.5, 621.0], [53.6, 621.0], [53.7, 622.0], [53.8, 623.0], [53.9, 624.0], [54.0, 624.0], [54.1, 625.0], [54.2, 625.0], [54.3, 626.0], [54.4, 627.0], [54.5, 627.0], [54.6, 628.0], [54.7, 629.0], [54.8, 629.0], [54.9, 630.0], [55.0, 630.0], [55.1, 631.0], [55.2, 632.0], [55.3, 632.0], [55.4, 633.0], [55.5, 633.0], [55.6, 634.0], [55.7, 635.0], [55.8, 636.0], [55.9, 636.0], [56.0, 637.0], [56.1, 637.0], [56.2, 638.0], [56.3, 639.0], [56.4, 640.0], [56.5, 640.0], [56.6, 641.0], [56.7, 641.0], [56.8, 642.0], [56.9, 643.0], [57.0, 644.0], [57.1, 644.0], [57.2, 645.0], [57.3, 645.0], [57.4, 646.0], [57.5, 647.0], [57.6, 648.0], [57.7, 648.0], [57.8, 649.0], [57.9, 649.0], [58.0, 650.0], [58.1, 651.0], [58.2, 652.0], [58.3, 653.0], [58.4, 653.0], [58.5, 653.0], [58.6, 654.0], [58.7, 655.0], [58.8, 656.0], [58.9, 656.0], [59.0, 657.0], [59.1, 657.0], [59.2, 658.0], [59.3, 659.0], [59.4, 660.0], [59.5, 660.0], [59.6, 661.0], [59.7, 661.0], [59.8, 662.0], [59.9, 663.0], [60.0, 663.0], [60.1, 664.0], [60.2, 665.0], [60.3, 665.0], [60.4, 666.0], [60.5, 667.0], [60.6, 668.0], [60.7, 668.0], [60.8, 669.0], [60.9, 669.0], [61.0, 670.0], [61.1, 671.0], [61.2, 672.0], [61.3, 672.0], [61.4, 673.0], [61.5, 673.0], [61.6, 674.0], [61.7, 675.0], [61.8, 676.0], [61.9, 676.0], [62.0, 677.0], [62.1, 677.0], [62.2, 678.0], [62.3, 679.0], [62.4, 680.0], [62.5, 680.0], [62.6, 681.0], [62.7, 681.0], [62.8, 682.0], [62.9, 683.0], [63.0, 684.0], [63.1, 684.0], [63.2, 685.0], [63.3, 685.0], [63.4, 686.0], [63.5, 687.0], [63.6, 688.0], [63.7, 688.0], [63.8, 689.0], [63.9, 689.0], [64.0, 690.0], [64.1, 691.0], [64.2, 692.0], [64.3, 693.0], [64.4, 693.0], [64.5, 693.0], [64.6, 694.0], [64.7, 695.0], [64.8, 696.0], [64.9, 697.0], [65.0, 697.0], [65.1, 698.0], [65.2, 699.0], [65.3, 699.0], [65.4, 700.0], [65.5, 701.0], [65.6, 701.0], [65.7, 702.0], [65.8, 703.0], [65.9, 704.0], [66.0, 704.0], [66.1, 705.0], [66.2, 706.0], [66.3, 707.0], [66.4, 707.0], [66.5, 708.0], [66.6, 709.0], [66.7, 709.0], [66.8, 710.0], [66.9, 711.0], [67.0, 712.0], [67.1, 712.0], [67.2, 713.0], [67.3, 713.0], [67.4, 714.0], [67.5, 715.0], [67.6, 716.0], [67.7, 717.0], [67.8, 717.0], [67.9, 718.0], [68.0, 719.0], [68.1, 720.0], [68.2, 720.0], [68.3, 721.0], [68.4, 721.0], [68.5, 722.0], [68.6, 723.0], [68.7, 724.0], [68.8, 725.0], [68.9, 725.0], [69.0, 726.0], [69.1, 727.0], [69.2, 727.0], [69.3, 728.0], [69.4, 729.0], [69.5, 729.0], [69.6, 730.0], [69.7, 731.0], [69.8, 732.0], [69.9, 732.0], [70.0, 733.0], [70.1, 734.0], [70.2, 734.0], [70.3, 735.0], [70.4, 736.0], [70.5, 737.0], [70.6, 737.0], [70.7, 738.0], [70.8, 739.0], [70.9, 740.0], [71.0, 740.0], [71.1, 741.0], [71.2, 741.0], [71.3, 742.0], [71.4, 743.0], [71.5, 744.0], [71.6, 745.0], [71.7, 745.0], [71.8, 746.0], [71.9, 747.0], [72.0, 748.0], [72.1, 748.0], [72.2, 749.0], [72.3, 749.0], [72.4, 750.0], [72.5, 751.0], [72.6, 752.0], [72.7, 753.0], [72.8, 753.0], [72.9, 754.0], [73.0, 755.0], [73.1, 756.0], [73.2, 757.0], [73.3, 757.0], [73.4, 758.0], [73.5, 759.0], [73.6, 760.0], [73.7, 760.0], [73.8, 761.0], [73.9, 762.0], [74.0, 762.0], [74.1, 764.0], [74.2, 765.0], [74.3, 765.0], [74.4, 766.0], [74.5, 767.0], [74.6, 768.0], [74.7, 768.0], [74.8, 769.0], [74.9, 770.0], [75.0, 771.0], [75.1, 772.0], [75.2, 772.0], [75.3, 773.0], [75.4, 774.0], [75.5, 775.0], [75.6, 776.0], [75.7, 777.0], [75.8, 777.0], [75.9, 778.0], [76.0, 779.0], [76.1, 780.0], [76.2, 781.0], [76.3, 781.0], [76.4, 782.0], [76.5, 783.0], [76.6, 784.0], [76.7, 785.0], [76.8, 785.0], [76.9, 786.0], [77.0, 787.0], [77.1, 788.0], [77.2, 789.0], [77.3, 789.0], [77.4, 790.0], [77.5, 791.0], [77.6, 792.0], [77.7, 793.0], [77.8, 793.0], [77.9, 795.0], [78.0, 796.0], [78.1, 796.0], [78.2, 797.0], [78.3, 797.0], [78.4, 799.0], [78.5, 800.0], [78.6, 800.0], [78.7, 801.0], [78.8, 802.0], [78.9, 803.0], [79.0, 804.0], [79.1, 805.0], [79.2, 805.0], [79.3, 806.0], [79.4, 807.0], [79.5, 808.0], [79.6, 809.0], [79.7, 810.0], [79.8, 811.0], [79.9, 812.0], [80.0, 813.0], [80.1, 813.0], [80.2, 814.0], [80.3, 815.0], [80.4, 816.0], [80.5, 817.0], [80.6, 818.0], [80.7, 819.0], [80.8, 820.0], [80.9, 821.0], [81.0, 821.0], [81.1, 823.0], [81.2, 824.0], [81.3, 825.0], [81.4, 825.0], [81.5, 827.0], [81.6, 828.0], [81.7, 829.0], [81.8, 829.0], [81.9, 830.0], [82.0, 832.0], [82.1, 832.0], [82.2, 833.0], [82.3, 834.0], [82.4, 835.0], [82.5, 836.0], [82.6, 837.0], [82.7, 837.0], [82.8, 839.0], [82.9, 840.0], [83.0, 840.0], [83.1, 841.0], [83.2, 842.0], [83.3, 843.0], [83.4, 844.0], [83.5, 845.0], [83.6, 846.0], [83.7, 847.0], [83.8, 848.0], [83.9, 849.0], [84.0, 850.0], [84.1, 851.0], [84.2, 852.0], [84.3, 853.0], [84.4, 854.0], [84.5, 855.0], [84.6, 856.0], [84.7, 857.0], [84.8, 858.0], [84.9, 860.0], [85.0, 861.0], [85.1, 861.0], [85.2, 862.0], [85.3, 864.0], [85.4, 865.0], [85.5, 865.0], [85.6, 867.0], [85.7, 868.0], [85.8, 869.0], [85.9, 870.0], [86.0, 871.0], [86.1, 872.0], [86.2, 873.0], [86.3, 874.0], [86.4, 875.0], [86.5, 876.0], [86.6, 877.0], [86.7, 878.0], [86.8, 880.0], [86.9, 881.0], [87.0, 882.0], [87.1, 883.0], [87.2, 884.0], [87.3, 885.0], [87.4, 886.0], [87.5, 888.0], [87.6, 889.0], [87.7, 889.0], [87.8, 891.0], [87.9, 892.0], [88.0, 893.0], [88.1, 894.0], [88.2, 896.0], [88.3, 897.0], [88.4, 898.0], [88.5, 899.0], [88.6, 901.0], [88.7, 902.0], [88.8, 903.0], [88.9, 905.0], [89.0, 906.0], [89.1, 907.0], [89.2, 909.0], [89.3, 910.0], [89.4, 911.0], [89.5, 912.0], [89.6, 914.0], [89.7, 916.0], [89.8, 917.0], [89.9, 918.0], [90.0, 920.0], [90.1, 921.0], [90.2, 922.0], [90.3, 924.0], [90.4, 925.0], [90.5, 926.0], [90.6, 928.0], [90.7, 929.0], [90.8, 930.0], [90.9, 932.0], [91.0, 933.0], [91.1, 934.0], [91.2, 936.0], [91.3, 937.0], [91.4, 938.0], [91.5, 940.0], [91.6, 941.0], [91.7, 942.0], [91.8, 944.0], [91.9, 945.0], [92.0, 947.0], [92.1, 949.0], [92.2, 951.0], [92.3, 952.0], [92.4, 954.0], [92.5, 956.0], [92.6, 957.0], [92.7, 959.0], [92.8, 961.0], [92.9, 963.0], [93.0, 964.0], [93.1, 966.0], [93.2, 968.0], [93.3, 970.0], [93.4, 972.0], [93.5, 973.0], [93.6, 976.0], [93.7, 978.0], [93.8, 980.0], [93.9, 982.0], [94.0, 984.0], [94.1, 986.0], [94.2, 989.0], [94.3, 991.0], [94.4, 993.0], [94.5, 995.0], [94.6, 997.0], [94.7, 1000.0], [94.8, 1001.0], [94.9, 1004.0], [95.0, 1006.0], [95.1, 1008.0], [95.2, 1011.0], [95.3, 1013.0], [95.4, 1016.0], [95.5, 1018.0], [95.6, 1021.0], [95.7, 1024.0], [95.8, 1026.0], [95.9, 1028.0], [96.0, 1032.0], [96.1, 1035.0], [96.2, 1038.0], [96.3, 1041.0], [96.4, 1044.0], [96.5, 1048.0], [96.6, 1051.0], [96.7, 1053.0], [96.8, 1057.0], [96.9, 1061.0], [97.0, 1065.0], [97.1, 1067.0], [97.2, 1071.0], [97.3, 1074.0], [97.4, 1079.0], [97.5, 1082.0], [97.6, 1087.0], [97.7, 1091.0], [97.8, 1094.0], [97.9, 1099.0], [98.0, 1103.0], [98.1, 1108.0], [98.2, 1114.0], [98.3, 1119.0], [98.4, 1124.0], [98.5, 1131.0], [98.6, 1137.0], [98.7, 1144.0], [98.8, 1151.0], [98.9, 1161.0], [99.0, 1169.0], [99.1, 1178.0], [99.2, 1188.0], [99.3, 1199.0], [99.4, 1212.0], [99.5, 1225.0], [99.6, 1248.0], [99.7, 1270.0], [99.8, 1303.0], [99.9, 1349.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "maxY": 76768.0, "series": [{"data": [[0.0, 76768.0], [100.0, 32.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[600.0, 11745.0], [700.0, 10125.0], [800.0, 7691.0], [200.0, 2471.0], [900.0, 4747.0], [1000.0, 2488.0], [1100.0, 1059.0], [300.0, 10293.0], [1200.0, 373.0], [1300.0, 126.0], [1400.0, 28.0], [1500.0, 9.0], [400.0, 12863.0], [100.0, 11.0], [500.0, 12771.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 102584.0, "series": [{"data": [[0.0, 102584.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 51007.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 9.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 19.249750249750257, "minX": 1.75000284E12, "maxY": 24.0, "series": [{"data": [[1.7500038E12, 24.0], [1.7500035E12, 24.0], [1.7500041E12, 24.0], [1.7500044E12, 24.0], [1.75000308E12, 24.0], [1.7500047E12, 24.0], [1.750005E12, 19.249750249750257], [1.75000368E12, 24.0], [1.75000338E12, 24.0], [1.75000398E12, 24.0], [1.75000428E12, 24.0], [1.75000296E12, 24.0], [1.75000458E12, 24.0], [1.75000488E12, 24.0], [1.75000356E12, 24.0], [1.75000326E12, 24.0], [1.75000386E12, 24.0], [1.75000416E12, 24.0], [1.75000284E12, 23.956672760511875], [1.75000446E12, 24.0], [1.75000476E12, 24.0], [1.75000344E12, 24.0], [1.75000314E12, 24.0], [1.75000404E12, 24.0], [1.75000374E12, 24.0], [1.75000434E12, 24.0], [1.75000464E12, 24.0], [1.75000332E12, 24.0], [1.75000494E12, 24.0], [1.75000302E12, 24.0], [1.75000392E12, 24.0], [1.75000362E12, 24.0], [1.75000422E12, 24.0], [1.75000452E12, 24.0], [1.7500032E12, 24.0], [1.75000482E12, 24.0], [1.7500029E12, 24.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.750005E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 7.5, "minX": 1.0, "maxY": 892.1317567567567, "series": [{"data": [[8.0, 10.142857142857142], [2.0, 7.5], [9.0, 17.599999999999998], [10.0, 11.8], [11.0, 17.749999999999996], [12.0, 23.0], [3.0, 8.071428571428571], [13.0, 37.99999999999999], [14.0, 33.25], [15.0, 50.3125], [16.0, 55.0], [4.0, 8.125], [1.0, 9.0], [17.0, 58.5], [18.0, 64.83333333333333], [19.0, 61.0], [20.0, 57.81818181818183], [5.0, 8.4], [21.0, 49.2], [22.0, 60.66666666666667], [23.0, 57.61824324324324], [24.0, 51.9133813892532], [6.0, 9.0], [7.0, 9.571428571428571]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[23.96760416666645, 51.89613281250016]], "isOverall": false, "label": "Create CSR-Aggregated", "isController": false}, {"data": [[8.0, 412.57142857142856], [2.0, 318.3333333333333], [9.0, 436.5], [10.0, 445.5], [11.0, 489.5], [12.0, 487.0], [3.0, 328.2], [13.0, 539.2], [14.0, 569.0], [15.0, 566.7142857142858], [16.0, 620.2857142857143], [4.0, 344.55555555555554], [1.0, 306.0], [17.0, 797.0], [18.0, 680.8461538461539], [19.0, 715.9090909090909], [20.0, 782.6060606060607], [5.0, 363.6], [21.0, 845.5], [22.0, 860.8888888888889], [23.0, 892.1317567567567], [24.0, 621.2997771952873], [6.0, 359.0], [7.0, 391.9333333333334]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}, {"data": [[23.967395833333324, 622.2162630208389]], "isOverall": false, "label": "HTTP Request - enroll-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 24.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 6805.666666666667, "minX": 1.75000284E12, "maxY": 98831.36666666667, "series": [{"data": [[1.7500038E12, 53925.933333333334], [1.7500035E12, 61192.066666666666], [1.7500041E12, 48290.03333333333], [1.7500044E12, 44383.03333333333], [1.75000308E12, 81631.95], [1.7500047E12, 41050.76666666667], [1.750005E12, 13523.15], [1.75000368E12, 56010.55], [1.75000338E12, 65323.3], [1.75000398E12, 46935.55], [1.75000428E12, 46136.566666666666], [1.75000296E12, 92193.28333333334], [1.75000458E12, 42436.416666666664], [1.75000488E12, 39664.28333333333], [1.75000356E12, 59251.5], [1.75000326E12, 69706.48333333334], [1.75000386E12, 49361.78333333333], [1.75000416E12, 47448.166666666664], [1.75000284E12, 72745.38333333333], [1.75000446E12, 43918.88333333333], [1.75000476E12, 40752.433333333334], [1.75000344E12, 63164.666666666664], [1.75000314E12, 77313.63333333333], [1.75000404E12, 46957.8], [1.75000374E12, 54693.5], [1.75000434E12, 45320.98333333333], [1.75000464E12, 42042.5], [1.75000332E12, 67866.7], [1.75000494E12, 39563.4], [1.75000302E12, 86057.45], [1.75000392E12, 47554.96666666667], [1.75000362E12, 58281.01666666667], [1.75000422E12, 46675.583333333336], [1.75000452E12, 43012.85], [1.7500032E12, 73710.1], [1.75000482E12, 40271.8], [1.7500029E12, 98831.36666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7500038E12, 26897.733333333334], [1.7500035E12, 30526.833333333332], [1.7500041E12, 24091.9], [1.7500044E12, 22138.2], [1.75000308E12, 40725.5], [1.7500047E12, 20475.733333333334], [1.750005E12, 6805.666666666667], [1.75000368E12, 27934.533333333333], [1.75000338E12, 32587.7], [1.75000398E12, 23412.9], [1.75000428E12, 23015.2], [1.75000296E12, 45977.26666666667], [1.75000458E12, 21166.766666666666], [1.75000488E12, 19783.9], [1.75000356E12, 29556.9], [1.75000326E12, 34768.96666666667], [1.75000386E12, 24623.733333333334], [1.75000416E12, 23666.633333333335], [1.75000284E12, 36231.23333333333], [1.75000446E12, 21911.533333333333], [1.75000476E12, 20329.566666666666], [1.75000344E12, 31497.666666666668], [1.75000314E12, 38557.96666666667], [1.75000404E12, 23413.9], [1.75000374E12, 27283.2], [1.75000434E12, 22602.766666666666], [1.75000464E12, 20967.966666666667], [1.75000332E12, 33851.066666666666], [1.75000494E12, 19731.166666666668], [1.75000302E12, 42918.7], [1.75000392E12, 23719.866666666665], [1.75000362E12, 29064.866666666665], [1.75000422E12, 23281.766666666666], [1.75000452E12, 21446.366666666665], [1.7500032E12, 36763.566666666666], [1.75000482E12, 20089.266666666666], [1.7500029E12, 49301.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.750005E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 44.07832422586518, "minX": 1.75000284E12, "maxY": 910.9177897574109, "series": [{"data": [[1.7500038E12, 52.50963914977745], [1.7500035E12, 51.01874455100258], [1.7500041E12, 55.67237569060774], [1.7500044E12, 56.54954954954954], [1.75000308E12, 46.707843137254834], [1.7500047E12, 57.78246753246755], [1.750005E12, 50.85480572597135], [1.75000368E12, 52.57897240723111], [1.75000338E12, 49.882400979991914], [1.75000398E12, 56.76250000000003], [1.75000428E12, 54.375722543352495], [1.75000296E12, 45.45911586246755], [1.75000458E12, 56.21670854271359], [1.75000488E12, 57.9072580645161], [1.75000356E12, 51.73492349234926], [1.75000326E12, 48.96711281070744], [1.75000386E12, 54.53808752025932], [1.75000416E12, 56.00449438202245], [1.75000284E12, 44.07832422586518], [1.75000446E12, 56.66524908869993], [1.75000476E12, 58.52879581151834], [1.75000344E12, 50.80227655986503], [1.75000314E12, 47.475534114404], [1.75000404E12, 56.46882086167798], [1.75000374E12, 52.783032666991765], [1.75000434E12, 56.67136978248077], [1.75000464E12, 57.14512040557674], [1.75000332E12, 50.024744697564756], [1.75000494E12, 57.71717171717168], [1.75000302E12, 45.957275541795674], [1.75000392E12, 56.31558295964118], [1.75000362E12, 51.72897623400365], [1.75000422E12, 55.86007995431181], [1.75000452E12, 56.665841584158414], [1.7500032E12, 48.61135213304418], [1.75000482E12, 58.376821192053015], [1.7500029E12, 44.19616837560715]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.7500038E12, 659.5210084033608], [1.7500035E12, 575.8571428571428], [1.7500041E12, 739.3333333333342], [1.7500044E12, 806.7777777777785], [1.75000308E12, 423.1694417237996], [1.7500047E12, 875.2746753246748], [1.750005E12, 764.6835937499998], [1.75000368E12, 631.4159923845797], [1.75000338E12, 537.577315381477], [1.75000398E12, 763.0749574105616], [1.75000428E12, 775.5927209705371], [1.75000296E12, 370.15355696934546], [1.75000458E12, 848.9585427135689], [1.75000488E12, 909.3098118279584], [1.75000356E12, 595.3720197930738], [1.75000326E12, 500.54187380497063], [1.75000386E12, 721.5988120950312], [1.75000416E12, 752.1477528089877], [1.75000284E12, 324.3133944954125], [1.75000446E12, 817.3264563106799], [1.75000476E12, 885.3976455199477], [1.75000344E12, 555.8100464330942], [1.75000314E12, 448.52655172413773], [1.75000404E12, 759.0448608745052], [1.75000374E12, 648.4161793372315], [1.75000434E12, 790.8405882352945], [1.75000464E12, 854.736842105262], [1.75000332E12, 515.1842105263173], [1.75000494E12, 910.9177897574109], [1.75000302E12, 399.0774473358121], [1.75000392E12, 748.5902466367709], [1.75000362E12, 606.2886550777673], [1.75000422E12, 767.4574528840664], [1.75000452E12, 833.6955982641039], [1.7500032E12, 470.8806509945749], [1.75000482E12, 894.0476505625404], [1.7500029E12, 343.31661272923367]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.750005E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.75000284E12, "maxY": 910.9157681940701, "series": [{"data": [[1.7500038E12, 0.0], [1.7500035E12, 0.0], [1.7500041E12, 0.0], [1.7500044E12, 0.0], [1.75000308E12, 0.0], [1.7500047E12, 0.0], [1.750005E12, 0.0], [1.75000368E12, 0.0], [1.75000338E12, 0.0], [1.75000398E12, 0.0], [1.75000428E12, 0.0], [1.75000296E12, 0.0], [1.75000458E12, 0.0], [1.75000488E12, 0.0], [1.75000356E12, 0.0], [1.75000326E12, 0.0], [1.75000386E12, 0.0], [1.75000416E12, 0.0], [1.75000284E12, 0.0], [1.75000446E12, 0.0], [1.75000476E12, 0.0], [1.75000344E12, 0.0], [1.75000314E12, 0.0], [1.75000404E12, 0.0], [1.75000374E12, 0.0], [1.75000434E12, 0.0], [1.75000464E12, 0.0], [1.75000332E12, 0.0], [1.75000494E12, 0.0], [1.75000302E12, 0.0], [1.75000392E12, 0.0], [1.75000362E12, 0.0], [1.75000422E12, 0.0], [1.75000452E12, 0.0], [1.7500032E12, 0.0], [1.75000482E12, 0.0], [1.7500029E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.7500038E12, 659.5190311418686], [1.7500035E12, 575.8519163763067], [1.7500041E12, 739.3311258278153], [1.7500044E12, 806.7729729729724], [1.75000308E12, 423.1648710414622], [1.7500047E12, 875.2701298701303], [1.750005E12, 764.6796874999999], [1.75000368E12, 631.412184673964], [1.75000338E12, 537.5724194206455], [1.75000398E12, 763.0698466780243], [1.75000428E12, 775.5869439630272], [1.75000296E12, 370.1469057258539], [1.75000458E12, 848.9554020100504], [1.75000488E12, 909.3064516129031], [1.75000356E12, 595.3648223121901], [1.75000326E12, 500.5372848948377], [1.75000386E12, 721.5934125269993], [1.75000416E12, 752.1438202247197], [1.75000284E12, 324.2990825688077], [1.75000446E12, 817.322208737865], [1.75000476E12, 885.393721386528], [1.75000344E12, 555.8054031236794], [1.75000314E12, 448.52241379310414], [1.75000404E12, 759.0386144236214], [1.75000374E12, 648.4103313840151], [1.75000434E12, 790.8364705882349], [1.75000464E12, 854.7330374128079], [1.75000332E12, 515.1794972505892], [1.75000494E12, 910.9157681940701], [1.75000302E12, 399.05359355638217], [1.75000392E12, 748.5823991031388], [1.75000362E12, 606.2836230558102], [1.75000422E12, 767.4534551684762], [1.75000452E12, 833.6912585244876], [1.7500032E12, 470.87848101265854], [1.75000482E12, 894.0450033090668], [1.7500029E12, 343.30798274002126]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.750005E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.75000284E12, "maxY": 3.2755963302752176, "series": [{"data": [[1.7500038E12, 0.0], [1.7500035E12, 0.0], [1.7500041E12, 0.0], [1.7500044E12, 0.0], [1.75000308E12, 0.0], [1.7500047E12, 0.0], [1.750005E12, 0.0], [1.75000368E12, 0.0], [1.75000338E12, 0.0], [1.75000398E12, 0.0], [1.75000428E12, 0.0], [1.75000296E12, 0.0], [1.75000458E12, 0.0], [1.75000488E12, 0.0], [1.75000356E12, 0.0], [1.75000326E12, 0.0], [1.75000386E12, 0.0], [1.75000416E12, 0.0], [1.75000284E12, 0.0], [1.75000446E12, 0.0], [1.75000476E12, 0.0], [1.75000344E12, 0.0], [1.75000314E12, 0.0], [1.75000404E12, 0.0], [1.75000374E12, 0.0], [1.75000434E12, 0.0], [1.75000464E12, 0.0], [1.75000332E12, 0.0], [1.75000494E12, 0.0], [1.75000302E12, 0.0], [1.75000392E12, 0.0], [1.75000362E12, 0.0], [1.75000422E12, 0.0], [1.75000452E12, 0.0], [1.7500032E12, 0.0], [1.75000482E12, 0.0], [1.7500029E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.7500038E12, 0.38111715274345015], [1.7500035E12, 0.33449477351916357], [1.7500041E12, 0.3614790286975721], [1.7500044E12, 0.47327327327327345], [1.75000308E12, 0.22135161606268428], [1.7500047E12, 0.55974025974026], [1.750005E12, 0.0], [1.75000368E12, 0.29462160875773424], [1.75000338E12, 0.19135046919624638], [1.75000398E12, 0.29131175468483755], [1.75000428E12, 0.1270941652224149], [1.75000296E12, 0.26489300173510616], [1.75000458E12, 0.5194723618090447], [1.75000488E12, 0.22849462365591464], [1.75000356E12, 0.5964912280701751], [1.75000326E12, 0.37934990439770483], [1.75000386E12, 0.3326133909287258], [1.75000416E12, 0.49101123595505547], [1.75000284E12, 3.2755963302752176], [1.75000446E12, 0.22694174757281585], [1.75000476E12, 0.3911052975801183], [1.75000344E12, 0.2832418742085272], [1.75000314E12, 0.26724137931034353], [1.75000404E12, 0.2169222032935824], [1.75000374E12, 0.5102339181286557], [1.75000434E12, 0.6082352941176473], [1.75000464E12, 0.17184527584020287], [1.75000332E12, 0.3440691280439898], [1.75000494E12, 0.36522911051212903], [1.75000302E12, 0.23513011152416327], [1.75000392E12, 0.6221973094170408], [1.75000362E12, 0.510521500457456], [1.75000422E12, 0.5031410622501409], [1.75000452E12, 0.5492870427774333], [1.7500032E12, 0.3146473779385173], [1.75000482E12, 0.4718729318332231], [1.7500029E12, 0.18284789644012994]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.750005E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 7.0, "minX": 1.75000284E12, "maxY": 1592.0, "series": [{"data": [[1.7500038E12, 1080.0], [1.7500035E12, 937.0], [1.7500041E12, 1197.0], [1.7500044E12, 1244.0], [1.75000308E12, 709.0], [1.7500047E12, 1441.0], [1.750005E12, 1301.0], [1.75000368E12, 983.0], [1.75000338E12, 843.0], [1.75000398E12, 1222.0], [1.75000428E12, 1349.0], [1.75000296E12, 638.0], [1.75000458E12, 1368.0], [1.75000488E12, 1592.0], [1.75000356E12, 1012.0], [1.75000326E12, 869.0], [1.75000386E12, 1241.0], [1.75000416E12, 1299.0], [1.75000284E12, 878.0], [1.75000446E12, 1392.0], [1.75000476E12, 1528.0], [1.75000344E12, 886.0], [1.75000314E12, 714.0], [1.75000404E12, 1304.0], [1.75000374E12, 1112.0], [1.75000434E12, 1306.0], [1.75000464E12, 1561.0], [1.75000332E12, 823.0], [1.75000494E12, 1585.0], [1.75000302E12, 667.0], [1.75000392E12, 1258.0], [1.75000362E12, 1039.0], [1.75000422E12, 1281.0], [1.75000452E12, 1376.0], [1.7500032E12, 799.0], [1.75000482E12, 1553.0], [1.7500029E12, 605.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7500038E12, 753.0], [1.7500035E12, 650.0], [1.7500041E12, 846.0], [1.7500044E12, 923.9000000000001], [1.75000308E12, 478.0], [1.7500047E12, 1009.9000000000001], [1.750005E12, 966.8000000000004], [1.75000368E12, 712.0], [1.75000338E12, 606.9000000000005], [1.75000398E12, 885.0], [1.75000428E12, 893.8000000000002], [1.75000296E12, 420.0], [1.75000458E12, 985.0], [1.75000488E12, 1052.0], [1.75000356E12, 673.0], [1.75000326E12, 570.0], [1.75000386E12, 844.0], [1.75000416E12, 860.0], [1.75000284E12, 364.90000000000055], [1.75000446E12, 942.5], [1.75000476E12, 1028.0], [1.75000344E12, 626.8000000000002], [1.75000314E12, 505.0], [1.75000404E12, 884.0], [1.75000374E12, 737.0], [1.75000434E12, 914.8000000000002], [1.75000464E12, 997.4000000000001], [1.75000332E12, 576.0], [1.75000494E12, 1072.0], [1.75000302E12, 448.0], [1.75000392E12, 869.0], [1.75000362E12, 691.5], [1.75000422E12, 880.7000000000003], [1.75000452E12, 957.0], [1.7500032E12, 530.0], [1.75000482E12, 1031.0], [1.7500029E12, 391.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7500038E12, 897.0], [1.7500035E12, 784.0900000000001], [1.7500041E12, 1028.31], [1.7500044E12, 1134.0], [1.75000308E12, 574.7600000000002], [1.7500047E12, 1216.19], [1.750005E12, 1199.94], [1.75000368E12, 857.0], [1.75000338E12, 733.0], [1.75000398E12, 1080.7799999999997], [1.75000428E12, 1094.38], [1.75000296E12, 508.0], [1.75000458E12, 1190.9000000000005], [1.75000488E12, 1286.46], [1.75000356E12, 806.0], [1.75000326E12, 702.6899999999996], [1.75000386E12, 1020.0], [1.75000416E12, 1053.0], [1.75000284E12, 466.0], [1.75000446E12, 1158.1000000000004], [1.75000476E12, 1256.42], [1.75000344E12, 747.5799999999999], [1.75000314E12, 611.0], [1.75000404E12, 1078.4799999999996], [1.75000374E12, 890.96], [1.75000434E12, 1127.8400000000001], [1.75000464E12, 1239.2000000000003], [1.75000332E12, 683.0699999999997], [1.75000494E12, 1329.6000000000004], [1.75000302E12, 532.0], [1.75000392E12, 1071.0], [1.75000362E12, 851.25], [1.75000422E12, 1068.9099999999994], [1.75000452E12, 1168.0], [1.7500032E12, 638.6800000000003], [1.75000482E12, 1290.4600000000014], [1.7500029E12, 474.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7500038E12, 806.0], [1.7500035E12, 695.0], [1.7500041E12, 908.0], [1.7500044E12, 1000.0], [1.75000308E12, 511.0], [1.7500047E12, 1088.9499999999998], [1.750005E12, 1060.8], [1.75000368E12, 768.7999999999997], [1.75000338E12, 654.8999999999996], [1.75000398E12, 957.0], [1.75000428E12, 957.8999999999996], [1.75000296E12, 450.0], [1.75000458E12, 1059.0], [1.75000488E12, 1136.0], [1.75000356E12, 726.6999999999998], [1.75000326E12, 618.0], [1.75000386E12, 914.0], [1.75000416E12, 921.0], [1.75000284E12, 394.0], [1.75000446E12, 1018.25], [1.75000476E12, 1119.1], [1.75000344E12, 672.0], [1.75000314E12, 541.0], [1.75000404E12, 956.6999999999998], [1.75000374E12, 788.0], [1.75000434E12, 985.8999999999996], [1.75000464E12, 1084.0], [1.75000332E12, 617.0], [1.75000494E12, 1172.0], [1.75000302E12, 478.0], [1.75000392E12, 946.5499999999997], [1.75000362E12, 741.25], [1.75000422E12, 946.0], [1.75000452E12, 1027.5], [1.7500032E12, 565.0], [1.75000482E12, 1121.8000000000002], [1.7500029E12, 418.25]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7500038E12, 13.0], [1.7500035E12, 11.0], [1.7500041E12, 15.0], [1.7500044E12, 9.0], [1.75000308E12, 8.0], [1.7500047E12, 14.0], [1.750005E12, 7.0], [1.75000368E12, 15.0], [1.75000338E12, 9.0], [1.75000398E12, 15.0], [1.75000428E12, 7.0], [1.75000296E12, 12.0], [1.75000458E12, 16.0], [1.75000488E12, 18.0], [1.75000356E12, 12.0], [1.75000326E12, 8.0], [1.75000386E12, 13.0], [1.75000416E12, 16.0], [1.75000284E12, 8.0], [1.75000446E12, 16.0], [1.75000476E12, 11.0], [1.75000344E12, 9.0], [1.75000314E12, 10.0], [1.75000404E12, 12.0], [1.75000374E12, 14.0], [1.75000434E12, 21.0], [1.75000464E12, 15.0], [1.75000332E12, 10.0], [1.75000494E12, 12.0], [1.75000302E12, 12.0], [1.75000392E12, 8.0], [1.75000362E12, 11.0], [1.75000422E12, 14.0], [1.75000452E12, 14.0], [1.7500032E12, 9.0], [1.75000482E12, 15.0], [1.7500029E12, 11.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7500038E12, 216.0], [1.7500035E12, 339.5], [1.7500041E12, 413.5], [1.7500044E12, 269.5], [1.75000308E12, 241.0], [1.7500047E12, 295.0], [1.750005E12, 324.0], [1.75000368E12, 114.0], [1.75000338E12, 334.5], [1.75000398E12, 393.0], [1.75000428E12, 432.0], [1.75000296E12, 107.0], [1.75000458E12, 289.5], [1.75000488E12, 297.0], [1.75000356E12, 339.0], [1.75000326E12, 178.5], [1.75000386E12, 354.0], [1.75000416E12, 256.0], [1.75000284E12, 96.0], [1.75000446E12, 456.0], [1.75000476E12, 487.0], [1.75000344E12, 87.0], [1.75000314E12, 96.0], [1.75000404E12, 96.0], [1.75000374E12, 368.0], [1.75000434E12, 108.0], [1.75000464E12, 101.0], [1.75000332E12, 202.5], [1.75000494E12, 92.0], [1.75000302E12, 112.0], [1.75000392E12, 228.5], [1.75000362E12, 94.0], [1.75000422E12, 251.0], [1.75000452E12, 90.0], [1.7500032E12, 121.0], [1.75000482E12, 491.0], [1.7500029E12, 188.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.750005E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 16.0, "minX": 1.0, "maxY": 680.0, "series": [{"data": [[6.0, 155.0], [12.0, 311.0], [18.0, 165.5], [19.0, 327.0], [21.0, 16.0], [31.0, 345.0], [39.0, 82.0], [38.0, 370.5], [41.0, 663.0], [43.0, 680.0], [42.0, 569.5], [45.0, 82.0], [44.0, 80.5], [46.0, 84.5], [47.0, 287.0], [48.0, 284.5], [49.0, 83.0], [50.0, 497.5], [51.0, 87.0], [53.0, 88.0], [52.0, 88.0], [54.0, 516.0], [55.0, 465.5], [56.0, 251.5], [57.0, 97.0], [59.0, 416.5], [58.0, 86.5], [60.0, 89.0], [61.0, 389.0], [63.0, 435.0], [62.0, 447.5], [64.0, 410.5], [66.0, 81.5], [67.0, 82.5], [65.0, 451.0], [70.0, 83.0], [71.0, 354.0], [69.0, 87.5], [68.0, 410.5], [73.0, 322.5], [74.0, 86.5], [75.0, 368.0], [72.0, 412.0], [76.0, 87.0], [77.0, 83.0], [79.0, 82.0], [78.0, 363.0], [82.0, 80.0], [80.0, 215.5], [81.0, 323.0], [83.0, 335.0], [87.0, 333.0], [86.0, 309.0], [85.0, 332.0], [84.0, 78.0], [91.0, 311.0], [88.0, 194.0], [90.0, 303.0], [89.0, 304.0], [93.0, 80.5], [94.0, 88.0], [95.0, 270.0], [92.0, 77.5], [97.0, 277.0], [96.0, 301.5], [99.0, 252.0], [98.0, 85.5], [101.0, 83.5], [103.0, 80.0], [102.0, 290.5], [100.0, 75.0], [106.0, 112.0], [105.0, 81.0], [107.0, 274.5], [104.0, 264.5], [110.0, 248.0], [111.0, 256.5], [108.0, 249.5], [109.0, 76.5], [115.0, 249.0], [114.0, 89.5], [113.0, 86.5], [112.0, 80.5], [116.0, 93.0], [117.0, 71.0], [118.0, 82.0], [119.0, 72.0], [123.0, 225.0], [122.0, 76.0], [121.0, 231.0], [120.0, 235.0], [125.0, 205.5], [126.0, 203.0], [127.0, 74.0], [124.0, 73.0], [130.0, 207.5], [134.0, 207.5], [132.0, 81.0], [131.0, 77.5], [133.0, 205.0], [135.0, 212.0], [129.0, 72.5], [128.0, 102.5], [137.0, 204.0], [138.0, 208.0], [139.0, 74.0], [1.0, 309.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 139.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 680.0, "series": [{"data": [[6.0, 150.5], [12.0, 311.0], [18.0, 161.0], [19.0, 327.0], [21.0, 0.0], [31.0, 344.0], [39.0, 0.0], [38.0, 370.5], [41.0, 663.0], [43.0, 680.0], [42.0, 569.5], [45.0, 0.0], [44.0, 0.0], [46.0, 0.0], [47.0, 243.5], [48.0, 234.0], [49.0, 0.0], [50.0, 497.5], [51.0, 0.0], [53.0, 0.0], [52.0, 0.0], [54.0, 516.0], [55.0, 465.5], [56.0, 206.0], [57.0, 0.0], [59.0, 416.5], [58.0, 0.0], [60.0, 0.0], [61.0, 389.0], [63.0, 435.0], [62.0, 447.5], [64.0, 410.5], [66.0, 0.0], [67.0, 0.0], [65.0, 451.0], [70.0, 0.0], [71.0, 354.0], [69.0, 0.0], [68.0, 410.5], [73.0, 322.5], [74.0, 0.0], [75.0, 368.0], [72.0, 412.0], [76.0, 0.0], [77.0, 0.0], [79.0, 0.0], [78.0, 363.0], [82.0, 0.0], [80.0, 170.0], [81.0, 323.0], [83.0, 335.0], [87.0, 333.0], [86.0, 309.0], [85.0, 332.0], [84.0, 0.0], [91.0, 311.0], [88.0, 153.0], [90.0, 303.0], [89.0, 304.0], [93.0, 0.0], [94.0, 0.0], [95.0, 270.0], [92.0, 0.0], [97.0, 277.0], [96.0, 301.5], [99.0, 252.0], [98.0, 0.0], [101.0, 0.0], [103.0, 0.0], [102.0, 290.5], [100.0, 0.0], [106.0, 0.0], [105.0, 0.0], [107.0, 274.5], [104.0, 264.5], [110.0, 248.0], [111.0, 256.5], [108.0, 249.5], [109.0, 0.0], [115.0, 249.0], [114.0, 0.0], [113.0, 0.0], [112.0, 0.0], [116.0, 0.0], [117.0, 0.0], [118.0, 0.0], [119.0, 0.0], [123.0, 225.0], [122.0, 0.0], [121.0, 231.0], [120.0, 235.0], [125.0, 205.5], [126.0, 203.0], [127.0, 0.0], [124.0, 0.0], [130.0, 207.5], [134.0, 207.5], [132.0, 0.0], [131.0, 0.0], [133.0, 205.0], [135.0, 212.0], [129.0, 0.0], [128.0, 0.0], [137.0, 204.0], [138.0, 208.0], [139.0, 0.0], [1.0, 309.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 139.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 16.283333333333335, "minX": 1.75000284E12, "maxY": 123.56666666666666, "series": [{"data": [[1.7500038E12, 67.43333333333334], [1.7500035E12, 76.5], [1.7500041E12, 60.36666666666667], [1.7500044E12, 55.5], [1.75000308E12, 102.05], [1.7500047E12, 51.333333333333336], [1.750005E12, 16.283333333333335], [1.75000368E12, 70.03333333333333], [1.75000338E12, 81.66666666666667], [1.75000398E12, 58.68333333333333], [1.75000428E12, 57.68333333333333], [1.75000296E12, 115.31666666666666], [1.75000458E12, 53.06666666666667], [1.75000488E12, 49.6], [1.75000356E12, 74.08333333333333], [1.75000326E12, 87.18333333333334], [1.75000386E12, 61.71666666666667], [1.75000416E12, 59.333333333333336], [1.75000284E12, 91.56666666666666], [1.75000446E12, 54.9], [1.75000476E12, 50.95], [1.75000344E12, 79.01666666666667], [1.75000314E12, 96.7], [1.75000404E12, 58.75], [1.75000374E12, 68.4], [1.75000434E12, 56.68333333333333], [1.75000464E12, 52.583333333333336], [1.75000332E12, 84.86666666666666], [1.75000494E12, 49.483333333333334], [1.75000302E12, 107.63333333333334], [1.75000392E12, 59.46666666666667], [1.75000362E12, 72.9], [1.75000422E12, 58.36666666666667], [1.75000452E12, 53.81666666666667], [1.7500032E12, 92.16666666666667], [1.75000482E12, 50.35], [1.7500029E12, 123.56666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.750005E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 8.15, "minX": 1.75000284E12, "maxY": 61.8, "series": [{"data": [[1.7500038E12, 33.71666666666667], [1.7500035E12, 38.233333333333334], [1.7500041E12, 30.166666666666668], [1.7500044E12, 27.75], [1.75000308E12, 51.0], [1.7500047E12, 25.666666666666668], [1.750005E12, 8.15], [1.75000368E12, 35.03333333333333], [1.75000338E12, 40.81666666666667], [1.75000398E12, 29.333333333333332], [1.75000428E12, 28.833333333333332], [1.75000296E12, 57.68333333333333], [1.75000458E12, 26.533333333333335], [1.75000488E12, 24.8], [1.75000356E12, 37.03333333333333], [1.75000326E12, 43.583333333333336], [1.75000386E12, 30.85], [1.75000416E12, 29.666666666666668], [1.75000284E12, 45.75], [1.75000446E12, 27.433333333333334], [1.75000476E12, 25.466666666666665], [1.75000344E12, 39.53333333333333], [1.75000314E12, 48.36666666666667], [1.75000404E12, 29.4], [1.75000374E12, 34.18333333333333], [1.75000434E12, 28.35], [1.75000464E12, 26.3], [1.75000332E12, 42.43333333333333], [1.75000494E12, 24.75], [1.75000302E12, 53.833333333333336], [1.75000392E12, 29.733333333333334], [1.75000362E12, 36.46666666666667], [1.75000422E12, 29.183333333333334], [1.75000452E12, 26.933333333333334], [1.7500032E12, 46.1], [1.75000482E12, 25.166666666666668], [1.7500029E12, 61.766666666666666]], "isOverall": false, "label": "0", "isController": false}, {"data": [[1.7500038E12, 33.71666666666667], [1.7500035E12, 38.266666666666666], [1.7500041E12, 30.2], [1.7500044E12, 27.75], [1.75000308E12, 51.05], [1.7500047E12, 25.666666666666668], [1.750005E12, 8.533333333333333], [1.75000368E12, 35.016666666666666], [1.75000338E12, 40.85], [1.75000398E12, 29.35], [1.75000428E12, 28.85], [1.75000296E12, 57.63333333333333], [1.75000458E12, 26.533333333333335], [1.75000488E12, 24.8], [1.75000356E12, 37.05], [1.75000326E12, 43.583333333333336], [1.75000386E12, 30.866666666666667], [1.75000416E12, 29.666666666666668], [1.75000284E12, 45.416666666666664], [1.75000446E12, 27.466666666666665], [1.75000476E12, 25.483333333333334], [1.75000344E12, 39.483333333333334], [1.75000314E12, 48.333333333333336], [1.75000404E12, 29.35], [1.75000374E12, 34.2], [1.75000434E12, 28.333333333333332], [1.75000464E12, 26.283333333333335], [1.75000332E12, 42.43333333333333], [1.75000494E12, 24.733333333333334], [1.75000302E12, 53.8], [1.75000392E12, 29.733333333333334], [1.75000362E12, 36.43333333333333], [1.75000422E12, 29.183333333333334], [1.75000452E12, 26.883333333333333], [1.7500032E12, 46.083333333333336], [1.75000482E12, 25.183333333333334], [1.7500029E12, 61.8]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.750005E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 8.15, "minX": 1.75000284E12, "maxY": 61.8, "series": [{"data": [[1.7500038E12, 33.71666666666667], [1.7500035E12, 38.266666666666666], [1.7500041E12, 30.2], [1.7500044E12, 27.75], [1.75000308E12, 51.05], [1.7500047E12, 25.666666666666668], [1.750005E12, 8.533333333333333], [1.75000368E12, 35.016666666666666], [1.75000338E12, 40.85], [1.75000398E12, 29.35], [1.75000428E12, 28.85], [1.75000296E12, 57.63333333333333], [1.75000458E12, 26.533333333333335], [1.75000488E12, 24.8], [1.75000356E12, 37.05], [1.75000326E12, 43.583333333333336], [1.75000386E12, 30.866666666666667], [1.75000416E12, 29.666666666666668], [1.75000284E12, 45.416666666666664], [1.75000446E12, 27.466666666666665], [1.75000476E12, 25.483333333333334], [1.75000344E12, 39.483333333333334], [1.75000314E12, 48.333333333333336], [1.75000404E12, 29.35], [1.75000374E12, 34.2], [1.75000434E12, 28.333333333333332], [1.75000464E12, 26.283333333333335], [1.75000332E12, 42.43333333333333], [1.75000494E12, 24.733333333333334], [1.75000302E12, 53.8], [1.75000392E12, 29.733333333333334], [1.75000362E12, 36.43333333333333], [1.75000422E12, 29.183333333333334], [1.75000452E12, 26.883333333333333], [1.7500032E12, 46.083333333333336], [1.75000482E12, 25.183333333333334], [1.7500029E12, 61.8]], "isOverall": false, "label": "HTTP Request - enroll-success", "isController": false}, {"data": [[1.7500038E12, 33.71666666666667], [1.7500035E12, 38.233333333333334], [1.7500041E12, 30.166666666666668], [1.7500044E12, 27.75], [1.75000308E12, 51.0], [1.7500047E12, 25.666666666666668], [1.750005E12, 8.15], [1.75000368E12, 35.03333333333333], [1.75000338E12, 40.81666666666667], [1.75000398E12, 29.333333333333332], [1.75000428E12, 28.833333333333332], [1.75000296E12, 57.68333333333333], [1.75000458E12, 26.533333333333335], [1.75000488E12, 24.8], [1.75000356E12, 37.03333333333333], [1.75000326E12, 43.583333333333336], [1.75000386E12, 30.85], [1.75000416E12, 29.666666666666668], [1.75000284E12, 45.75], [1.75000446E12, 27.433333333333334], [1.75000476E12, 25.466666666666665], [1.75000344E12, 39.53333333333333], [1.75000314E12, 48.36666666666667], [1.75000404E12, 29.4], [1.75000374E12, 34.18333333333333], [1.75000434E12, 28.35], [1.75000464E12, 26.3], [1.75000332E12, 42.43333333333333], [1.75000494E12, 24.75], [1.75000302E12, 53.833333333333336], [1.75000392E12, 29.733333333333334], [1.75000362E12, 36.46666666666667], [1.75000422E12, 29.183333333333334], [1.75000452E12, 26.933333333333334], [1.7500032E12, 46.1], [1.75000482E12, 25.166666666666668], [1.7500029E12, 61.766666666666666]], "isOverall": false, "label": "Create CSR-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.750005E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 16.683333333333334, "minX": 1.75000284E12, "maxY": 123.56666666666666, "series": [{"data": [[1.7500038E12, 67.43333333333334], [1.7500035E12, 76.5], [1.7500041E12, 60.36666666666667], [1.7500044E12, 55.5], [1.75000308E12, 102.05], [1.7500047E12, 51.333333333333336], [1.750005E12, 16.683333333333334], [1.75000368E12, 70.05], [1.75000338E12, 81.66666666666667], [1.75000398E12, 58.68333333333333], [1.75000428E12, 57.68333333333333], [1.75000296E12, 115.31666666666666], [1.75000458E12, 53.06666666666667], [1.75000488E12, 49.6], [1.75000356E12, 74.08333333333333], [1.75000326E12, 87.16666666666667], [1.75000386E12, 61.71666666666667], [1.75000416E12, 59.333333333333336], [1.75000284E12, 91.16666666666667], [1.75000446E12, 54.9], [1.75000476E12, 50.95], [1.75000344E12, 79.01666666666667], [1.75000314E12, 96.7], [1.75000404E12, 58.75], [1.75000374E12, 68.38333333333334], [1.75000434E12, 56.68333333333333], [1.75000464E12, 52.583333333333336], [1.75000332E12, 84.86666666666666], [1.75000494E12, 49.483333333333334], [1.75000302E12, 107.63333333333334], [1.75000392E12, 59.46666666666667], [1.75000362E12, 72.9], [1.75000422E12, 58.36666666666667], [1.75000452E12, 53.81666666666667], [1.7500032E12, 92.18333333333334], [1.75000482E12, 50.35], [1.7500029E12, 123.56666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.750005E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

