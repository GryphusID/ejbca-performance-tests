/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "maxY": 4190.0, "series": [{"data": [[0.0, 9.0], [0.1, 11.0], [0.2, 15.0], [0.3, 20.0], [0.4, 30.0], [0.5, 35.0], [0.6, 38.0], [0.7, 40.0], [0.8, 42.0], [0.9, 43.0], [1.0, 44.0], [1.1, 45.0], [1.2, 46.0], [1.3, 47.0], [1.4, 47.0], [1.5, 48.0], [1.6, 48.0], [1.7, 49.0], [1.8, 49.0], [1.9, 50.0], [2.0, 50.0], [2.1, 50.0], [2.2, 51.0], [2.3, 51.0], [2.4, 51.0], [2.5, 52.0], [2.6, 52.0], [2.7, 52.0], [2.8, 52.0], [2.9, 52.0], [3.0, 52.0], [3.1, 53.0], [3.2, 53.0], [3.3, 53.0], [3.4, 54.0], [3.5, 54.0], [3.6, 54.0], [3.7, 54.0], [3.8, 54.0], [3.9, 54.0], [4.0, 55.0], [4.1, 55.0], [4.2, 55.0], [4.3, 55.0], [4.4, 55.0], [4.5, 55.0], [4.6, 55.0], [4.7, 56.0], [4.8, 56.0], [4.9, 56.0], [5.0, 56.0], [5.1, 56.0], [5.2, 56.0], [5.3, 56.0], [5.4, 56.0], [5.5, 56.0], [5.6, 56.0], [5.7, 56.0], [5.8, 57.0], [5.9, 57.0], [6.0, 57.0], [6.1, 57.0], [6.2, 57.0], [6.3, 57.0], [6.4, 58.0], [6.5, 58.0], [6.6, 58.0], [6.7, 58.0], [6.8, 58.0], [6.9, 58.0], [7.0, 58.0], [7.1, 58.0], [7.2, 58.0], [7.3, 58.0], [7.4, 59.0], [7.5, 59.0], [7.6, 59.0], [7.7, 59.0], [7.8, 59.0], [7.9, 59.0], [8.0, 59.0], [8.1, 59.0], [8.2, 59.0], [8.3, 59.0], [8.4, 59.0], [8.5, 59.0], [8.6, 59.0], [8.7, 59.0], [8.8, 60.0], [8.9, 60.0], [9.0, 60.0], [9.1, 60.0], [9.2, 60.0], [9.3, 60.0], [9.4, 60.0], [9.5, 60.0], [9.6, 60.0], [9.7, 60.0], [9.8, 60.0], [9.9, 60.0], [10.0, 60.0], [10.1, 60.0], [10.2, 60.0], [10.3, 60.0], [10.4, 60.0], [10.5, 60.0], [10.6, 60.0], [10.7, 60.0], [10.8, 60.0], [10.9, 61.0], [11.0, 61.0], [11.1, 61.0], [11.2, 61.0], [11.3, 61.0], [11.4, 61.0], [11.5, 61.0], [11.6, 61.0], [11.7, 61.0], [11.8, 62.0], [11.9, 62.0], [12.0, 62.0], [12.1, 62.0], [12.2, 62.0], [12.3, 62.0], [12.4, 62.0], [12.5, 62.0], [12.6, 62.0], [12.7, 62.0], [12.8, 62.0], [12.9, 62.0], [13.0, 62.0], [13.1, 62.0], [13.2, 62.0], [13.3, 62.0], [13.4, 62.0], [13.5, 62.0], [13.6, 63.0], [13.7, 63.0], [13.8, 63.0], [13.9, 63.0], [14.0, 63.0], [14.1, 63.0], [14.2, 63.0], [14.3, 63.0], [14.4, 63.0], [14.5, 63.0], [14.6, 63.0], [14.7, 63.0], [14.8, 63.0], [14.9, 63.0], [15.0, 63.0], [15.1, 63.0], [15.2, 63.0], [15.3, 63.0], [15.4, 63.0], [15.5, 64.0], [15.6, 64.0], [15.7, 64.0], [15.8, 64.0], [15.9, 64.0], [16.0, 64.0], [16.1, 64.0], [16.2, 64.0], [16.3, 64.0], [16.4, 64.0], [16.5, 64.0], [16.6, 64.0], [16.7, 64.0], [16.8, 64.0], [16.9, 64.0], [17.0, 64.0], [17.1, 64.0], [17.2, 64.0], [17.3, 64.0], [17.4, 64.0], [17.5, 64.0], [17.6, 64.0], [17.7, 64.0], [17.8, 64.0], [17.9, 64.0], [18.0, 64.0], [18.1, 64.0], [18.2, 64.0], [18.3, 64.0], [18.4, 65.0], [18.5, 65.0], [18.6, 65.0], [18.7, 65.0], [18.8, 65.0], [18.9, 65.0], [19.0, 65.0], [19.1, 65.0], [19.2, 65.0], [19.3, 65.0], [19.4, 65.0], [19.5, 65.0], [19.6, 65.0], [19.7, 65.0], [19.8, 65.0], [19.9, 65.0], [20.0, 66.0], [20.1, 66.0], [20.2, 66.0], [20.3, 66.0], [20.4, 66.0], [20.5, 66.0], [20.6, 66.0], [20.7, 66.0], [20.8, 66.0], [20.9, 66.0], [21.0, 66.0], [21.1, 66.0], [21.2, 66.0], [21.3, 66.0], [21.4, 66.0], [21.5, 66.0], [21.6, 66.0], [21.7, 66.0], [21.8, 66.0], [21.9, 66.0], [22.0, 66.0], [22.1, 67.0], [22.2, 67.0], [22.3, 67.0], [22.4, 67.0], [22.5, 67.0], [22.6, 67.0], [22.7, 67.0], [22.8, 67.0], [22.9, 67.0], [23.0, 67.0], [23.1, 67.0], [23.2, 67.0], [23.3, 67.0], [23.4, 67.0], [23.5, 67.0], [23.6, 67.0], [23.7, 67.0], [23.8, 67.0], [23.9, 67.0], [24.0, 67.0], [24.1, 67.0], [24.2, 67.0], [24.3, 67.0], [24.4, 67.0], [24.5, 67.0], [24.6, 67.0], [24.7, 67.0], [24.8, 67.0], [24.9, 67.0], [25.0, 67.0], [25.1, 67.0], [25.2, 68.0], [25.3, 68.0], [25.4, 68.0], [25.5, 68.0], [25.6, 68.0], [25.7, 68.0], [25.8, 68.0], [25.9, 68.0], [26.0, 68.0], [26.1, 68.0], [26.2, 68.0], [26.3, 68.0], [26.4, 68.0], [26.5, 68.0], [26.6, 68.0], [26.7, 68.0], [26.8, 68.0], [26.9, 68.0], [27.0, 68.0], [27.1, 68.0], [27.2, 68.0], [27.3, 68.0], [27.4, 68.0], [27.5, 68.0], [27.6, 68.0], [27.7, 68.0], [27.8, 68.0], [27.9, 68.0], [28.0, 68.0], [28.1, 68.0], [28.2, 68.0], [28.3, 68.0], [28.4, 68.0], [28.5, 68.0], [28.6, 68.0], [28.7, 69.0], [28.8, 69.0], [28.9, 69.0], [29.0, 69.0], [29.1, 69.0], [29.2, 69.0], [29.3, 69.0], [29.4, 69.0], [29.5, 69.0], [29.6, 69.0], [29.7, 69.0], [29.8, 69.0], [29.9, 69.0], [30.0, 69.0], [30.1, 69.0], [30.2, 69.0], [30.3, 69.0], [30.4, 69.0], [30.5, 69.0], [30.6, 70.0], [30.7, 70.0], [30.8, 70.0], [30.9, 70.0], [31.0, 70.0], [31.1, 70.0], [31.2, 70.0], [31.3, 70.0], [31.4, 70.0], [31.5, 70.0], [31.6, 70.0], [31.7, 70.0], [31.8, 70.0], [31.9, 70.0], [32.0, 70.0], [32.1, 70.0], [32.2, 70.0], [32.3, 70.0], [32.4, 70.0], [32.5, 70.0], [32.6, 70.0], [32.7, 70.0], [32.8, 70.0], [32.9, 70.0], [33.0, 70.0], [33.1, 71.0], [33.2, 71.0], [33.3, 71.0], [33.4, 71.0], [33.5, 71.0], [33.6, 71.0], [33.7, 71.0], [33.8, 71.0], [33.9, 71.0], [34.0, 71.0], [34.1, 71.0], [34.2, 71.0], [34.3, 71.0], [34.4, 71.0], [34.5, 71.0], [34.6, 71.0], [34.7, 71.0], [34.8, 71.0], [34.9, 71.0], [35.0, 71.0], [35.1, 71.0], [35.2, 71.0], [35.3, 71.0], [35.4, 71.0], [35.5, 71.0], [35.6, 71.0], [35.7, 71.0], [35.8, 71.0], [35.9, 71.0], [36.0, 71.0], [36.1, 71.0], [36.2, 71.0], [36.3, 71.0], [36.4, 71.0], [36.5, 71.0], [36.6, 72.0], [36.7, 72.0], [36.8, 72.0], [36.9, 72.0], [37.0, 72.0], [37.1, 72.0], [37.2, 72.0], [37.3, 72.0], [37.4, 72.0], [37.5, 72.0], [37.6, 72.0], [37.7, 72.0], [37.8, 72.0], [37.9, 72.0], [38.0, 72.0], [38.1, 72.0], [38.2, 72.0], [38.3, 72.0], [38.4, 72.0], [38.5, 72.0], [38.6, 72.0], [38.7, 72.0], [38.8, 72.0], [38.9, 72.0], [39.0, 72.0], [39.1, 72.0], [39.2, 72.0], [39.3, 72.0], [39.4, 72.0], [39.5, 72.0], [39.6, 72.0], [39.7, 72.0], [39.8, 72.0], [39.9, 72.0], [40.0, 72.0], [40.1, 72.0], [40.2, 72.0], [40.3, 72.0], [40.4, 72.0], [40.5, 72.0], [40.6, 72.0], [40.7, 72.0], [40.8, 72.0], [40.9, 72.0], [41.0, 72.0], [41.1, 72.0], [41.2, 73.0], [41.3, 73.0], [41.4, 73.0], [41.5, 73.0], [41.6, 73.0], [41.7, 73.0], [41.8, 73.0], [41.9, 73.0], [42.0, 73.0], [42.1, 73.0], [42.2, 73.0], [42.3, 73.0], [42.4, 73.0], [42.5, 73.0], [42.6, 73.0], [42.7, 73.0], [42.8, 73.0], [42.9, 73.0], [43.0, 73.0], [43.1, 73.0], [43.2, 73.0], [43.3, 74.0], [43.4, 74.0], [43.5, 74.0], [43.6, 74.0], [43.7, 74.0], [43.8, 74.0], [43.9, 74.0], [44.0, 74.0], [44.1, 74.0], [44.2, 74.0], [44.3, 74.0], [44.4, 74.0], [44.5, 74.0], [44.6, 74.0], [44.7, 74.0], [44.8, 74.0], [44.9, 74.0], [45.0, 74.0], [45.1, 74.0], [45.2, 74.0], [45.3, 74.0], [45.4, 74.0], [45.5, 74.0], [45.6, 74.0], [45.7, 74.0], [45.8, 74.0], [45.9, 74.0], [46.0, 74.0], [46.1, 74.0], [46.2, 74.0], [46.3, 74.0], [46.4, 75.0], [46.5, 75.0], [46.6, 75.0], [46.7, 75.0], [46.8, 75.0], [46.9, 75.0], [47.0, 75.0], [47.1, 75.0], [47.2, 75.0], [47.3, 75.0], [47.4, 75.0], [47.5, 75.0], [47.6, 75.0], [47.7, 75.0], [47.8, 75.0], [47.9, 75.0], [48.0, 75.0], [48.1, 75.0], [48.2, 75.0], [48.3, 75.0], [48.4, 75.0], [48.5, 75.0], [48.6, 75.0], [48.7, 75.0], [48.8, 75.0], [48.9, 75.0], [49.0, 75.0], [49.1, 75.0], [49.2, 75.0], [49.3, 75.0], [49.4, 75.0], [49.5, 75.0], [49.6, 75.0], [49.7, 75.0], [49.8, 75.0], [49.9, 75.0], [50.0, 75.0], [50.1, 75.0], [50.2, 75.0], [50.3, 75.0], [50.4, 76.0], [50.5, 76.0], [50.6, 76.0], [50.7, 76.0], [50.8, 76.0], [50.9, 76.0], [51.0, 76.0], [51.1, 76.0], [51.2, 76.0], [51.3, 76.0], [51.4, 76.0], [51.5, 76.0], [51.6, 76.0], [51.7, 76.0], [51.8, 76.0], [51.9, 76.0], [52.0, 76.0], [52.1, 76.0], [52.2, 76.0], [52.3, 76.0], [52.4, 76.0], [52.5, 76.0], [52.6, 76.0], [52.7, 76.0], [52.8, 76.0], [52.9, 76.0], [53.0, 76.0], [53.1, 76.0], [53.2, 76.0], [53.3, 76.0], [53.4, 76.0], [53.5, 76.0], [53.6, 76.0], [53.7, 76.0], [53.8, 76.0], [53.9, 76.0], [54.0, 76.0], [54.1, 76.0], [54.2, 76.0], [54.3, 76.0], [54.4, 76.0], [54.5, 76.0], [54.6, 76.0], [54.7, 76.0], [54.8, 76.0], [54.9, 76.0], [55.0, 76.0], [55.1, 77.0], [55.2, 77.0], [55.3, 77.0], [55.4, 77.0], [55.5, 77.0], [55.6, 77.0], [55.7, 77.0], [55.8, 77.0], [55.9, 77.0], [56.0, 77.0], [56.1, 77.0], [56.2, 77.0], [56.3, 77.0], [56.4, 77.0], [56.5, 77.0], [56.6, 77.0], [56.7, 77.0], [56.8, 77.0], [56.9, 77.0], [57.0, 77.0], [57.1, 77.0], [57.2, 78.0], [57.3, 78.0], [57.4, 78.0], [57.5, 78.0], [57.6, 78.0], [57.7, 78.0], [57.8, 78.0], [57.9, 78.0], [58.0, 78.0], [58.1, 78.0], [58.2, 78.0], [58.3, 78.0], [58.4, 78.0], [58.5, 78.0], [58.6, 78.0], [58.7, 78.0], [58.8, 78.0], [58.9, 78.0], [59.0, 78.0], [59.1, 78.0], [59.2, 78.0], [59.3, 78.0], [59.4, 78.0], [59.5, 78.0], [59.6, 78.0], [59.7, 78.0], [59.8, 78.0], [59.9, 78.0], [60.0, 79.0], [60.1, 79.0], [60.2, 79.0], [60.3, 79.0], [60.4, 79.0], [60.5, 79.0], [60.6, 79.0], [60.7, 79.0], [60.8, 79.0], [60.9, 79.0], [61.0, 79.0], [61.1, 79.0], [61.2, 79.0], [61.3, 79.0], [61.4, 79.0], [61.5, 79.0], [61.6, 79.0], [61.7, 79.0], [61.8, 79.0], [61.9, 79.0], [62.0, 79.0], [62.1, 79.0], [62.2, 79.0], [62.3, 79.0], [62.4, 79.0], [62.5, 79.0], [62.6, 79.0], [62.7, 79.0], [62.8, 79.0], [62.9, 79.0], [63.0, 79.0], [63.1, 79.0], [63.2, 79.0], [63.3, 79.0], [63.4, 79.0], [63.5, 79.0], [63.6, 79.0], [63.7, 80.0], [63.8, 80.0], [63.9, 80.0], [64.0, 80.0], [64.1, 80.0], [64.2, 80.0], [64.3, 80.0], [64.4, 80.0], [64.5, 80.0], [64.6, 80.0], [64.7, 80.0], [64.8, 80.0], [64.9, 80.0], [65.0, 80.0], [65.1, 80.0], [65.2, 80.0], [65.3, 80.0], [65.4, 80.0], [65.5, 80.0], [65.6, 80.0], [65.7, 80.0], [65.8, 80.0], [65.9, 80.0], [66.0, 80.0], [66.1, 80.0], [66.2, 80.0], [66.3, 80.0], [66.4, 80.0], [66.5, 80.0], [66.6, 80.0], [66.7, 80.0], [66.8, 80.0], [66.9, 80.0], [67.0, 80.0], [67.1, 80.0], [67.2, 80.0], [67.3, 80.0], [67.4, 80.0], [67.5, 80.0], [67.6, 80.0], [67.7, 80.0], [67.8, 80.0], [67.9, 80.0], [68.0, 80.0], [68.1, 80.0], [68.2, 80.0], [68.3, 80.0], [68.4, 81.0], [68.5, 81.0], [68.6, 81.0], [68.7, 81.0], [68.8, 81.0], [68.9, 81.0], [69.0, 81.0], [69.1, 81.0], [69.2, 81.0], [69.3, 81.0], [69.4, 81.0], [69.5, 81.0], [69.6, 81.0], [69.7, 81.0], [69.8, 81.0], [69.9, 81.0], [70.0, 81.0], [70.1, 81.0], [70.2, 81.0], [70.3, 82.0], [70.4, 82.0], [70.5, 82.0], [70.6, 82.0], [70.7, 82.0], [70.8, 82.0], [70.9, 82.0], [71.0, 82.0], [71.1, 82.0], [71.2, 82.0], [71.3, 82.0], [71.4, 82.0], [71.5, 82.0], [71.6, 82.0], [71.7, 82.0], [71.8, 82.0], [71.9, 82.0], [72.0, 82.0], [72.1, 82.0], [72.2, 82.0], [72.3, 82.0], [72.4, 82.0], [72.5, 82.0], [72.6, 82.0], [72.7, 82.0], [72.8, 82.0], [72.9, 83.0], [73.0, 83.0], [73.1, 83.0], [73.2, 83.0], [73.3, 83.0], [73.4, 83.0], [73.5, 83.0], [73.6, 83.0], [73.7, 83.0], [73.8, 83.0], [73.9, 83.0], [74.0, 83.0], [74.1, 83.0], [74.2, 83.0], [74.3, 83.0], [74.4, 83.0], [74.5, 83.0], [74.6, 83.0], [74.7, 83.0], [74.8, 83.0], [74.9, 83.0], [75.0, 83.0], [75.1, 83.0], [75.2, 83.0], [75.3, 83.0], [75.4, 83.0], [75.5, 83.0], [75.6, 83.0], [75.7, 83.0], [75.8, 83.0], [75.9, 83.0], [76.0, 83.0], [76.1, 83.0], [76.2, 83.0], [76.3, 84.0], [76.4, 84.0], [76.5, 84.0], [76.6, 84.0], [76.7, 84.0], [76.8, 84.0], [76.9, 84.0], [77.0, 84.0], [77.1, 84.0], [77.2, 84.0], [77.3, 84.0], [77.4, 84.0], [77.5, 84.0], [77.6, 84.0], [77.7, 84.0], [77.8, 84.0], [77.9, 84.0], [78.0, 84.0], [78.1, 84.0], [78.2, 84.0], [78.3, 84.0], [78.4, 84.0], [78.5, 84.0], [78.6, 84.0], [78.7, 84.0], [78.8, 84.0], [78.9, 84.0], [79.0, 84.0], [79.1, 84.0], [79.2, 84.0], [79.3, 84.0], [79.4, 84.0], [79.5, 84.0], [79.6, 84.0], [79.7, 84.0], [79.8, 84.0], [79.9, 84.0], [80.0, 84.0], [80.1, 85.0], [80.2, 85.0], [80.3, 85.0], [80.4, 85.0], [80.5, 85.0], [80.6, 85.0], [80.7, 85.0], [80.8, 85.0], [80.9, 85.0], [81.0, 85.0], [81.1, 85.0], [81.2, 85.0], [81.3, 85.0], [81.4, 85.0], [81.5, 86.0], [81.6, 86.0], [81.7, 86.0], [81.8, 86.0], [81.9, 86.0], [82.0, 86.0], [82.1, 86.0], [82.2, 86.0], [82.3, 86.0], [82.4, 86.0], [82.5, 86.0], [82.6, 86.0], [82.7, 86.0], [82.8, 86.0], [82.9, 86.0], [83.0, 86.0], [83.1, 86.0], [83.2, 86.0], [83.3, 87.0], [83.4, 87.0], [83.5, 87.0], [83.6, 87.0], [83.7, 87.0], [83.8, 87.0], [83.9, 87.0], [84.0, 87.0], [84.1, 87.0], [84.2, 87.0], [84.3, 87.0], [84.4, 87.0], [84.5, 87.0], [84.6, 87.0], [84.7, 87.0], [84.8, 87.0], [84.9, 87.0], [85.0, 87.0], [85.1, 87.0], [85.2, 87.0], [85.3, 87.0], [85.4, 87.0], [85.5, 88.0], [85.6, 88.0], [85.7, 88.0], [85.8, 88.0], [85.9, 88.0], [86.0, 88.0], [86.1, 88.0], [86.2, 88.0], [86.3, 88.0], [86.4, 88.0], [86.5, 88.0], [86.6, 88.0], [86.7, 88.0], [86.8, 88.0], [86.9, 88.0], [87.0, 88.0], [87.1, 88.0], [87.2, 88.0], [87.3, 88.0], [87.4, 88.0], [87.5, 88.0], [87.6, 88.0], [87.7, 88.0], [87.8, 88.0], [87.9, 88.0], [88.0, 88.0], [88.1, 88.0], [88.2, 88.0], [88.3, 88.0], [88.4, 89.0], [88.5, 89.0], [88.6, 89.0], [88.7, 89.0], [88.8, 89.0], [88.9, 89.0], [89.0, 89.0], [89.1, 89.0], [89.2, 89.0], [89.3, 90.0], [89.4, 90.0], [89.5, 90.0], [89.6, 90.0], [89.7, 90.0], [89.8, 90.0], [89.9, 90.0], [90.0, 90.0], [90.1, 90.0], [90.2, 90.0], [90.3, 90.0], [90.4, 90.0], [90.5, 90.0], [90.6, 91.0], [90.7, 91.0], [90.8, 91.0], [90.9, 91.0], [91.0, 91.0], [91.1, 91.0], [91.2, 91.0], [91.3, 91.0], [91.4, 91.0], [91.5, 91.0], [91.6, 91.0], [91.7, 91.0], [91.8, 91.0], [91.9, 91.0], [92.0, 91.0], [92.1, 91.0], [92.2, 92.0], [92.3, 92.0], [92.4, 92.0], [92.5, 92.0], [92.6, 92.0], [92.7, 92.0], [92.8, 92.0], [92.9, 92.0], [93.0, 92.0], [93.1, 92.0], [93.2, 92.0], [93.3, 92.0], [93.4, 92.0], [93.5, 92.0], [93.6, 92.0], [93.7, 92.0], [93.8, 92.0], [93.9, 93.0], [94.0, 93.0], [94.1, 93.0], [94.2, 93.0], [94.3, 93.0], [94.4, 93.0], [94.5, 94.0], [94.6, 94.0], [94.7, 94.0], [94.8, 94.0], [94.9, 94.0], [95.0, 94.0], [95.1, 94.0], [95.2, 95.0], [95.3, 95.0], [95.4, 95.0], [95.5, 95.0], [95.6, 95.0], [95.7, 95.0], [95.8, 95.0], [95.9, 95.0], [96.0, 96.0], [96.1, 96.0], [96.2, 96.0], [96.3, 96.0], [96.4, 96.0], [96.5, 96.0], [96.6, 96.0], [96.7, 96.0], [96.8, 96.0], [96.9, 96.0], [97.0, 96.0], [97.1, 96.0], [97.2, 97.0], [97.3, 97.0], [97.4, 98.0], [97.5, 98.0], [97.6, 98.0], [97.7, 98.0], [97.8, 99.0], [97.9, 99.0], [98.0, 99.0], [98.1, 99.0], [98.2, 100.0], [98.3, 100.0], [98.4, 100.0], [98.5, 100.0], [98.6, 100.0], [98.7, 101.0], [98.8, 102.0], [98.9, 102.0], [99.0, 103.0], [99.1, 103.0], [99.2, 104.0], [99.3, 104.0], [99.4, 106.0], [99.5, 108.0], [99.6, 111.0], [99.7, 113.0], [99.8, 116.0], [99.9, 138.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 472.0], [0.1, 574.0], [0.2, 754.0], [0.3, 1002.0], [0.4, 1099.0], [0.5, 1152.0], [0.6, 1189.0], [0.7, 1220.0], [0.8, 1242.0], [0.9, 1258.0], [1.0, 1273.0], [1.1, 1285.0], [1.2, 1298.0], [1.3, 1308.0], [1.4, 1316.0], [1.5, 1328.0], [1.6, 1336.0], [1.7, 1344.0], [1.8, 1353.0], [1.9, 1362.0], [2.0, 1370.0], [2.1, 1377.0], [2.2, 1385.0], [2.3, 1388.0], [2.4, 1399.0], [2.5, 1406.0], [2.6, 1414.0], [2.7, 1418.0], [2.8, 1424.0], [2.9, 1429.0], [3.0, 1433.0], [3.1, 1438.0], [3.2, 1440.0], [3.3, 1444.0], [3.4, 1448.0], [3.5, 1452.0], [3.6, 1459.0], [3.7, 1465.0], [3.8, 1468.0], [3.9, 1474.0], [4.0, 1479.0], [4.1, 1484.0], [4.2, 1488.0], [4.3, 1493.0], [4.4, 1502.0], [4.5, 1505.0], [4.6, 1509.0], [4.7, 1514.0], [4.8, 1516.0], [4.9, 1520.0], [5.0, 1525.0], [5.1, 1528.0], [5.2, 1532.0], [5.3, 1535.0], [5.4, 1537.0], [5.5, 1540.0], [5.6, 1544.0], [5.7, 1548.0], [5.8, 1552.0], [5.9, 1556.0], [6.0, 1560.0], [6.1, 1564.0], [6.2, 1568.0], [6.3, 1572.0], [6.4, 1574.0], [6.5, 1577.0], [6.6, 1580.0], [6.7, 1583.0], [6.8, 1585.0], [6.9, 1588.0], [7.0, 1592.0], [7.1, 1594.0], [7.2, 1596.0], [7.3, 1599.0], [7.4, 1601.0], [7.5, 1604.0], [7.6, 1608.0], [7.7, 1612.0], [7.8, 1614.0], [7.9, 1616.0], [8.0, 1619.0], [8.1, 1622.0], [8.2, 1624.0], [8.3, 1627.0], [8.4, 1629.0], [8.5, 1632.0], [8.6, 1635.0], [8.7, 1636.0], [8.8, 1639.0], [8.9, 1642.0], [9.0, 1644.0], [9.1, 1646.0], [9.2, 1648.0], [9.3, 1651.0], [9.4, 1653.0], [9.5, 1656.0], [9.6, 1657.0], [9.7, 1661.0], [9.8, 1665.0], [9.9, 1667.0], [10.0, 1669.0], [10.1, 1672.0], [10.2, 1673.0], [10.3, 1676.0], [10.4, 1679.0], [10.5, 1680.0], [10.6, 1681.0], [10.7, 1683.0], [10.8, 1685.0], [10.9, 1687.0], [11.0, 1689.0], [11.1, 1692.0], [11.2, 1694.0], [11.3, 1696.0], [11.4, 1700.0], [11.5, 1702.0], [11.6, 1705.0], [11.7, 1708.0], [11.8, 1710.0], [11.9, 1712.0], [12.0, 1715.0], [12.1, 1717.0], [12.2, 1719.0], [12.3, 1721.0], [12.4, 1723.0], [12.5, 1725.0], [12.6, 1727.0], [12.7, 1729.0], [12.8, 1731.0], [12.9, 1732.0], [13.0, 1734.0], [13.1, 1736.0], [13.2, 1739.0], [13.3, 1740.0], [13.4, 1743.0], [13.5, 1744.0], [13.6, 1746.0], [13.7, 1748.0], [13.8, 1750.0], [13.9, 1752.0], [14.0, 1754.0], [14.1, 1756.0], [14.2, 1757.0], [14.3, 1759.0], [14.4, 1761.0], [14.5, 1764.0], [14.6, 1765.0], [14.7, 1767.0], [14.8, 1768.0], [14.9, 1770.0], [15.0, 1772.0], [15.1, 1772.0], [15.2, 1775.0], [15.3, 1778.0], [15.4, 1779.0], [15.5, 1781.0], [15.6, 1783.0], [15.7, 1784.0], [15.8, 1786.0], [15.9, 1787.0], [16.0, 1789.0], [16.1, 1792.0], [16.2, 1793.0], [16.3, 1795.0], [16.4, 1797.0], [16.5, 1798.0], [16.6, 1800.0], [16.7, 1801.0], [16.8, 1802.0], [16.9, 1804.0], [17.0, 1804.0], [17.1, 1806.0], [17.2, 1807.0], [17.3, 1808.0], [17.4, 1811.0], [17.5, 1812.0], [17.6, 1812.0], [17.7, 1814.0], [17.8, 1815.0], [17.9, 1816.0], [18.0, 1818.0], [18.1, 1820.0], [18.2, 1821.0], [18.3, 1823.0], [18.4, 1826.0], [18.5, 1828.0], [18.6, 1828.0], [18.7, 1830.0], [18.8, 1832.0], [18.9, 1833.0], [19.0, 1835.0], [19.1, 1837.0], [19.2, 1839.0], [19.3, 1840.0], [19.4, 1841.0], [19.5, 1843.0], [19.6, 1844.0], [19.7, 1846.0], [19.8, 1848.0], [19.9, 1849.0], [20.0, 1852.0], [20.1, 1852.0], [20.2, 1854.0], [20.3, 1856.0], [20.4, 1856.0], [20.5, 1858.0], [20.6, 1860.0], [20.7, 1861.0], [20.8, 1863.0], [20.9, 1864.0], [21.0, 1866.0], [21.1, 1868.0], [21.2, 1868.0], [21.3, 1870.0], [21.4, 1872.0], [21.5, 1873.0], [21.6, 1875.0], [21.7, 1876.0], [21.8, 1878.0], [21.9, 1880.0], [22.0, 1881.0], [22.1, 1883.0], [22.2, 1884.0], [22.3, 1886.0], [22.4, 1888.0], [22.5, 1889.0], [22.6, 1891.0], [22.7, 1892.0], [22.8, 1894.0], [22.9, 1896.0], [23.0, 1897.0], [23.1, 1898.0], [23.2, 1900.0], [23.3, 1900.0], [23.4, 1903.0], [23.5, 1905.0], [23.6, 1906.0], [23.7, 1907.0], [23.8, 1909.0], [23.9, 1911.0], [24.0, 1911.0], [24.1, 1912.0], [24.2, 1913.0], [24.3, 1915.0], [24.4, 1916.0], [24.5, 1917.0], [24.6, 1919.0], [24.7, 1920.0], [24.8, 1920.0], [24.9, 1922.0], [25.0, 1924.0], [25.1, 1925.0], [25.2, 1927.0], [25.3, 1928.0], [25.4, 1929.0], [25.5, 1930.0], [25.6, 1932.0], [25.7, 1934.0], [25.8, 1936.0], [25.9, 1936.0], [26.0, 1937.0], [26.1, 1939.0], [26.2, 1940.0], [26.3, 1941.0], [26.4, 1943.0], [26.5, 1944.0], [26.6, 1944.0], [26.7, 1946.0], [26.8, 1947.0], [26.9, 1948.0], [27.0, 1949.0], [27.1, 1951.0], [27.2, 1952.0], [27.3, 1953.0], [27.4, 1954.0], [27.5, 1955.0], [27.6, 1956.0], [27.7, 1958.0], [27.8, 1959.0], [27.9, 1960.0], [28.0, 1961.0], [28.1, 1962.0], [28.2, 1963.0], [28.3, 1964.0], [28.4, 1965.0], [28.5, 1967.0], [28.6, 1968.0], [28.7, 1970.0], [28.8, 1972.0], [28.9, 1972.0], [29.0, 1973.0], [29.1, 1975.0], [29.2, 1976.0], [29.3, 1978.0], [29.4, 1980.0], [29.5, 1981.0], [29.6, 1982.0], [29.7, 1983.0], [29.8, 1984.0], [29.9, 1986.0], [30.0, 1987.0], [30.1, 1988.0], [30.2, 1988.0], [30.3, 1991.0], [30.4, 1992.0], [30.5, 1992.0], [30.6, 1994.0], [30.7, 1995.0], [30.8, 1996.0], [30.9, 1997.0], [31.0, 1998.0], [31.1, 2000.0], [31.2, 2001.0], [31.3, 2002.0], [31.4, 2003.0], [31.5, 2004.0], [31.6, 2006.0], [31.7, 2007.0], [31.8, 2008.0], [31.9, 2009.0], [32.0, 2011.0], [32.1, 2012.0], [32.2, 2013.0], [32.3, 2014.0], [32.4, 2015.0], [32.5, 2016.0], [32.6, 2017.0], [32.7, 2018.0], [32.8, 2019.0], [32.9, 2020.0], [33.0, 2021.0], [33.1, 2023.0], [33.2, 2024.0], [33.3, 2025.0], [33.4, 2027.0], [33.5, 2028.0], [33.6, 2028.0], [33.7, 2029.0], [33.8, 2032.0], [33.9, 2032.0], [34.0, 2033.0], [34.1, 2034.0], [34.2, 2036.0], [34.3, 2036.0], [34.4, 2037.0], [34.5, 2039.0], [34.6, 2040.0], [34.7, 2040.0], [34.8, 2042.0], [34.9, 2044.0], [35.0, 2044.0], [35.1, 2046.0], [35.2, 2047.0], [35.3, 2048.0], [35.4, 2048.0], [35.5, 2049.0], [35.6, 2051.0], [35.7, 2052.0], [35.8, 2053.0], [35.9, 2054.0], [36.0, 2056.0], [36.1, 2057.0], [36.2, 2058.0], [36.3, 2059.0], [36.4, 2060.0], [36.5, 2060.0], [36.6, 2061.0], [36.7, 2063.0], [36.8, 2064.0], [36.9, 2065.0], [37.0, 2067.0], [37.1, 2068.0], [37.2, 2068.0], [37.3, 2069.0], [37.4, 2071.0], [37.5, 2072.0], [37.6, 2072.0], [37.7, 2074.0], [37.8, 2075.0], [37.9, 2076.0], [38.0, 2077.0], [38.1, 2079.0], [38.2, 2080.0], [38.3, 2081.0], [38.4, 2083.0], [38.5, 2084.0], [38.6, 2085.0], [38.7, 2087.0], [38.8, 2088.0], [38.9, 2088.0], [39.0, 2090.0], [39.1, 2091.0], [39.2, 2092.0], [39.3, 2092.0], [39.4, 2094.0], [39.5, 2095.0], [39.6, 2096.0], [39.7, 2097.0], [39.8, 2099.0], [39.9, 2100.0], [40.0, 2101.0], [40.1, 2103.0], [40.2, 2104.0], [40.3, 2105.0], [40.4, 2107.0], [40.5, 2108.0], [40.6, 2109.0], [40.7, 2111.0], [40.8, 2112.0], [40.9, 2112.0], [41.0, 2114.0], [41.1, 2115.0], [41.2, 2115.0], [41.3, 2116.0], [41.4, 2117.0], [41.5, 2118.0], [41.6, 2119.0], [41.7, 2120.0], [41.8, 2121.0], [41.9, 2123.0], [42.0, 2124.0], [42.1, 2125.0], [42.2, 2126.0], [42.3, 2128.0], [42.4, 2128.0], [42.5, 2130.0], [42.6, 2131.0], [42.7, 2132.0], [42.8, 2133.0], [42.9, 2134.0], [43.0, 2135.0], [43.1, 2136.0], [43.2, 2138.0], [43.3, 2139.0], [43.4, 2140.0], [43.5, 2140.0], [43.6, 2143.0], [43.7, 2144.0], [43.8, 2145.0], [43.9, 2146.0], [44.0, 2147.0], [44.1, 2148.0], [44.2, 2149.0], [44.3, 2150.0], [44.4, 2152.0], [44.5, 2153.0], [44.6, 2154.0], [44.7, 2156.0], [44.8, 2156.0], [44.9, 2158.0], [45.0, 2159.0], [45.1, 2160.0], [45.2, 2161.0], [45.3, 2163.0], [45.4, 2164.0], [45.5, 2164.0], [45.6, 2166.0], [45.7, 2167.0], [45.8, 2168.0], [45.9, 2169.0], [46.0, 2170.0], [46.1, 2171.0], [46.2, 2172.0], [46.3, 2173.0], [46.4, 2175.0], [46.5, 2176.0], [46.6, 2176.0], [46.7, 2177.0], [46.8, 2178.0], [46.9, 2180.0], [47.0, 2181.0], [47.1, 2182.0], [47.2, 2183.0], [47.3, 2184.0], [47.4, 2185.0], [47.5, 2187.0], [47.6, 2188.0], [47.7, 2188.0], [47.8, 2190.0], [47.9, 2191.0], [48.0, 2192.0], [48.1, 2193.0], [48.2, 2195.0], [48.3, 2196.0], [48.4, 2197.0], [48.5, 2198.0], [48.6, 2200.0], [48.7, 2201.0], [48.8, 2202.0], [48.9, 2204.0], [49.0, 2204.0], [49.1, 2206.0], [49.2, 2207.0], [49.3, 2208.0], [49.4, 2209.0], [49.5, 2211.0], [49.6, 2212.0], [49.7, 2213.0], [49.8, 2215.0], [49.9, 2216.0], [50.0, 2216.0], [50.1, 2218.0], [50.2, 2219.0], [50.3, 2220.0], [50.4, 2221.0], [50.5, 2222.0], [50.6, 2224.0], [50.7, 2224.0], [50.8, 2226.0], [50.9, 2227.0], [51.0, 2228.0], [51.1, 2229.0], [51.2, 2230.0], [51.3, 2231.0], [51.4, 2232.0], [51.5, 2233.0], [51.6, 2235.0], [51.7, 2236.0], [51.8, 2238.0], [51.9, 2239.0], [52.0, 2240.0], [52.1, 2241.0], [52.2, 2242.0], [52.3, 2243.0], [52.4, 2244.0], [52.5, 2246.0], [52.6, 2247.0], [52.7, 2248.0], [52.8, 2249.0], [52.9, 2250.0], [53.0, 2251.0], [53.1, 2252.0], [53.2, 2254.0], [53.3, 2255.0], [53.4, 2256.0], [53.5, 2257.0], [53.6, 2258.0], [53.7, 2260.0], [53.8, 2261.0], [53.9, 2263.0], [54.0, 2264.0], [54.1, 2265.0], [54.2, 2267.0], [54.3, 2268.0], [54.4, 2268.0], [54.5, 2271.0], [54.6, 2272.0], [54.7, 2272.0], [54.8, 2273.0], [54.9, 2275.0], [55.0, 2276.0], [55.1, 2279.0], [55.2, 2279.0], [55.3, 2280.0], [55.4, 2281.0], [55.5, 2283.0], [55.6, 2284.0], [55.7, 2285.0], [55.8, 2286.0], [55.9, 2288.0], [56.0, 2288.0], [56.1, 2290.0], [56.2, 2291.0], [56.3, 2292.0], [56.4, 2293.0], [56.5, 2295.0], [56.6, 2296.0], [56.7, 2297.0], [56.8, 2298.0], [56.9, 2299.0], [57.0, 2300.0], [57.1, 2302.0], [57.2, 2304.0], [57.3, 2305.0], [57.4, 2306.0], [57.5, 2307.0], [57.6, 2308.0], [57.7, 2309.0], [57.8, 2311.0], [57.9, 2311.0], [58.0, 2313.0], [58.1, 2314.0], [58.2, 2316.0], [58.3, 2317.0], [58.4, 2318.0], [58.5, 2319.0], [58.6, 2320.0], [58.7, 2320.0], [58.8, 2322.0], [58.9, 2323.0], [59.0, 2324.0], [59.1, 2325.0], [59.2, 2327.0], [59.3, 2328.0], [59.4, 2329.0], [59.5, 2330.0], [59.6, 2332.0], [59.7, 2332.0], [59.8, 2334.0], [59.9, 2336.0], [60.0, 2337.0], [60.1, 2338.0], [60.2, 2339.0], [60.3, 2340.0], [60.4, 2343.0], [60.5, 2344.0], [60.6, 2345.0], [60.7, 2346.0], [60.8, 2348.0], [60.9, 2349.0], [61.0, 2350.0], [61.1, 2351.0], [61.2, 2352.0], [61.3, 2352.0], [61.4, 2355.0], [61.5, 2356.0], [61.6, 2356.0], [61.7, 2357.0], [61.8, 2358.0], [61.9, 2359.0], [62.0, 2360.0], [62.1, 2361.0], [62.2, 2363.0], [62.3, 2364.0], [62.4, 2365.0], [62.5, 2367.0], [62.6, 2368.0], [62.7, 2368.0], [62.8, 2370.0], [62.9, 2371.0], [63.0, 2372.0], [63.1, 2374.0], [63.2, 2375.0], [63.3, 2376.0], [63.4, 2377.0], [63.5, 2379.0], [63.6, 2380.0], [63.7, 2381.0], [63.8, 2383.0], [63.9, 2384.0], [64.0, 2384.0], [64.1, 2385.0], [64.2, 2386.0], [64.3, 2387.0], [64.4, 2388.0], [64.5, 2389.0], [64.6, 2390.0], [64.7, 2391.0], [64.8, 2392.0], [64.9, 2394.0], [65.0, 2395.0], [65.1, 2397.0], [65.2, 2399.0], [65.3, 2400.0], [65.4, 2402.0], [65.5, 2403.0], [65.6, 2404.0], [65.7, 2404.0], [65.8, 2406.0], [65.9, 2408.0], [66.0, 2408.0], [66.1, 2410.0], [66.2, 2412.0], [66.3, 2412.0], [66.4, 2414.0], [66.5, 2416.0], [66.6, 2417.0], [66.7, 2419.0], [66.8, 2420.0], [66.9, 2423.0], [67.0, 2424.0], [67.1, 2424.0], [67.2, 2425.0], [67.3, 2427.0], [67.4, 2428.0], [67.5, 2429.0], [67.6, 2432.0], [67.7, 2433.0], [67.8, 2436.0], [67.9, 2436.0], [68.0, 2438.0], [68.1, 2440.0], [68.2, 2441.0], [68.3, 2443.0], [68.4, 2444.0], [68.5, 2444.0], [68.6, 2446.0], [68.7, 2448.0], [68.8, 2449.0], [68.9, 2450.0], [69.0, 2451.0], [69.1, 2452.0], [69.2, 2452.0], [69.3, 2454.0], [69.4, 2456.0], [69.5, 2456.0], [69.6, 2458.0], [69.7, 2460.0], [69.8, 2461.0], [69.9, 2463.0], [70.0, 2464.0], [70.1, 2465.0], [70.2, 2467.0], [70.3, 2468.0], [70.4, 2469.0], [70.5, 2471.0], [70.6, 2472.0], [70.7, 2473.0], [70.8, 2475.0], [70.9, 2476.0], [71.0, 2476.0], [71.1, 2478.0], [71.2, 2479.0], [71.3, 2480.0], [71.4, 2483.0], [71.5, 2484.0], [71.6, 2484.0], [71.7, 2486.0], [71.8, 2487.0], [71.9, 2488.0], [72.0, 2490.0], [72.1, 2492.0], [72.2, 2492.0], [72.3, 2495.0], [72.4, 2496.0], [72.5, 2498.0], [72.6, 2499.0], [72.7, 2500.0], [72.8, 2502.0], [72.9, 2504.0], [73.0, 2505.0], [73.1, 2507.0], [73.2, 2508.0], [73.3, 2510.0], [73.4, 2512.0], [73.5, 2513.0], [73.6, 2514.0], [73.7, 2516.0], [73.8, 2517.0], [73.9, 2519.0], [74.0, 2520.0], [74.1, 2522.0], [74.2, 2523.0], [74.3, 2525.0], [74.4, 2528.0], [74.5, 2528.0], [74.6, 2531.0], [74.7, 2532.0], [74.8, 2534.0], [74.9, 2536.0], [75.0, 2538.0], [75.1, 2540.0], [75.2, 2541.0], [75.3, 2543.0], [75.4, 2545.0], [75.5, 2546.0], [75.6, 2548.0], [75.7, 2550.0], [75.8, 2552.0], [75.9, 2553.0], [76.0, 2555.0], [76.1, 2556.0], [76.2, 2558.0], [76.3, 2559.0], [76.4, 2560.0], [76.5, 2562.0], [76.6, 2564.0], [76.7, 2565.0], [76.8, 2568.0], [76.9, 2569.0], [77.0, 2571.0], [77.1, 2572.0], [77.2, 2574.0], [77.3, 2576.0], [77.4, 2577.0], [77.5, 2579.0], [77.6, 2580.0], [77.7, 2581.0], [77.8, 2583.0], [77.9, 2584.0], [78.0, 2585.0], [78.1, 2587.0], [78.2, 2588.0], [78.3, 2590.0], [78.4, 2592.0], [78.5, 2594.0], [78.6, 2596.0], [78.7, 2597.0], [78.8, 2598.0], [78.9, 2600.0], [79.0, 2600.0], [79.1, 2602.0], [79.2, 2605.0], [79.3, 2607.0], [79.4, 2608.0], [79.5, 2610.0], [79.6, 2612.0], [79.7, 2613.0], [79.8, 2615.0], [79.9, 2617.0], [80.0, 2618.0], [80.1, 2620.0], [80.2, 2622.0], [80.3, 2624.0], [80.4, 2625.0], [80.5, 2627.0], [80.6, 2628.0], [80.7, 2630.0], [80.8, 2632.0], [80.9, 2635.0], [81.0, 2636.0], [81.1, 2640.0], [81.2, 2641.0], [81.3, 2643.0], [81.4, 2644.0], [81.5, 2647.0], [81.6, 2648.0], [81.7, 2650.0], [81.8, 2652.0], [81.9, 2655.0], [82.0, 2656.0], [82.1, 2657.0], [82.2, 2659.0], [82.3, 2661.0], [82.4, 2664.0], [82.5, 2667.0], [82.6, 2668.0], [82.7, 2670.0], [82.8, 2672.0], [82.9, 2674.0], [83.0, 2676.0], [83.1, 2678.0], [83.2, 2680.0], [83.3, 2682.0], [83.4, 2683.0], [83.5, 2685.0], [83.6, 2687.0], [83.7, 2690.0], [83.8, 2692.0], [83.9, 2693.0], [84.0, 2696.0], [84.1, 2697.0], [84.2, 2700.0], [84.3, 2701.0], [84.4, 2704.0], [84.5, 2706.0], [84.6, 2709.0], [84.7, 2711.0], [84.8, 2712.0], [84.9, 2715.0], [85.0, 2716.0], [85.1, 2720.0], [85.2, 2720.0], [85.3, 2723.0], [85.4, 2725.0], [85.5, 2728.0], [85.6, 2729.0], [85.7, 2731.0], [85.8, 2733.0], [85.9, 2736.0], [86.0, 2739.0], [86.1, 2743.0], [86.2, 2745.0], [86.3, 2748.0], [86.4, 2751.0], [86.5, 2752.0], [86.6, 2755.0], [86.7, 2758.0], [86.8, 2760.0], [86.9, 2762.0], [87.0, 2764.0], [87.1, 2767.0], [87.2, 2769.0], [87.3, 2772.0], [87.4, 2775.0], [87.5, 2776.0], [87.6, 2779.0], [87.7, 2782.0], [87.8, 2784.0], [87.9, 2787.0], [88.0, 2788.0], [88.1, 2791.0], [88.2, 2794.0], [88.3, 2796.0], [88.4, 2799.0], [88.5, 2803.0], [88.6, 2805.0], [88.7, 2808.0], [88.8, 2812.0], [88.9, 2815.0], [89.0, 2818.0], [89.1, 2821.0], [89.2, 2824.0], [89.3, 2827.0], [89.4, 2830.0], [89.5, 2835.0], [89.6, 2838.0], [89.7, 2840.0], [89.8, 2844.0], [89.9, 2846.0], [90.0, 2848.0], [90.1, 2850.0], [90.2, 2853.0], [90.3, 2856.0], [90.4, 2859.0], [90.5, 2862.0], [90.6, 2864.0], [90.7, 2868.0], [90.8, 2871.0], [90.9, 2874.0], [91.0, 2876.0], [91.1, 2880.0], [91.2, 2884.0], [91.3, 2888.0], [91.4, 2891.0], [91.5, 2893.0], [91.6, 2897.0], [91.7, 2900.0], [91.8, 2904.0], [91.9, 2908.0], [92.0, 2912.0], [92.1, 2917.0], [92.2, 2920.0], [92.3, 2924.0], [92.4, 2927.0], [92.5, 2931.0], [92.6, 2937.0], [92.7, 2940.0], [92.8, 2944.0], [92.9, 2948.0], [93.0, 2953.0], [93.1, 2956.0], [93.2, 2960.0], [93.3, 2965.0], [93.4, 2969.0], [93.5, 2976.0], [93.6, 2980.0], [93.7, 2983.0], [93.8, 2987.0], [93.9, 2992.0], [94.0, 2995.0], [94.1, 3000.0], [94.2, 3004.0], [94.3, 3008.0], [94.4, 3013.0], [94.5, 3019.0], [94.6, 3027.0], [94.7, 3035.0], [94.8, 3041.0], [94.9, 3047.0], [95.0, 3051.0], [95.1, 3058.0], [95.2, 3064.0], [95.3, 3069.0], [95.4, 3075.0], [95.5, 3080.0], [95.6, 3084.0], [95.7, 3088.0], [95.8, 3097.0], [95.9, 3104.0], [96.0, 3108.0], [96.1, 3113.0], [96.2, 3120.0], [96.3, 3123.0], [96.4, 3132.0], [96.5, 3136.0], [96.6, 3144.0], [96.7, 3152.0], [96.8, 3157.0], [96.9, 3166.0], [97.0, 3176.0], [97.1, 3185.0], [97.2, 3193.0], [97.3, 3204.0], [97.4, 3216.0], [97.5, 3220.0], [97.6, 3232.0], [97.7, 3239.0], [97.8, 3247.0], [97.9, 3258.0], [98.0, 3275.0], [98.1, 3289.0], [98.2, 3301.0], [98.3, 3311.0], [98.4, 3329.0], [98.5, 3339.0], [98.6, 3353.0], [98.7, 3370.0], [98.8, 3384.0], [98.9, 3392.0], [99.0, 3412.0], [99.1, 3432.0], [99.2, 3449.0], [99.3, 3471.0], [99.4, 3496.0], [99.5, 3521.0], [99.6, 3580.0], [99.7, 3620.0], [99.8, 3682.0], [99.9, 3827.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 15702.0, "series": [{"data": [[0.0, 15702.0], [100.0, 298.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[600.0, 9.0], [700.0, 9.0], [800.0, 5.0], [900.0, 7.0], [1000.0, 17.0], [1100.0, 36.0], [1200.0, 95.0], [1300.0, 190.0], [1400.0, 313.0], [1500.0, 475.0], [1600.0, 650.0], [1700.0, 829.0], [1800.0, 1059.0], [1900.0, 1260.0], [2000.0, 1403.0], [2100.0, 1398.0], [2200.0, 1336.0], [2300.0, 1332.0], [2400.0, 1177.0], [2500.0, 998.0], [2600.0, 850.0], [2700.0, 680.0], [2800.0, 519.0], [2900.0, 390.0], [3000.0, 279.0], [3100.0, 228.0], [3200.0, 149.0], [3300.0, 117.0], [3400.0, 78.0], [3500.0, 38.0], [3600.0, 31.0], [3700.0, 8.0], [3800.0, 10.0], [3900.0, 4.0], [4000.0, 1.0], [4100.0, 2.0], [400.0, 3.0], [500.0, 15.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4100.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 699.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 16003.0, "series": [{"data": [[0.0, 16003.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 699.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 15298.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 13.309090909090907, "minX": 1.74601452E12, "maxY": 32.0, "series": [{"data": [[1.74601488E12, 32.0], [1.74601554E12, 32.0], [1.74601458E12, 32.0], [1.74601524E12, 32.0], [1.74601494E12, 32.0], [1.74601464E12, 32.0], [1.7460153E12, 32.0], [1.7460156E12, 32.0], [1.746015E12, 32.0], [1.74601566E12, 30.88366336633664], [1.7460147E12, 32.0], [1.74601506E12, 32.0], [1.74601536E12, 32.0], [1.74601476E12, 32.0], [1.74601542E12, 32.0], [1.74601572E12, 13.309090909090907], [1.74601512E12, 32.0], [1.74601482E12, 32.0], [1.74601452E12, 31.117154811715483], [1.74601518E12, 32.0], [1.74601548E12, 32.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74601572E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 9.5, "minX": 1.0, "maxY": 2497.0, "series": [{"data": [[32.0, 75.3426457456307], [4.0, 11.0], [5.0, 10.0], [6.0, 11.125], [8.0, 11.0], [9.0, 13.6], [10.0, 17.72727272727273], [12.0, 22.555555555555557], [13.0, 36.2], [14.0, 47.8], [15.0, 41.75], [16.0, 76.5], [1.0, 9.5], [17.0, 65.71428571428572], [18.0, 40.25], [19.0, 63.0], [20.0, 48.75], [21.0, 67.8888888888889], [22.0, 53.0], [23.0, 12.0], [24.0, 12.0], [25.0, 72.55999999999999], [26.0, 67.44444444444444], [27.0, 78.40404040404039], [28.0, 75.42857142857143], [29.0, 56.666666666666664], [30.0, 78.95000000000005], [31.0, 77.8]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[31.83543750000003, 75.14131250000018]], "isOverall": false, "label": "Create CSR-Aggregated", "isController": false}, {"data": [[32.0, 2250.724043367354], [4.0, 516.75], [5.0, 514.0], [6.0, 560.1111111111111], [7.0, 699.0], [8.0, 644.6666666666666], [9.0, 673.8], [10.0, 774.0833333333334], [11.0, 877.5], [12.0, 970.0], [13.0, 1061.6], [14.0, 1072.8333333333333], [15.0, 1108.0], [16.0, 1163.8], [1.0, 475.3333333333333], [17.0, 1359.0], [18.0, 1377.2], [19.0, 1441.0], [20.0, 1611.8333333333335], [21.0, 1762.8749999999998], [22.0, 2066.3333333333335], [23.0, 1667.5], [24.0, 1655.5], [25.0, 1815.7083333333333], [26.0, 1844.2500000000002], [27.0, 1936.663265306123], [28.0, 1962.857142857143], [29.0, 2244.0], [30.0, 2152.9024390243903], [31.0, 2497.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}, {"data": [[31.83268749999998, 2240.479750000007]], "isOverall": false, "label": "HTTP Request - enroll-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 32.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1446.4, "minX": 1.74601452E12, "maxY": 49279.35, "series": [{"data": [[1.74601488E12, 48403.13333333333], [1.74601554E12, 48753.933333333334], [1.74601458E12, 48695.51666666667], [1.74601524E12, 48182.0], [1.74601494E12, 48296.6], [1.74601464E12, 49279.35], [1.7460153E12, 48111.11666666667], [1.7460156E12, 48591.48333333333], [1.746015E12, 48649.566666666666], [1.74601566E12, 47431.38333333333], [1.7460147E12, 48246.53333333333], [1.74601506E12, 47635.05], [1.74601536E12, 47532.3], [1.74601476E12, 48292.28333333333], [1.74601542E12, 47824.9], [1.74601572E12, 5393.516666666666], [1.74601512E12, 48363.63333333333], [1.74601482E12, 48871.8], [1.74601452E12, 13267.916666666666], [1.74601518E12, 48284.566666666666], [1.74601548E12, 48469.55]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74601488E12, 12592.466666666667], [1.74601554E12, 12683.266666666666], [1.74601458E12, 12667.7], [1.74601524E12, 12530.6], [1.74601494E12, 12560.4], [1.74601464E12, 12820.5], [1.7460153E12, 12516.433333333332], [1.7460156E12, 12637.9], [1.746015E12, 12652.866666666667], [1.74601566E12, 12347.233333333334], [1.7460147E12, 12545.766666666666], [1.74601506E12, 12394.7], [1.74601536E12, 12364.266666666666], [1.74601476E12, 12562.833333333334], [1.74601542E12, 12440.433333333332], [1.74601572E12, 1446.4], [1.74601512E12, 12576.7], [1.74601482E12, 12714.433333333332], [1.74601452E12, 3395.7], [1.74601518E12, 12560.8], [1.74601548E12, 12608.133333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74601572E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 40.82857142857142, "minX": 1.74601452E12, "maxY": 2315.699551569507, "series": [{"data": [[1.74601488E12, 76.12953995157378], [1.74601554E12, 73.83894230769235], [1.74601458E12, 76.07701564380261], [1.74601524E12, 75.29247572815534], [1.74601494E12, 76.16585956416463], [1.74601464E12, 75.93103448275859], [1.7460153E12, 74.9037758830696], [1.7460156E12, 73.54753309265949], [1.746015E12, 76.32091346153848], [1.74601566E12, 77.20124223602491], [1.7460147E12, 75.4479418886199], [1.74601506E12, 75.75615763546801], [1.74601536E12, 75.14901477832521], [1.74601476E12, 74.63393939393941], [1.74601542E12, 74.27539779681766], [1.74601572E12, 40.82857142857142], [1.74601512E12, 75.50724637681168], [1.74601482E12, 75.878896882494], [1.74601452E12, 73.49019607843141], [1.74601518E12, 75.62742718446617], [1.74601548E12, 73.45772946859896]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74601488E12, 2233.5610640870627], [1.74601554E12, 2231.7935174069635], [1.74601458E12, 2229.4963942307695], [1.74601524E12, 2252.648845686514], [1.74601494E12, 2250.9345454545446], [1.74601464E12, 2213.788598574822], [1.7460153E12, 2261.130170316302], [1.7460156E12, 2230.836144578311], [1.746015E12, 2242.6835138387496], [1.74601566E12, 2225.180024660914], [1.7460147E12, 2240.956310679608], [1.74601506E12, 2278.982800982802], [1.74601536E12, 2284.762315270934], [1.74601476E12, 2254.684848484847], [1.74601542E12, 2278.588739290082], [1.74601572E12, 1090.2526315789473], [1.74601512E12, 2245.617433414043], [1.74601482E12, 2231.911377245511], [1.74601452E12, 2315.699551569507], [1.74601518E12, 2249.853333333336], [1.74601548E12, 2246.113526570045]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74601572E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74601452E12, "maxY": 2315.632286995515, "series": [{"data": [[1.74601488E12, 0.0], [1.74601554E12, 0.0], [1.74601458E12, 0.0], [1.74601524E12, 0.0], [1.74601494E12, 0.0], [1.74601464E12, 0.0], [1.7460153E12, 0.0], [1.7460156E12, 0.0], [1.746015E12, 0.0], [1.74601566E12, 0.0], [1.7460147E12, 0.0], [1.74601506E12, 0.0], [1.74601536E12, 0.0], [1.74601476E12, 0.0], [1.74601542E12, 0.0], [1.74601572E12, 0.0], [1.74601512E12, 0.0], [1.74601482E12, 0.0], [1.74601452E12, 0.0], [1.74601518E12, 0.0], [1.74601548E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74601488E12, 2233.547762998793], [1.74601554E12, 2231.7899159663893], [1.74601458E12, 2229.461538461536], [1.74601524E12, 2252.643985419201], [1.74601494E12, 2250.9284848484845], [1.74601464E12, 2213.775534441804], [1.7460153E12, 2261.1265206812673], [1.7460156E12, 2230.8240963855455], [1.746015E12, 2242.6799037304445], [1.74601566E12, 2225.1713933415517], [1.7460147E12, 2240.938106796118], [1.74601506E12, 2278.9791154791155], [1.74601536E12, 2284.756157635468], [1.74601476E12, 2254.673939393936], [1.74601542E12, 2278.58139534884], [1.74601572E12, 1090.2526315789473], [1.74601512E12, 2245.607748184022], [1.74601482E12, 2231.897005988024], [1.74601452E12, 2315.632286995515], [1.74601518E12, 2249.8436363636374], [1.74601548E12, 2246.1086956521754]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74601572E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74601452E12, "maxY": 83.79820627802691, "series": [{"data": [[1.74601488E12, 0.0], [1.74601554E12, 0.0], [1.74601458E12, 0.0], [1.74601524E12, 0.0], [1.74601494E12, 0.0], [1.74601464E12, 0.0], [1.7460153E12, 0.0], [1.7460156E12, 0.0], [1.746015E12, 0.0], [1.74601566E12, 0.0], [1.7460147E12, 0.0], [1.74601506E12, 0.0], [1.74601536E12, 0.0], [1.74601476E12, 0.0], [1.74601542E12, 0.0], [1.74601572E12, 0.0], [1.74601512E12, 0.0], [1.74601482E12, 0.0], [1.74601452E12, 0.0], [1.74601518E12, 0.0], [1.74601548E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74601488E12, 0.28053204353083466], [1.74601554E12, 0.16926770708283323], [1.74601458E12, 0.3737980769230768], [1.74601524E12, 0.1555285540704739], [1.74601494E12, 0.23636363636363641], [1.74601464E12, 0.2802850356294536], [1.7460153E12, 0.19464720194647195], [1.7460156E12, 0.18915662650602416], [1.746015E12, 0.2394705174488567], [1.74601566E12, 0.36374845869297184], [1.7460147E12, 0.2766990291262136], [1.74601506E12, 0.21990171990171992], [1.74601536E12, 0.184729064039409], [1.74601476E12, 0.2436363636363639], [1.74601542E12, 0.20563035495716064], [1.74601572E12, 0.2631578947368421], [1.74601512E12, 0.20823244552058112], [1.74601482E12, 0.25149700598802377], [1.74601452E12, 83.79820627802691], [1.74601518E12, 0.20969696969696958], [1.74601548E12, 0.15821256038647352]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74601572E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 9.0, "minX": 1.74601452E12, "maxY": 4190.0, "series": [{"data": [[1.74601488E12, 3652.0], [1.74601554E12, 3556.0], [1.74601458E12, 4045.0], [1.74601524E12, 3643.0], [1.74601494E12, 3608.0], [1.74601464E12, 3596.0], [1.7460153E12, 3903.0], [1.7460156E12, 3736.0], [1.746015E12, 3584.0], [1.74601566E12, 3916.0], [1.7460147E12, 3830.0], [1.74601506E12, 3644.0], [1.74601536E12, 3735.0], [1.74601476E12, 3891.0], [1.74601542E12, 4190.0], [1.74601572E12, 2400.0], [1.74601512E12, 4180.0], [1.74601482E12, 3827.0], [1.74601452E12, 3699.0], [1.74601518E12, 3868.0], [1.74601548E12, 3907.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.74601488E12, 2656.0], [1.74601554E12, 2583.4], [1.74601458E12, 2573.6000000000004], [1.74601524E12, 2648.2], [1.74601494E12, 2618.0], [1.74601464E12, 2590.0], [1.7460153E12, 2646.0], [1.7460156E12, 2598.8], [1.746015E12, 2608.2000000000003], [1.74601566E12, 2625.0], [1.7460147E12, 2593.5000000000005], [1.74601506E12, 2686.3], [1.74601536E12, 2651.5], [1.74601476E12, 2636.5000000000005], [1.74601542E12, 2647.5], [1.74601572E12, 1643.2], [1.74601512E12, 2611.5], [1.74601482E12, 2588.0], [1.74601452E12, 2710.1], [1.74601518E12, 2624.0], [1.74601548E12, 2620.6]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.74601488E12, 3277.1000000000013], [1.74601554E12, 3074.1199999999985], [1.74601458E12, 3305.5599999999954], [1.74601524E12, 3353.7599999999998], [1.74601494E12, 3232.96], [1.74601464E12, 3196.2800000000007], [1.7460153E12, 3209.68], [1.7460156E12, 3250.119999999997], [1.746015E12, 3250.599999999999], [1.74601566E12, 3308.789999999999], [1.7460147E12, 3297.3100000000004], [1.74601506E12, 3323.0600000000004], [1.74601536E12, 3241.5], [1.74601476E12, 3385.96], [1.74601542E12, 3357.800000000003], [1.74601572E12, 2283.8400000000006], [1.74601512E12, 3273.3000000000015], [1.74601482E12, 3335.3], [1.74601452E12, 3471.609999999999], [1.74601518E12, 3289.0], [1.74601548E12, 3194.1500000000005]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.74601488E12, 2891.7999999999997], [1.74601554E12, 2749.3999999999996], [1.74601458E12, 2786.3999999999996], [1.74601524E12, 2858.7999999999997], [1.74601494E12, 2807.5999999999985], [1.74601464E12, 2847.8], [1.7460153E12, 2861.5999999999995], [1.7460156E12, 2799.8999999999996], [1.746015E12, 2852.8], [1.74601566E12, 2855.0499999999993], [1.7460147E12, 2847.45], [1.74601506E12, 2934.2999999999997], [1.74601536E12, 2847.25], [1.74601476E12, 2903.2499999999955], [1.74601542E12, 2876.0], [1.74601572E12, 1842.8999999999987], [1.74601512E12, 2831.0], [1.74601482E12, 2845.0], [1.74601452E12, 2978.05], [1.74601518E12, 2864.5], [1.74601548E12, 2822.2999999999997]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.74601488E12, 41.0], [1.74601554E12, 40.0], [1.74601458E12, 31.0], [1.74601524E12, 34.0], [1.74601494E12, 39.0], [1.74601464E12, 23.0], [1.7460153E12, 30.0], [1.7460156E12, 35.0], [1.746015E12, 35.0], [1.74601566E12, 13.0], [1.7460147E12, 31.0], [1.74601506E12, 26.0], [1.74601536E12, 36.0], [1.74601476E12, 30.0], [1.74601542E12, 24.0], [1.74601572E12, 9.0], [1.74601512E12, 23.0], [1.74601482E12, 35.0], [1.74601452E12, 9.0], [1.74601518E12, 39.0], [1.74601548E12, 33.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.74601488E12, 1163.0], [1.74601554E12, 1067.0], [1.74601458E12, 1092.0], [1.74601524E12, 113.0], [1.74601494E12, 139.0], [1.74601464E12, 1107.0], [1.7460153E12, 1220.0], [1.7460156E12, 119.0], [1.746015E12, 128.0], [1.74601566E12, 1182.5], [1.7460147E12, 115.0], [1.74601506E12, 1250.0], [1.74601536E12, 630.5], [1.74601476E12, 664.5], [1.74601542E12, 678.0], [1.74601572E12, 529.0], [1.74601512E12, 108.5], [1.74601482E12, 1002.0], [1.74601452E12, 102.0], [1.74601518E12, 1176.0], [1.74601548E12, 579.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74601572E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 11.0, "minX": 1.0, "maxY": 1585.5, "series": [{"data": [[33.0, 1277.0], [32.0, 112.0], [34.0, 128.0], [35.0, 101.0], [37.0, 1109.0], [36.0, 1295.5], [38.0, 105.5], [39.0, 1399.5], [40.0, 1401.5], [41.0, 1585.5], [42.0, 1157.5], [44.0, 750.5], [45.0, 97.5], [46.0, 1017.5], [4.0, 241.0], [10.0, 11.0], [11.0, 89.0], [12.0, 1532.5], [13.0, 1439.0], [14.0, 759.5], [15.0, 1440.0], [16.0, 135.5], [1.0, 478.0], [17.0, 522.0], [18.0, 105.0], [19.0, 1243.0], [20.0, 97.0], [21.0, 1286.0], [22.0, 99.0], [23.0, 1166.5], [24.0, 600.0], [25.0, 1175.0], [26.0, 1297.0], [27.0, 897.0], [28.0, 122.0], [29.0, 104.0], [30.0, 1283.5], [31.0, 104.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 46.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 1585.5, "series": [{"data": [[33.0, 1277.0], [32.0, 0.0], [34.0, 0.0], [35.0, 0.0], [37.0, 1109.0], [36.0, 1295.5], [38.0, 0.0], [39.0, 1399.5], [40.0, 1401.5], [41.0, 1585.5], [42.0, 1157.5], [44.0, 701.5], [45.0, 0.0], [46.0, 921.0], [4.0, 236.0], [10.0, 0.0], [11.0, 0.0], [12.0, 1532.5], [13.0, 1439.0], [14.0, 708.0], [15.0, 1440.0], [16.0, 0.0], [1.0, 478.0], [17.0, 522.0], [18.0, 0.0], [19.0, 1243.0], [20.0, 0.0], [21.0, 1286.0], [22.0, 0.0], [23.0, 1166.5], [24.0, 544.0], [25.0, 1174.0], [26.0, 1297.0], [27.0, 897.0], [28.0, 0.0], [29.0, 0.0], [30.0, 1283.5], [31.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 46.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.3333333333333335, "minX": 1.74601452E12, "maxY": 28.05, "series": [{"data": [[1.74601488E12, 27.55], [1.74601554E12, 27.75], [1.74601458E12, 27.716666666666665], [1.74601524E12, 27.45], [1.74601494E12, 27.516666666666666], [1.74601464E12, 28.05], [1.7460153E12, 27.383333333333333], [1.7460156E12, 27.683333333333334], [1.746015E12, 27.7], [1.74601566E12, 26.816666666666666], [1.7460147E12, 27.5], [1.74601506E12, 27.116666666666667], [1.74601536E12, 27.066666666666666], [1.74601476E12, 27.5], [1.74601542E12, 27.233333333333334], [1.74601572E12, 2.3333333333333335], [1.74601512E12, 27.566666666666666], [1.74601482E12, 27.816666666666666], [1.74601452E12, 8.5], [1.74601518E12, 27.483333333333334], [1.74601548E12, 27.6]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74601572E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.1666666666666667, "minX": 1.74601452E12, "maxY": 14.033333333333333, "series": [{"data": [[1.74601488E12, 13.766666666666667], [1.74601554E12, 13.866666666666667], [1.74601458E12, 13.85], [1.74601524E12, 13.733333333333333], [1.74601494E12, 13.766666666666667], [1.74601464E12, 14.016666666666667], [1.7460153E12, 13.683333333333334], [1.7460156E12, 13.85], [1.746015E12, 13.866666666666667], [1.74601566E12, 13.416666666666666], [1.7460147E12, 13.766666666666667], [1.74601506E12, 13.533333333333333], [1.74601536E12, 13.533333333333333], [1.74601476E12, 13.75], [1.74601542E12, 13.616666666666667], [1.74601572E12, 1.1666666666666667], [1.74601512E12, 13.8], [1.74601482E12, 13.9], [1.74601452E12, 4.25], [1.74601518E12, 13.733333333333333], [1.74601548E12, 13.8]], "isOverall": false, "label": "0", "isController": false}, {"data": [[1.74601488E12, 13.783333333333333], [1.74601554E12, 13.883333333333333], [1.74601458E12, 13.866666666666667], [1.74601524E12, 13.716666666666667], [1.74601494E12, 13.75], [1.74601464E12, 14.033333333333333], [1.7460153E12, 13.7], [1.7460156E12, 13.833333333333334], [1.746015E12, 13.85], [1.74601566E12, 13.516666666666667], [1.7460147E12, 13.733333333333333], [1.74601506E12, 13.566666666666666], [1.74601536E12, 13.533333333333333], [1.74601476E12, 13.75], [1.74601542E12, 13.616666666666667], [1.74601572E12, 1.5833333333333333], [1.74601512E12, 13.766666666666667], [1.74601482E12, 13.916666666666666], [1.74601452E12, 3.716666666666667], [1.74601518E12, 13.75], [1.74601548E12, 13.8]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74601572E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.1666666666666667, "minX": 1.74601452E12, "maxY": 14.033333333333333, "series": [{"data": [[1.74601488E12, 13.783333333333333], [1.74601554E12, 13.883333333333333], [1.74601458E12, 13.866666666666667], [1.74601524E12, 13.716666666666667], [1.74601494E12, 13.75], [1.74601464E12, 14.033333333333333], [1.7460153E12, 13.7], [1.7460156E12, 13.833333333333334], [1.746015E12, 13.85], [1.74601566E12, 13.516666666666667], [1.7460147E12, 13.733333333333333], [1.74601506E12, 13.566666666666666], [1.74601536E12, 13.533333333333333], [1.74601476E12, 13.75], [1.74601542E12, 13.616666666666667], [1.74601572E12, 1.5833333333333333], [1.74601512E12, 13.766666666666667], [1.74601482E12, 13.916666666666666], [1.74601452E12, 3.716666666666667], [1.74601518E12, 13.75], [1.74601548E12, 13.8]], "isOverall": false, "label": "HTTP Request - enroll-success", "isController": false}, {"data": [[1.74601488E12, 13.766666666666667], [1.74601554E12, 13.866666666666667], [1.74601458E12, 13.85], [1.74601524E12, 13.733333333333333], [1.74601494E12, 13.766666666666667], [1.74601464E12, 14.016666666666667], [1.7460153E12, 13.683333333333334], [1.7460156E12, 13.85], [1.746015E12, 13.866666666666667], [1.74601566E12, 13.416666666666666], [1.7460147E12, 13.766666666666667], [1.74601506E12, 13.533333333333333], [1.74601536E12, 13.533333333333333], [1.74601476E12, 13.75], [1.74601542E12, 13.616666666666667], [1.74601572E12, 1.1666666666666667], [1.74601512E12, 13.8], [1.74601482E12, 13.9], [1.74601452E12, 4.25], [1.74601518E12, 13.733333333333333], [1.74601548E12, 13.8]], "isOverall": false, "label": "Create CSR-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74601572E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.75, "minX": 1.74601452E12, "maxY": 28.05, "series": [{"data": [[1.74601488E12, 27.55], [1.74601554E12, 27.75], [1.74601458E12, 27.716666666666665], [1.74601524E12, 27.45], [1.74601494E12, 27.516666666666666], [1.74601464E12, 28.05], [1.7460153E12, 27.383333333333333], [1.7460156E12, 27.683333333333334], [1.746015E12, 27.716666666666665], [1.74601566E12, 26.933333333333334], [1.7460147E12, 27.5], [1.74601506E12, 27.1], [1.74601536E12, 27.066666666666666], [1.74601476E12, 27.5], [1.74601542E12, 27.233333333333334], [1.74601572E12, 2.75], [1.74601512E12, 27.566666666666666], [1.74601482E12, 27.816666666666666], [1.74601452E12, 7.966666666666667], [1.74601518E12, 27.483333333333334], [1.74601548E12, 27.6]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74601572E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

