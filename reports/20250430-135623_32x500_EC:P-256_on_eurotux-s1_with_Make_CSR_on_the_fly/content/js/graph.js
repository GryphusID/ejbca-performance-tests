/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 9.0, "minX": 0.0, "maxY": 4405.0, "series": [{"data": [[0.0, 9.0], [0.1, 11.0], [0.2, 15.0], [0.3, 19.0], [0.4, 28.0], [0.5, 36.0], [0.6, 39.0], [0.7, 40.0], [0.8, 42.0], [0.9, 43.0], [1.0, 44.0], [1.1, 45.0], [1.2, 46.0], [1.3, 47.0], [1.4, 47.0], [1.5, 48.0], [1.6, 48.0], [1.7, 49.0], [1.8, 49.0], [1.9, 50.0], [2.0, 50.0], [2.1, 51.0], [2.2, 51.0], [2.3, 51.0], [2.4, 51.0], [2.5, 52.0], [2.6, 52.0], [2.7, 52.0], [2.8, 52.0], [2.9, 52.0], [3.0, 53.0], [3.1, 53.0], [3.2, 53.0], [3.3, 54.0], [3.4, 54.0], [3.5, 54.0], [3.6, 54.0], [3.7, 54.0], [3.8, 55.0], [3.9, 55.0], [4.0, 55.0], [4.1, 55.0], [4.2, 55.0], [4.3, 55.0], [4.4, 56.0], [4.5, 56.0], [4.6, 56.0], [4.7, 56.0], [4.8, 56.0], [4.9, 56.0], [5.0, 56.0], [5.1, 56.0], [5.2, 56.0], [5.3, 56.0], [5.4, 57.0], [5.5, 57.0], [5.6, 57.0], [5.7, 57.0], [5.8, 57.0], [5.9, 57.0], [6.0, 58.0], [6.1, 58.0], [6.2, 58.0], [6.3, 58.0], [6.4, 58.0], [6.5, 58.0], [6.6, 58.0], [6.7, 58.0], [6.8, 58.0], [6.9, 59.0], [7.0, 59.0], [7.1, 59.0], [7.2, 59.0], [7.3, 59.0], [7.4, 59.0], [7.5, 59.0], [7.6, 59.0], [7.7, 59.0], [7.8, 59.0], [7.9, 59.0], [8.0, 59.0], [8.1, 59.0], [8.2, 59.0], [8.3, 59.0], [8.4, 60.0], [8.5, 60.0], [8.6, 60.0], [8.7, 60.0], [8.8, 60.0], [8.9, 60.0], [9.0, 60.0], [9.1, 60.0], [9.2, 60.0], [9.3, 60.0], [9.4, 60.0], [9.5, 60.0], [9.6, 60.0], [9.7, 60.0], [9.8, 60.0], [9.9, 60.0], [10.0, 60.0], [10.1, 61.0], [10.2, 61.0], [10.3, 61.0], [10.4, 61.0], [10.5, 61.0], [10.6, 61.0], [10.7, 61.0], [10.8, 61.0], [10.9, 61.0], [11.0, 62.0], [11.1, 62.0], [11.2, 62.0], [11.3, 62.0], [11.4, 62.0], [11.5, 62.0], [11.6, 62.0], [11.7, 62.0], [11.8, 62.0], [11.9, 62.0], [12.0, 62.0], [12.1, 62.0], [12.2, 62.0], [12.3, 62.0], [12.4, 63.0], [12.5, 63.0], [12.6, 63.0], [12.7, 63.0], [12.8, 63.0], [12.9, 63.0], [13.0, 63.0], [13.1, 63.0], [13.2, 63.0], [13.3, 63.0], [13.4, 63.0], [13.5, 63.0], [13.6, 63.0], [13.7, 63.0], [13.8, 63.0], [13.9, 63.0], [14.0, 63.0], [14.1, 63.0], [14.2, 63.0], [14.3, 63.0], [14.4, 64.0], [14.5, 64.0], [14.6, 64.0], [14.7, 64.0], [14.8, 64.0], [14.9, 64.0], [15.0, 64.0], [15.1, 64.0], [15.2, 64.0], [15.3, 64.0], [15.4, 64.0], [15.5, 64.0], [15.6, 64.0], [15.7, 64.0], [15.8, 64.0], [15.9, 64.0], [16.0, 64.0], [16.1, 64.0], [16.2, 64.0], [16.3, 64.0], [16.4, 64.0], [16.5, 64.0], [16.6, 64.0], [16.7, 64.0], [16.8, 64.0], [16.9, 64.0], [17.0, 64.0], [17.1, 64.0], [17.2, 65.0], [17.3, 65.0], [17.4, 65.0], [17.5, 65.0], [17.6, 65.0], [17.7, 65.0], [17.8, 65.0], [17.9, 65.0], [18.0, 65.0], [18.1, 65.0], [18.2, 65.0], [18.3, 65.0], [18.4, 65.0], [18.5, 66.0], [18.6, 66.0], [18.7, 66.0], [18.8, 66.0], [18.9, 66.0], [19.0, 66.0], [19.1, 66.0], [19.2, 66.0], [19.3, 66.0], [19.4, 66.0], [19.5, 66.0], [19.6, 66.0], [19.7, 66.0], [19.8, 66.0], [19.9, 66.0], [20.0, 66.0], [20.1, 66.0], [20.2, 66.0], [20.3, 66.0], [20.4, 66.0], [20.5, 66.0], [20.6, 66.0], [20.7, 67.0], [20.8, 67.0], [20.9, 67.0], [21.0, 67.0], [21.1, 67.0], [21.2, 67.0], [21.3, 67.0], [21.4, 67.0], [21.5, 67.0], [21.6, 67.0], [21.7, 67.0], [21.8, 67.0], [21.9, 67.0], [22.0, 67.0], [22.1, 67.0], [22.2, 67.0], [22.3, 67.0], [22.4, 67.0], [22.5, 67.0], [22.6, 67.0], [22.7, 67.0], [22.8, 67.0], [22.9, 67.0], [23.0, 67.0], [23.1, 67.0], [23.2, 67.0], [23.3, 67.0], [23.4, 67.0], [23.5, 68.0], [23.6, 68.0], [23.7, 68.0], [23.8, 68.0], [23.9, 68.0], [24.0, 68.0], [24.1, 68.0], [24.2, 68.0], [24.3, 68.0], [24.4, 68.0], [24.5, 68.0], [24.6, 68.0], [24.7, 68.0], [24.8, 68.0], [24.9, 68.0], [25.0, 68.0], [25.1, 68.0], [25.2, 68.0], [25.3, 68.0], [25.4, 68.0], [25.5, 68.0], [25.6, 68.0], [25.7, 68.0], [25.8, 68.0], [25.9, 68.0], [26.0, 68.0], [26.1, 68.0], [26.2, 68.0], [26.3, 68.0], [26.4, 68.0], [26.5, 68.0], [26.6, 68.0], [26.7, 68.0], [26.8, 68.0], [26.9, 68.0], [27.0, 68.0], [27.1, 68.0], [27.2, 69.0], [27.3, 69.0], [27.4, 69.0], [27.5, 69.0], [27.6, 69.0], [27.7, 69.0], [27.8, 69.0], [27.9, 69.0], [28.0, 69.0], [28.1, 69.0], [28.2, 69.0], [28.3, 69.0], [28.4, 69.0], [28.5, 69.0], [28.6, 69.0], [28.7, 69.0], [28.8, 69.0], [28.9, 69.0], [29.0, 70.0], [29.1, 70.0], [29.2, 70.0], [29.3, 70.0], [29.4, 70.0], [29.5, 70.0], [29.6, 70.0], [29.7, 70.0], [29.8, 70.0], [29.9, 70.0], [30.0, 70.0], [30.1, 70.0], [30.2, 70.0], [30.3, 70.0], [30.4, 70.0], [30.5, 70.0], [30.6, 70.0], [30.7, 70.0], [30.8, 70.0], [30.9, 70.0], [31.0, 70.0], [31.1, 70.0], [31.2, 70.0], [31.3, 70.0], [31.4, 70.0], [31.5, 70.0], [31.6, 70.0], [31.7, 71.0], [31.8, 71.0], [31.9, 71.0], [32.0, 71.0], [32.1, 71.0], [32.2, 71.0], [32.3, 71.0], [32.4, 71.0], [32.5, 71.0], [32.6, 71.0], [32.7, 71.0], [32.8, 71.0], [32.9, 71.0], [33.0, 71.0], [33.1, 71.0], [33.2, 71.0], [33.3, 71.0], [33.4, 71.0], [33.5, 71.0], [33.6, 71.0], [33.7, 71.0], [33.8, 71.0], [33.9, 71.0], [34.0, 71.0], [34.1, 71.0], [34.2, 71.0], [34.3, 71.0], [34.4, 71.0], [34.5, 71.0], [34.6, 71.0], [34.7, 71.0], [34.8, 71.0], [34.9, 71.0], [35.0, 71.0], [35.1, 71.0], [35.2, 71.0], [35.3, 71.0], [35.4, 71.0], [35.5, 72.0], [35.6, 72.0], [35.7, 72.0], [35.8, 72.0], [35.9, 72.0], [36.0, 72.0], [36.1, 72.0], [36.2, 72.0], [36.3, 72.0], [36.4, 72.0], [36.5, 72.0], [36.6, 72.0], [36.7, 72.0], [36.8, 72.0], [36.9, 72.0], [37.0, 72.0], [37.1, 72.0], [37.2, 72.0], [37.3, 72.0], [37.4, 72.0], [37.5, 72.0], [37.6, 72.0], [37.7, 72.0], [37.8, 72.0], [37.9, 72.0], [38.0, 72.0], [38.1, 72.0], [38.2, 72.0], [38.3, 72.0], [38.4, 72.0], [38.5, 72.0], [38.6, 72.0], [38.7, 72.0], [38.8, 72.0], [38.9, 72.0], [39.0, 72.0], [39.1, 72.0], [39.2, 72.0], [39.3, 72.0], [39.4, 72.0], [39.5, 72.0], [39.6, 72.0], [39.7, 72.0], [39.8, 72.0], [39.9, 72.0], [40.0, 72.0], [40.1, 73.0], [40.2, 73.0], [40.3, 73.0], [40.4, 73.0], [40.5, 73.0], [40.6, 73.0], [40.7, 73.0], [40.8, 73.0], [40.9, 73.0], [41.0, 73.0], [41.1, 73.0], [41.2, 73.0], [41.3, 73.0], [41.4, 73.0], [41.5, 73.0], [41.6, 73.0], [41.7, 73.0], [41.8, 73.0], [41.9, 73.0], [42.0, 73.0], [42.1, 73.0], [42.2, 73.0], [42.3, 73.0], [42.4, 74.0], [42.5, 74.0], [42.6, 74.0], [42.7, 74.0], [42.8, 74.0], [42.9, 74.0], [43.0, 74.0], [43.1, 74.0], [43.2, 74.0], [43.3, 74.0], [43.4, 74.0], [43.5, 74.0], [43.6, 74.0], [43.7, 74.0], [43.8, 74.0], [43.9, 74.0], [44.0, 74.0], [44.1, 74.0], [44.2, 74.0], [44.3, 74.0], [44.4, 74.0], [44.5, 74.0], [44.6, 74.0], [44.7, 74.0], [44.8, 74.0], [44.9, 74.0], [45.0, 74.0], [45.1, 74.0], [45.2, 74.0], [45.3, 74.0], [45.4, 74.0], [45.5, 75.0], [45.6, 75.0], [45.7, 75.0], [45.8, 75.0], [45.9, 75.0], [46.0, 75.0], [46.1, 75.0], [46.2, 75.0], [46.3, 75.0], [46.4, 75.0], [46.5, 75.0], [46.6, 75.0], [46.7, 75.0], [46.8, 75.0], [46.9, 75.0], [47.0, 75.0], [47.1, 75.0], [47.2, 75.0], [47.3, 75.0], [47.4, 75.0], [47.5, 75.0], [47.6, 75.0], [47.7, 75.0], [47.8, 75.0], [47.9, 75.0], [48.0, 75.0], [48.1, 75.0], [48.2, 75.0], [48.3, 75.0], [48.4, 75.0], [48.5, 75.0], [48.6, 75.0], [48.7, 75.0], [48.8, 75.0], [48.9, 75.0], [49.0, 75.0], [49.1, 75.0], [49.2, 75.0], [49.3, 75.0], [49.4, 75.0], [49.5, 76.0], [49.6, 76.0], [49.7, 76.0], [49.8, 76.0], [49.9, 76.0], [50.0, 76.0], [50.1, 76.0], [50.2, 76.0], [50.3, 76.0], [50.4, 76.0], [50.5, 76.0], [50.6, 76.0], [50.7, 76.0], [50.8, 76.0], [50.9, 76.0], [51.0, 76.0], [51.1, 76.0], [51.2, 76.0], [51.3, 76.0], [51.4, 76.0], [51.5, 76.0], [51.6, 76.0], [51.7, 76.0], [51.8, 76.0], [51.9, 76.0], [52.0, 76.0], [52.1, 76.0], [52.2, 76.0], [52.3, 76.0], [52.4, 76.0], [52.5, 76.0], [52.6, 76.0], [52.7, 76.0], [52.8, 76.0], [52.9, 76.0], [53.0, 76.0], [53.1, 76.0], [53.2, 76.0], [53.3, 76.0], [53.4, 76.0], [53.5, 76.0], [53.6, 76.0], [53.7, 76.0], [53.8, 76.0], [53.9, 76.0], [54.0, 76.0], [54.1, 76.0], [54.2, 76.0], [54.3, 76.0], [54.4, 77.0], [54.5, 77.0], [54.6, 77.0], [54.7, 77.0], [54.8, 77.0], [54.9, 77.0], [55.0, 77.0], [55.1, 77.0], [55.2, 77.0], [55.3, 77.0], [55.4, 77.0], [55.5, 77.0], [55.6, 77.0], [55.7, 77.0], [55.8, 77.0], [55.9, 77.0], [56.0, 77.0], [56.1, 77.0], [56.2, 77.0], [56.3, 77.0], [56.4, 77.0], [56.5, 77.0], [56.6, 78.0], [56.7, 78.0], [56.8, 78.0], [56.9, 78.0], [57.0, 78.0], [57.1, 78.0], [57.2, 78.0], [57.3, 78.0], [57.4, 78.0], [57.5, 78.0], [57.6, 78.0], [57.7, 78.0], [57.8, 78.0], [57.9, 78.0], [58.0, 78.0], [58.1, 78.0], [58.2, 78.0], [58.3, 78.0], [58.4, 78.0], [58.5, 78.0], [58.6, 78.0], [58.7, 78.0], [58.8, 78.0], [58.9, 78.0], [59.0, 78.0], [59.1, 78.0], [59.2, 78.0], [59.3, 79.0], [59.4, 79.0], [59.5, 79.0], [59.6, 79.0], [59.7, 79.0], [59.8, 79.0], [59.9, 79.0], [60.0, 79.0], [60.1, 79.0], [60.2, 79.0], [60.3, 79.0], [60.4, 79.0], [60.5, 79.0], [60.6, 79.0], [60.7, 79.0], [60.8, 79.0], [60.9, 79.0], [61.0, 79.0], [61.1, 79.0], [61.2, 79.0], [61.3, 79.0], [61.4, 79.0], [61.5, 79.0], [61.6, 79.0], [61.7, 79.0], [61.8, 79.0], [61.9, 79.0], [62.0, 79.0], [62.1, 79.0], [62.2, 79.0], [62.3, 79.0], [62.4, 79.0], [62.5, 79.0], [62.6, 79.0], [62.7, 79.0], [62.8, 79.0], [62.9, 80.0], [63.0, 80.0], [63.1, 80.0], [63.2, 80.0], [63.3, 80.0], [63.4, 80.0], [63.5, 80.0], [63.6, 80.0], [63.7, 80.0], [63.8, 80.0], [63.9, 80.0], [64.0, 80.0], [64.1, 80.0], [64.2, 80.0], [64.3, 80.0], [64.4, 80.0], [64.5, 80.0], [64.6, 80.0], [64.7, 80.0], [64.8, 80.0], [64.9, 80.0], [65.0, 80.0], [65.1, 80.0], [65.2, 80.0], [65.3, 80.0], [65.4, 80.0], [65.5, 80.0], [65.6, 80.0], [65.7, 80.0], [65.8, 80.0], [65.9, 80.0], [66.0, 80.0], [66.1, 80.0], [66.2, 80.0], [66.3, 80.0], [66.4, 80.0], [66.5, 80.0], [66.6, 80.0], [66.7, 80.0], [66.8, 80.0], [66.9, 80.0], [67.0, 80.0], [67.1, 80.0], [67.2, 80.0], [67.3, 80.0], [67.4, 80.0], [67.5, 81.0], [67.6, 81.0], [67.7, 81.0], [67.8, 81.0], [67.9, 81.0], [68.0, 81.0], [68.1, 81.0], [68.2, 81.0], [68.3, 81.0], [68.4, 81.0], [68.5, 81.0], [68.6, 81.0], [68.7, 81.0], [68.8, 81.0], [68.9, 81.0], [69.0, 81.0], [69.1, 81.0], [69.2, 81.0], [69.3, 82.0], [69.4, 82.0], [69.5, 82.0], [69.6, 82.0], [69.7, 82.0], [69.8, 82.0], [69.9, 82.0], [70.0, 82.0], [70.1, 82.0], [70.2, 82.0], [70.3, 82.0], [70.4, 82.0], [70.5, 82.0], [70.6, 82.0], [70.7, 82.0], [70.8, 82.0], [70.9, 82.0], [71.0, 82.0], [71.1, 82.0], [71.2, 82.0], [71.3, 82.0], [71.4, 82.0], [71.5, 82.0], [71.6, 82.0], [71.7, 82.0], [71.8, 82.0], [71.9, 83.0], [72.0, 83.0], [72.1, 83.0], [72.2, 83.0], [72.3, 83.0], [72.4, 83.0], [72.5, 83.0], [72.6, 83.0], [72.7, 83.0], [72.8, 83.0], [72.9, 83.0], [73.0, 83.0], [73.1, 83.0], [73.2, 83.0], [73.3, 83.0], [73.4, 83.0], [73.5, 83.0], [73.6, 83.0], [73.7, 83.0], [73.8, 83.0], [73.9, 83.0], [74.0, 83.0], [74.1, 83.0], [74.2, 83.0], [74.3, 83.0], [74.4, 83.0], [74.5, 83.0], [74.6, 83.0], [74.7, 83.0], [74.8, 83.0], [74.9, 83.0], [75.0, 83.0], [75.1, 83.0], [75.2, 84.0], [75.3, 84.0], [75.4, 84.0], [75.5, 84.0], [75.6, 84.0], [75.7, 84.0], [75.8, 84.0], [75.9, 84.0], [76.0, 84.0], [76.1, 84.0], [76.2, 84.0], [76.3, 84.0], [76.4, 84.0], [76.5, 84.0], [76.6, 84.0], [76.7, 84.0], [76.8, 84.0], [76.9, 84.0], [77.0, 84.0], [77.1, 84.0], [77.2, 84.0], [77.3, 84.0], [77.4, 84.0], [77.5, 84.0], [77.6, 84.0], [77.7, 84.0], [77.8, 84.0], [77.9, 84.0], [78.0, 84.0], [78.1, 84.0], [78.2, 84.0], [78.3, 84.0], [78.4, 84.0], [78.5, 84.0], [78.6, 84.0], [78.7, 84.0], [78.8, 84.0], [78.9, 84.0], [79.0, 84.0], [79.1, 84.0], [79.2, 84.0], [79.3, 85.0], [79.4, 85.0], [79.5, 85.0], [79.6, 85.0], [79.7, 85.0], [79.8, 85.0], [79.9, 85.0], [80.0, 85.0], [80.1, 85.0], [80.2, 85.0], [80.3, 85.0], [80.4, 85.0], [80.5, 85.0], [80.6, 85.0], [80.7, 85.0], [80.8, 86.0], [80.9, 86.0], [81.0, 86.0], [81.1, 86.0], [81.2, 86.0], [81.3, 86.0], [81.4, 86.0], [81.5, 86.0], [81.6, 86.0], [81.7, 86.0], [81.8, 86.0], [81.9, 86.0], [82.0, 86.0], [82.1, 86.0], [82.2, 86.0], [82.3, 86.0], [82.4, 86.0], [82.5, 86.0], [82.6, 86.0], [82.7, 86.0], [82.8, 87.0], [82.9, 87.0], [83.0, 87.0], [83.1, 87.0], [83.2, 87.0], [83.3, 87.0], [83.4, 87.0], [83.5, 87.0], [83.6, 87.0], [83.7, 87.0], [83.8, 87.0], [83.9, 87.0], [84.0, 87.0], [84.1, 87.0], [84.2, 87.0], [84.3, 87.0], [84.4, 87.0], [84.5, 87.0], [84.6, 87.0], [84.7, 87.0], [84.8, 87.0], [84.9, 87.0], [85.0, 87.0], [85.1, 87.0], [85.2, 87.0], [85.3, 87.0], [85.4, 88.0], [85.5, 88.0], [85.6, 88.0], [85.7, 88.0], [85.8, 88.0], [85.9, 88.0], [86.0, 88.0], [86.1, 88.0], [86.2, 88.0], [86.3, 88.0], [86.4, 88.0], [86.5, 88.0], [86.6, 88.0], [86.7, 88.0], [86.8, 88.0], [86.9, 88.0], [87.0, 88.0], [87.1, 88.0], [87.2, 88.0], [87.3, 88.0], [87.4, 88.0], [87.5, 88.0], [87.6, 88.0], [87.7, 88.0], [87.8, 88.0], [87.9, 88.0], [88.0, 88.0], [88.1, 88.0], [88.2, 88.0], [88.3, 89.0], [88.4, 89.0], [88.5, 89.0], [88.6, 89.0], [88.7, 89.0], [88.8, 89.0], [88.9, 89.0], [89.0, 89.0], [89.1, 89.0], [89.2, 90.0], [89.3, 90.0], [89.4, 90.0], [89.5, 90.0], [89.6, 90.0], [89.7, 90.0], [89.8, 90.0], [89.9, 90.0], [90.0, 90.0], [90.1, 90.0], [90.2, 90.0], [90.3, 90.0], [90.4, 90.0], [90.5, 90.0], [90.6, 91.0], [90.7, 91.0], [90.8, 91.0], [90.9, 91.0], [91.0, 91.0], [91.1, 91.0], [91.2, 91.0], [91.3, 91.0], [91.4, 91.0], [91.5, 91.0], [91.6, 91.0], [91.7, 91.0], [91.8, 91.0], [91.9, 92.0], [92.0, 92.0], [92.1, 92.0], [92.2, 92.0], [92.3, 92.0], [92.4, 92.0], [92.5, 92.0], [92.6, 92.0], [92.7, 92.0], [92.8, 92.0], [92.9, 92.0], [93.0, 92.0], [93.1, 92.0], [93.2, 92.0], [93.3, 92.0], [93.4, 92.0], [93.5, 92.0], [93.6, 92.0], [93.7, 92.0], [93.8, 92.0], [93.9, 93.0], [94.0, 93.0], [94.1, 93.0], [94.2, 93.0], [94.3, 93.0], [94.4, 94.0], [94.5, 94.0], [94.6, 94.0], [94.7, 94.0], [94.8, 94.0], [94.9, 94.0], [95.0, 94.0], [95.1, 94.0], [95.2, 95.0], [95.3, 95.0], [95.4, 95.0], [95.5, 95.0], [95.6, 95.0], [95.7, 95.0], [95.8, 95.0], [95.9, 95.0], [96.0, 96.0], [96.1, 96.0], [96.2, 96.0], [96.3, 96.0], [96.4, 96.0], [96.5, 96.0], [96.6, 96.0], [96.7, 96.0], [96.8, 96.0], [96.9, 96.0], [97.0, 97.0], [97.1, 97.0], [97.2, 97.0], [97.3, 97.0], [97.4, 98.0], [97.5, 98.0], [97.6, 98.0], [97.7, 98.0], [97.8, 99.0], [97.9, 99.0], [98.0, 99.0], [98.1, 99.0], [98.2, 100.0], [98.3, 100.0], [98.4, 100.0], [98.5, 100.0], [98.6, 100.0], [98.7, 101.0], [98.8, 102.0], [98.9, 102.0], [99.0, 103.0], [99.1, 104.0], [99.2, 104.0], [99.3, 104.0], [99.4, 106.0], [99.5, 108.0], [99.6, 108.0], [99.7, 111.0], [99.8, 116.0], [99.9, 128.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 496.0], [0.1, 615.0], [0.2, 856.0], [0.3, 974.0], [0.4, 1153.0], [0.5, 1211.0], [0.6, 1260.0], [0.7, 1295.0], [0.8, 1324.0], [0.9, 1347.0], [1.0, 1361.0], [1.1, 1383.0], [1.2, 1395.0], [1.3, 1411.0], [1.4, 1422.0], [1.5, 1429.0], [1.6, 1439.0], [1.7, 1447.0], [1.8, 1455.0], [1.9, 1461.0], [2.0, 1469.0], [2.1, 1476.0], [2.2, 1483.0], [2.3, 1489.0], [2.4, 1495.0], [2.5, 1505.0], [2.6, 1514.0], [2.7, 1521.0], [2.8, 1526.0], [2.9, 1531.0], [3.0, 1538.0], [3.1, 1543.0], [3.2, 1549.0], [3.3, 1556.0], [3.4, 1560.0], [3.5, 1565.0], [3.6, 1571.0], [3.7, 1574.0], [3.8, 1577.0], [3.9, 1580.0], [4.0, 1587.0], [4.1, 1591.0], [4.2, 1596.0], [4.3, 1601.0], [4.4, 1604.0], [4.5, 1608.0], [4.6, 1613.0], [4.7, 1619.0], [4.8, 1625.0], [4.9, 1627.0], [5.0, 1632.0], [5.1, 1636.0], [5.2, 1640.0], [5.3, 1643.0], [5.4, 1647.0], [5.5, 1652.0], [5.6, 1657.0], [5.7, 1661.0], [5.8, 1664.0], [5.9, 1668.0], [6.0, 1672.0], [6.1, 1675.0], [6.2, 1681.0], [6.3, 1684.0], [6.4, 1689.0], [6.5, 1693.0], [6.6, 1696.0], [6.7, 1699.0], [6.8, 1704.0], [6.9, 1706.0], [7.0, 1708.0], [7.1, 1711.0], [7.2, 1714.0], [7.3, 1716.0], [7.4, 1720.0], [7.5, 1723.0], [7.6, 1725.0], [7.7, 1727.0], [7.8, 1729.0], [7.9, 1733.0], [8.0, 1736.0], [8.1, 1738.0], [8.2, 1740.0], [8.3, 1742.0], [8.4, 1744.0], [8.5, 1746.0], [8.6, 1749.0], [8.7, 1752.0], [8.8, 1755.0], [8.9, 1757.0], [9.0, 1759.0], [9.1, 1761.0], [9.2, 1763.0], [9.3, 1765.0], [9.4, 1768.0], [9.5, 1772.0], [9.6, 1775.0], [9.7, 1777.0], [9.8, 1780.0], [9.9, 1782.0], [10.0, 1785.0], [10.1, 1788.0], [10.2, 1790.0], [10.3, 1793.0], [10.4, 1797.0], [10.5, 1800.0], [10.6, 1802.0], [10.7, 1804.0], [10.8, 1807.0], [10.9, 1808.0], [11.0, 1811.0], [11.1, 1812.0], [11.2, 1814.0], [11.3, 1816.0], [11.4, 1819.0], [11.5, 1820.0], [11.6, 1824.0], [11.7, 1825.0], [11.8, 1828.0], [11.9, 1830.0], [12.0, 1832.0], [12.1, 1834.0], [12.2, 1836.0], [12.3, 1839.0], [12.4, 1840.0], [12.5, 1842.0], [12.6, 1843.0], [12.7, 1845.0], [12.8, 1847.0], [12.9, 1848.0], [13.0, 1851.0], [13.1, 1853.0], [13.2, 1855.0], [13.3, 1857.0], [13.4, 1860.0], [13.5, 1863.0], [13.6, 1864.0], [13.7, 1867.0], [13.8, 1868.0], [13.9, 1872.0], [14.0, 1873.0], [14.1, 1875.0], [14.2, 1876.0], [14.3, 1879.0], [14.4, 1880.0], [14.5, 1883.0], [14.6, 1884.0], [14.7, 1886.0], [14.8, 1888.0], [14.9, 1890.0], [15.0, 1892.0], [15.1, 1894.0], [15.2, 1896.0], [15.3, 1897.0], [15.4, 1900.0], [15.5, 1901.0], [15.6, 1903.0], [15.7, 1905.0], [15.8, 1907.0], [15.9, 1909.0], [16.0, 1911.0], [16.1, 1914.0], [16.2, 1916.0], [16.3, 1917.0], [16.4, 1919.0], [16.5, 1920.0], [16.6, 1922.0], [16.7, 1924.0], [16.8, 1925.0], [16.9, 1928.0], [17.0, 1929.0], [17.1, 1931.0], [17.2, 1932.0], [17.3, 1935.0], [17.4, 1936.0], [17.5, 1939.0], [17.6, 1940.0], [17.7, 1942.0], [17.8, 1944.0], [17.9, 1944.0], [18.0, 1946.0], [18.1, 1948.0], [18.2, 1949.0], [18.3, 1951.0], [18.4, 1952.0], [18.5, 1954.0], [18.6, 1956.0], [18.7, 1958.0], [18.8, 1960.0], [18.9, 1963.0], [19.0, 1964.0], [19.1, 1966.0], [19.2, 1968.0], [19.3, 1969.0], [19.4, 1971.0], [19.5, 1972.0], [19.6, 1973.0], [19.7, 1975.0], [19.8, 1977.0], [19.9, 1978.0], [20.0, 1980.0], [20.1, 1981.0], [20.2, 1984.0], [20.3, 1985.0], [20.4, 1987.0], [20.5, 1989.0], [20.6, 1990.0], [20.7, 1992.0], [20.8, 1994.0], [20.9, 1996.0], [21.0, 1996.0], [21.1, 1998.0], [21.2, 2000.0], [21.3, 2001.0], [21.4, 2003.0], [21.5, 2005.0], [21.6, 2006.0], [21.7, 2008.0], [21.8, 2009.0], [21.9, 2011.0], [22.0, 2013.0], [22.1, 2016.0], [22.2, 2017.0], [22.3, 2019.0], [22.4, 2020.0], [22.5, 2021.0], [22.6, 2023.0], [22.7, 2024.0], [22.8, 2025.0], [22.9, 2027.0], [23.0, 2028.0], [23.1, 2030.0], [23.2, 2031.0], [23.3, 2032.0], [23.4, 2034.0], [23.5, 2035.0], [23.6, 2036.0], [23.7, 2038.0], [23.8, 2039.0], [23.9, 2040.0], [24.0, 2041.0], [24.1, 2042.0], [24.2, 2044.0], [24.3, 2046.0], [24.4, 2048.0], [24.5, 2050.0], [24.6, 2052.0], [24.7, 2053.0], [24.8, 2056.0], [24.9, 2057.0], [25.0, 2058.0], [25.1, 2060.0], [25.2, 2060.0], [25.3, 2062.0], [25.4, 2063.0], [25.5, 2064.0], [25.6, 2065.0], [25.7, 2067.0], [25.8, 2069.0], [25.9, 2071.0], [26.0, 2072.0], [26.1, 2073.0], [26.2, 2075.0], [26.3, 2076.0], [26.4, 2077.0], [26.5, 2080.0], [26.6, 2080.0], [26.7, 2081.0], [26.8, 2083.0], [26.9, 2084.0], [27.0, 2086.0], [27.1, 2087.0], [27.2, 2088.0], [27.3, 2090.0], [27.4, 2091.0], [27.5, 2093.0], [27.6, 2094.0], [27.7, 2095.0], [27.8, 2096.0], [27.9, 2098.0], [28.0, 2100.0], [28.1, 2102.0], [28.2, 2103.0], [28.3, 2104.0], [28.4, 2106.0], [28.5, 2107.0], [28.6, 2108.0], [28.7, 2110.0], [28.8, 2112.0], [28.9, 2114.0], [29.0, 2115.0], [29.1, 2116.0], [29.2, 2117.0], [29.3, 2119.0], [29.4, 2120.0], [29.5, 2123.0], [29.6, 2124.0], [29.7, 2126.0], [29.8, 2128.0], [29.9, 2128.0], [30.0, 2129.0], [30.1, 2131.0], [30.2, 2132.0], [30.3, 2133.0], [30.4, 2135.0], [30.5, 2136.0], [30.6, 2137.0], [30.7, 2138.0], [30.8, 2140.0], [30.9, 2140.0], [31.0, 2142.0], [31.1, 2144.0], [31.2, 2145.0], [31.3, 2146.0], [31.4, 2147.0], [31.5, 2149.0], [31.6, 2151.0], [31.7, 2152.0], [31.8, 2153.0], [31.9, 2155.0], [32.0, 2156.0], [32.1, 2158.0], [32.2, 2160.0], [32.3, 2160.0], [32.4, 2162.0], [32.5, 2164.0], [32.6, 2164.0], [32.7, 2166.0], [32.8, 2168.0], [32.9, 2168.0], [33.0, 2170.0], [33.1, 2171.0], [33.2, 2172.0], [33.3, 2173.0], [33.4, 2175.0], [33.5, 2176.0], [33.6, 2177.0], [33.7, 2179.0], [33.8, 2180.0], [33.9, 2180.0], [34.0, 2181.0], [34.1, 2183.0], [34.2, 2184.0], [34.3, 2185.0], [34.4, 2187.0], [34.5, 2188.0], [34.6, 2189.0], [34.7, 2191.0], [34.8, 2192.0], [34.9, 2195.0], [35.0, 2196.0], [35.1, 2196.0], [35.2, 2199.0], [35.3, 2200.0], [35.4, 2201.0], [35.5, 2203.0], [35.6, 2204.0], [35.7, 2207.0], [35.8, 2208.0], [35.9, 2208.0], [36.0, 2209.0], [36.1, 2211.0], [36.2, 2212.0], [36.3, 2213.0], [36.4, 2214.0], [36.5, 2216.0], [36.6, 2217.0], [36.7, 2219.0], [36.8, 2220.0], [36.9, 2221.0], [37.0, 2223.0], [37.1, 2224.0], [37.2, 2224.0], [37.3, 2225.0], [37.4, 2227.0], [37.5, 2228.0], [37.6, 2229.0], [37.7, 2231.0], [37.8, 2232.0], [37.9, 2233.0], [38.0, 2234.0], [38.1, 2235.0], [38.2, 2236.0], [38.3, 2237.0], [38.4, 2238.0], [38.5, 2240.0], [38.6, 2241.0], [38.7, 2243.0], [38.8, 2244.0], [38.9, 2245.0], [39.0, 2246.0], [39.1, 2248.0], [39.2, 2249.0], [39.3, 2250.0], [39.4, 2252.0], [39.5, 2252.0], [39.6, 2253.0], [39.7, 2255.0], [39.8, 2256.0], [39.9, 2258.0], [40.0, 2259.0], [40.1, 2260.0], [40.2, 2262.0], [40.3, 2264.0], [40.4, 2265.0], [40.5, 2267.0], [40.6, 2268.0], [40.7, 2268.0], [40.8, 2270.0], [40.9, 2271.0], [41.0, 2272.0], [41.1, 2272.0], [41.2, 2274.0], [41.3, 2275.0], [41.4, 2276.0], [41.5, 2277.0], [41.6, 2278.0], [41.7, 2279.0], [41.8, 2280.0], [41.9, 2281.0], [42.0, 2283.0], [42.1, 2284.0], [42.2, 2286.0], [42.3, 2287.0], [42.4, 2288.0], [42.5, 2288.0], [42.6, 2289.0], [42.7, 2291.0], [42.8, 2292.0], [42.9, 2293.0], [43.0, 2295.0], [43.1, 2296.0], [43.2, 2296.0], [43.3, 2298.0], [43.4, 2299.0], [43.5, 2300.0], [43.6, 2301.0], [43.7, 2303.0], [43.8, 2304.0], [43.9, 2305.0], [44.0, 2308.0], [44.1, 2309.0], [44.2, 2310.0], [44.3, 2311.0], [44.4, 2312.0], [44.5, 2313.0], [44.6, 2315.0], [44.7, 2316.0], [44.8, 2317.0], [44.9, 2319.0], [45.0, 2320.0], [45.1, 2320.0], [45.2, 2321.0], [45.3, 2323.0], [45.4, 2324.0], [45.5, 2325.0], [45.6, 2327.0], [45.7, 2328.0], [45.8, 2328.0], [45.9, 2330.0], [46.0, 2331.0], [46.1, 2332.0], [46.2, 2334.0], [46.3, 2335.0], [46.4, 2336.0], [46.5, 2337.0], [46.6, 2338.0], [46.7, 2340.0], [46.8, 2340.0], [46.9, 2342.0], [47.0, 2343.0], [47.1, 2344.0], [47.2, 2345.0], [47.3, 2347.0], [47.4, 2348.0], [47.5, 2349.0], [47.6, 2351.0], [47.7, 2352.0], [47.8, 2352.0], [47.9, 2353.0], [48.0, 2355.0], [48.1, 2356.0], [48.2, 2357.0], [48.3, 2358.0], [48.4, 2359.0], [48.5, 2360.0], [48.6, 2361.0], [48.7, 2363.0], [48.8, 2364.0], [48.9, 2365.0], [49.0, 2367.0], [49.1, 2368.0], [49.2, 2368.0], [49.3, 2370.0], [49.4, 2371.0], [49.5, 2373.0], [49.6, 2374.0], [49.7, 2375.0], [49.8, 2376.0], [49.9, 2377.0], [50.0, 2379.0], [50.1, 2380.0], [50.2, 2381.0], [50.3, 2383.0], [50.4, 2384.0], [50.5, 2386.0], [50.6, 2387.0], [50.7, 2388.0], [50.8, 2389.0], [50.9, 2391.0], [51.0, 2392.0], [51.1, 2393.0], [51.2, 2394.0], [51.3, 2395.0], [51.4, 2396.0], [51.5, 2398.0], [51.6, 2399.0], [51.7, 2400.0], [51.8, 2401.0], [51.9, 2403.0], [52.0, 2404.0], [52.1, 2405.0], [52.2, 2407.0], [52.3, 2408.0], [52.4, 2409.0], [52.5, 2410.0], [52.6, 2412.0], [52.7, 2412.0], [52.8, 2414.0], [52.9, 2416.0], [53.0, 2416.0], [53.1, 2418.0], [53.2, 2419.0], [53.3, 2420.0], [53.4, 2422.0], [53.5, 2423.0], [53.6, 2424.0], [53.7, 2426.0], [53.8, 2427.0], [53.9, 2428.0], [54.0, 2429.0], [54.1, 2431.0], [54.2, 2432.0], [54.3, 2433.0], [54.4, 2435.0], [54.5, 2436.0], [54.6, 2437.0], [54.7, 2439.0], [54.8, 2440.0], [54.9, 2441.0], [55.0, 2442.0], [55.1, 2444.0], [55.2, 2444.0], [55.3, 2446.0], [55.4, 2447.0], [55.5, 2448.0], [55.6, 2450.0], [55.7, 2452.0], [55.8, 2453.0], [55.9, 2455.0], [56.0, 2456.0], [56.1, 2457.0], [56.2, 2459.0], [56.3, 2460.0], [56.4, 2461.0], [56.5, 2463.0], [56.6, 2464.0], [56.7, 2465.0], [56.8, 2467.0], [56.9, 2468.0], [57.0, 2469.0], [57.1, 2471.0], [57.2, 2472.0], [57.3, 2473.0], [57.4, 2475.0], [57.5, 2476.0], [57.6, 2476.0], [57.7, 2477.0], [57.8, 2478.0], [57.9, 2480.0], [58.0, 2482.0], [58.1, 2483.0], [58.2, 2484.0], [58.3, 2485.0], [58.4, 2487.0], [58.5, 2488.0], [58.6, 2490.0], [58.7, 2491.0], [58.8, 2492.0], [58.9, 2493.0], [59.0, 2494.0], [59.1, 2496.0], [59.2, 2496.0], [59.3, 2497.0], [59.4, 2499.0], [59.5, 2500.0], [59.6, 2501.0], [59.7, 2503.0], [59.8, 2504.0], [59.9, 2504.0], [60.0, 2506.0], [60.1, 2507.0], [60.2, 2508.0], [60.3, 2509.0], [60.4, 2511.0], [60.5, 2512.0], [60.6, 2513.0], [60.7, 2515.0], [60.8, 2516.0], [60.9, 2518.0], [61.0, 2519.0], [61.1, 2520.0], [61.2, 2522.0], [61.3, 2523.0], [61.4, 2524.0], [61.5, 2525.0], [61.6, 2527.0], [61.7, 2528.0], [61.8, 2529.0], [61.9, 2531.0], [62.0, 2532.0], [62.1, 2534.0], [62.2, 2535.0], [62.3, 2536.0], [62.4, 2538.0], [62.5, 2540.0], [62.6, 2541.0], [62.7, 2543.0], [62.8, 2543.0], [62.9, 2544.0], [63.0, 2546.0], [63.1, 2547.0], [63.2, 2548.0], [63.3, 2550.0], [63.4, 2552.0], [63.5, 2552.0], [63.6, 2554.0], [63.7, 2555.0], [63.8, 2556.0], [63.9, 2558.0], [64.0, 2560.0], [64.1, 2561.0], [64.2, 2563.0], [64.3, 2564.0], [64.4, 2565.0], [64.5, 2567.0], [64.6, 2568.0], [64.7, 2569.0], [64.8, 2570.0], [64.9, 2572.0], [65.0, 2573.0], [65.1, 2575.0], [65.2, 2576.0], [65.3, 2577.0], [65.4, 2579.0], [65.5, 2580.0], [65.6, 2581.0], [65.7, 2582.0], [65.8, 2584.0], [65.9, 2585.0], [66.0, 2587.0], [66.1, 2588.0], [66.2, 2589.0], [66.3, 2591.0], [66.4, 2592.0], [66.5, 2594.0], [66.6, 2596.0], [66.7, 2596.0], [66.8, 2598.0], [66.9, 2599.0], [67.0, 2601.0], [67.1, 2603.0], [67.2, 2603.0], [67.3, 2604.0], [67.4, 2605.0], [67.5, 2607.0], [67.6, 2608.0], [67.7, 2609.0], [67.8, 2611.0], [67.9, 2612.0], [68.0, 2614.0], [68.1, 2616.0], [68.2, 2616.0], [68.3, 2619.0], [68.4, 2620.0], [68.5, 2621.0], [68.6, 2623.0], [68.7, 2624.0], [68.8, 2625.0], [68.9, 2627.0], [69.0, 2628.0], [69.1, 2629.0], [69.2, 2632.0], [69.3, 2632.0], [69.4, 2634.0], [69.5, 2635.0], [69.6, 2636.0], [69.7, 2637.0], [69.8, 2639.0], [69.9, 2640.0], [70.0, 2642.0], [70.1, 2643.0], [70.2, 2644.0], [70.3, 2646.0], [70.4, 2648.0], [70.5, 2649.0], [70.6, 2651.0], [70.7, 2652.0], [70.8, 2653.0], [70.9, 2655.0], [71.0, 2656.0], [71.1, 2658.0], [71.2, 2660.0], [71.3, 2661.0], [71.4, 2662.0], [71.5, 2664.0], [71.6, 2666.0], [71.7, 2668.0], [71.8, 2669.0], [71.9, 2671.0], [72.0, 2672.0], [72.1, 2675.0], [72.2, 2676.0], [72.3, 2678.0], [72.4, 2680.0], [72.5, 2681.0], [72.6, 2684.0], [72.7, 2685.0], [72.8, 2686.0], [72.9, 2688.0], [73.0, 2689.0], [73.1, 2691.0], [73.2, 2692.0], [73.3, 2693.0], [73.4, 2695.0], [73.5, 2696.0], [73.6, 2698.0], [73.7, 2700.0], [73.8, 2701.0], [73.9, 2703.0], [74.0, 2704.0], [74.1, 2706.0], [74.2, 2708.0], [74.3, 2709.0], [74.4, 2711.0], [74.5, 2712.0], [74.6, 2714.0], [74.7, 2716.0], [74.8, 2717.0], [74.9, 2719.0], [75.0, 2720.0], [75.1, 2721.0], [75.2, 2723.0], [75.3, 2725.0], [75.4, 2727.0], [75.5, 2728.0], [75.6, 2730.0], [75.7, 2732.0], [75.8, 2733.0], [75.9, 2736.0], [76.0, 2736.0], [76.1, 2738.0], [76.2, 2740.0], [76.3, 2740.0], [76.4, 2743.0], [76.5, 2744.0], [76.6, 2745.0], [76.7, 2747.0], [76.8, 2749.0], [76.9, 2751.0], [77.0, 2753.0], [77.1, 2755.0], [77.2, 2756.0], [77.3, 2758.0], [77.4, 2760.0], [77.5, 2762.0], [77.6, 2763.0], [77.7, 2764.0], [77.8, 2766.0], [77.9, 2768.0], [78.0, 2770.0], [78.1, 2772.0], [78.2, 2773.0], [78.3, 2776.0], [78.4, 2777.0], [78.5, 2779.0], [78.6, 2781.0], [78.7, 2783.0], [78.8, 2784.0], [78.9, 2785.0], [79.0, 2787.0], [79.1, 2788.0], [79.2, 2791.0], [79.3, 2792.0], [79.4, 2795.0], [79.5, 2796.0], [79.6, 2799.0], [79.7, 2800.0], [79.8, 2802.0], [79.9, 2804.0], [80.0, 2805.0], [80.1, 2807.0], [80.2, 2809.0], [80.3, 2811.0], [80.4, 2813.0], [80.5, 2815.0], [80.6, 2816.0], [80.7, 2817.0], [80.8, 2819.0], [80.9, 2820.0], [81.0, 2823.0], [81.1, 2825.0], [81.2, 2828.0], [81.3, 2829.0], [81.4, 2831.0], [81.5, 2832.0], [81.6, 2835.0], [81.7, 2836.0], [81.8, 2839.0], [81.9, 2841.0], [82.0, 2844.0], [82.1, 2845.0], [82.2, 2847.0], [82.3, 2850.0], [82.4, 2852.0], [82.5, 2855.0], [82.6, 2858.0], [82.7, 2860.0], [82.8, 2863.0], [82.9, 2864.0], [83.0, 2867.0], [83.1, 2868.0], [83.2, 2870.0], [83.3, 2872.0], [83.4, 2875.0], [83.5, 2877.0], [83.6, 2880.0], [83.7, 2883.0], [83.8, 2885.0], [83.9, 2888.0], [84.0, 2890.0], [84.1, 2892.0], [84.2, 2895.0], [84.3, 2896.0], [84.4, 2900.0], [84.5, 2902.0], [84.6, 2904.0], [84.7, 2907.0], [84.8, 2909.0], [84.9, 2911.0], [85.0, 2912.0], [85.1, 2916.0], [85.2, 2919.0], [85.3, 2920.0], [85.4, 2922.0], [85.5, 2924.0], [85.6, 2926.0], [85.7, 2928.0], [85.8, 2930.0], [85.9, 2932.0], [86.0, 2936.0], [86.1, 2938.0], [86.2, 2941.0], [86.3, 2944.0], [86.4, 2946.0], [86.5, 2948.0], [86.6, 2950.0], [86.7, 2952.0], [86.8, 2953.0], [86.9, 2956.0], [87.0, 2959.0], [87.1, 2960.0], [87.2, 2963.0], [87.3, 2965.0], [87.4, 2966.0], [87.5, 2969.0], [87.6, 2972.0], [87.7, 2975.0], [87.8, 2979.0], [87.9, 2981.0], [88.0, 2984.0], [88.1, 2987.0], [88.2, 2989.0], [88.3, 2992.0], [88.4, 2994.0], [88.5, 2996.0], [88.6, 3001.0], [88.7, 3004.0], [88.8, 3007.0], [88.9, 3009.0], [89.0, 3012.0], [89.1, 3013.0], [89.2, 3016.0], [89.3, 3019.0], [89.4, 3022.0], [89.5, 3025.0], [89.6, 3028.0], [89.7, 3032.0], [89.8, 3035.0], [89.9, 3039.0], [90.0, 3042.0], [90.1, 3046.0], [90.2, 3048.0], [90.3, 3052.0], [90.4, 3054.0], [90.5, 3058.0], [90.6, 3060.0], [90.7, 3063.0], [90.8, 3065.0], [90.9, 3069.0], [91.0, 3073.0], [91.1, 3076.0], [91.2, 3084.0], [91.3, 3085.0], [91.4, 3090.0], [91.5, 3094.0], [91.6, 3097.0], [91.7, 3100.0], [91.8, 3104.0], [91.9, 3111.0], [92.0, 3113.0], [92.1, 3116.0], [92.2, 3120.0], [92.3, 3124.0], [92.4, 3128.0], [92.5, 3132.0], [92.6, 3135.0], [92.7, 3139.0], [92.8, 3144.0], [92.9, 3148.0], [93.0, 3151.0], [93.1, 3154.0], [93.2, 3159.0], [93.3, 3160.0], [93.4, 3164.0], [93.5, 3170.0], [93.6, 3173.0], [93.7, 3178.0], [93.8, 3183.0], [93.9, 3186.0], [94.0, 3191.0], [94.1, 3195.0], [94.2, 3199.0], [94.3, 3205.0], [94.4, 3208.0], [94.5, 3212.0], [94.6, 3219.0], [94.7, 3223.0], [94.8, 3228.0], [94.9, 3233.0], [95.0, 3238.0], [95.1, 3243.0], [95.2, 3248.0], [95.3, 3253.0], [95.4, 3260.0], [95.5, 3265.0], [95.6, 3275.0], [95.7, 3281.0], [95.8, 3285.0], [95.9, 3291.0], [96.0, 3296.0], [96.1, 3303.0], [96.2, 3308.0], [96.3, 3315.0], [96.4, 3321.0], [96.5, 3330.0], [96.6, 3341.0], [96.7, 3351.0], [96.8, 3358.0], [96.9, 3367.0], [97.0, 3372.0], [97.1, 3377.0], [97.2, 3386.0], [97.3, 3397.0], [97.4, 3407.0], [97.5, 3419.0], [97.6, 3424.0], [97.7, 3436.0], [97.8, 3447.0], [97.9, 3454.0], [98.0, 3468.0], [98.1, 3479.0], [98.2, 3500.0], [98.3, 3512.0], [98.4, 3532.0], [98.5, 3540.0], [98.6, 3553.0], [98.7, 3571.0], [98.8, 3583.0], [98.9, 3602.0], [99.0, 3616.0], [99.1, 3641.0], [99.2, 3661.0], [99.3, 3689.0], [99.4, 3729.0], [99.5, 3757.0], [99.6, 3816.0], [99.7, 3882.0], [99.8, 3945.0], [99.9, 4071.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 15700.0, "series": [{"data": [[0.0, 15700.0], [100.0, 300.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[600.0, 9.0], [700.0, 4.0], [800.0, 13.0], [900.0, 11.0], [1000.0, 7.0], [1100.0, 20.0], [1200.0, 37.0], [1300.0, 85.0], [1400.0, 192.0], [1500.0, 293.0], [1600.0, 391.0], [1700.0, 604.0], [1800.0, 783.0], [1900.0, 923.0], [2000.0, 1088.0], [2100.0, 1173.0], [2300.0, 1309.0], [2200.0, 1302.0], [2400.0, 1251.0], [2500.0, 1197.0], [2600.0, 1081.0], [2700.0, 953.0], [2800.0, 763.0], [2900.0, 668.0], [3000.0, 500.0], [3100.0, 402.0], [3200.0, 295.0], [3300.0, 205.0], [3400.0, 140.0], [3500.0, 111.0], [3600.0, 73.0], [3700.0, 37.0], [3800.0, 23.0], [3900.0, 20.0], [4000.0, 11.0], [4300.0, 1.0], [4100.0, 6.0], [4200.0, 5.0], [4400.0, 1.0], [400.0, 3.0], [500.0, 10.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 390.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 16004.0, "series": [{"data": [[0.0, 16004.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 390.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 15606.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 15.229166666666659, "minX": 1.74601776E12, "maxY": 32.0, "series": [{"data": [[1.74601812E12, 32.0], [1.74601878E12, 32.0], [1.74601782E12, 32.0], [1.74601872E12, 32.0], [1.74601776E12, 31.5382882882883], [1.74601842E12, 32.0], [1.74601884E12, 32.0], [1.74601788E12, 32.0], [1.74601854E12, 32.0], [1.74601848E12, 32.0], [1.74601818E12, 32.0], [1.7460186E12, 32.0], [1.7460183E12, 32.0], [1.74601824E12, 32.0], [1.7460189E12, 32.0], [1.74601794E12, 32.0], [1.74601836E12, 32.0], [1.74601902E12, 15.229166666666659], [1.74601806E12, 32.0], [1.74601896E12, 31.187253613666208], [1.746018E12, 32.0], [1.74601866E12, 32.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74601902E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 9.0, "minX": 1.0, "maxY": 2529.333333333334, "series": [{"data": [[32.0, 75.72164620571267], [2.0, 9.0], [4.0, 10.0], [6.0, 10.666666666666666], [7.0, 12.2], [8.0, 12.833333333333332], [11.0, 17.875000000000004], [12.0, 26.88888888888889], [13.0, 30.6875], [14.0, 47.2], [15.0, 54.9], [16.0, 57.0], [1.0, 9.0], [17.0, 34.0], [18.0, 31.5], [19.0, 66.07142857142856], [20.0, 56.857142857142854], [21.0, 56.5], [22.0, 66.44444444444443], [23.0, 67.62962962962962], [24.0, 70.96428571428571], [25.0, 18.5], [26.0, 75.0], [27.0, 43.0], [28.0, 71.15384615384615], [29.0, 75.33333333333333], [30.0, 49.0], [31.0, 75.75000000000003]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[31.824874999999945, 75.42643749999992]], "isOverall": false, "label": "Create CSR-Aggregated", "isController": false}, {"data": [[32.0, 2411.192965719006], [2.0, 523.0], [3.0, 542.0], [4.0, 615.0], [5.0, 572.0], [6.0, 582.6], [7.0, 652.1666666666666], [8.0, 761.1428571428571], [9.0, 856.0], [10.0, 864.0], [11.0, 869.75], [12.0, 944.9], [13.0, 1045.5555555555557], [14.0, 1211.0], [15.0, 1312.7272727272727], [16.0, 1181.0], [1.0, 499.4], [17.0, 1395.0], [18.0, 1406.0], [19.0, 1510.642857142857], [20.0, 1623.3333333333335], [21.0, 1810.8], [22.0, 1685.2400000000002], [23.0, 1732.0714285714282], [24.0, 1897.851851851852], [25.0, 1999.5], [26.0, 2246.125], [27.0, 2424.0], [28.0, 2529.333333333334], [29.0, 2227.6666666666665], [30.0, 2226.75], [31.0, 2364.793103448276]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}, {"data": [[31.820625000000007, 2399.3807499999966]], "isOverall": false, "label": "HTTP Request - enroll-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 32.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1995.5666666666666, "minX": 1.74601776E12, "maxY": 45828.35, "series": [{"data": [[1.74601812E12, 45657.3], [1.74601878E12, 44837.96666666667], [1.74601782E12, 45828.35], [1.74601872E12, 45185.51666666667], [1.74601776E12, 25268.25], [1.74601842E12, 45189.333333333336], [1.74601884E12, 44844.78333333333], [1.74601788E12, 45782.95], [1.74601854E12, 45074.98333333333], [1.74601848E12, 45359.333333333336], [1.74601818E12, 45599.61666666667], [1.7460186E12, 44596.75], [1.7460183E12, 45183.86666666667], [1.74601824E12, 44941.28333333333], [1.7460189E12, 44195.26666666667], [1.74601794E12, 45190.25], [1.74601836E12, 45444.333333333336], [1.74601902E12, 7521.65], [1.74601806E12, 45599.88333333333], [1.74601896E12, 44773.6], [1.746018E12, 45543.11666666667], [1.74601866E12, 44966.933333333334]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74601812E12, 11875.166666666666], [1.74601878E12, 11662.766666666666], [1.74601782E12, 11922.933333333332], [1.74601872E12, 11756.333333333334], [1.74601776E12, 6517.4], [1.74601842E12, 11754.6], [1.74601884E12, 11662.866666666667], [1.74601788E12, 11907.0], [1.74601854E12, 11725.7], [1.74601848E12, 11800.233333333334], [1.74601818E12, 11861.333333333334], [1.7460186E12, 11602.066666666668], [1.7460183E12, 11755.333333333334], [1.74601824E12, 11693.333333333334], [1.7460189E12, 11496.466666666667], [1.74601794E12, 11754.733333333334], [1.74601836E12, 11815.166666666666], [1.74601902E12, 1995.5666666666666], [1.74601806E12, 11861.766666666666], [1.74601896E12, 11664.666666666666], [1.746018E12, 11846.433333333332], [1.74601866E12, 11692.466666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74601902E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 48.99082568807339, "minX": 1.74601776E12, "maxY": 2463.970860927153, "series": [{"data": [[1.74601812E12, 75.67564102564097], [1.74601878E12, 75.67624020887709], [1.74601782E12, 77.08567774936074], [1.74601872E12, 74.57198443579766], [1.74601776E12, 75.10652173913047], [1.74601842E12, 75.66709844559594], [1.74601884E12, 75.13428943937417], [1.74601788E12, 74.9872286079182], [1.74601854E12, 75.02987012987015], [1.74601848E12, 75.6666666666667], [1.74601818E12, 75.32220795892175], [1.7460186E12, 74.9802890932983], [1.7460183E12, 75.28793774319057], [1.74601824E12, 75.9791122715403], [1.7460189E12, 75.62649006622513], [1.74601794E12, 75.68782383419695], [1.74601836E12, 75.51604621309369], [1.74601902E12, 48.99082568807339], [1.74601806E12, 75.92939666238772], [1.74601896E12, 75.85978835978834], [1.746018E12, 75.59383033419019], [1.74601866E12, 77.16363636363636]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74601812E12, 2385.1974358974394], [1.74601878E12, 2425.6266318537873], [1.74601782E12, 2371.9335887611765], [1.74601872E12, 2418.7810880829006], [1.74601776E12, 2422.605140186914], [1.74601842E12, 2403.4080310880827], [1.74601884E12, 2431.4412532637066], [1.74601788E12, 2376.0051150895165], [1.74601854E12, 2417.445454545455], [1.74601848E12, 2408.7599999999975], [1.74601818E12, 2401.8254172015418], [1.7460186E12, 2447.1115485564314], [1.7460183E12, 2405.7111398963707], [1.74601824E12, 2423.9088541666683], [1.7460189E12, 2463.970860927153], [1.74601794E12, 2420.3471502590687], [1.74601836E12, 2399.6971649484535], [1.74601902E12, 1233.4885496183197], [1.74601806E12, 2382.5378690629004], [1.74601896E12, 2393.069190600522], [1.746018E12, 2385.637532133678], [1.74601866E12, 2413.897135416671]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74601902E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74601776E12, "maxY": 2463.9602649006633, "series": [{"data": [[1.74601812E12, 0.0], [1.74601878E12, 0.0], [1.74601782E12, 0.0], [1.74601872E12, 0.0], [1.74601776E12, 0.0], [1.74601842E12, 0.0], [1.74601884E12, 0.0], [1.74601788E12, 0.0], [1.74601854E12, 0.0], [1.74601848E12, 0.0], [1.74601818E12, 0.0], [1.7460186E12, 0.0], [1.7460183E12, 0.0], [1.74601824E12, 0.0], [1.7460189E12, 0.0], [1.74601794E12, 0.0], [1.74601836E12, 0.0], [1.74601902E12, 0.0], [1.74601806E12, 0.0], [1.74601896E12, 0.0], [1.746018E12, 0.0], [1.74601866E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74601812E12, 2385.1820512820545], [1.74601878E12, 2425.617493472584], [1.74601782E12, 2371.910600255433], [1.74601872E12, 2418.7733160621738], [1.74601776E12, 2422.5747663551374], [1.74601842E12, 2403.4041450777195], [1.74601884E12, 2431.4281984334234], [1.74601788E12, 2375.987212276215], [1.74601854E12, 2417.441558441558], [1.74601848E12, 2408.754838709677], [1.74601818E12, 2401.816431322211], [1.7460186E12, 2447.099737532808], [1.7460183E12, 2405.698186528499], [1.74601824E12, 2423.902343750001], [1.7460189E12, 2463.9602649006633], [1.74601794E12, 2420.3354922279773], [1.74601836E12, 2399.693298969072], [1.74601902E12, 1233.4656488549613], [1.74601806E12, 2382.5275994865196], [1.74601896E12, 2393.067885117494], [1.746018E12, 2385.625964010283], [1.74601866E12, 2413.8893229166656]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74601902E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74601776E12, "maxY": 41.89719626168216, "series": [{"data": [[1.74601812E12, 0.0], [1.74601878E12, 0.0], [1.74601782E12, 0.0], [1.74601872E12, 0.0], [1.74601776E12, 0.0], [1.74601842E12, 0.0], [1.74601884E12, 0.0], [1.74601788E12, 0.0], [1.74601854E12, 0.0], [1.74601848E12, 0.0], [1.74601818E12, 0.0], [1.7460186E12, 0.0], [1.7460183E12, 0.0], [1.74601824E12, 0.0], [1.7460189E12, 0.0], [1.74601794E12, 0.0], [1.74601836E12, 0.0], [1.74601902E12, 0.0], [1.74601806E12, 0.0], [1.74601896E12, 0.0], [1.746018E12, 0.0], [1.74601866E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74601812E12, 0.27435897435897444], [1.74601878E12, 0.22454308093994768], [1.74601782E12, 0.34610472541507004], [1.74601872E12, 0.23186528497409337], [1.74601776E12, 41.89719626168216], [1.74601842E12, 0.22927461139896388], [1.74601884E12, 0.2402088772845953], [1.74601788E12, 0.3299232736572897], [1.74601854E12, 0.22727272727272735], [1.74601848E12, 0.24258064516129027], [1.74601818E12, 0.24903722721437813], [1.7460186E12, 0.22834645669291376], [1.7460183E12, 0.24481865284974083], [1.74601824E12, 0.22265624999999994], [1.7460189E12, 0.27549668874172195], [1.74601794E12, 0.2759067357512955], [1.74601836E12, 0.2435567010309279], [1.74601902E12, 0.0], [1.74601806E12, 0.2939666238767655], [1.74601896E12, 0.21932114882506523], [1.746018E12, 0.26221079691516663], [1.74601866E12, 0.20182291666666652]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74601902E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 9.0, "minX": 1.74601776E12, "maxY": 4405.0, "series": [{"data": [[1.74601812E12, 4148.0], [1.74601878E12, 3876.0], [1.74601782E12, 3754.0], [1.74601872E12, 3752.0], [1.74601776E12, 3919.0], [1.74601842E12, 4216.0], [1.74601884E12, 4209.0], [1.74601788E12, 3855.0], [1.74601854E12, 3867.0], [1.74601848E12, 4078.0], [1.74601818E12, 4405.0], [1.7460186E12, 4144.0], [1.7460183E12, 4168.0], [1.74601824E12, 4210.0], [1.7460189E12, 4217.0], [1.74601794E12, 4329.0], [1.74601836E12, 4043.0], [1.74601902E12, 2540.0], [1.74601806E12, 4040.0], [1.74601896E12, 3759.0], [1.746018E12, 3734.0], [1.74601866E12, 3926.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.74601812E12, 2817.0], [1.74601878E12, 2826.4], [1.74601782E12, 2781.6000000000004], [1.74601872E12, 2821.6000000000004], [1.74601776E12, 2787.4000000000005], [1.74601842E12, 2798.0], [1.74601884E12, 2813.6000000000004], [1.74601788E12, 2747.0], [1.74601854E12, 2859.4000000000005], [1.74601848E12, 2788.0], [1.74601818E12, 2805.1000000000004], [1.7460186E12, 2870.0], [1.7460183E12, 2815.6000000000004], [1.74601824E12, 2826.0], [1.7460189E12, 2895.6000000000004], [1.74601794E12, 2837.0], [1.74601836E12, 2764.0], [1.74601902E12, 1707.7], [1.74601806E12, 2794.3], [1.74601896E12, 2804.7], [1.746018E12, 2769.8999999999996], [1.74601866E12, 2760.3]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.74601812E12, 3567.459999999998], [1.74601878E12, 3404.67], [1.74601782E12, 3442.0999999999985], [1.74601872E12, 3375.12], [1.74601776E12, 3386.77], [1.74601842E12, 3371.2999999999997], [1.74601884E12, 3517.5600000000013], [1.74601788E12, 3431.819999999998], [1.74601854E12, 3588.3599999999997], [1.74601848E12, 3405.5], [1.74601818E12, 3557.6400000000003], [1.7460186E12, 3574.2799999999997], [1.7460183E12, 3458.2799999999993], [1.74601824E12, 3475.4000000000033], [1.7460189E12, 3572.900000000001], [1.74601794E12, 3677.5999999999985], [1.74601836E12, 3375.2000000000003], [1.74601902E12, 2231.170000000001], [1.74601806E12, 3577.660000000002], [1.74601896E12, 3380.08], [1.746018E12, 3439.01], [1.74601866E12, 3365.9599999999964]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.74601812E12, 3083.7999999999993], [1.74601878E12, 3033.0499999999997], [1.74601782E12, 3008.0], [1.74601872E12, 3016.0], [1.74601776E12, 3013.55], [1.74601842E12, 2984.0], [1.74601884E12, 3065.7999999999993], [1.74601788E12, 2961.3999999999996], [1.74601854E12, 3090.8999999999996], [1.74601848E12, 3018.0], [1.74601818E12, 3062.05], [1.7460186E12, 3111.7999999999997], [1.7460183E12, 3089.7999999999993], [1.74601824E12, 3099.0], [1.7460189E12, 3128.9], [1.74601794E12, 3110.75], [1.74601836E12, 3019.3999999999996], [1.74601902E12, 1866.1], [1.74601806E12, 3040.1], [1.74601896E12, 3023.2499999999995], [1.746018E12, 3038.2999999999997], [1.74601866E12, 2984.05]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.74601812E12, 31.0], [1.74601878E12, 40.0], [1.74601782E12, 43.0], [1.74601872E12, 38.0], [1.74601776E12, 9.0], [1.74601842E12, 37.0], [1.74601884E12, 41.0], [1.74601788E12, 31.0], [1.74601854E12, 36.0], [1.74601848E12, 38.0], [1.74601818E12, 32.0], [1.7460186E12, 28.0], [1.7460183E12, 22.0], [1.74601824E12, 36.0], [1.7460189E12, 28.0], [1.74601794E12, 39.0], [1.74601836E12, 31.0], [1.74601902E12, 9.0], [1.74601806E12, 38.0], [1.74601896E12, 25.0], [1.746018E12, 34.0], [1.74601866E12, 32.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.74601812E12, 662.0], [1.74601878E12, 674.5], [1.74601782E12, 1177.0], [1.74601872E12, 1148.0], [1.74601776E12, 107.5], [1.74601842E12, 645.0], [1.74601884E12, 111.0], [1.74601788E12, 111.0], [1.74601854E12, 667.5], [1.74601848E12, 1091.0], [1.74601818E12, 674.0], [1.7460186E12, 1085.0], [1.7460183E12, 1280.0], [1.74601824E12, 1314.0], [1.7460189E12, 717.5], [1.74601794E12, 695.5], [1.74601836E12, 145.0], [1.74601902E12, 569.5], [1.74601806E12, 700.0], [1.74601896E12, 1415.5], [1.746018E12, 664.0], [1.74601866E12, 113.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74601902E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 90.0, "minX": 3.0, "maxY": 1643.0, "series": [{"data": [[33.0, 105.5], [32.0, 112.5], [35.0, 103.5], [34.0, 1446.0], [37.0, 686.0], [36.0, 1558.0], [39.0, 1296.0], [38.0, 1401.5], [40.0, 752.0], [41.0, 97.0], [43.0, 91.0], [42.0, 761.0], [46.0, 941.0], [3.0, 496.0], [53.0, 164.0], [4.0, 253.5], [6.0, 830.0], [7.0, 522.0], [11.0, 1630.0], [12.0, 940.5], [13.0, 96.0], [14.0, 1373.0], [15.0, 1643.0], [16.0, 90.0], [17.0, 99.0], [18.0, 1300.5], [19.0, 102.0], [20.0, 1386.0], [21.0, 128.0], [22.0, 100.0], [23.0, 1434.5], [24.0, 773.5], [25.0, 1353.0], [26.0, 1127.0], [27.0, 114.5], [28.0, 110.0], [29.0, 103.0], [30.0, 1469.0], [31.0, 1411.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 53.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 3.0, "maxY": 1643.0, "series": [{"data": [[33.0, 0.0], [32.0, 0.0], [35.0, 0.0], [34.0, 1446.0], [37.0, 630.0], [36.0, 1558.0], [39.0, 1296.0], [38.0, 1401.5], [40.0, 692.0], [41.0, 0.0], [43.0, 0.0], [42.0, 710.0], [46.0, 895.5], [3.0, 496.0], [53.0, 0.0], [4.0, 249.0], [6.0, 783.5], [7.0, 522.0], [11.0, 1630.0], [12.0, 893.5], [13.0, 0.0], [14.0, 1373.0], [15.0, 1643.0], [16.0, 0.0], [17.0, 0.0], [18.0, 1300.5], [19.0, 0.0], [20.0, 1386.0], [21.0, 0.0], [22.0, 0.0], [23.0, 1434.0], [24.0, 773.5], [25.0, 1353.0], [26.0, 1126.5], [27.0, 0.0], [28.0, 0.0], [29.0, 0.0], [30.0, 1469.0], [31.0, 1411.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 53.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.6166666666666667, "minX": 1.74601776E12, "maxY": 26.083333333333332, "series": [{"data": [[1.74601812E12, 26.0], [1.74601878E12, 25.533333333333335], [1.74601782E12, 26.083333333333332], [1.74601872E12, 25.716666666666665], [1.74601776E12, 15.333333333333334], [1.74601842E12, 25.733333333333334], [1.74601884E12, 25.55], [1.74601788E12, 26.083333333333332], [1.74601854E12, 25.666666666666668], [1.74601848E12, 25.816666666666666], [1.74601818E12, 25.966666666666665], [1.7460186E12, 25.383333333333333], [1.7460183E12, 25.716666666666665], [1.74601824E12, 25.566666666666666], [1.7460189E12, 25.166666666666668], [1.74601794E12, 25.733333333333334], [1.74601836E12, 25.916666666666668], [1.74601902E12, 3.6166666666666667], [1.74601806E12, 25.966666666666665], [1.74601896E12, 25.216666666666665], [1.746018E12, 25.933333333333334], [1.74601866E12, 25.633333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74601902E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.8166666666666667, "minX": 1.74601776E12, "maxY": 13.05, "series": [{"data": [[1.74601812E12, 13.0], [1.74601878E12, 12.766666666666667], [1.74601782E12, 13.033333333333333], [1.74601872E12, 12.85], [1.74601776E12, 7.666666666666667], [1.74601842E12, 12.866666666666667], [1.74601884E12, 12.783333333333333], [1.74601788E12, 13.05], [1.74601854E12, 12.833333333333334], [1.74601848E12, 12.9], [1.74601818E12, 12.983333333333333], [1.7460186E12, 12.683333333333334], [1.7460183E12, 12.85], [1.74601824E12, 12.766666666666667], [1.7460189E12, 12.583333333333334], [1.74601794E12, 12.866666666666667], [1.74601836E12, 12.983333333333333], [1.74601902E12, 1.8166666666666667], [1.74601806E12, 12.983333333333333], [1.74601896E12, 12.6], [1.746018E12, 12.966666666666667], [1.74601866E12, 12.833333333333334]], "isOverall": false, "label": "0", "isController": false}, {"data": [[1.74601812E12, 13.0], [1.74601878E12, 12.766666666666667], [1.74601782E12, 13.05], [1.74601872E12, 12.866666666666667], [1.74601776E12, 7.133333333333334], [1.74601842E12, 12.866666666666667], [1.74601884E12, 12.766666666666667], [1.74601788E12, 13.033333333333333], [1.74601854E12, 12.833333333333334], [1.74601848E12, 12.916666666666666], [1.74601818E12, 12.983333333333333], [1.7460186E12, 12.7], [1.7460183E12, 12.866666666666667], [1.74601824E12, 12.8], [1.7460189E12, 12.583333333333334], [1.74601794E12, 12.866666666666667], [1.74601836E12, 12.933333333333334], [1.74601902E12, 2.183333333333333], [1.74601806E12, 12.983333333333333], [1.74601896E12, 12.766666666666667], [1.746018E12, 12.966666666666667], [1.74601866E12, 12.8]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74601902E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.8166666666666667, "minX": 1.74601776E12, "maxY": 13.05, "series": [{"data": [[1.74601812E12, 13.0], [1.74601878E12, 12.766666666666667], [1.74601782E12, 13.05], [1.74601872E12, 12.866666666666667], [1.74601776E12, 7.133333333333334], [1.74601842E12, 12.866666666666667], [1.74601884E12, 12.766666666666667], [1.74601788E12, 13.033333333333333], [1.74601854E12, 12.833333333333334], [1.74601848E12, 12.916666666666666], [1.74601818E12, 12.983333333333333], [1.7460186E12, 12.7], [1.7460183E12, 12.866666666666667], [1.74601824E12, 12.8], [1.7460189E12, 12.583333333333334], [1.74601794E12, 12.866666666666667], [1.74601836E12, 12.933333333333334], [1.74601902E12, 2.183333333333333], [1.74601806E12, 12.983333333333333], [1.74601896E12, 12.766666666666667], [1.746018E12, 12.966666666666667], [1.74601866E12, 12.8]], "isOverall": false, "label": "HTTP Request - enroll-success", "isController": false}, {"data": [[1.74601812E12, 13.0], [1.74601878E12, 12.766666666666667], [1.74601782E12, 13.033333333333333], [1.74601872E12, 12.85], [1.74601776E12, 7.666666666666667], [1.74601842E12, 12.866666666666667], [1.74601884E12, 12.783333333333333], [1.74601788E12, 13.05], [1.74601854E12, 12.833333333333334], [1.74601848E12, 12.9], [1.74601818E12, 12.983333333333333], [1.7460186E12, 12.683333333333334], [1.7460183E12, 12.85], [1.74601824E12, 12.766666666666667], [1.7460189E12, 12.583333333333334], [1.74601794E12, 12.866666666666667], [1.74601836E12, 12.983333333333333], [1.74601902E12, 1.8166666666666667], [1.74601806E12, 12.983333333333333], [1.74601896E12, 12.6], [1.746018E12, 12.966666666666667], [1.74601866E12, 12.833333333333334]], "isOverall": false, "label": "Create CSR-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74601902E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 4.0, "minX": 1.74601776E12, "maxY": 26.083333333333332, "series": [{"data": [[1.74601812E12, 26.0], [1.74601878E12, 25.533333333333335], [1.74601782E12, 26.083333333333332], [1.74601872E12, 25.716666666666665], [1.74601776E12, 14.8], [1.74601842E12, 25.733333333333334], [1.74601884E12, 25.55], [1.74601788E12, 26.083333333333332], [1.74601854E12, 25.666666666666668], [1.74601848E12, 25.816666666666666], [1.74601818E12, 25.966666666666665], [1.7460186E12, 25.383333333333333], [1.7460183E12, 25.716666666666665], [1.74601824E12, 25.566666666666666], [1.7460189E12, 25.166666666666668], [1.74601794E12, 25.733333333333334], [1.74601836E12, 25.916666666666668], [1.74601902E12, 4.0], [1.74601806E12, 25.966666666666665], [1.74601896E12, 25.366666666666667], [1.746018E12, 25.933333333333334], [1.74601866E12, 25.633333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74601902E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

