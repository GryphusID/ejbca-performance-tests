/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 25.0, "minX": 0.0, "maxY": 12589.0, "series": [{"data": [[0.0, 141.0], [0.1, 194.0], [0.2, 233.0], [0.3, 255.0], [0.4, 279.0], [0.5, 309.0], [0.6, 327.0], [0.7, 339.0], [0.8, 366.0], [0.9, 378.0], [1.0, 388.0], [1.1, 401.0], [1.2, 415.0], [1.3, 428.0], [1.4, 441.0], [1.5, 448.0], [1.6, 459.0], [1.7, 466.0], [1.8, 478.0], [1.9, 485.0], [2.0, 491.0], [2.1, 501.0], [2.2, 508.0], [2.3, 513.0], [2.4, 524.0], [2.5, 529.0], [2.6, 536.0], [2.7, 543.0], [2.8, 548.0], [2.9, 553.0], [3.0, 558.0], [3.1, 563.0], [3.2, 570.0], [3.3, 576.0], [3.4, 582.0], [3.5, 588.0], [3.6, 592.0], [3.7, 596.0], [3.8, 601.0], [3.9, 605.0], [4.0, 610.0], [4.1, 613.0], [4.2, 619.0], [4.3, 624.0], [4.4, 630.0], [4.5, 633.0], [4.6, 636.0], [4.7, 640.0], [4.8, 644.0], [4.9, 647.0], [5.0, 651.0], [5.1, 655.0], [5.2, 659.0], [5.3, 662.0], [5.4, 667.0], [5.5, 673.0], [5.6, 676.0], [5.7, 681.0], [5.8, 683.0], [5.9, 686.0], [6.0, 689.0], [6.1, 693.0], [6.2, 697.0], [6.3, 700.0], [6.4, 703.0], [6.5, 705.0], [6.6, 708.0], [6.7, 711.0], [6.8, 715.0], [6.9, 719.0], [7.0, 723.0], [7.1, 725.0], [7.2, 729.0], [7.3, 732.0], [7.4, 735.0], [7.5, 737.0], [7.6, 740.0], [7.7, 743.0], [7.8, 746.0], [7.9, 750.0], [8.0, 752.0], [8.1, 754.0], [8.2, 757.0], [8.3, 759.0], [8.4, 760.0], [8.5, 763.0], [8.6, 765.0], [8.7, 768.0], [8.8, 770.0], [8.9, 772.0], [9.0, 775.0], [9.1, 777.0], [9.2, 779.0], [9.3, 781.0], [9.4, 785.0], [9.5, 787.0], [9.6, 791.0], [9.7, 792.0], [9.8, 795.0], [9.9, 797.0], [10.0, 800.0], [10.1, 802.0], [10.2, 804.0], [10.3, 806.0], [10.4, 808.0], [10.5, 811.0], [10.6, 814.0], [10.7, 816.0], [10.8, 818.0], [10.9, 821.0], [11.0, 823.0], [11.1, 826.0], [11.2, 829.0], [11.3, 832.0], [11.4, 835.0], [11.5, 838.0], [11.6, 842.0], [11.7, 844.0], [11.8, 847.0], [11.9, 849.0], [12.0, 853.0], [12.1, 855.0], [12.2, 858.0], [12.3, 860.0], [12.4, 862.0], [12.5, 865.0], [12.6, 867.0], [12.7, 871.0], [12.8, 873.0], [12.9, 874.0], [13.0, 877.0], [13.1, 881.0], [13.2, 884.0], [13.3, 886.0], [13.4, 888.0], [13.5, 890.0], [13.6, 892.0], [13.7, 895.0], [13.8, 897.0], [13.9, 900.0], [14.0, 902.0], [14.1, 905.0], [14.2, 907.0], [14.3, 909.0], [14.4, 912.0], [14.5, 915.0], [14.6, 918.0], [14.7, 920.0], [14.8, 924.0], [14.9, 925.0], [15.0, 928.0], [15.1, 932.0], [15.2, 935.0], [15.3, 937.0], [15.4, 940.0], [15.5, 942.0], [15.6, 945.0], [15.7, 946.0], [15.8, 948.0], [15.9, 950.0], [16.0, 952.0], [16.1, 954.0], [16.2, 956.0], [16.3, 958.0], [16.4, 961.0], [16.5, 963.0], [16.6, 965.0], [16.7, 968.0], [16.8, 971.0], [16.9, 974.0], [17.0, 977.0], [17.1, 979.0], [17.2, 983.0], [17.3, 986.0], [17.4, 989.0], [17.5, 992.0], [17.6, 994.0], [17.7, 997.0], [17.8, 1000.0], [17.9, 1002.0], [18.0, 1005.0], [18.1, 1008.0], [18.2, 1011.0], [18.3, 1012.0], [18.4, 1015.0], [18.5, 1019.0], [18.6, 1021.0], [18.7, 1022.0], [18.8, 1025.0], [18.9, 1027.0], [19.0, 1029.0], [19.1, 1030.0], [19.2, 1033.0], [19.3, 1035.0], [19.4, 1036.0], [19.5, 1038.0], [19.6, 1041.0], [19.7, 1042.0], [19.8, 1044.0], [19.9, 1046.0], [20.0, 1049.0], [20.1, 1051.0], [20.2, 1054.0], [20.3, 1055.0], [20.4, 1058.0], [20.5, 1062.0], [20.6, 1064.0], [20.7, 1067.0], [20.8, 1069.0], [20.9, 1070.0], [21.0, 1072.0], [21.1, 1074.0], [21.2, 1077.0], [21.3, 1079.0], [21.4, 1081.0], [21.5, 1084.0], [21.6, 1086.0], [21.7, 1088.0], [21.8, 1090.0], [21.9, 1092.0], [22.0, 1094.0], [22.1, 1096.0], [22.2, 1098.0], [22.3, 1101.0], [22.4, 1103.0], [22.5, 1105.0], [22.6, 1108.0], [22.7, 1110.0], [22.8, 1113.0], [22.9, 1115.0], [23.0, 1117.0], [23.1, 1119.0], [23.2, 1121.0], [23.3, 1123.0], [23.4, 1125.0], [23.5, 1128.0], [23.6, 1130.0], [23.7, 1132.0], [23.8, 1134.0], [23.9, 1137.0], [24.0, 1140.0], [24.1, 1142.0], [24.2, 1144.0], [24.3, 1147.0], [24.4, 1150.0], [24.5, 1152.0], [24.6, 1154.0], [24.7, 1156.0], [24.8, 1159.0], [24.9, 1161.0], [25.0, 1163.0], [25.1, 1165.0], [25.2, 1167.0], [25.3, 1169.0], [25.4, 1171.0], [25.5, 1174.0], [25.6, 1176.0], [25.7, 1179.0], [25.8, 1182.0], [25.9, 1184.0], [26.0, 1187.0], [26.1, 1189.0], [26.2, 1192.0], [26.3, 1194.0], [26.4, 1196.0], [26.5, 1197.0], [26.6, 1199.0], [26.7, 1202.0], [26.8, 1204.0], [26.9, 1208.0], [27.0, 1209.0], [27.1, 1212.0], [27.2, 1214.0], [27.3, 1216.0], [27.4, 1219.0], [27.5, 1221.0], [27.6, 1223.0], [27.7, 1227.0], [27.8, 1228.0], [27.9, 1231.0], [28.0, 1232.0], [28.1, 1235.0], [28.2, 1237.0], [28.3, 1241.0], [28.4, 1242.0], [28.5, 1244.0], [28.6, 1246.0], [28.7, 1249.0], [28.8, 1251.0], [28.9, 1253.0], [29.0, 1255.0], [29.1, 1257.0], [29.2, 1260.0], [29.3, 1262.0], [29.4, 1264.0], [29.5, 1265.0], [29.6, 1267.0], [29.7, 1269.0], [29.8, 1271.0], [29.9, 1274.0], [30.0, 1277.0], [30.1, 1279.0], [30.2, 1282.0], [30.3, 1285.0], [30.4, 1286.0], [30.5, 1289.0], [30.6, 1290.0], [30.7, 1293.0], [30.8, 1294.0], [30.9, 1296.0], [31.0, 1299.0], [31.1, 1301.0], [31.2, 1303.0], [31.3, 1305.0], [31.4, 1308.0], [31.5, 1309.0], [31.6, 1311.0], [31.7, 1312.0], [31.8, 1315.0], [31.9, 1317.0], [32.0, 1319.0], [32.1, 1321.0], [32.2, 1323.0], [32.3, 1326.0], [32.4, 1329.0], [32.5, 1331.0], [32.6, 1333.0], [32.7, 1335.0], [32.8, 1338.0], [32.9, 1340.0], [33.0, 1343.0], [33.1, 1345.0], [33.2, 1348.0], [33.3, 1350.0], [33.4, 1353.0], [33.5, 1354.0], [33.6, 1356.0], [33.7, 1359.0], [33.8, 1361.0], [33.9, 1362.0], [34.0, 1365.0], [34.1, 1366.0], [34.2, 1368.0], [34.3, 1369.0], [34.4, 1372.0], [34.5, 1374.0], [34.6, 1377.0], [34.7, 1380.0], [34.8, 1383.0], [34.9, 1384.0], [35.0, 1385.0], [35.1, 1387.0], [35.2, 1389.0], [35.3, 1391.0], [35.4, 1393.0], [35.5, 1396.0], [35.6, 1397.0], [35.7, 1399.0], [35.8, 1401.0], [35.9, 1403.0], [36.0, 1405.0], [36.1, 1408.0], [36.2, 1411.0], [36.3, 1413.0], [36.4, 1415.0], [36.5, 1417.0], [36.6, 1419.0], [36.7, 1422.0], [36.8, 1425.0], [36.9, 1427.0], [37.0, 1429.0], [37.1, 1430.0], [37.2, 1432.0], [37.3, 1434.0], [37.4, 1437.0], [37.5, 1439.0], [37.6, 1441.0], [37.7, 1442.0], [37.8, 1444.0], [37.9, 1447.0], [38.0, 1449.0], [38.1, 1451.0], [38.2, 1455.0], [38.3, 1458.0], [38.4, 1461.0], [38.5, 1463.0], [38.6, 1465.0], [38.7, 1468.0], [38.8, 1473.0], [38.9, 1475.0], [39.0, 1477.0], [39.1, 1481.0], [39.2, 1484.0], [39.3, 1487.0], [39.4, 1489.0], [39.5, 1491.0], [39.6, 1493.0], [39.7, 1496.0], [39.8, 1497.0], [39.9, 1500.0], [40.0, 1503.0], [40.1, 1506.0], [40.2, 1508.0], [40.3, 1511.0], [40.4, 1514.0], [40.5, 1516.0], [40.6, 1518.0], [40.7, 1520.0], [40.8, 1523.0], [40.9, 1526.0], [41.0, 1528.0], [41.1, 1531.0], [41.2, 1534.0], [41.3, 1536.0], [41.4, 1538.0], [41.5, 1541.0], [41.6, 1543.0], [41.7, 1546.0], [41.8, 1548.0], [41.9, 1550.0], [42.0, 1553.0], [42.1, 1555.0], [42.2, 1558.0], [42.3, 1561.0], [42.4, 1563.0], [42.5, 1565.0], [42.6, 1568.0], [42.7, 1571.0], [42.8, 1573.0], [42.9, 1576.0], [43.0, 1579.0], [43.1, 1581.0], [43.2, 1584.0], [43.3, 1586.0], [43.4, 1589.0], [43.5, 1591.0], [43.6, 1593.0], [43.7, 1596.0], [43.8, 1599.0], [43.9, 1603.0], [44.0, 1605.0], [44.1, 1607.0], [44.2, 1610.0], [44.3, 1613.0], [44.4, 1615.0], [44.5, 1618.0], [44.6, 1620.0], [44.7, 1622.0], [44.8, 1624.0], [44.9, 1627.0], [45.0, 1629.0], [45.1, 1631.0], [45.2, 1634.0], [45.3, 1637.0], [45.4, 1639.0], [45.5, 1641.0], [45.6, 1644.0], [45.7, 1646.0], [45.8, 1648.0], [45.9, 1650.0], [46.0, 1653.0], [46.1, 1654.0], [46.2, 1657.0], [46.3, 1659.0], [46.4, 1661.0], [46.5, 1664.0], [46.6, 1666.0], [46.7, 1669.0], [46.8, 1671.0], [46.9, 1673.0], [47.0, 1676.0], [47.1, 1679.0], [47.2, 1683.0], [47.3, 1686.0], [47.4, 1688.0], [47.5, 1690.0], [47.6, 1693.0], [47.7, 1696.0], [47.8, 1697.0], [47.9, 1699.0], [48.0, 1702.0], [48.1, 1705.0], [48.2, 1707.0], [48.3, 1710.0], [48.4, 1713.0], [48.5, 1717.0], [48.6, 1721.0], [48.7, 1723.0], [48.8, 1725.0], [48.9, 1726.0], [49.0, 1729.0], [49.1, 1731.0], [49.2, 1734.0], [49.3, 1737.0], [49.4, 1740.0], [49.5, 1743.0], [49.6, 1746.0], [49.7, 1748.0], [49.8, 1750.0], [49.9, 1752.0], [50.0, 1755.0], [50.1, 1758.0], [50.2, 1761.0], [50.3, 1763.0], [50.4, 1766.0], [50.5, 1770.0], [50.6, 1773.0], [50.7, 1774.0], [50.8, 1777.0], [50.9, 1780.0], [51.0, 1782.0], [51.1, 1785.0], [51.2, 1788.0], [51.3, 1791.0], [51.4, 1794.0], [51.5, 1799.0], [51.6, 1802.0], [51.7, 1805.0], [51.8, 1809.0], [51.9, 1812.0], [52.0, 1815.0], [52.1, 1819.0], [52.2, 1822.0], [52.3, 1824.0], [52.4, 1827.0], [52.5, 1830.0], [52.6, 1832.0], [52.7, 1834.0], [52.8, 1837.0], [52.9, 1841.0], [53.0, 1843.0], [53.1, 1845.0], [53.2, 1848.0], [53.3, 1852.0], [53.4, 1856.0], [53.5, 1860.0], [53.6, 1861.0], [53.7, 1864.0], [53.8, 1867.0], [53.9, 1870.0], [54.0, 1873.0], [54.1, 1876.0], [54.2, 1878.0], [54.3, 1881.0], [54.4, 1885.0], [54.5, 1888.0], [54.6, 1890.0], [54.7, 1892.0], [54.8, 1895.0], [54.9, 1898.0], [55.0, 1901.0], [55.1, 1905.0], [55.2, 1908.0], [55.3, 1911.0], [55.4, 1914.0], [55.5, 1917.0], [55.6, 1921.0], [55.7, 1924.0], [55.8, 1928.0], [55.9, 1931.0], [56.0, 1933.0], [56.1, 1936.0], [56.2, 1939.0], [56.3, 1941.0], [56.4, 1945.0], [56.5, 1947.0], [56.6, 1950.0], [56.7, 1953.0], [56.8, 1956.0], [56.9, 1960.0], [57.0, 1964.0], [57.1, 1966.0], [57.2, 1969.0], [57.3, 1973.0], [57.4, 1976.0], [57.5, 1979.0], [57.6, 1981.0], [57.7, 1984.0], [57.8, 1987.0], [57.9, 1990.0], [58.0, 1993.0], [58.1, 1996.0], [58.2, 1999.0], [58.3, 2002.0], [58.4, 2004.0], [58.5, 2008.0], [58.6, 2011.0], [58.7, 2014.0], [58.8, 2017.0], [58.9, 2021.0], [59.0, 2023.0], [59.1, 2027.0], [59.2, 2029.0], [59.3, 2031.0], [59.4, 2034.0], [59.5, 2038.0], [59.6, 2042.0], [59.7, 2046.0], [59.8, 2048.0], [59.9, 2052.0], [60.0, 2055.0], [60.1, 2057.0], [60.2, 2061.0], [60.3, 2064.0], [60.4, 2066.0], [60.5, 2069.0], [60.6, 2072.0], [60.7, 2076.0], [60.8, 2080.0], [60.9, 2082.0], [61.0, 2085.0], [61.1, 2088.0], [61.2, 2092.0], [61.3, 2093.0], [61.4, 2098.0], [61.5, 2101.0], [61.6, 2106.0], [61.7, 2109.0], [61.8, 2113.0], [61.9, 2117.0], [62.0, 2120.0], [62.1, 2123.0], [62.2, 2125.0], [62.3, 2130.0], [62.4, 2132.0], [62.5, 2136.0], [62.6, 2139.0], [62.7, 2143.0], [62.8, 2146.0], [62.9, 2151.0], [63.0, 2154.0], [63.1, 2157.0], [63.2, 2160.0], [63.3, 2163.0], [63.4, 2165.0], [63.5, 2168.0], [63.6, 2172.0], [63.7, 2174.0], [63.8, 2180.0], [63.9, 2184.0], [64.0, 2188.0], [64.1, 2190.0], [64.2, 2194.0], [64.3, 2198.0], [64.4, 2203.0], [64.5, 2206.0], [64.6, 2210.0], [64.7, 2212.0], [64.8, 2215.0], [64.9, 2216.0], [65.0, 2222.0], [65.1, 2226.0], [65.2, 2231.0], [65.3, 2233.0], [65.4, 2236.0], [65.5, 2240.0], [65.6, 2245.0], [65.7, 2248.0], [65.8, 2251.0], [65.9, 2256.0], [66.0, 2261.0], [66.1, 2265.0], [66.2, 2268.0], [66.3, 2271.0], [66.4, 2275.0], [66.5, 2280.0], [66.6, 2282.0], [66.7, 2284.0], [66.8, 2288.0], [66.9, 2290.0], [67.0, 2294.0], [67.1, 2296.0], [67.2, 2302.0], [67.3, 2306.0], [67.4, 2312.0], [67.5, 2315.0], [67.6, 2319.0], [67.7, 2323.0], [67.8, 2328.0], [67.9, 2331.0], [68.0, 2333.0], [68.1, 2337.0], [68.2, 2341.0], [68.3, 2346.0], [68.4, 2349.0], [68.5, 2354.0], [68.6, 2359.0], [68.7, 2363.0], [68.8, 2367.0], [68.9, 2371.0], [69.0, 2378.0], [69.1, 2380.0], [69.2, 2385.0], [69.3, 2389.0], [69.4, 2392.0], [69.5, 2397.0], [69.6, 2402.0], [69.7, 2407.0], [69.8, 2411.0], [69.9, 2416.0], [70.0, 2422.0], [70.1, 2427.0], [70.2, 2429.0], [70.3, 2434.0], [70.4, 2438.0], [70.5, 2442.0], [70.6, 2446.0], [70.7, 2451.0], [70.8, 2454.0], [70.9, 2457.0], [71.0, 2462.0], [71.1, 2468.0], [71.2, 2471.0], [71.3, 2475.0], [71.4, 2480.0], [71.5, 2484.0], [71.6, 2487.0], [71.7, 2490.0], [71.8, 2494.0], [71.9, 2497.0], [72.0, 2501.0], [72.1, 2505.0], [72.2, 2510.0], [72.3, 2515.0], [72.4, 2519.0], [72.5, 2523.0], [72.6, 2527.0], [72.7, 2531.0], [72.8, 2534.0], [72.9, 2540.0], [73.0, 2544.0], [73.1, 2548.0], [73.2, 2552.0], [73.3, 2557.0], [73.4, 2562.0], [73.5, 2568.0], [73.6, 2574.0], [73.7, 2577.0], [73.8, 2579.0], [73.9, 2583.0], [74.0, 2588.0], [74.1, 2593.0], [74.2, 2597.0], [74.3, 2602.0], [74.4, 2605.0], [74.5, 2612.0], [74.6, 2617.0], [74.7, 2622.0], [74.8, 2628.0], [74.9, 2633.0], [75.0, 2639.0], [75.1, 2644.0], [75.2, 2649.0], [75.3, 2653.0], [75.4, 2660.0], [75.5, 2666.0], [75.6, 2670.0], [75.7, 2673.0], [75.8, 2677.0], [75.9, 2682.0], [76.0, 2686.0], [76.1, 2692.0], [76.2, 2698.0], [76.3, 2704.0], [76.4, 2710.0], [76.5, 2715.0], [76.6, 2720.0], [76.7, 2726.0], [76.8, 2733.0], [76.9, 2738.0], [77.0, 2742.0], [77.1, 2745.0], [77.2, 2749.0], [77.3, 2753.0], [77.4, 2757.0], [77.5, 2763.0], [77.6, 2769.0], [77.7, 2773.0], [77.8, 2777.0], [77.9, 2781.0], [78.0, 2786.0], [78.1, 2791.0], [78.2, 2798.0], [78.3, 2802.0], [78.4, 2807.0], [78.5, 2811.0], [78.6, 2817.0], [78.7, 2821.0], [78.8, 2827.0], [78.9, 2832.0], [79.0, 2837.0], [79.1, 2845.0], [79.2, 2849.0], [79.3, 2853.0], [79.4, 2858.0], [79.5, 2864.0], [79.6, 2870.0], [79.7, 2876.0], [79.8, 2881.0], [79.9, 2888.0], [80.0, 2894.0], [80.1, 2900.0], [80.2, 2904.0], [80.3, 2909.0], [80.4, 2913.0], [80.5, 2919.0], [80.6, 2928.0], [80.7, 2936.0], [80.8, 2941.0], [80.9, 2947.0], [81.0, 2953.0], [81.1, 2957.0], [81.2, 2964.0], [81.3, 2968.0], [81.4, 2976.0], [81.5, 2982.0], [81.6, 2989.0], [81.7, 2993.0], [81.8, 2998.0], [81.9, 3004.0], [82.0, 3012.0], [82.1, 3021.0], [82.2, 3028.0], [82.3, 3036.0], [82.4, 3043.0], [82.5, 3052.0], [82.6, 3059.0], [82.7, 3069.0], [82.8, 3075.0], [82.9, 3081.0], [83.0, 3090.0], [83.1, 3096.0], [83.2, 3103.0], [83.3, 3112.0], [83.4, 3121.0], [83.5, 3128.0], [83.6, 3133.0], [83.7, 3144.0], [83.8, 3155.0], [83.9, 3161.0], [84.0, 3168.0], [84.1, 3176.0], [84.2, 3184.0], [84.3, 3190.0], [84.4, 3195.0], [84.5, 3202.0], [84.6, 3209.0], [84.7, 3218.0], [84.8, 3227.0], [84.9, 3236.0], [85.0, 3241.0], [85.1, 3248.0], [85.2, 3257.0], [85.3, 3263.0], [85.4, 3272.0], [85.5, 3283.0], [85.6, 3289.0], [85.7, 3297.0], [85.8, 3303.0], [85.9, 3310.0], [86.0, 3317.0], [86.1, 3328.0], [86.2, 3334.0], [86.3, 3341.0], [86.4, 3348.0], [86.5, 3357.0], [86.6, 3364.0], [86.7, 3372.0], [86.8, 3380.0], [86.9, 3392.0], [87.0, 3400.0], [87.1, 3409.0], [87.2, 3417.0], [87.3, 3429.0], [87.4, 3437.0], [87.5, 3447.0], [87.6, 3456.0], [87.7, 3467.0], [87.8, 3473.0], [87.9, 3484.0], [88.0, 3493.0], [88.1, 3501.0], [88.2, 3511.0], [88.3, 3521.0], [88.4, 3531.0], [88.5, 3541.0], [88.6, 3549.0], [88.7, 3560.0], [88.8, 3571.0], [88.9, 3584.0], [89.0, 3596.0], [89.1, 3604.0], [89.2, 3610.0], [89.3, 3620.0], [89.4, 3631.0], [89.5, 3637.0], [89.6, 3647.0], [89.7, 3655.0], [89.8, 3665.0], [89.9, 3674.0], [90.0, 3685.0], [90.1, 3697.0], [90.2, 3704.0], [90.3, 3709.0], [90.4, 3722.0], [90.5, 3731.0], [90.6, 3744.0], [90.7, 3762.0], [90.8, 3773.0], [90.9, 3791.0], [91.0, 3804.0], [91.1, 3815.0], [91.2, 3825.0], [91.3, 3841.0], [91.4, 3849.0], [91.5, 3863.0], [91.6, 3875.0], [91.7, 3886.0], [91.8, 3901.0], [91.9, 3914.0], [92.0, 3926.0], [92.1, 3944.0], [92.2, 3963.0], [92.3, 3977.0], [92.4, 3989.0], [92.5, 4004.0], [92.6, 4018.0], [92.7, 4031.0], [92.8, 4046.0], [92.9, 4060.0], [93.0, 4072.0], [93.1, 4084.0], [93.2, 4095.0], [93.3, 4109.0], [93.4, 4124.0], [93.5, 4131.0], [93.6, 4152.0], [93.7, 4167.0], [93.8, 4182.0], [93.9, 4204.0], [94.0, 4221.0], [94.1, 4240.0], [94.2, 4258.0], [94.3, 4271.0], [94.4, 4288.0], [94.5, 4301.0], [94.6, 4326.0], [94.7, 4353.0], [94.8, 4386.0], [94.9, 4414.0], [95.0, 4447.0], [95.1, 4463.0], [95.2, 4486.0], [95.3, 4504.0], [95.4, 4529.0], [95.5, 4551.0], [95.6, 4579.0], [95.7, 4603.0], [95.8, 4622.0], [95.9, 4648.0], [96.0, 4672.0], [96.1, 4706.0], [96.2, 4727.0], [96.3, 4751.0], [96.4, 4785.0], [96.5, 4812.0], [96.6, 4842.0], [96.7, 4873.0], [96.8, 4903.0], [96.9, 4940.0], [97.0, 4976.0], [97.1, 5016.0], [97.2, 5044.0], [97.3, 5089.0], [97.4, 5131.0], [97.5, 5172.0], [97.6, 5211.0], [97.7, 5258.0], [97.8, 5306.0], [97.9, 5335.0], [98.0, 5373.0], [98.1, 5425.0], [98.2, 5465.0], [98.3, 5511.0], [98.4, 5609.0], [98.5, 5653.0], [98.6, 5706.0], [98.7, 5811.0], [98.8, 5891.0], [98.9, 6000.0], [99.0, 6072.0], [99.1, 6194.0], [99.2, 6255.0], [99.3, 6349.0], [99.4, 6462.0], [99.5, 6658.0], [99.6, 6977.0], [99.7, 7344.0], [99.8, 7855.0], [99.9, 8606.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 25.0], [0.1, 27.0], [0.2, 28.0], [0.3, 34.0], [0.4, 34.0], [0.5, 35.0], [0.6, 35.0], [0.7, 35.0], [0.8, 35.0], [0.9, 35.0], [1.0, 35.0], [1.1, 35.0], [1.2, 35.0], [1.3, 36.0], [1.4, 36.0], [1.5, 36.0], [1.6, 36.0], [1.7, 36.0], [1.8, 36.0], [1.9, 36.0], [2.0, 36.0], [2.1, 36.0], [2.2, 36.0], [2.3, 36.0], [2.4, 36.0], [2.5, 36.0], [2.6, 36.0], [2.7, 36.0], [2.8, 36.0], [2.9, 36.0], [3.0, 36.0], [3.1, 36.0], [3.2, 36.0], [3.3, 36.0], [3.4, 36.0], [3.5, 36.0], [3.6, 36.0], [3.7, 37.0], [3.8, 37.0], [3.9, 37.0], [4.0, 37.0], [4.1, 37.0], [4.2, 37.0], [4.3, 37.0], [4.4, 37.0], [4.5, 37.0], [4.6, 37.0], [4.7, 37.0], [4.8, 37.0], [4.9, 37.0], [5.0, 37.0], [5.1, 37.0], [5.2, 37.0], [5.3, 37.0], [5.4, 37.0], [5.5, 37.0], [5.6, 37.0], [5.7, 37.0], [5.8, 37.0], [5.9, 37.0], [6.0, 37.0], [6.1, 37.0], [6.2, 37.0], [6.3, 37.0], [6.4, 37.0], [6.5, 37.0], [6.6, 37.0], [6.7, 37.0], [6.8, 37.0], [6.9, 37.0], [7.0, 37.0], [7.1, 37.0], [7.2, 37.0], [7.3, 37.0], [7.4, 37.0], [7.5, 38.0], [7.6, 38.0], [7.7, 38.0], [7.8, 38.0], [7.9, 38.0], [8.0, 38.0], [8.1, 38.0], [8.2, 38.0], [8.3, 38.0], [8.4, 38.0], [8.5, 38.0], [8.6, 38.0], [8.7, 38.0], [8.8, 38.0], [8.9, 38.0], [9.0, 38.0], [9.1, 38.0], [9.2, 38.0], [9.3, 38.0], [9.4, 38.0], [9.5, 38.0], [9.6, 38.0], [9.7, 38.0], [9.8, 38.0], [9.9, 38.0], [10.0, 38.0], [10.1, 38.0], [10.2, 38.0], [10.3, 38.0], [10.4, 38.0], [10.5, 38.0], [10.6, 38.0], [10.7, 38.0], [10.8, 38.0], [10.9, 38.0], [11.0, 38.0], [11.1, 38.0], [11.2, 38.0], [11.3, 38.0], [11.4, 38.0], [11.5, 38.0], [11.6, 38.0], [11.7, 38.0], [11.8, 38.0], [11.9, 38.0], [12.0, 38.0], [12.1, 38.0], [12.2, 38.0], [12.3, 38.0], [12.4, 38.0], [12.5, 38.0], [12.6, 38.0], [12.7, 38.0], [12.8, 38.0], [12.9, 38.0], [13.0, 38.0], [13.1, 38.0], [13.2, 38.0], [13.3, 39.0], [13.4, 39.0], [13.5, 39.0], [13.6, 39.0], [13.7, 39.0], [13.8, 39.0], [13.9, 39.0], [14.0, 39.0], [14.1, 39.0], [14.2, 39.0], [14.3, 39.0], [14.4, 39.0], [14.5, 39.0], [14.6, 39.0], [14.7, 39.0], [14.8, 39.0], [14.9, 39.0], [15.0, 39.0], [15.1, 39.0], [15.2, 39.0], [15.3, 39.0], [15.4, 39.0], [15.5, 39.0], [15.6, 39.0], [15.7, 39.0], [15.8, 39.0], [15.9, 39.0], [16.0, 39.0], [16.1, 39.0], [16.2, 39.0], [16.3, 39.0], [16.4, 39.0], [16.5, 39.0], [16.6, 39.0], [16.7, 39.0], [16.8, 39.0], [16.9, 39.0], [17.0, 39.0], [17.1, 39.0], [17.2, 39.0], [17.3, 39.0], [17.4, 39.0], [17.5, 39.0], [17.6, 39.0], [17.7, 39.0], [17.8, 39.0], [17.9, 39.0], [18.0, 39.0], [18.1, 39.0], [18.2, 39.0], [18.3, 39.0], [18.4, 39.0], [18.5, 39.0], [18.6, 39.0], [18.7, 39.0], [18.8, 39.0], [18.9, 39.0], [19.0, 39.0], [19.1, 39.0], [19.2, 39.0], [19.3, 39.0], [19.4, 39.0], [19.5, 39.0], [19.6, 39.0], [19.7, 39.0], [19.8, 39.0], [19.9, 39.0], [20.0, 39.0], [20.1, 39.0], [20.2, 39.0], [20.3, 39.0], [20.4, 39.0], [20.5, 39.0], [20.6, 39.0], [20.7, 39.0], [20.8, 39.0], [20.9, 39.0], [21.0, 39.0], [21.1, 39.0], [21.2, 39.0], [21.3, 39.0], [21.4, 39.0], [21.5, 39.0], [21.6, 39.0], [21.7, 39.0], [21.8, 39.0], [21.9, 39.0], [22.0, 39.0], [22.1, 39.0], [22.2, 39.0], [22.3, 39.0], [22.4, 39.0], [22.5, 39.0], [22.6, 39.0], [22.7, 39.0], [22.8, 39.0], [22.9, 39.0], [23.0, 39.0], [23.1, 39.0], [23.2, 39.0], [23.3, 39.0], [23.4, 39.0], [23.5, 39.0], [23.6, 39.0], [23.7, 40.0], [23.8, 40.0], [23.9, 40.0], [24.0, 40.0], [24.1, 40.0], [24.2, 40.0], [24.3, 40.0], [24.4, 40.0], [24.5, 40.0], [24.6, 40.0], [24.7, 40.0], [24.8, 40.0], [24.9, 40.0], [25.0, 40.0], [25.1, 40.0], [25.2, 40.0], [25.3, 40.0], [25.4, 40.0], [25.5, 40.0], [25.6, 40.0], [25.7, 40.0], [25.8, 40.0], [25.9, 40.0], [26.0, 40.0], [26.1, 40.0], [26.2, 40.0], [26.3, 40.0], [26.4, 40.0], [26.5, 40.0], [26.6, 40.0], [26.7, 40.0], [26.8, 40.0], [26.9, 40.0], [27.0, 40.0], [27.1, 40.0], [27.2, 40.0], [27.3, 40.0], [27.4, 40.0], [27.5, 40.0], [27.6, 40.0], [27.7, 40.0], [27.8, 40.0], [27.9, 40.0], [28.0, 40.0], [28.1, 40.0], [28.2, 40.0], [28.3, 40.0], [28.4, 40.0], [28.5, 40.0], [28.6, 40.0], [28.7, 40.0], [28.8, 40.0], [28.9, 40.0], [29.0, 40.0], [29.1, 40.0], [29.2, 40.0], [29.3, 40.0], [29.4, 40.0], [29.5, 40.0], [29.6, 40.0], [29.7, 40.0], [29.8, 40.0], [29.9, 40.0], [30.0, 40.0], [30.1, 40.0], [30.2, 40.0], [30.3, 40.0], [30.4, 40.0], [30.5, 40.0], [30.6, 40.0], [30.7, 40.0], [30.8, 40.0], [30.9, 40.0], [31.0, 40.0], [31.1, 40.0], [31.2, 40.0], [31.3, 40.0], [31.4, 40.0], [31.5, 40.0], [31.6, 40.0], [31.7, 40.0], [31.8, 40.0], [31.9, 40.0], [32.0, 40.0], [32.1, 40.0], [32.2, 40.0], [32.3, 40.0], [32.4, 40.0], [32.5, 40.0], [32.6, 40.0], [32.7, 40.0], [32.8, 40.0], [32.9, 40.0], [33.0, 40.0], [33.1, 40.0], [33.2, 40.0], [33.3, 40.0], [33.4, 40.0], [33.5, 40.0], [33.6, 40.0], [33.7, 40.0], [33.8, 40.0], [33.9, 40.0], [34.0, 40.0], [34.1, 40.0], [34.2, 40.0], [34.3, 40.0], [34.4, 40.0], [34.5, 40.0], [34.6, 40.0], [34.7, 40.0], [34.8, 40.0], [34.9, 40.0], [35.0, 40.0], [35.1, 40.0], [35.2, 41.0], [35.3, 41.0], [35.4, 41.0], [35.5, 41.0], [35.6, 41.0], [35.7, 41.0], [35.8, 41.0], [35.9, 41.0], [36.0, 41.0], [36.1, 41.0], [36.2, 41.0], [36.3, 41.0], [36.4, 41.0], [36.5, 41.0], [36.6, 41.0], [36.7, 41.0], [36.8, 41.0], [36.9, 41.0], [37.0, 41.0], [37.1, 41.0], [37.2, 41.0], [37.3, 41.0], [37.4, 41.0], [37.5, 41.0], [37.6, 41.0], [37.7, 41.0], [37.8, 41.0], [37.9, 41.0], [38.0, 41.0], [38.1, 41.0], [38.2, 41.0], [38.3, 41.0], [38.4, 41.0], [38.5, 41.0], [38.6, 41.0], [38.7, 41.0], [38.8, 41.0], [38.9, 41.0], [39.0, 41.0], [39.1, 41.0], [39.2, 41.0], [39.3, 41.0], [39.4, 41.0], [39.5, 41.0], [39.6, 41.0], [39.7, 41.0], [39.8, 41.0], [39.9, 41.0], [40.0, 41.0], [40.1, 41.0], [40.2, 41.0], [40.3, 41.0], [40.4, 41.0], [40.5, 41.0], [40.6, 41.0], [40.7, 41.0], [40.8, 41.0], [40.9, 41.0], [41.0, 41.0], [41.1, 41.0], [41.2, 41.0], [41.3, 41.0], [41.4, 41.0], [41.5, 41.0], [41.6, 41.0], [41.7, 41.0], [41.8, 41.0], [41.9, 41.0], [42.0, 41.0], [42.1, 41.0], [42.2, 41.0], [42.3, 41.0], [42.4, 41.0], [42.5, 41.0], [42.6, 41.0], [42.7, 41.0], [42.8, 41.0], [42.9, 41.0], [43.0, 41.0], [43.1, 41.0], [43.2, 41.0], [43.3, 41.0], [43.4, 41.0], [43.5, 41.0], [43.6, 41.0], [43.7, 41.0], [43.8, 41.0], [43.9, 41.0], [44.0, 41.0], [44.1, 41.0], [44.2, 41.0], [44.3, 41.0], [44.4, 41.0], [44.5, 41.0], [44.6, 41.0], [44.7, 41.0], [44.8, 41.0], [44.9, 41.0], [45.0, 41.0], [45.1, 41.0], [45.2, 41.0], [45.3, 41.0], [45.4, 41.0], [45.5, 41.0], [45.6, 41.0], [45.7, 41.0], [45.8, 41.0], [45.9, 41.0], [46.0, 41.0], [46.1, 42.0], [46.2, 42.0], [46.3, 42.0], [46.4, 42.0], [46.5, 42.0], [46.6, 42.0], [46.7, 42.0], [46.8, 42.0], [46.9, 42.0], [47.0, 42.0], [47.1, 42.0], [47.2, 42.0], [47.3, 42.0], [47.4, 42.0], [47.5, 42.0], [47.6, 42.0], [47.7, 42.0], [47.8, 42.0], [47.9, 42.0], [48.0, 42.0], [48.1, 42.0], [48.2, 42.0], [48.3, 42.0], [48.4, 42.0], [48.5, 42.0], [48.6, 42.0], [48.7, 42.0], [48.8, 42.0], [48.9, 42.0], [49.0, 42.0], [49.1, 42.0], [49.2, 42.0], [49.3, 42.0], [49.4, 42.0], [49.5, 42.0], [49.6, 42.0], [49.7, 42.0], [49.8, 42.0], [49.9, 42.0], [50.0, 42.0], [50.1, 42.0], [50.2, 42.0], [50.3, 42.0], [50.4, 42.0], [50.5, 42.0], [50.6, 42.0], [50.7, 42.0], [50.8, 42.0], [50.9, 42.0], [51.0, 42.0], [51.1, 42.0], [51.2, 42.0], [51.3, 42.0], [51.4, 42.0], [51.5, 42.0], [51.6, 42.0], [51.7, 42.0], [51.8, 42.0], [51.9, 42.0], [52.0, 42.0], [52.1, 42.0], [52.2, 42.0], [52.3, 42.0], [52.4, 42.0], [52.5, 42.0], [52.6, 42.0], [52.7, 42.0], [52.8, 42.0], [52.9, 42.0], [53.0, 42.0], [53.1, 42.0], [53.2, 42.0], [53.3, 42.0], [53.4, 42.0], [53.5, 42.0], [53.6, 42.0], [53.7, 42.0], [53.8, 42.0], [53.9, 42.0], [54.0, 42.0], [54.1, 42.0], [54.2, 42.0], [54.3, 42.0], [54.4, 42.0], [54.5, 42.0], [54.6, 42.0], [54.7, 42.0], [54.8, 42.0], [54.9, 42.0], [55.0, 42.0], [55.1, 42.0], [55.2, 42.0], [55.3, 42.0], [55.4, 42.0], [55.5, 42.0], [55.6, 42.0], [55.7, 42.0], [55.8, 42.0], [55.9, 42.0], [56.0, 42.0], [56.1, 42.0], [56.2, 42.0], [56.3, 42.0], [56.4, 42.0], [56.5, 42.0], [56.6, 42.0], [56.7, 42.0], [56.8, 43.0], [56.9, 43.0], [57.0, 43.0], [57.1, 43.0], [57.2, 43.0], [57.3, 43.0], [57.4, 43.0], [57.5, 43.0], [57.6, 43.0], [57.7, 43.0], [57.8, 43.0], [57.9, 43.0], [58.0, 43.0], [58.1, 43.0], [58.2, 43.0], [58.3, 43.0], [58.4, 43.0], [58.5, 43.0], [58.6, 43.0], [58.7, 43.0], [58.8, 43.0], [58.9, 43.0], [59.0, 43.0], [59.1, 43.0], [59.2, 43.0], [59.3, 43.0], [59.4, 43.0], [59.5, 43.0], [59.6, 43.0], [59.7, 43.0], [59.8, 43.0], [59.9, 43.0], [60.0, 43.0], [60.1, 43.0], [60.2, 43.0], [60.3, 43.0], [60.4, 43.0], [60.5, 43.0], [60.6, 43.0], [60.7, 43.0], [60.8, 43.0], [60.9, 43.0], [61.0, 43.0], [61.1, 43.0], [61.2, 43.0], [61.3, 43.0], [61.4, 43.0], [61.5, 43.0], [61.6, 43.0], [61.7, 43.0], [61.8, 43.0], [61.9, 43.0], [62.0, 43.0], [62.1, 43.0], [62.2, 43.0], [62.3, 43.0], [62.4, 43.0], [62.5, 43.0], [62.6, 43.0], [62.7, 43.0], [62.8, 43.0], [62.9, 43.0], [63.0, 43.0], [63.1, 43.0], [63.2, 43.0], [63.3, 43.0], [63.4, 43.0], [63.5, 43.0], [63.6, 43.0], [63.7, 43.0], [63.8, 43.0], [63.9, 43.0], [64.0, 43.0], [64.1, 43.0], [64.2, 43.0], [64.3, 43.0], [64.4, 43.0], [64.5, 43.0], [64.6, 43.0], [64.7, 43.0], [64.8, 43.0], [64.9, 43.0], [65.0, 43.0], [65.1, 43.0], [65.2, 43.0], [65.3, 43.0], [65.4, 43.0], [65.5, 43.0], [65.6, 43.0], [65.7, 43.0], [65.8, 43.0], [65.9, 43.0], [66.0, 43.0], [66.1, 43.0], [66.2, 43.0], [66.3, 43.0], [66.4, 43.0], [66.5, 43.0], [66.6, 43.0], [66.7, 43.0], [66.8, 43.0], [66.9, 43.0], [67.0, 43.0], [67.1, 43.0], [67.2, 43.0], [67.3, 43.0], [67.4, 43.0], [67.5, 43.0], [67.6, 43.0], [67.7, 43.0], [67.8, 43.0], [67.9, 43.0], [68.0, 43.0], [68.1, 43.0], [68.2, 43.0], [68.3, 43.0], [68.4, 43.0], [68.5, 43.0], [68.6, 44.0], [68.7, 44.0], [68.8, 44.0], [68.9, 44.0], [69.0, 44.0], [69.1, 44.0], [69.2, 44.0], [69.3, 44.0], [69.4, 44.0], [69.5, 44.0], [69.6, 44.0], [69.7, 44.0], [69.8, 44.0], [69.9, 44.0], [70.0, 44.0], [70.1, 44.0], [70.2, 44.0], [70.3, 44.0], [70.4, 44.0], [70.5, 44.0], [70.6, 44.0], [70.7, 44.0], [70.8, 44.0], [70.9, 44.0], [71.0, 44.0], [71.1, 44.0], [71.2, 44.0], [71.3, 44.0], [71.4, 44.0], [71.5, 44.0], [71.6, 44.0], [71.7, 44.0], [71.8, 44.0], [71.9, 44.0], [72.0, 44.0], [72.1, 44.0], [72.2, 44.0], [72.3, 44.0], [72.4, 44.0], [72.5, 44.0], [72.6, 44.0], [72.7, 44.0], [72.8, 44.0], [72.9, 44.0], [73.0, 44.0], [73.1, 44.0], [73.2, 44.0], [73.3, 44.0], [73.4, 44.0], [73.5, 44.0], [73.6, 44.0], [73.7, 44.0], [73.8, 44.0], [73.9, 44.0], [74.0, 44.0], [74.1, 44.0], [74.2, 44.0], [74.3, 44.0], [74.4, 44.0], [74.5, 44.0], [74.6, 44.0], [74.7, 44.0], [74.8, 44.0], [74.9, 45.0], [75.0, 45.0], [75.1, 45.0], [75.2, 45.0], [75.3, 45.0], [75.4, 45.0], [75.5, 45.0], [75.6, 45.0], [75.7, 45.0], [75.8, 45.0], [75.9, 45.0], [76.0, 45.0], [76.1, 45.0], [76.2, 45.0], [76.3, 45.0], [76.4, 45.0], [76.5, 45.0], [76.6, 45.0], [76.7, 45.0], [76.8, 45.0], [76.9, 45.0], [77.0, 45.0], [77.1, 45.0], [77.2, 45.0], [77.3, 45.0], [77.4, 45.0], [77.5, 45.0], [77.6, 45.0], [77.7, 45.0], [77.8, 45.0], [77.9, 45.0], [78.0, 45.0], [78.1, 45.0], [78.2, 46.0], [78.3, 46.0], [78.4, 46.0], [78.5, 46.0], [78.6, 46.0], [78.7, 46.0], [78.8, 46.0], [78.9, 46.0], [79.0, 46.0], [79.1, 46.0], [79.2, 46.0], [79.3, 46.0], [79.4, 46.0], [79.5, 46.0], [79.6, 46.0], [79.7, 46.0], [79.8, 46.0], [79.9, 46.0], [80.0, 46.0], [80.1, 46.0], [80.2, 46.0], [80.3, 46.0], [80.4, 46.0], [80.5, 46.0], [80.6, 46.0], [80.7, 47.0], [80.8, 47.0], [80.9, 47.0], [81.0, 47.0], [81.1, 47.0], [81.2, 47.0], [81.3, 47.0], [81.4, 47.0], [81.5, 47.0], [81.6, 47.0], [81.7, 47.0], [81.8, 47.0], [81.9, 47.0], [82.0, 47.0], [82.1, 47.0], [82.2, 47.0], [82.3, 47.0], [82.4, 47.0], [82.5, 47.0], [82.6, 47.0], [82.7, 47.0], [82.8, 47.0], [82.9, 47.0], [83.0, 48.0], [83.1, 48.0], [83.2, 48.0], [83.3, 48.0], [83.4, 48.0], [83.5, 48.0], [83.6, 48.0], [83.7, 48.0], [83.8, 48.0], [83.9, 48.0], [84.0, 48.0], [84.1, 48.0], [84.2, 48.0], [84.3, 48.0], [84.4, 48.0], [84.5, 48.0], [84.6, 49.0], [84.7, 49.0], [84.8, 49.0], [84.9, 49.0], [85.0, 49.0], [85.1, 49.0], [85.2, 49.0], [85.3, 49.0], [85.4, 49.0], [85.5, 49.0], [85.6, 50.0], [85.7, 50.0], [85.8, 50.0], [85.9, 50.0], [86.0, 50.0], [86.1, 50.0], [86.2, 50.0], [86.3, 50.0], [86.4, 51.0], [86.5, 51.0], [86.6, 51.0], [86.7, 51.0], [86.8, 51.0], [86.9, 51.0], [87.0, 51.0], [87.1, 51.0], [87.2, 51.0], [87.3, 52.0], [87.4, 52.0], [87.5, 52.0], [87.6, 52.0], [87.7, 52.0], [87.8, 53.0], [87.9, 53.0], [88.0, 53.0], [88.1, 53.0], [88.2, 53.0], [88.3, 53.0], [88.4, 53.0], [88.5, 54.0], [88.6, 54.0], [88.7, 54.0], [88.8, 54.0], [88.9, 54.0], [89.0, 55.0], [89.1, 55.0], [89.2, 55.0], [89.3, 55.0], [89.4, 55.0], [89.5, 55.0], [89.6, 56.0], [89.7, 56.0], [89.8, 56.0], [89.9, 56.0], [90.0, 57.0], [90.1, 57.0], [90.2, 57.0], [90.3, 57.0], [90.4, 57.0], [90.5, 58.0], [90.6, 58.0], [90.7, 58.0], [90.8, 58.0], [90.9, 59.0], [91.0, 59.0], [91.1, 59.0], [91.2, 59.0], [91.3, 59.0], [91.4, 60.0], [91.5, 60.0], [91.6, 60.0], [91.7, 60.0], [91.8, 61.0], [91.9, 61.0], [92.0, 61.0], [92.1, 61.0], [92.2, 62.0], [92.3, 62.0], [92.4, 62.0], [92.5, 62.0], [92.6, 63.0], [92.7, 63.0], [92.8, 63.0], [92.9, 64.0], [93.0, 64.0], [93.1, 65.0], [93.2, 65.0], [93.3, 65.0], [93.4, 66.0], [93.5, 67.0], [93.6, 67.0], [93.7, 67.0], [93.8, 68.0], [93.9, 68.0], [94.0, 69.0], [94.1, 69.0], [94.2, 70.0], [94.3, 71.0], [94.4, 71.0], [94.5, 72.0], [94.6, 73.0], [94.7, 74.0], [94.8, 75.0], [94.9, 76.0], [95.0, 77.0], [95.1, 78.0], [95.2, 79.0], [95.3, 81.0], [95.4, 82.0], [95.5, 83.0], [95.6, 84.0], [95.7, 86.0], [95.8, 88.0], [95.9, 90.0], [96.0, 92.0], [96.1, 94.0], [96.2, 96.0], [96.3, 99.0], [96.4, 102.0], [96.5, 106.0], [96.6, 110.0], [96.7, 115.0], [96.8, 132.0], [96.9, 154.0], [97.0, 1332.0], [97.1, 2210.0], [97.2, 2505.0], [97.3, 2794.0], [97.4, 3460.0], [97.5, 3958.0], [97.6, 4096.0], [97.7, 4298.0], [97.8, 4403.0], [97.9, 4531.0], [98.0, 4659.0], [98.1, 4738.0], [98.2, 4809.0], [98.3, 4863.0], [98.4, 4922.0], [98.5, 5015.0], [98.6, 5123.0], [98.7, 5226.0], [98.8, 5485.0], [98.9, 6286.0], [99.0, 6463.0], [99.1, 6694.0], [99.2, 6802.0], [99.3, 6923.0], [99.4, 7081.0], [99.5, 7187.0], [99.6, 7387.0], [99.7, 8798.0], [99.8, 9265.0], [99.9, 9609.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 15411.0, "series": [{"data": [[600.0, 400.0], [700.0, 594.0], [800.0, 624.0], [900.0, 624.0], [1000.0, 712.0], [1100.0, 700.0], [1200.0, 706.0], [1300.0, 749.0], [1400.0, 670.0], [1500.0, 626.0], [1600.0, 658.0], [1700.0, 573.0], [1800.0, 548.0], [1900.0, 527.0], [2000.0, 513.0], [2100.0, 466.0], [2300.0, 383.0], [2200.0, 453.0], [2400.0, 383.0], [2500.0, 367.0], [2600.0, 314.0], [2800.0, 297.0], [2700.0, 323.0], [2900.0, 278.0], [3000.0, 208.0], [3100.0, 212.0], [3300.0, 201.0], [3200.0, 205.0], [3400.0, 175.0], [3500.0, 156.0], [3600.0, 171.0], [3700.0, 136.0], [3800.0, 132.0], [3900.0, 110.0], [4000.0, 117.0], [4100.0, 105.0], [4200.0, 99.0], [4300.0, 57.0], [4600.0, 60.0], [4400.0, 69.0], [4500.0, 67.0], [4700.0, 64.0], [4800.0, 52.0], [4900.0, 40.0], [5000.0, 45.0], [5100.0, 39.0], [5300.0, 45.0], [5200.0, 32.0], [5500.0, 18.0], [5400.0, 34.0], [5600.0, 33.0], [5800.0, 18.0], [5700.0, 18.0], [6100.0, 14.0], [6000.0, 20.0], [5900.0, 14.0], [6200.0, 24.0], [6300.0, 14.0], [6500.0, 7.0], [6600.0, 6.0], [6400.0, 13.0], [6800.0, 3.0], [6700.0, 10.0], [6900.0, 3.0], [7000.0, 4.0], [7100.0, 6.0], [7300.0, 6.0], [7200.0, 4.0], [7400.0, 1.0], [7500.0, 3.0], [7600.0, 3.0], [7900.0, 4.0], [7700.0, 3.0], [7800.0, 1.0], [8100.0, 5.0], [8700.0, 3.0], [8600.0, 1.0], [8300.0, 3.0], [8500.0, 2.0], [8200.0, 1.0], [9200.0, 1.0], [9000.0, 1.0], [9100.0, 1.0], [8900.0, 2.0], [8800.0, 1.0], [9600.0, 1.0], [9400.0, 1.0], [9300.0, 1.0], [9800.0, 1.0], [12100.0, 1.0], [12500.0, 1.0], [100.0, 16.0], [200.0, 58.0], [300.0, 99.0], [400.0, 160.0], [500.0, 271.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 15411.0], [600.0, 2.0], [700.0, 1.0], [1000.0, 1.0], [1100.0, 2.0], [1300.0, 2.0], [1400.0, 1.0], [1500.0, 2.0], [1900.0, 3.0], [2000.0, 4.0], [2100.0, 4.0], [2300.0, 6.0], [2200.0, 7.0], [2400.0, 3.0], [2500.0, 9.0], [2600.0, 3.0], [2800.0, 3.0], [2700.0, 6.0], [2900.0, 7.0], [3000.0, 1.0], [3300.0, 1.0], [3200.0, 2.0], [3400.0, 4.0], [3500.0, 1.0], [3600.0, 3.0], [3700.0, 1.0], [3800.0, 5.0], [3900.0, 8.0], [4000.0, 12.0], [4100.0, 7.0], [4300.0, 12.0], [4200.0, 10.0], [4500.0, 11.0], [4600.0, 13.0], [4400.0, 15.0], [4800.0, 34.0], [4700.0, 23.0], [4900.0, 18.0], [5100.0, 14.0], [5000.0, 11.0], [5200.0, 17.0], [5300.0, 4.0], [5400.0, 3.0], [5500.0, 1.0], [5800.0, 3.0], [5700.0, 3.0], [5900.0, 2.0], [6100.0, 2.0], [6000.0, 3.0], [6200.0, 3.0], [6300.0, 9.0], [6600.0, 7.0], [6500.0, 8.0], [6400.0, 8.0], [6800.0, 11.0], [6700.0, 14.0], [6900.0, 10.0], [7000.0, 16.0], [7100.0, 12.0], [7300.0, 9.0], [7400.0, 5.0], [7200.0, 8.0], [7600.0, 1.0], [7500.0, 5.0], [8700.0, 2.0], [8500.0, 1.0], [8600.0, 1.0], [9200.0, 5.0], [9100.0, 7.0], [9000.0, 5.0], [9300.0, 5.0], [9500.0, 5.0], [9600.0, 3.0], [9400.0, 4.0], [9700.0, 2.0], [9800.0, 1.0], [9900.0, 1.0], [10600.0, 1.0], [11100.0, 1.0], [11200.0, 1.0], [11700.0, 1.0], [11600.0, 1.0], [12100.0, 1.0], [12000.0, 1.0], [11800.0, 1.0], [11900.0, 1.0], [100.0, 97.0], [300.0, 2.0], [400.0, 3.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 12500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 74.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 15848.0, "series": [{"data": [[0.0, 15848.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 6062.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 10016.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 74.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 17.598717948717947, "minX": 1.7475912E12, "maxY": 32.0, "series": [{"data": [[1.74759216E12, 32.0], [1.7475912E12, 31.992610837438423], [1.74759186E12, 32.0], [1.74759156E12, 32.0], [1.74759222E12, 32.0], [1.74759126E12, 32.0], [1.74759192E12, 32.0], [1.74759162E12, 32.0], [1.74759228E12, 30.87050770108381], [1.74759132E12, 32.0], [1.74759198E12, 32.0], [1.74759168E12, 32.0], [1.74759138E12, 32.0], [1.74759234E12, 17.598717948717947], [1.74759204E12, 32.0], [1.74759174E12, 32.0], [1.74759144E12, 32.0], [1.7475921E12, 32.0], [1.7475918E12, 32.0], [1.7475915E12, 32.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74759234E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 26.0, "minX": 1.0, "maxY": 2073.3199922158783, "series": [{"data": [[32.0, 2073.3199922158783], [2.0, 384.5], [3.0, 499.88235294117646], [4.0, 193.0], [5.0, 525.7777777777778], [6.0, 309.2], [7.0, 646.5714285714287], [9.0, 1173.8], [10.0, 781.2222222222222], [11.0, 778.6874999999999], [12.0, 932.5384615384614], [13.0, 919.0], [14.0, 928.0], [15.0, 814.0], [16.0, 1184.909090909091], [1.0, 191.0], [17.0, 1036.375], [18.0, 1218.5882352941176], [19.0, 1245.75], [20.0, 1505.7692307692307], [21.0, 1185.2], [22.0, 1305.222222222222], [23.0, 1887.7333333333333], [24.0, 1478.2222222222222], [25.0, 1519.642857142857], [26.0, 1793.294871794872], [27.0, 1647.6888888888889], [28.0, 1869.3888888888887], [29.0, 1533.3846153846155], [30.0, 1960.5], [31.0, 1211.5]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[31.58743750000006, 2048.507312500001]], "isOverall": false, "label": "Create CSR-Aggregated", "isController": false}, {"data": [[32.0, 215.37324857291108], [2.0, 27.0], [3.0, 27.999999999999996], [4.0, 26.0], [5.0, 26.444444444444443], [6.0, 30.142857142857142], [7.0, 35.4], [8.0, 35.5], [9.0, 34.333333333333336], [10.0, 35.0], [11.0, 36.19148936170213], [12.0, 39.42857142857143], [13.0, 44.5], [14.0, 37.8], [15.0, 41.33333333333333], [16.0, 40.25], [1.0, 27.0], [17.0, 44.519999999999996], [18.0, 44.866666666666674], [19.0, 41.46428571428572], [20.0, 40.80769230769229], [21.0, 42.2], [22.0, 44.89473684210526], [23.0, 41.5], [24.0, 44.77777777777778], [25.0, 46.21428571428572], [26.0, 44.55063291139239], [27.0, 45.15909090909091], [28.0, 42.82857142857143], [29.0, 47.53846153846154], [30.0, 46.0], [31.0, 42.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}, {"data": [[31.586562499999996, 209.04268749999954]], "isOverall": false, "label": "HTTP Request - enroll-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 32.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 5551.916666666667, "minX": 1.7475912E12, "maxY": 135516.35, "series": [{"data": [[1.74759216E12, 124935.23333333334], [1.7475912E12, 25281.516666666666], [1.74759186E12, 130654.61666666667], [1.74759156E12, 127857.55], [1.74759222E12, 131645.0], [1.74759126E12, 42388.05], [1.74759192E12, 127963.2], [1.74759162E12, 135516.35], [1.74759228E12, 129140.2], [1.74759132E12, 132549.93333333332], [1.74759198E12, 128006.41666666667], [1.74759168E12, 129708.93333333333], [1.74759138E12, 134484.51666666666], [1.74759234E12, 57433.933333333334], [1.74759204E12, 131056.01666666666], [1.74759174E12, 128572.46666666666], [1.74759144E12, 130319.63333333333], [1.7475921E12, 134316.43333333332], [1.7475918E12, 132991.85], [1.7475915E12, 132549.35]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74759216E12, 25177.133333333335], [1.7475912E12, 5551.916666666667], [1.74759186E12, 26332.783333333333], [1.74759156E12, 25769.666666666668], [1.74759222E12, 26541.9], [1.74759126E12, 9915.866666666667], [1.74759192E12, 25800.083333333332], [1.74759162E12, 27313.633333333335], [1.74759228E12, 26036.316666666666], [1.74759132E12, 26719.9], [1.74759198E12, 25800.283333333333], [1.74759168E12, 26155.583333333332], [1.74759138E12, 27105.216666666667], [1.74759234E12, 11575.5], [1.74759204E12, 26423.533333333333], [1.74759174E12, 25917.95], [1.74759144E12, 26274.75], [1.7475921E12, 27075.7], [1.7475918E12, 26809.45], [1.7475915E12, 26719.5]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74759234E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 40.846153846153825, "minX": 1.7475912E12, "maxY": 5245.035928143714, "series": [{"data": [[1.74759216E12, 2231.3058823529404], [1.7475912E12, 751.62100456621], [1.74759186E12, 2129.2860360360346], [1.74759156E12, 2130.578826237055], [1.74759222E12, 2095.144456886899], [1.74759126E12, 767.7880794701986], [1.74759192E12, 2141.9665898617527], [1.74759162E12, 2054.0857763300755], [1.74759228E12, 2085.9406392694045], [1.74759132E12, 2076.4255555555555], [1.74759198E12, 2165.5068965517235], [1.74759168E12, 2140.095563139935], [1.74759138E12, 2055.1181619255985], [1.74759234E12, 1225.107692307692], [1.74759204E12, 2109.762654668163], [1.74759174E12, 2144.0332187857925], [1.74759144E12, 2136.070135746606], [1.7475921E12, 2067.6184210526303], [1.7475918E12, 2097.104097452935], [1.7475915E12, 2096.017777777778]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74759216E12, 44.08608490566038], [1.7475912E12, 4871.139037433156], [1.74759186E12, 44.36076662908682], [1.74759156E12, 44.96658986175112], [1.74759222E12, 43.60738255033558], [1.74759126E12, 5245.035928143714], [1.74759192E12, 43.11967779056383], [1.74759162E12, 45.43260869565209], [1.74759228E12, 43.044469783352284], [1.74759132E12, 43.88666666666667], [1.74759198E12, 44.78135788262367], [1.74759168E12, 43.95005675368904], [1.74759138E12, 43.49288061336254], [1.74759234E12, 40.846153846153825], [1.74759204E12, 43.59438202247194], [1.74759174E12, 44.12371134020615], [1.74759144E12, 44.768361581920836], [1.7475921E12, 44.046052631578945], [1.7475918E12, 44.73532668881505], [1.7475915E12, 44.32555555555552]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74759234E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.7475912E12, "maxY": 5245.023952095814, "series": [{"data": [[1.74759216E12, 0.0], [1.7475912E12, 0.0], [1.74759186E12, 0.0], [1.74759156E12, 0.0], [1.74759222E12, 0.0], [1.74759126E12, 0.0], [1.74759192E12, 0.0], [1.74759162E12, 0.0], [1.74759228E12, 0.0], [1.74759132E12, 0.0], [1.74759198E12, 0.0], [1.74759168E12, 0.0], [1.74759138E12, 0.0], [1.74759234E12, 0.0], [1.74759204E12, 0.0], [1.74759174E12, 0.0], [1.74759144E12, 0.0], [1.7475921E12, 0.0], [1.7475918E12, 0.0], [1.7475915E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74759216E12, 44.08018867924528], [1.7475912E12, 4871.01604278075], [1.74759186E12, 44.35287485907556], [1.74759156E12, 44.958525345622164], [1.74759222E12, 43.60514541387027], [1.74759126E12, 5245.023952095814], [1.74759192E12, 43.11162255466054], [1.74759162E12, 45.424999999999976], [1.74759228E12, 43.0399087799316], [1.74759132E12, 43.8755555555555], [1.74759198E12, 44.77675489067891], [1.74759168E12, 43.94324631101022], [1.74759138E12, 43.47754654983566], [1.74759234E12, 40.83333333333335], [1.74759204E12, 43.59325842696632], [1.74759174E12, 44.035509736540604], [1.74759144E12, 44.75819209039552], [1.7475921E12, 44.046052631578945], [1.7475918E12, 44.72757475083057], [1.7475915E12, 44.32000000000002]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74759234E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.7475912E12, "maxY": 110.52406417112303, "series": [{"data": [[1.74759216E12, 0.0], [1.7475912E12, 0.0], [1.74759186E12, 0.0], [1.74759156E12, 0.0], [1.74759222E12, 0.0], [1.74759126E12, 0.0], [1.74759192E12, 0.0], [1.74759162E12, 0.0], [1.74759228E12, 0.0], [1.74759132E12, 0.0], [1.74759198E12, 0.0], [1.74759168E12, 0.0], [1.74759138E12, 0.0], [1.74759234E12, 0.0], [1.74759204E12, 0.0], [1.74759174E12, 0.0], [1.74759144E12, 0.0], [1.7475921E12, 0.0], [1.7475918E12, 0.0], [1.7475915E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74759216E12, 0.0966981132075472], [1.7475912E12, 110.52406417112303], [1.74759186E12, 0.11724915445321313], [1.74759156E12, 0.2327188940092164], [1.74759222E12, 0.10402684563758388], [1.74759126E12, 0.30239520958083826], [1.74759192E12, 0.11737629459148444], [1.74759162E12, 0.13369565217391302], [1.74759228E12, 0.08209806157354621], [1.74759132E12, 0.15666666666666673], [1.74759198E12, 0.10817031070195633], [1.74759168E12, 0.1259931895573212], [1.74759138E12, 0.1610076670317634], [1.74759234E12, 0.015384615384615398], [1.74759204E12, 0.101123595505618], [1.74759174E12, 0.1340206185567011], [1.74759144E12, 0.1548022598870056], [1.7475921E12, 0.10745614035087717], [1.7475918E12, 0.1096345514950166], [1.7475915E12, 0.1266666666666666]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74759234E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 25.0, "minX": 1.7475912E12, "maxY": 12589.0, "series": [{"data": [[1.74759216E12, 8128.0], [1.7475912E12, 10686.0], [1.74759186E12, 8586.0], [1.74759156E12, 8704.0], [1.74759222E12, 6781.0], [1.74759126E12, 12119.0], [1.74759192E12, 9124.0], [1.74759162E12, 8740.0], [1.74759228E12, 8874.0], [1.74759132E12, 12101.0], [1.74759198E12, 12589.0], [1.74759168E12, 9462.0], [1.74759138E12, 9877.0], [1.74759234E12, 4323.0], [1.74759204E12, 8557.0], [1.74759174E12, 9319.0], [1.74759144E12, 8718.0], [1.7475921E12, 8958.0], [1.7475918E12, 8357.0], [1.7475915E12, 8606.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.74759216E12, 3149.9000000000015], [1.7475912E12, 6533.1], [1.74759186E12, 2940.6000000000004], [1.74759156E12, 3000.6000000000004], [1.74759222E12, 2936.0], [1.74759126E12, 7221.200000000001], [1.74759192E12, 2992.0], [1.74759162E12, 2858.399999999999], [1.74759228E12, 2956.0], [1.74759132E12, 2873.2000000000007], [1.74759198E12, 2957.0], [1.74759168E12, 2909.9], [1.74759138E12, 2881.4], [1.74759234E12, 1742.8], [1.74759204E12, 2878.0], [1.74759174E12, 3055.0], [1.74759144E12, 3010.0], [1.7475921E12, 2964.5], [1.7475918E12, 2931.5999999999995], [1.7475915E12, 2923.6000000000004]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.74759216E12, 5500.539999999999], [1.7475912E12, 9234.790000000003], [1.74759186E12, 5436.720000000002], [1.74759156E12, 5494.279999999995], [1.74759222E12, 5022.079999999999], [1.74759126E12, 11301.839999999998], [1.74759192E12, 5742.439999999993], [1.74759162E12, 5252.959999999999], [1.74759228E12, 5690.000000000004], [1.74759132E12, 5301.97], [1.74759198E12, 5445.199999999999], [1.74759168E12, 5692.459999999998], [1.74759138E12, 5411.840000000001], [1.74759234E12, 3712.019999999997], [1.74759204E12, 5258.0], [1.74759174E12, 5452.139999999999], [1.74759144E12, 5643.499999999997], [1.7475921E12, 5642.75], [1.7475918E12, 5441.970000000002], [1.7475915E12, 5236.72]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.74759216E12, 4006.749999999998], [1.7475912E12, 7036.699999999999], [1.74759186E12, 3807.7999999999993], [1.74759156E12, 3757.2999999999997], [1.74759222E12, 3569.3999999999996], [1.74759126E12, 9151.25], [1.74759192E12, 3740.2], [1.74759162E12, 3540.7999999999997], [1.74759228E12, 3945.5], [1.74759132E12, 3741.9999999999964], [1.74759198E12, 3851.0], [1.74759168E12, 3846.699999999999], [1.74759138E12, 3655.199999999997], [1.74759234E12, 2319.699999999998], [1.74759204E12, 3620.0], [1.74759174E12, 3804.6499999999996], [1.74759144E12, 3898.0], [1.7475921E12, 3722.5], [1.7475918E12, 3702.95], [1.7475915E12, 3664.0499999999965]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.74759216E12, 34.0], [1.7475912E12, 169.0], [1.74759186E12, 34.0], [1.74759156E12, 34.0], [1.74759222E12, 34.0], [1.74759126E12, 37.0], [1.74759192E12, 34.0], [1.74759162E12, 34.0], [1.74759228E12, 34.0], [1.74759132E12, 35.0], [1.74759198E12, 35.0], [1.74759168E12, 34.0], [1.74759138E12, 35.0], [1.74759234E12, 25.0], [1.74759204E12, 35.0], [1.74759174E12, 35.0], [1.74759144E12, 34.0], [1.7475921E12, 35.0], [1.7475918E12, 35.0], [1.7475915E12, 34.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.74759216E12, 358.5], [1.7475912E12, 1168.0], [1.74759186E12, 404.0], [1.74759156E12, 451.0], [1.74759222E12, 111.0], [1.74759126E12, 1321.5], [1.74759192E12, 108.0], [1.74759162E12, 288.0], [1.74759228E12, 137.0], [1.74759132E12, 231.0], [1.74759198E12, 461.0], [1.74759168E12, 133.5], [1.74759138E12, 472.0], [1.74759234E12, 128.0], [1.74759204E12, 167.0], [1.74759174E12, 279.5], [1.74759144E12, 148.0], [1.7475921E12, 287.5], [1.7475918E12, 255.5], [1.7475915E12, 291.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74759234E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 27.0, "minX": 1.0, "maxY": 11697.0, "series": [{"data": [[2.0, 898.5], [33.0, 151.0], [32.0, 326.0], [34.0, 503.5], [35.0, 113.0], [36.0, 421.0], [37.0, 114.5], [38.0, 762.0], [39.0, 113.0], [40.0, 405.5], [41.0, 79.0], [43.0, 274.0], [42.0, 302.0], [45.0, 460.0], [44.0, 221.0], [47.0, 108.0], [46.0, 522.5], [3.0, 27.0], [51.0, 381.0], [5.0, 700.0], [6.0, 958.5], [7.0, 791.0], [8.0, 1094.0], [9.0, 661.0], [10.0, 796.5], [11.0, 5068.5], [12.0, 1039.0], [13.0, 657.0], [14.0, 1332.0], [15.0, 1359.0], [1.0, 1177.5], [16.0, 1056.0], [17.0, 902.0], [18.0, 138.0], [19.0, 852.5], [20.0, 555.5], [21.0, 694.0], [22.0, 491.5], [23.0, 592.0], [24.0, 574.0], [25.0, 502.5], [26.0, 502.0], [27.0, 564.5], [28.0, 208.5], [29.0, 569.0], [30.0, 91.0], [31.0, 537.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[9.0, 3673.0], [38.0, 6221.0], [10.0, 5932.0], [11.0, 4853.0], [12.0, 4035.0], [13.0, 5282.0], [15.0, 5812.5], [16.0, 11697.0], [17.0, 4737.0], [19.0, 4993.0], [20.0, 3591.0], [22.0, 4628.5], [23.0, 3375.0], [24.0, 4738.0], [25.0, 3788.5], [26.0, 3478.0], [31.0, 2413.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 51.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 11697.0, "series": [{"data": [[2.0, 0.0], [33.0, 35.0], [32.0, 0.0], [34.0, 0.0], [35.0, 34.5], [36.0, 0.0], [37.0, 34.0], [38.0, 37.0], [39.0, 35.0], [40.0, 0.0], [41.0, 37.0], [43.0, 17.0], [42.0, 18.0], [45.0, 0.0], [44.0, 18.5], [47.0, 36.0], [46.0, 17.5], [3.0, 27.0], [51.0, 18.0], [5.0, 0.0], [6.0, 0.0], [7.0, 0.0], [8.0, 0.0], [9.0, 0.0], [10.0, 0.0], [11.0, 5068.5], [12.0, 0.0], [13.0, 0.0], [14.0, 0.0], [15.0, 0.0], [1.0, 0.0], [16.0, 38.0], [17.0, 35.0], [18.0, 12.5], [19.0, 36.0], [20.0, 37.0], [21.0, 36.0], [22.0, 0.0], [23.0, 37.0], [24.0, 30.5], [25.0, 0.0], [26.0, 35.0], [27.0, 0.0], [28.0, 0.0], [29.0, 0.0], [30.0, 35.5], [31.0, 35.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[9.0, 3673.0], [38.0, 6221.0], [10.0, 5932.0], [11.0, 4853.0], [12.0, 4035.0], [13.0, 5282.0], [15.0, 5812.5], [16.0, 11697.0], [17.0, 4737.0], [19.0, 4993.0], [20.0, 3590.5], [22.0, 4628.5], [23.0, 3375.0], [24.0, 4738.0], [25.0, 3788.5], [26.0, 3478.0], [31.0, 2413.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 51.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 7.3, "minX": 1.7475912E12, "maxY": 30.683333333333334, "series": [{"data": [[1.74759216E12, 28.3], [1.7475912E12, 7.3], [1.74759186E12, 29.583333333333332], [1.74759156E12, 28.95], [1.74759222E12, 29.783333333333335], [1.74759126E12, 10.6], [1.74759192E12, 28.95], [1.74759162E12, 30.683333333333334], [1.74759228E12, 29.116666666666667], [1.74759132E12, 30.0], [1.74759198E12, 28.983333333333334], [1.74759168E12, 29.333333333333332], [1.74759138E12, 30.45], [1.74759234E12, 12.566666666666666], [1.74759204E12, 29.65], [1.74759174E12, 29.1], [1.74759144E12, 29.483333333333334], [1.7475921E12, 30.4], [1.7475918E12, 30.1], [1.7475915E12, 30.0]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74759234E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.4, "minX": 1.7475912E12, "maxY": 15.35, "series": [{"data": [[1.74759216E12, 14.166666666666666], [1.7475912E12, 3.65], [1.74759186E12, 14.8], [1.74759156E12, 14.483333333333333], [1.74759222E12, 14.883333333333333], [1.74759126E12, 5.033333333333333], [1.74759192E12, 14.466666666666667], [1.74759162E12, 15.35], [1.74759228E12, 14.6], [1.74759132E12, 15.0], [1.74759198E12, 14.5], [1.74759168E12, 14.65], [1.74759138E12, 15.233333333333333], [1.74759234E12, 6.5], [1.74759204E12, 14.816666666666666], [1.74759174E12, 14.55], [1.74759144E12, 14.733333333333333], [1.7475921E12, 15.2], [1.7475918E12, 15.05], [1.7475915E12, 15.0]], "isOverall": false, "label": "0", "isController": false}, {"data": [[1.74759216E12, 14.133333333333333], [1.7475912E12, 2.716666666666667], [1.74759186E12, 14.783333333333333], [1.74759156E12, 14.466666666666667], [1.74759222E12, 14.9], [1.74759126E12, 4.733333333333333], [1.74759192E12, 14.483333333333333], [1.74759162E12, 15.333333333333334], [1.74759228E12, 14.616666666666667], [1.74759132E12, 15.0], [1.74759198E12, 14.483333333333333], [1.74759168E12, 14.683333333333334], [1.74759138E12, 15.216666666666667], [1.74759234E12, 6.5], [1.74759204E12, 14.833333333333334], [1.74759174E12, 14.55], [1.74759144E12, 14.75], [1.7475921E12, 15.2], [1.7475918E12, 15.05], [1.7475915E12, 15.0]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.7475912E12, 0.4], [1.74759126E12, 0.8333333333333334]], "isOverall": false, "label": "400", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74759234E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.4, "minX": 1.7475912E12, "maxY": 15.35, "series": [{"data": [[1.74759216E12, 14.133333333333333], [1.7475912E12, 2.716666666666667], [1.74759186E12, 14.783333333333333], [1.74759156E12, 14.466666666666667], [1.74759222E12, 14.9], [1.74759126E12, 4.733333333333333], [1.74759192E12, 14.483333333333333], [1.74759162E12, 15.333333333333334], [1.74759228E12, 14.616666666666667], [1.74759132E12, 15.0], [1.74759198E12, 14.483333333333333], [1.74759168E12, 14.683333333333334], [1.74759138E12, 15.216666666666667], [1.74759234E12, 6.5], [1.74759204E12, 14.833333333333334], [1.74759174E12, 14.55], [1.74759144E12, 14.75], [1.7475921E12, 15.2], [1.7475918E12, 15.05], [1.7475915E12, 15.0]], "isOverall": false, "label": "HTTP Request - enroll-success", "isController": false}, {"data": [[1.7475912E12, 0.4], [1.74759126E12, 0.8333333333333334]], "isOverall": false, "label": "HTTP Request - enroll-failure", "isController": false}, {"data": [[1.74759216E12, 14.166666666666666], [1.7475912E12, 3.65], [1.74759186E12, 14.8], [1.74759156E12, 14.483333333333333], [1.74759222E12, 14.883333333333333], [1.74759126E12, 5.033333333333333], [1.74759192E12, 14.466666666666667], [1.74759162E12, 15.35], [1.74759228E12, 14.6], [1.74759132E12, 15.0], [1.74759198E12, 14.5], [1.74759168E12, 14.65], [1.74759138E12, 15.233333333333333], [1.74759234E12, 6.5], [1.74759204E12, 14.816666666666666], [1.74759174E12, 14.55], [1.74759144E12, 14.733333333333333], [1.7475921E12, 15.2], [1.7475918E12, 15.05], [1.7475915E12, 15.0]], "isOverall": false, "label": "Create CSR-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74759234E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.4, "minX": 1.7475912E12, "maxY": 30.683333333333334, "series": [{"data": [[1.74759216E12, 28.3], [1.7475912E12, 6.366666666666666], [1.74759186E12, 29.583333333333332], [1.74759156E12, 28.95], [1.74759222E12, 29.783333333333335], [1.74759126E12, 9.766666666666667], [1.74759192E12, 28.95], [1.74759162E12, 30.683333333333334], [1.74759228E12, 29.216666666666665], [1.74759132E12, 30.0], [1.74759198E12, 28.983333333333334], [1.74759168E12, 29.333333333333332], [1.74759138E12, 30.45], [1.74759234E12, 13.0], [1.74759204E12, 29.65], [1.74759174E12, 29.1], [1.74759144E12, 29.483333333333334], [1.7475921E12, 30.4], [1.7475918E12, 30.1], [1.7475915E12, 30.0]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7475912E12, 0.4], [1.74759126E12, 0.8333333333333334]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74759234E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

