/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 28.0, "minX": 0.0, "maxY": 10963.0, "series": [{"data": [[0.0, 122.0], [0.1, 243.0], [0.2, 297.0], [0.3, 329.0], [0.4, 354.0], [0.5, 366.0], [0.6, 382.0], [0.7, 399.0], [0.8, 408.0], [0.9, 416.0], [1.0, 423.0], [1.1, 431.0], [1.2, 435.0], [1.3, 441.0], [1.4, 447.0], [1.5, 455.0], [1.6, 461.0], [1.7, 465.0], [1.8, 473.0], [1.9, 479.0], [2.0, 484.0], [2.1, 489.0], [2.2, 495.0], [2.3, 498.0], [2.4, 506.0], [2.5, 511.0], [2.6, 516.0], [2.7, 521.0], [2.8, 528.0], [2.9, 532.0], [3.0, 540.0], [3.1, 543.0], [3.2, 546.0], [3.3, 549.0], [3.4, 552.0], [3.5, 555.0], [3.6, 558.0], [3.7, 561.0], [3.8, 564.0], [3.9, 568.0], [4.0, 571.0], [4.1, 576.0], [4.2, 579.0], [4.3, 581.0], [4.4, 584.0], [4.5, 586.0], [4.6, 591.0], [4.7, 595.0], [4.8, 597.0], [4.9, 599.0], [5.0, 602.0], [5.1, 604.0], [5.2, 608.0], [5.3, 611.0], [5.4, 614.0], [5.5, 617.0], [5.6, 620.0], [5.7, 623.0], [5.8, 626.0], [5.9, 630.0], [6.0, 633.0], [6.1, 636.0], [6.2, 639.0], [6.3, 641.0], [6.4, 644.0], [6.5, 646.0], [6.6, 650.0], [6.7, 652.0], [6.8, 653.0], [6.9, 655.0], [7.0, 658.0], [7.1, 660.0], [7.2, 662.0], [7.3, 664.0], [7.4, 666.0], [7.5, 669.0], [7.6, 672.0], [7.7, 674.0], [7.8, 676.0], [7.9, 680.0], [8.0, 681.0], [8.1, 683.0], [8.2, 686.0], [8.3, 688.0], [8.4, 691.0], [8.5, 693.0], [8.6, 695.0], [8.7, 697.0], [8.8, 699.0], [8.9, 702.0], [9.0, 706.0], [9.1, 708.0], [9.2, 711.0], [9.3, 712.0], [9.4, 715.0], [9.5, 717.0], [9.6, 720.0], [9.7, 722.0], [9.8, 726.0], [9.9, 728.0], [10.0, 730.0], [10.1, 732.0], [10.2, 734.0], [10.3, 736.0], [10.4, 739.0], [10.5, 742.0], [10.6, 745.0], [10.7, 747.0], [10.8, 748.0], [10.9, 750.0], [11.0, 753.0], [11.1, 754.0], [11.2, 757.0], [11.3, 759.0], [11.4, 762.0], [11.5, 763.0], [11.6, 766.0], [11.7, 768.0], [11.8, 770.0], [11.9, 772.0], [12.0, 774.0], [12.1, 776.0], [12.2, 777.0], [12.3, 779.0], [12.4, 782.0], [12.5, 783.0], [12.6, 785.0], [12.7, 787.0], [12.8, 789.0], [12.9, 792.0], [13.0, 794.0], [13.1, 797.0], [13.2, 798.0], [13.3, 801.0], [13.4, 804.0], [13.5, 807.0], [13.6, 808.0], [13.7, 812.0], [13.8, 814.0], [13.9, 815.0], [14.0, 816.0], [14.1, 817.0], [14.2, 819.0], [14.3, 820.0], [14.4, 823.0], [14.5, 826.0], [14.6, 828.0], [14.7, 829.0], [14.8, 830.0], [14.9, 832.0], [15.0, 833.0], [15.1, 837.0], [15.2, 839.0], [15.3, 840.0], [15.4, 841.0], [15.5, 843.0], [15.6, 845.0], [15.7, 847.0], [15.8, 849.0], [15.9, 852.0], [16.0, 854.0], [16.1, 856.0], [16.2, 858.0], [16.3, 860.0], [16.4, 862.0], [16.5, 864.0], [16.6, 865.0], [16.7, 867.0], [16.8, 869.0], [16.9, 872.0], [17.0, 874.0], [17.1, 876.0], [17.2, 877.0], [17.3, 879.0], [17.4, 880.0], [17.5, 881.0], [17.6, 883.0], [17.7, 885.0], [17.8, 887.0], [17.9, 889.0], [18.0, 892.0], [18.1, 894.0], [18.2, 897.0], [18.3, 899.0], [18.4, 900.0], [18.5, 901.0], [18.6, 902.0], [18.7, 905.0], [18.8, 906.0], [18.9, 907.0], [19.0, 909.0], [19.1, 911.0], [19.2, 912.0], [19.3, 915.0], [19.4, 917.0], [19.5, 920.0], [19.6, 922.0], [19.7, 924.0], [19.8, 926.0], [19.9, 927.0], [20.0, 929.0], [20.1, 931.0], [20.2, 933.0], [20.3, 936.0], [20.4, 937.0], [20.5, 939.0], [20.6, 942.0], [20.7, 944.0], [20.8, 945.0], [20.9, 948.0], [21.0, 950.0], [21.1, 952.0], [21.2, 955.0], [21.3, 957.0], [21.4, 958.0], [21.5, 960.0], [21.6, 962.0], [21.7, 964.0], [21.8, 965.0], [21.9, 967.0], [22.0, 969.0], [22.1, 971.0], [22.2, 972.0], [22.3, 974.0], [22.4, 976.0], [22.5, 977.0], [22.6, 978.0], [22.7, 982.0], [22.8, 983.0], [22.9, 985.0], [23.0, 988.0], [23.1, 990.0], [23.2, 992.0], [23.3, 994.0], [23.4, 996.0], [23.5, 997.0], [23.6, 1000.0], [23.7, 1001.0], [23.8, 1003.0], [23.9, 1005.0], [24.0, 1006.0], [24.1, 1008.0], [24.2, 1011.0], [24.3, 1013.0], [24.4, 1015.0], [24.5, 1017.0], [24.6, 1019.0], [24.7, 1022.0], [24.8, 1023.0], [24.9, 1025.0], [25.0, 1027.0], [25.1, 1029.0], [25.2, 1030.0], [25.3, 1034.0], [25.4, 1037.0], [25.5, 1038.0], [25.6, 1040.0], [25.7, 1044.0], [25.8, 1046.0], [25.9, 1048.0], [26.0, 1049.0], [26.1, 1052.0], [26.2, 1054.0], [26.3, 1056.0], [26.4, 1057.0], [26.5, 1060.0], [26.6, 1061.0], [26.7, 1063.0], [26.8, 1065.0], [26.9, 1067.0], [27.0, 1068.0], [27.1, 1071.0], [27.2, 1073.0], [27.3, 1075.0], [27.4, 1077.0], [27.5, 1079.0], [27.6, 1082.0], [27.7, 1083.0], [27.8, 1085.0], [27.9, 1086.0], [28.0, 1088.0], [28.1, 1089.0], [28.2, 1092.0], [28.3, 1093.0], [28.4, 1095.0], [28.5, 1097.0], [28.6, 1100.0], [28.7, 1101.0], [28.8, 1102.0], [28.9, 1105.0], [29.0, 1107.0], [29.1, 1110.0], [29.2, 1111.0], [29.3, 1114.0], [29.4, 1116.0], [29.5, 1118.0], [29.6, 1120.0], [29.7, 1122.0], [29.8, 1124.0], [29.9, 1126.0], [30.0, 1128.0], [30.1, 1130.0], [30.2, 1132.0], [30.3, 1134.0], [30.4, 1136.0], [30.5, 1138.0], [30.6, 1140.0], [30.7, 1141.0], [30.8, 1143.0], [30.9, 1145.0], [31.0, 1146.0], [31.1, 1148.0], [31.2, 1150.0], [31.3, 1153.0], [31.4, 1155.0], [31.5, 1158.0], [31.6, 1160.0], [31.7, 1161.0], [31.8, 1163.0], [31.9, 1165.0], [32.0, 1167.0], [32.1, 1169.0], [32.2, 1170.0], [32.3, 1172.0], [32.4, 1175.0], [32.5, 1178.0], [32.6, 1181.0], [32.7, 1183.0], [32.8, 1185.0], [32.9, 1186.0], [33.0, 1189.0], [33.1, 1190.0], [33.2, 1193.0], [33.3, 1195.0], [33.4, 1198.0], [33.5, 1199.0], [33.6, 1201.0], [33.7, 1202.0], [33.8, 1204.0], [33.9, 1206.0], [34.0, 1209.0], [34.1, 1211.0], [34.2, 1213.0], [34.3, 1214.0], [34.4, 1215.0], [34.5, 1217.0], [34.6, 1220.0], [34.7, 1221.0], [34.8, 1223.0], [34.9, 1226.0], [35.0, 1227.0], [35.1, 1229.0], [35.2, 1231.0], [35.3, 1234.0], [35.4, 1235.0], [35.5, 1237.0], [35.6, 1241.0], [35.7, 1242.0], [35.8, 1244.0], [35.9, 1246.0], [36.0, 1247.0], [36.1, 1250.0], [36.2, 1251.0], [36.3, 1253.0], [36.4, 1255.0], [36.5, 1257.0], [36.6, 1260.0], [36.7, 1261.0], [36.8, 1263.0], [36.9, 1265.0], [37.0, 1266.0], [37.1, 1268.0], [37.2, 1271.0], [37.3, 1272.0], [37.4, 1274.0], [37.5, 1276.0], [37.6, 1277.0], [37.7, 1279.0], [37.8, 1280.0], [37.9, 1283.0], [38.0, 1285.0], [38.1, 1286.0], [38.2, 1289.0], [38.3, 1291.0], [38.4, 1292.0], [38.5, 1294.0], [38.6, 1295.0], [38.7, 1298.0], [38.8, 1300.0], [38.9, 1302.0], [39.0, 1303.0], [39.1, 1305.0], [39.2, 1307.0], [39.3, 1309.0], [39.4, 1311.0], [39.5, 1313.0], [39.6, 1316.0], [39.7, 1317.0], [39.8, 1319.0], [39.9, 1321.0], [40.0, 1324.0], [40.1, 1326.0], [40.2, 1329.0], [40.3, 1331.0], [40.4, 1333.0], [40.5, 1335.0], [40.6, 1337.0], [40.7, 1339.0], [40.8, 1341.0], [40.9, 1345.0], [41.0, 1348.0], [41.1, 1351.0], [41.2, 1352.0], [41.3, 1354.0], [41.4, 1357.0], [41.5, 1360.0], [41.6, 1361.0], [41.7, 1363.0], [41.8, 1367.0], [41.9, 1369.0], [42.0, 1371.0], [42.1, 1373.0], [42.2, 1375.0], [42.3, 1379.0], [42.4, 1380.0], [42.5, 1383.0], [42.6, 1386.0], [42.7, 1387.0], [42.8, 1389.0], [42.9, 1391.0], [43.0, 1393.0], [43.1, 1396.0], [43.2, 1398.0], [43.3, 1400.0], [43.4, 1401.0], [43.5, 1402.0], [43.6, 1405.0], [43.7, 1407.0], [43.8, 1409.0], [43.9, 1410.0], [44.0, 1413.0], [44.1, 1415.0], [44.2, 1419.0], [44.3, 1420.0], [44.4, 1422.0], [44.5, 1425.0], [44.6, 1427.0], [44.7, 1429.0], [44.8, 1431.0], [44.9, 1433.0], [45.0, 1435.0], [45.1, 1437.0], [45.2, 1440.0], [45.3, 1442.0], [45.4, 1444.0], [45.5, 1446.0], [45.6, 1448.0], [45.7, 1450.0], [45.8, 1452.0], [45.9, 1454.0], [46.0, 1457.0], [46.1, 1460.0], [46.2, 1461.0], [46.3, 1463.0], [46.4, 1466.0], [46.5, 1468.0], [46.6, 1470.0], [46.7, 1472.0], [46.8, 1474.0], [46.9, 1475.0], [47.0, 1476.0], [47.1, 1477.0], [47.2, 1479.0], [47.3, 1482.0], [47.4, 1484.0], [47.5, 1486.0], [47.6, 1489.0], [47.7, 1492.0], [47.8, 1494.0], [47.9, 1496.0], [48.0, 1500.0], [48.1, 1502.0], [48.2, 1505.0], [48.3, 1507.0], [48.4, 1509.0], [48.5, 1510.0], [48.6, 1514.0], [48.7, 1515.0], [48.8, 1517.0], [48.9, 1519.0], [49.0, 1521.0], [49.1, 1523.0], [49.2, 1524.0], [49.3, 1527.0], [49.4, 1530.0], [49.5, 1532.0], [49.6, 1534.0], [49.7, 1536.0], [49.8, 1538.0], [49.9, 1540.0], [50.0, 1542.0], [50.1, 1547.0], [50.2, 1548.0], [50.3, 1550.0], [50.4, 1552.0], [50.5, 1554.0], [50.6, 1558.0], [50.7, 1559.0], [50.8, 1561.0], [50.9, 1566.0], [51.0, 1569.0], [51.1, 1570.0], [51.2, 1572.0], [51.3, 1575.0], [51.4, 1577.0], [51.5, 1580.0], [51.6, 1582.0], [51.7, 1585.0], [51.8, 1586.0], [51.9, 1588.0], [52.0, 1590.0], [52.1, 1593.0], [52.2, 1595.0], [52.3, 1598.0], [52.4, 1599.0], [52.5, 1601.0], [52.6, 1605.0], [52.7, 1608.0], [52.8, 1611.0], [52.9, 1613.0], [53.0, 1615.0], [53.1, 1618.0], [53.2, 1620.0], [53.3, 1623.0], [53.4, 1626.0], [53.5, 1628.0], [53.6, 1631.0], [53.7, 1634.0], [53.8, 1637.0], [53.9, 1638.0], [54.0, 1641.0], [54.1, 1643.0], [54.2, 1646.0], [54.3, 1648.0], [54.4, 1650.0], [54.5, 1652.0], [54.6, 1654.0], [54.7, 1657.0], [54.8, 1659.0], [54.9, 1661.0], [55.0, 1662.0], [55.1, 1664.0], [55.2, 1666.0], [55.3, 1668.0], [55.4, 1671.0], [55.5, 1674.0], [55.6, 1677.0], [55.7, 1678.0], [55.8, 1680.0], [55.9, 1683.0], [56.0, 1686.0], [56.1, 1690.0], [56.2, 1694.0], [56.3, 1697.0], [56.4, 1701.0], [56.5, 1705.0], [56.6, 1709.0], [56.7, 1711.0], [56.8, 1713.0], [56.9, 1716.0], [57.0, 1718.0], [57.1, 1719.0], [57.2, 1722.0], [57.3, 1725.0], [57.4, 1728.0], [57.5, 1730.0], [57.6, 1734.0], [57.7, 1736.0], [57.8, 1739.0], [57.9, 1743.0], [58.0, 1745.0], [58.1, 1747.0], [58.2, 1749.0], [58.3, 1753.0], [58.4, 1756.0], [58.5, 1759.0], [58.6, 1763.0], [58.7, 1766.0], [58.8, 1768.0], [58.9, 1772.0], [59.0, 1774.0], [59.1, 1777.0], [59.2, 1781.0], [59.3, 1785.0], [59.4, 1788.0], [59.5, 1790.0], [59.6, 1793.0], [59.7, 1794.0], [59.8, 1797.0], [59.9, 1800.0], [60.0, 1804.0], [60.1, 1808.0], [60.2, 1810.0], [60.3, 1814.0], [60.4, 1817.0], [60.5, 1819.0], [60.6, 1821.0], [60.7, 1824.0], [60.8, 1826.0], [60.9, 1830.0], [61.0, 1832.0], [61.1, 1835.0], [61.2, 1837.0], [61.3, 1840.0], [61.4, 1842.0], [61.5, 1845.0], [61.6, 1847.0], [61.7, 1851.0], [61.8, 1853.0], [61.9, 1856.0], [62.0, 1859.0], [62.1, 1863.0], [62.2, 1866.0], [62.3, 1869.0], [62.4, 1872.0], [62.5, 1874.0], [62.6, 1877.0], [62.7, 1878.0], [62.8, 1880.0], [62.9, 1883.0], [63.0, 1885.0], [63.1, 1888.0], [63.2, 1891.0], [63.3, 1893.0], [63.4, 1896.0], [63.5, 1899.0], [63.6, 1901.0], [63.7, 1906.0], [63.8, 1909.0], [63.9, 1911.0], [64.0, 1914.0], [64.1, 1916.0], [64.2, 1920.0], [64.3, 1924.0], [64.4, 1929.0], [64.5, 1934.0], [64.6, 1937.0], [64.7, 1939.0], [64.8, 1942.0], [64.9, 1947.0], [65.0, 1951.0], [65.1, 1953.0], [65.2, 1956.0], [65.3, 1962.0], [65.4, 1966.0], [65.5, 1971.0], [65.6, 1973.0], [65.7, 1975.0], [65.8, 1978.0], [65.9, 1982.0], [66.0, 1985.0], [66.1, 1989.0], [66.2, 1990.0], [66.3, 1993.0], [66.4, 1996.0], [66.5, 2000.0], [66.6, 2001.0], [66.7, 2004.0], [66.8, 2006.0], [66.9, 2008.0], [67.0, 2010.0], [67.1, 2013.0], [67.2, 2017.0], [67.3, 2019.0], [67.4, 2026.0], [67.5, 2031.0], [67.6, 2034.0], [67.7, 2037.0], [67.8, 2040.0], [67.9, 2043.0], [68.0, 2048.0], [68.1, 2051.0], [68.2, 2054.0], [68.3, 2060.0], [68.4, 2063.0], [68.5, 2068.0], [68.6, 2072.0], [68.7, 2078.0], [68.8, 2081.0], [68.9, 2083.0], [69.0, 2086.0], [69.1, 2089.0], [69.2, 2092.0], [69.3, 2094.0], [69.4, 2097.0], [69.5, 2101.0], [69.6, 2104.0], [69.7, 2108.0], [69.8, 2112.0], [69.9, 2117.0], [70.0, 2120.0], [70.1, 2124.0], [70.2, 2126.0], [70.3, 2130.0], [70.4, 2134.0], [70.5, 2139.0], [70.6, 2142.0], [70.7, 2145.0], [70.8, 2148.0], [70.9, 2153.0], [71.0, 2155.0], [71.1, 2158.0], [71.2, 2161.0], [71.3, 2164.0], [71.4, 2166.0], [71.5, 2172.0], [71.6, 2175.0], [71.7, 2179.0], [71.8, 2182.0], [71.9, 2186.0], [72.0, 2189.0], [72.1, 2194.0], [72.2, 2200.0], [72.3, 2205.0], [72.4, 2209.0], [72.5, 2214.0], [72.6, 2217.0], [72.7, 2220.0], [72.8, 2222.0], [72.9, 2225.0], [73.0, 2228.0], [73.1, 2233.0], [73.2, 2237.0], [73.3, 2241.0], [73.4, 2246.0], [73.5, 2251.0], [73.6, 2255.0], [73.7, 2259.0], [73.8, 2264.0], [73.9, 2269.0], [74.0, 2275.0], [74.1, 2277.0], [74.2, 2280.0], [74.3, 2283.0], [74.4, 2289.0], [74.5, 2293.0], [74.6, 2299.0], [74.7, 2302.0], [74.8, 2305.0], [74.9, 2308.0], [75.0, 2312.0], [75.1, 2317.0], [75.2, 2322.0], [75.3, 2325.0], [75.4, 2330.0], [75.5, 2334.0], [75.6, 2337.0], [75.7, 2340.0], [75.8, 2346.0], [75.9, 2352.0], [76.0, 2357.0], [76.1, 2363.0], [76.2, 2368.0], [76.3, 2370.0], [76.4, 2375.0], [76.5, 2381.0], [76.6, 2385.0], [76.7, 2387.0], [76.8, 2391.0], [76.9, 2397.0], [77.0, 2402.0], [77.1, 2405.0], [77.2, 2412.0], [77.3, 2417.0], [77.4, 2421.0], [77.5, 2426.0], [77.6, 2429.0], [77.7, 2433.0], [77.8, 2438.0], [77.9, 2443.0], [78.0, 2448.0], [78.1, 2452.0], [78.2, 2455.0], [78.3, 2459.0], [78.4, 2465.0], [78.5, 2469.0], [78.6, 2471.0], [78.7, 2474.0], [78.8, 2480.0], [78.9, 2485.0], [79.0, 2488.0], [79.1, 2492.0], [79.2, 2495.0], [79.3, 2501.0], [79.4, 2505.0], [79.5, 2510.0], [79.6, 2515.0], [79.7, 2520.0], [79.8, 2526.0], [79.9, 2532.0], [80.0, 2537.0], [80.1, 2542.0], [80.2, 2548.0], [80.3, 2551.0], [80.4, 2554.0], [80.5, 2559.0], [80.6, 2564.0], [80.7, 2568.0], [80.8, 2573.0], [80.9, 2579.0], [81.0, 2585.0], [81.1, 2588.0], [81.2, 2598.0], [81.3, 2603.0], [81.4, 2607.0], [81.5, 2611.0], [81.6, 2618.0], [81.7, 2623.0], [81.8, 2628.0], [81.9, 2634.0], [82.0, 2637.0], [82.1, 2643.0], [82.2, 2647.0], [82.3, 2650.0], [82.4, 2656.0], [82.5, 2662.0], [82.6, 2667.0], [82.7, 2674.0], [82.8, 2681.0], [82.9, 2687.0], [83.0, 2693.0], [83.1, 2699.0], [83.2, 2703.0], [83.3, 2708.0], [83.4, 2714.0], [83.5, 2719.0], [83.6, 2729.0], [83.7, 2735.0], [83.8, 2740.0], [83.9, 2744.0], [84.0, 2752.0], [84.1, 2758.0], [84.2, 2764.0], [84.3, 2768.0], [84.4, 2776.0], [84.5, 2784.0], [84.6, 2793.0], [84.7, 2800.0], [84.8, 2805.0], [84.9, 2810.0], [85.0, 2814.0], [85.1, 2822.0], [85.2, 2829.0], [85.3, 2836.0], [85.4, 2845.0], [85.5, 2850.0], [85.6, 2856.0], [85.7, 2862.0], [85.8, 2867.0], [85.9, 2872.0], [86.0, 2878.0], [86.1, 2885.0], [86.2, 2892.0], [86.3, 2903.0], [86.4, 2910.0], [86.5, 2918.0], [86.6, 2924.0], [86.7, 2927.0], [86.8, 2935.0], [86.9, 2943.0], [87.0, 2951.0], [87.1, 2958.0], [87.2, 2968.0], [87.3, 2978.0], [87.4, 2986.0], [87.5, 2995.0], [87.6, 2999.0], [87.7, 3005.0], [87.8, 3015.0], [87.9, 3026.0], [88.0, 3035.0], [88.1, 3042.0], [88.2, 3052.0], [88.3, 3061.0], [88.4, 3070.0], [88.5, 3079.0], [88.6, 3086.0], [88.7, 3093.0], [88.8, 3104.0], [88.9, 3114.0], [89.0, 3124.0], [89.1, 3130.0], [89.2, 3138.0], [89.3, 3150.0], [89.4, 3159.0], [89.5, 3168.0], [89.6, 3178.0], [89.7, 3185.0], [89.8, 3199.0], [89.9, 3208.0], [90.0, 3218.0], [90.1, 3227.0], [90.2, 3240.0], [90.3, 3252.0], [90.4, 3268.0], [90.5, 3279.0], [90.6, 3289.0], [90.7, 3299.0], [90.8, 3307.0], [90.9, 3314.0], [91.0, 3327.0], [91.1, 3342.0], [91.2, 3351.0], [91.3, 3360.0], [91.4, 3372.0], [91.5, 3384.0], [91.6, 3391.0], [91.7, 3398.0], [91.8, 3416.0], [91.9, 3425.0], [92.0, 3434.0], [92.1, 3447.0], [92.2, 3465.0], [92.3, 3479.0], [92.4, 3489.0], [92.5, 3508.0], [92.6, 3519.0], [92.7, 3534.0], [92.8, 3543.0], [92.9, 3554.0], [93.0, 3566.0], [93.1, 3587.0], [93.2, 3597.0], [93.3, 3615.0], [93.4, 3636.0], [93.5, 3654.0], [93.6, 3672.0], [93.7, 3687.0], [93.8, 3698.0], [93.9, 3718.0], [94.0, 3724.0], [94.1, 3739.0], [94.2, 3759.0], [94.3, 3772.0], [94.4, 3788.0], [94.5, 3807.0], [94.6, 3828.0], [94.7, 3844.0], [94.8, 3872.0], [94.9, 3892.0], [95.0, 3910.0], [95.1, 3930.0], [95.2, 3944.0], [95.3, 3961.0], [95.4, 3979.0], [95.5, 3996.0], [95.6, 4008.0], [95.7, 4029.0], [95.8, 4063.0], [95.9, 4087.0], [96.0, 4116.0], [96.1, 4136.0], [96.2, 4169.0], [96.3, 4209.0], [96.4, 4224.0], [96.5, 4249.0], [96.6, 4272.0], [96.7, 4282.0], [96.8, 4311.0], [96.9, 4333.0], [97.0, 4364.0], [97.1, 4382.0], [97.2, 4423.0], [97.3, 4455.0], [97.4, 4492.0], [97.5, 4519.0], [97.6, 4564.0], [97.7, 4634.0], [97.8, 4701.0], [97.9, 4750.0], [98.0, 4814.0], [98.1, 4875.0], [98.2, 4933.0], [98.3, 5030.0], [98.4, 5094.0], [98.5, 5120.0], [98.6, 5185.0], [98.7, 5227.0], [98.8, 5268.0], [98.9, 5335.0], [99.0, 5426.0], [99.1, 5557.0], [99.2, 5644.0], [99.3, 5786.0], [99.4, 5877.0], [99.5, 6023.0], [99.6, 6330.0], [99.7, 6604.0], [99.8, 7197.0], [99.9, 7688.0], [100.0, 10963.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 28.0], [0.1, 29.0], [0.2, 32.0], [0.3, 34.0], [0.4, 35.0], [0.5, 36.0], [0.6, 36.0], [0.7, 36.0], [0.8, 37.0], [0.9, 37.0], [1.0, 37.0], [1.1, 37.0], [1.2, 37.0], [1.3, 37.0], [1.4, 37.0], [1.5, 37.0], [1.6, 37.0], [1.7, 37.0], [1.8, 38.0], [1.9, 38.0], [2.0, 38.0], [2.1, 38.0], [2.2, 38.0], [2.3, 38.0], [2.4, 38.0], [2.5, 38.0], [2.6, 38.0], [2.7, 38.0], [2.8, 38.0], [2.9, 38.0], [3.0, 38.0], [3.1, 38.0], [3.2, 38.0], [3.3, 38.0], [3.4, 38.0], [3.5, 38.0], [3.6, 39.0], [3.7, 39.0], [3.8, 39.0], [3.9, 39.0], [4.0, 39.0], [4.1, 39.0], [4.2, 39.0], [4.3, 39.0], [4.4, 39.0], [4.5, 39.0], [4.6, 39.0], [4.7, 39.0], [4.8, 39.0], [4.9, 39.0], [5.0, 39.0], [5.1, 39.0], [5.2, 39.0], [5.3, 39.0], [5.4, 39.0], [5.5, 39.0], [5.6, 39.0], [5.7, 39.0], [5.8, 39.0], [5.9, 39.0], [6.0, 39.0], [6.1, 39.0], [6.2, 39.0], [6.3, 39.0], [6.4, 39.0], [6.5, 39.0], [6.6, 39.0], [6.7, 40.0], [6.8, 40.0], [6.9, 40.0], [7.0, 40.0], [7.1, 40.0], [7.2, 40.0], [7.3, 40.0], [7.4, 40.0], [7.5, 40.0], [7.6, 40.0], [7.7, 40.0], [7.8, 40.0], [7.9, 40.0], [8.0, 40.0], [8.1, 40.0], [8.2, 40.0], [8.3, 40.0], [8.4, 40.0], [8.5, 40.0], [8.6, 40.0], [8.7, 40.0], [8.8, 40.0], [8.9, 40.0], [9.0, 40.0], [9.1, 40.0], [9.2, 40.0], [9.3, 40.0], [9.4, 40.0], [9.5, 40.0], [9.6, 40.0], [9.7, 40.0], [9.8, 40.0], [9.9, 40.0], [10.0, 40.0], [10.1, 40.0], [10.2, 40.0], [10.3, 40.0], [10.4, 40.0], [10.5, 40.0], [10.6, 40.0], [10.7, 40.0], [10.8, 40.0], [10.9, 40.0], [11.0, 40.0], [11.1, 41.0], [11.2, 41.0], [11.3, 41.0], [11.4, 41.0], [11.5, 41.0], [11.6, 41.0], [11.7, 41.0], [11.8, 41.0], [11.9, 41.0], [12.0, 41.0], [12.1, 41.0], [12.2, 41.0], [12.3, 41.0], [12.4, 41.0], [12.5, 41.0], [12.6, 41.0], [12.7, 41.0], [12.8, 41.0], [12.9, 41.0], [13.0, 41.0], [13.1, 41.0], [13.2, 41.0], [13.3, 41.0], [13.4, 41.0], [13.5, 41.0], [13.6, 41.0], [13.7, 41.0], [13.8, 41.0], [13.9, 41.0], [14.0, 41.0], [14.1, 41.0], [14.2, 41.0], [14.3, 41.0], [14.4, 41.0], [14.5, 41.0], [14.6, 41.0], [14.7, 41.0], [14.8, 41.0], [14.9, 41.0], [15.0, 41.0], [15.1, 41.0], [15.2, 41.0], [15.3, 41.0], [15.4, 41.0], [15.5, 41.0], [15.6, 42.0], [15.7, 42.0], [15.8, 42.0], [15.9, 42.0], [16.0, 42.0], [16.1, 42.0], [16.2, 42.0], [16.3, 42.0], [16.4, 42.0], [16.5, 42.0], [16.6, 42.0], [16.7, 42.0], [16.8, 42.0], [16.9, 42.0], [17.0, 42.0], [17.1, 42.0], [17.2, 42.0], [17.3, 42.0], [17.4, 42.0], [17.5, 42.0], [17.6, 42.0], [17.7, 42.0], [17.8, 42.0], [17.9, 42.0], [18.0, 42.0], [18.1, 42.0], [18.2, 42.0], [18.3, 42.0], [18.4, 42.0], [18.5, 42.0], [18.6, 42.0], [18.7, 42.0], [18.8, 42.0], [18.9, 42.0], [19.0, 42.0], [19.1, 42.0], [19.2, 42.0], [19.3, 42.0], [19.4, 42.0], [19.5, 42.0], [19.6, 42.0], [19.7, 42.0], [19.8, 42.0], [19.9, 42.0], [20.0, 42.0], [20.1, 42.0], [20.2, 42.0], [20.3, 42.0], [20.4, 42.0], [20.5, 42.0], [20.6, 43.0], [20.7, 43.0], [20.8, 43.0], [20.9, 43.0], [21.0, 43.0], [21.1, 43.0], [21.2, 43.0], [21.3, 43.0], [21.4, 43.0], [21.5, 43.0], [21.6, 43.0], [21.7, 43.0], [21.8, 43.0], [21.9, 43.0], [22.0, 43.0], [22.1, 43.0], [22.2, 43.0], [22.3, 43.0], [22.4, 43.0], [22.5, 43.0], [22.6, 43.0], [22.7, 43.0], [22.8, 43.0], [22.9, 43.0], [23.0, 43.0], [23.1, 43.0], [23.2, 43.0], [23.3, 43.0], [23.4, 43.0], [23.5, 43.0], [23.6, 43.0], [23.7, 43.0], [23.8, 43.0], [23.9, 43.0], [24.0, 43.0], [24.1, 43.0], [24.2, 43.0], [24.3, 43.0], [24.4, 43.0], [24.5, 43.0], [24.6, 43.0], [24.7, 43.0], [24.8, 43.0], [24.9, 43.0], [25.0, 43.0], [25.1, 43.0], [25.2, 43.0], [25.3, 43.0], [25.4, 44.0], [25.5, 44.0], [25.6, 44.0], [25.7, 44.0], [25.8, 44.0], [25.9, 44.0], [26.0, 44.0], [26.1, 44.0], [26.2, 44.0], [26.3, 44.0], [26.4, 44.0], [26.5, 44.0], [26.6, 44.0], [26.7, 44.0], [26.8, 44.0], [26.9, 44.0], [27.0, 44.0], [27.1, 44.0], [27.2, 44.0], [27.3, 44.0], [27.4, 44.0], [27.5, 44.0], [27.6, 44.0], [27.7, 44.0], [27.8, 44.0], [27.9, 44.0], [28.0, 44.0], [28.1, 44.0], [28.2, 44.0], [28.3, 44.0], [28.4, 44.0], [28.5, 44.0], [28.6, 44.0], [28.7, 44.0], [28.8, 44.0], [28.9, 44.0], [29.0, 44.0], [29.1, 44.0], [29.2, 44.0], [29.3, 44.0], [29.4, 44.0], [29.5, 44.0], [29.6, 44.0], [29.7, 44.0], [29.8, 44.0], [29.9, 44.0], [30.0, 44.0], [30.1, 44.0], [30.2, 44.0], [30.3, 44.0], [30.4, 45.0], [30.5, 45.0], [30.6, 45.0], [30.7, 45.0], [30.8, 45.0], [30.9, 45.0], [31.0, 45.0], [31.1, 45.0], [31.2, 45.0], [31.3, 45.0], [31.4, 45.0], [31.5, 45.0], [31.6, 45.0], [31.7, 45.0], [31.8, 45.0], [31.9, 45.0], [32.0, 45.0], [32.1, 45.0], [32.2, 45.0], [32.3, 45.0], [32.4, 45.0], [32.5, 45.0], [32.6, 45.0], [32.7, 45.0], [32.8, 45.0], [32.9, 45.0], [33.0, 45.0], [33.1, 45.0], [33.2, 45.0], [33.3, 45.0], [33.4, 45.0], [33.5, 45.0], [33.6, 45.0], [33.7, 45.0], [33.8, 45.0], [33.9, 45.0], [34.0, 45.0], [34.1, 45.0], [34.2, 45.0], [34.3, 45.0], [34.4, 45.0], [34.5, 45.0], [34.6, 45.0], [34.7, 45.0], [34.8, 45.0], [34.9, 45.0], [35.0, 46.0], [35.1, 46.0], [35.2, 46.0], [35.3, 46.0], [35.4, 46.0], [35.5, 46.0], [35.6, 46.0], [35.7, 46.0], [35.8, 46.0], [35.9, 46.0], [36.0, 46.0], [36.1, 46.0], [36.2, 46.0], [36.3, 46.0], [36.4, 46.0], [36.5, 46.0], [36.6, 46.0], [36.7, 46.0], [36.8, 46.0], [36.9, 46.0], [37.0, 46.0], [37.1, 46.0], [37.2, 46.0], [37.3, 46.0], [37.4, 46.0], [37.5, 46.0], [37.6, 46.0], [37.7, 46.0], [37.8, 46.0], [37.9, 46.0], [38.0, 46.0], [38.1, 46.0], [38.2, 46.0], [38.3, 46.0], [38.4, 46.0], [38.5, 46.0], [38.6, 46.0], [38.7, 46.0], [38.8, 46.0], [38.9, 46.0], [39.0, 46.0], [39.1, 46.0], [39.2, 46.0], [39.3, 46.0], [39.4, 46.0], [39.5, 47.0], [39.6, 47.0], [39.7, 47.0], [39.8, 47.0], [39.9, 47.0], [40.0, 47.0], [40.1, 47.0], [40.2, 47.0], [40.3, 47.0], [40.4, 47.0], [40.5, 47.0], [40.6, 47.0], [40.7, 47.0], [40.8, 47.0], [40.9, 47.0], [41.0, 47.0], [41.1, 47.0], [41.2, 47.0], [41.3, 47.0], [41.4, 47.0], [41.5, 47.0], [41.6, 47.0], [41.7, 47.0], [41.8, 47.0], [41.9, 47.0], [42.0, 47.0], [42.1, 47.0], [42.2, 47.0], [42.3, 47.0], [42.4, 47.0], [42.5, 47.0], [42.6, 47.0], [42.7, 47.0], [42.8, 47.0], [42.9, 47.0], [43.0, 47.0], [43.1, 47.0], [43.2, 47.0], [43.3, 47.0], [43.4, 47.0], [43.5, 47.0], [43.6, 47.0], [43.7, 48.0], [43.8, 48.0], [43.9, 48.0], [44.0, 48.0], [44.1, 48.0], [44.2, 48.0], [44.3, 48.0], [44.4, 48.0], [44.5, 48.0], [44.6, 48.0], [44.7, 48.0], [44.8, 48.0], [44.9, 48.0], [45.0, 48.0], [45.1, 48.0], [45.2, 48.0], [45.3, 48.0], [45.4, 48.0], [45.5, 48.0], [45.6, 48.0], [45.7, 48.0], [45.8, 48.0], [45.9, 48.0], [46.0, 48.0], [46.1, 48.0], [46.2, 48.0], [46.3, 48.0], [46.4, 48.0], [46.5, 48.0], [46.6, 48.0], [46.7, 48.0], [46.8, 48.0], [46.9, 48.0], [47.0, 48.0], [47.1, 48.0], [47.2, 48.0], [47.3, 48.0], [47.4, 48.0], [47.5, 48.0], [47.6, 48.0], [47.7, 48.0], [47.8, 48.0], [47.9, 48.0], [48.0, 48.0], [48.1, 48.0], [48.2, 48.0], [48.3, 49.0], [48.4, 49.0], [48.5, 49.0], [48.6, 49.0], [48.7, 49.0], [48.8, 49.0], [48.9, 49.0], [49.0, 49.0], [49.1, 49.0], [49.2, 49.0], [49.3, 49.0], [49.4, 49.0], [49.5, 49.0], [49.6, 49.0], [49.7, 49.0], [49.8, 49.0], [49.9, 49.0], [50.0, 49.0], [50.1, 49.0], [50.2, 49.0], [50.3, 49.0], [50.4, 49.0], [50.5, 49.0], [50.6, 49.0], [50.7, 49.0], [50.8, 49.0], [50.9, 49.0], [51.0, 49.0], [51.1, 49.0], [51.2, 49.0], [51.3, 49.0], [51.4, 49.0], [51.5, 49.0], [51.6, 49.0], [51.7, 49.0], [51.8, 49.0], [51.9, 49.0], [52.0, 49.0], [52.1, 49.0], [52.2, 49.0], [52.3, 49.0], [52.4, 49.0], [52.5, 49.0], [52.6, 49.0], [52.7, 49.0], [52.8, 49.0], [52.9, 49.0], [53.0, 49.0], [53.1, 49.0], [53.2, 49.0], [53.3, 49.0], [53.4, 49.0], [53.5, 49.0], [53.6, 49.0], [53.7, 49.0], [53.8, 49.0], [53.9, 50.0], [54.0, 50.0], [54.1, 50.0], [54.2, 50.0], [54.3, 50.0], [54.4, 50.0], [54.5, 50.0], [54.6, 50.0], [54.7, 50.0], [54.8, 50.0], [54.9, 50.0], [55.0, 50.0], [55.1, 50.0], [55.2, 50.0], [55.3, 50.0], [55.4, 50.0], [55.5, 50.0], [55.6, 50.0], [55.7, 50.0], [55.8, 50.0], [55.9, 50.0], [56.0, 50.0], [56.1, 50.0], [56.2, 50.0], [56.3, 50.0], [56.4, 50.0], [56.5, 50.0], [56.6, 50.0], [56.7, 50.0], [56.8, 50.0], [56.9, 50.0], [57.0, 50.0], [57.1, 50.0], [57.2, 50.0], [57.3, 50.0], [57.4, 50.0], [57.5, 50.0], [57.6, 50.0], [57.7, 50.0], [57.8, 50.0], [57.9, 50.0], [58.0, 50.0], [58.1, 50.0], [58.2, 50.0], [58.3, 50.0], [58.4, 50.0], [58.5, 50.0], [58.6, 50.0], [58.7, 50.0], [58.8, 50.0], [58.9, 50.0], [59.0, 50.0], [59.1, 50.0], [59.2, 50.0], [59.3, 50.0], [59.4, 50.0], [59.5, 50.0], [59.6, 50.0], [59.7, 50.0], [59.8, 50.0], [59.9, 50.0], [60.0, 50.0], [60.1, 50.0], [60.2, 50.0], [60.3, 50.0], [60.4, 50.0], [60.5, 50.0], [60.6, 50.0], [60.7, 50.0], [60.8, 50.0], [60.9, 50.0], [61.0, 50.0], [61.1, 50.0], [61.2, 50.0], [61.3, 50.0], [61.4, 51.0], [61.5, 51.0], [61.6, 51.0], [61.7, 51.0], [61.8, 51.0], [61.9, 51.0], [62.0, 51.0], [62.1, 51.0], [62.2, 51.0], [62.3, 51.0], [62.4, 51.0], [62.5, 51.0], [62.6, 51.0], [62.7, 51.0], [62.8, 51.0], [62.9, 51.0], [63.0, 51.0], [63.1, 51.0], [63.2, 51.0], [63.3, 51.0], [63.4, 51.0], [63.5, 51.0], [63.6, 51.0], [63.7, 51.0], [63.8, 51.0], [63.9, 51.0], [64.0, 51.0], [64.1, 51.0], [64.2, 51.0], [64.3, 51.0], [64.4, 51.0], [64.5, 51.0], [64.6, 51.0], [64.7, 51.0], [64.8, 51.0], [64.9, 51.0], [65.0, 51.0], [65.1, 51.0], [65.2, 51.0], [65.3, 51.0], [65.4, 51.0], [65.5, 51.0], [65.6, 51.0], [65.7, 51.0], [65.8, 51.0], [65.9, 51.0], [66.0, 51.0], [66.1, 51.0], [66.2, 51.0], [66.3, 51.0], [66.4, 51.0], [66.5, 51.0], [66.6, 51.0], [66.7, 51.0], [66.8, 51.0], [66.9, 51.0], [67.0, 51.0], [67.1, 51.0], [67.2, 51.0], [67.3, 51.0], [67.4, 51.0], [67.5, 51.0], [67.6, 51.0], [67.7, 51.0], [67.8, 51.0], [67.9, 51.0], [68.0, 51.0], [68.1, 51.0], [68.2, 51.0], [68.3, 52.0], [68.4, 52.0], [68.5, 52.0], [68.6, 52.0], [68.7, 52.0], [68.8, 52.0], [68.9, 52.0], [69.0, 52.0], [69.1, 52.0], [69.2, 52.0], [69.3, 52.0], [69.4, 52.0], [69.5, 52.0], [69.6, 52.0], [69.7, 52.0], [69.8, 52.0], [69.9, 52.0], [70.0, 52.0], [70.1, 52.0], [70.2, 52.0], [70.3, 52.0], [70.4, 52.0], [70.5, 52.0], [70.6, 52.0], [70.7, 52.0], [70.8, 52.0], [70.9, 52.0], [71.0, 52.0], [71.1, 52.0], [71.2, 52.0], [71.3, 52.0], [71.4, 52.0], [71.5, 52.0], [71.6, 52.0], [71.7, 52.0], [71.8, 52.0], [71.9, 52.0], [72.0, 52.0], [72.1, 52.0], [72.2, 52.0], [72.3, 52.0], [72.4, 52.0], [72.5, 52.0], [72.6, 52.0], [72.7, 52.0], [72.8, 52.0], [72.9, 52.0], [73.0, 52.0], [73.1, 52.0], [73.2, 52.0], [73.3, 52.0], [73.4, 53.0], [73.5, 53.0], [73.6, 53.0], [73.7, 53.0], [73.8, 53.0], [73.9, 53.0], [74.0, 53.0], [74.1, 53.0], [74.2, 53.0], [74.3, 53.0], [74.4, 53.0], [74.5, 53.0], [74.6, 53.0], [74.7, 53.0], [74.8, 53.0], [74.9, 53.0], [75.0, 53.0], [75.1, 53.0], [75.2, 53.0], [75.3, 53.0], [75.4, 53.0], [75.5, 53.0], [75.6, 53.0], [75.7, 53.0], [75.8, 53.0], [75.9, 53.0], [76.0, 53.0], [76.1, 53.0], [76.2, 53.0], [76.3, 53.0], [76.4, 53.0], [76.5, 53.0], [76.6, 53.0], [76.7, 53.0], [76.8, 53.0], [76.9, 53.0], [77.0, 53.0], [77.1, 53.0], [77.2, 53.0], [77.3, 53.0], [77.4, 53.0], [77.5, 53.0], [77.6, 53.0], [77.7, 54.0], [77.8, 54.0], [77.9, 54.0], [78.0, 54.0], [78.1, 54.0], [78.2, 54.0], [78.3, 54.0], [78.4, 54.0], [78.5, 54.0], [78.6, 54.0], [78.7, 54.0], [78.8, 54.0], [78.9, 54.0], [79.0, 54.0], [79.1, 54.0], [79.2, 54.0], [79.3, 54.0], [79.4, 54.0], [79.5, 54.0], [79.6, 54.0], [79.7, 54.0], [79.8, 54.0], [79.9, 54.0], [80.0, 54.0], [80.1, 54.0], [80.2, 54.0], [80.3, 54.0], [80.4, 54.0], [80.5, 54.0], [80.6, 54.0], [80.7, 54.0], [80.8, 54.0], [80.9, 54.0], [81.0, 55.0], [81.1, 55.0], [81.2, 55.0], [81.3, 55.0], [81.4, 55.0], [81.5, 55.0], [81.6, 55.0], [81.7, 55.0], [81.8, 55.0], [81.9, 55.0], [82.0, 55.0], [82.1, 55.0], [82.2, 55.0], [82.3, 55.0], [82.4, 55.0], [82.5, 55.0], [82.6, 55.0], [82.7, 55.0], [82.8, 55.0], [82.9, 55.0], [83.0, 55.0], [83.1, 55.0], [83.2, 55.0], [83.3, 55.0], [83.4, 55.0], [83.5, 56.0], [83.6, 56.0], [83.7, 56.0], [83.8, 56.0], [83.9, 56.0], [84.0, 56.0], [84.1, 56.0], [84.2, 56.0], [84.3, 56.0], [84.4, 56.0], [84.5, 56.0], [84.6, 56.0], [84.7, 56.0], [84.8, 56.0], [84.9, 56.0], [85.0, 56.0], [85.1, 56.0], [85.2, 56.0], [85.3, 56.0], [85.4, 56.0], [85.5, 57.0], [85.6, 57.0], [85.7, 57.0], [85.8, 57.0], [85.9, 57.0], [86.0, 57.0], [86.1, 57.0], [86.2, 57.0], [86.3, 57.0], [86.4, 57.0], [86.5, 57.0], [86.6, 57.0], [86.7, 58.0], [86.8, 58.0], [86.9, 58.0], [87.0, 58.0], [87.1, 58.0], [87.2, 58.0], [87.3, 58.0], [87.4, 58.0], [87.5, 58.0], [87.6, 58.0], [87.7, 59.0], [87.8, 59.0], [87.9, 59.0], [88.0, 59.0], [88.1, 59.0], [88.2, 59.0], [88.3, 59.0], [88.4, 59.0], [88.5, 59.0], [88.6, 60.0], [88.7, 60.0], [88.8, 60.0], [88.9, 60.0], [89.0, 60.0], [89.1, 60.0], [89.2, 60.0], [89.3, 60.0], [89.4, 60.0], [89.5, 61.0], [89.6, 61.0], [89.7, 61.0], [89.8, 61.0], [89.9, 61.0], [90.0, 61.0], [90.1, 62.0], [90.2, 62.0], [90.3, 62.0], [90.4, 62.0], [90.5, 62.0], [90.6, 62.0], [90.7, 63.0], [90.8, 63.0], [90.9, 63.0], [91.0, 63.0], [91.1, 63.0], [91.2, 63.0], [91.3, 64.0], [91.4, 64.0], [91.5, 64.0], [91.6, 64.0], [91.7, 64.0], [91.8, 64.0], [91.9, 65.0], [92.0, 65.0], [92.1, 65.0], [92.2, 65.0], [92.3, 66.0], [92.4, 66.0], [92.5, 66.0], [92.6, 66.0], [92.7, 66.0], [92.8, 67.0], [92.9, 67.0], [93.0, 67.0], [93.1, 67.0], [93.2, 68.0], [93.3, 68.0], [93.4, 68.0], [93.5, 69.0], [93.6, 69.0], [93.7, 69.0], [93.8, 70.0], [93.9, 70.0], [94.0, 70.0], [94.1, 70.0], [94.2, 71.0], [94.3, 71.0], [94.4, 71.0], [94.5, 71.0], [94.6, 72.0], [94.7, 72.0], [94.8, 72.0], [94.9, 73.0], [95.0, 73.0], [95.1, 73.0], [95.2, 74.0], [95.3, 74.0], [95.4, 75.0], [95.5, 75.0], [95.6, 75.0], [95.7, 76.0], [95.8, 76.0], [95.9, 76.0], [96.0, 77.0], [96.1, 77.0], [96.2, 78.0], [96.3, 78.0], [96.4, 78.0], [96.5, 79.0], [96.6, 79.0], [96.7, 80.0], [96.8, 81.0], [96.9, 82.0], [97.0, 82.0], [97.1, 83.0], [97.2, 84.0], [97.3, 85.0], [97.4, 85.0], [97.5, 86.0], [97.6, 87.0], [97.7, 88.0], [97.8, 89.0], [97.9, 90.0], [98.0, 91.0], [98.1, 93.0], [98.2, 96.0], [98.3, 99.0], [98.4, 102.0], [98.5, 105.0], [98.6, 109.0], [98.7, 114.0], [98.8, 120.0], [98.9, 126.0], [99.0, 137.0], [99.1, 155.0], [99.2, 208.0], [99.3, 317.0], [99.4, 553.0], [99.5, 845.0], [99.6, 1067.0], [99.7, 1639.0], [99.8, 2261.0], [99.9, 3585.0], [100.0, 4200.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 11796.0, "series": [{"data": [[600.0, 465.0], [700.0, 533.0], [800.0, 612.0], [900.0, 630.0], [1000.0, 599.0], [1100.0, 592.0], [1200.0, 632.0], [1300.0, 537.0], [1400.0, 569.0], [1500.0, 532.0], [1600.0, 473.0], [1700.0, 418.0], [1800.0, 443.0], [1900.0, 352.0], [2000.0, 357.0], [2100.0, 329.0], [2300.0, 276.0], [2200.0, 293.0], [2400.0, 281.0], [2500.0, 233.0], [2600.0, 230.0], [2800.0, 192.0], [2700.0, 183.0], [2900.0, 160.0], [3000.0, 140.0], [3100.0, 124.0], [3200.0, 108.0], [3300.0, 120.0], [3400.0, 87.0], [3500.0, 93.0], [3700.0, 81.0], [3600.0, 72.0], [3800.0, 55.0], [3900.0, 72.0], [4000.0, 47.0], [4100.0, 41.0], [4200.0, 60.0], [4300.0, 43.0], [4400.0, 36.0], [4500.0, 28.0], [4600.0, 16.0], [4800.0, 18.0], [4700.0, 23.0], [5000.0, 21.0], [4900.0, 15.0], [5100.0, 24.0], [5300.0, 16.0], [5200.0, 23.0], [5500.0, 11.0], [5400.0, 11.0], [5600.0, 10.0], [5700.0, 10.0], [5800.0, 11.0], [5900.0, 8.0], [6100.0, 7.0], [6000.0, 7.0], [6200.0, 1.0], [6300.0, 2.0], [6600.0, 5.0], [6500.0, 8.0], [6400.0, 2.0], [6800.0, 1.0], [6700.0, 1.0], [7100.0, 4.0], [7000.0, 2.0], [7200.0, 2.0], [7300.0, 1.0], [7400.0, 3.0], [7500.0, 4.0], [7600.0, 2.0], [7700.0, 3.0], [7800.0, 2.0], [7900.0, 1.0], [8000.0, 1.0], [8700.0, 1.0], [8400.0, 1.0], [8800.0, 1.0], [9300.0, 1.0], [10900.0, 1.0], [100.0, 4.0], [200.0, 21.0], [300.0, 59.0], [400.0, 194.0], [500.0, 313.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 11796.0], [600.0, 4.0], [700.0, 3.0], [800.0, 5.0], [900.0, 6.0], [1000.0, 4.0], [1100.0, 2.0], [1200.0, 3.0], [1300.0, 4.0], [1400.0, 1.0], [1500.0, 1.0], [1600.0, 3.0], [100.0, 107.0], [1700.0, 3.0], [1900.0, 2.0], [2000.0, 1.0], [2100.0, 1.0], [2200.0, 5.0], [2300.0, 1.0], [2400.0, 1.0], [2500.0, 2.0], [2700.0, 2.0], [2800.0, 1.0], [3300.0, 1.0], [200.0, 10.0], [3500.0, 3.0], [3700.0, 2.0], [3600.0, 2.0], [3800.0, 4.0], [4000.0, 1.0], [4200.0, 1.0], [4100.0, 1.0], [300.0, 9.0], [400.0, 4.0], [500.0, 4.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 10900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 12205.0, "series": [{"data": [[0.0, 12205.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 5520.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 6273.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 2.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 4.196969696969697, "minX": 1.74716544E12, "maxY": 24.0, "series": [{"data": [[1.74716586E12, 24.0], [1.74716616E12, 24.0], [1.74716622E12, 24.0], [1.74716556E12, 24.0], [1.7471661E12, 24.0], [1.7471664E12, 4.196969696969697], [1.74716544E12, 23.993517017828193], [1.7471655E12, 24.0], [1.7471658E12, 24.0], [1.74716634E12, 19.579314720812242], [1.74716568E12, 24.0], [1.74716574E12, 24.0], [1.74716604E12, 24.0], [1.74716562E12, 24.0], [1.74716592E12, 24.0], [1.74716598E12, 24.0], [1.74716628E12, 24.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7471664E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 29.0, "minX": 1.0, "maxY": 2310.0476190476193, "series": [{"data": [[8.0, 1679.0], [2.0, 337.0], [9.0, 314.0], [10.0, 671.5], [11.0, 875.1], [12.0, 883.7882352941176], [3.0, 653.8333333333334], [13.0, 1737.0], [14.0, 815.1199999999999], [15.0, 1020.1935483870968], [16.0, 1076.4285714285713], [4.0, 497.5], [1.0, 684.0], [17.0, 1234.0526315789475], [18.0, 1456.3333333333335], [19.0, 1413.3333333333333], [20.0, 1632.56], [5.0, 612.3333333333333], [21.0, 1602.4887218045114], [22.0, 1739.935483870968], [23.0, 2310.0476190476193], [24.0, 1832.8526902315866], [6.0, 439.77777777777777], [7.0, 662.25]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[23.65483333333335, 1807.1935833333296]], "isOverall": false, "label": "Create CSR-Aggregated", "isController": false}, {"data": [[8.0, 37.0], [2.0, 29.0], [9.0, 35.0], [10.0, 38.944444444444436], [11.0, 36.99999999999999], [12.0, 43.29411764705883], [3.0, 31.666666666666668], [13.0, 55.0], [14.0, 51.08333333333333], [15.0, 48.53333333333333], [16.0, 46.142857142857146], [4.0, 30.5], [1.0, 33.4], [17.0, 47.31578947368421], [18.0, 55.25], [19.0, 53.61538461538462], [20.0, 52.833333333333336], [5.0, 33.333333333333336], [21.0, 51.69924812030076], [22.0, 49.48275862068966], [23.0, 48.8095238095238], [24.0, 62.79667508051136], [6.0, 35.5], [7.0, 34.86666666666667]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}, {"data": [[23.655000000000012, 62.11224999999964]], "isOverall": false, "label": "HTTP Request - enroll-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 24.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 978.75, "minX": 1.74716544E12, "maxY": 131404.46666666667, "series": [{"data": [[1.74716586E12, 111143.5], [1.74716616E12, 105443.0], [1.74716622E12, 109774.43333333333], [1.74716556E12, 106198.98333333334], [1.7471661E12, 105841.71666666666], [1.7471664E12, 4858.85], [1.74716544E12, 90617.58333333333], [1.7471655E12, 126795.15], [1.7471658E12, 131404.46666666667], [1.74716634E12, 116045.23333333334], [1.74716568E12, 105272.13333333333], [1.74716574E12, 113667.81666666667], [1.74716604E12, 108427.73333333334], [1.74716562E12, 106786.86666666667], [1.74716592E12, 108554.58333333333], [1.74716598E12, 106303.58333333333], [1.74716628E12, 109795.75]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74716586E12, 22408.583333333332], [1.74716616E12, 21251.333333333332], [1.74716622E12, 22110.316666666666], [1.74716556E12, 21398.716666666667], [1.7471661E12, 21339.883333333335], [1.7471664E12, 978.75], [1.74716544E12, 18311.483333333334], [1.7471655E12, 25553.95], [1.7471658E12, 26475.366666666665], [1.74716634E12, 23387.633333333335], [1.74716568E12, 21219.916666666668], [1.74716574E12, 22912.966666666667], [1.74716604E12, 21842.866666666665], [1.74716562E12, 21516.583333333332], [1.74716592E12, 21873.083333333332], [1.74716598E12, 21427.933333333334], [1.74716628E12, 22140.633333333335]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7471664E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 33.09090909090909, "minX": 1.74716544E12, "maxY": 1981.9719887955173, "series": [{"data": [[1.74716586E12, 1846.8804780876492], [1.74716616E12, 1964.5237430167601], [1.74716622E12, 1875.647058823531], [1.74716556E12, 1895.6260387811633], [1.7471661E12, 1959.2608089260827], [1.7471664E12, 553.6363636363636], [1.74716544E12, 1469.7779578606155], [1.7471655E12, 1629.8222996515685], [1.7471658E12, 1578.4821029082796], [1.74716634E12, 1495.7093908629433], [1.74716568E12, 1981.9719887955173], [1.74716574E12, 1805.0609597924772], [1.74716604E12, 1900.023035230351], [1.74716562E12, 1924.0192837465556], [1.74716592E12, 1894.0176151761495], [1.74716598E12, 1950.9653259362005], [1.74716628E12, 1862.865410497981]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74716586E12, 51.90728476821192], [1.74716616E12, 51.91759776536314], [1.74716622E12, 51.059060402684594], [1.74716556E12, 82.85159500693477], [1.7471661E12, 53.283727399165535], [1.7471664E12, 33.09090909090909], [1.74716544E12, 242.8055105348462], [1.7471655E12, 47.52148664343787], [1.7471658E12, 46.265695067264616], [1.74716634E12, 49.269035532994984], [1.74716568E12, 51.15804195804194], [1.74716574E12, 48.92487046632123], [1.74716604E12, 52.50271739130434], [1.74716562E12, 51.22896551724142], [1.74716592E12, 48.68521031207595], [1.74716598E12, 50.666204986149516], [1.74716628E12, 51.465147453083134]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7471664E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74716544E12, "maxY": 242.76823338735815, "series": [{"data": [[1.74716586E12, 0.0], [1.74716616E12, 0.0], [1.74716622E12, 0.0], [1.74716556E12, 0.0], [1.7471661E12, 0.0], [1.7471664E12, 0.0], [1.74716544E12, 0.0], [1.7471655E12, 0.0], [1.7471658E12, 0.0], [1.74716634E12, 0.0], [1.74716568E12, 0.0], [1.74716574E12, 0.0], [1.74716604E12, 0.0], [1.74716562E12, 0.0], [1.74716592E12, 0.0], [1.74716598E12, 0.0], [1.74716628E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74716586E12, 51.89933774834441], [1.74716616E12, 51.914804469273754], [1.74716622E12, 51.05503355704697], [1.74716556E12, 82.84188626907073], [1.7471661E12, 53.276773296244784], [1.7471664E12, 33.06060606060607], [1.74716544E12, 242.76823338735815], [1.7471655E12, 47.499419279906995], [1.7471658E12, 46.253363228699534], [1.74716634E12, 49.26776649746198], [1.74716568E12, 51.149650349650294], [1.74716574E12, 48.91709844559588], [1.74716604E12, 52.499999999999986], [1.74716562E12, 51.219310344827605], [1.74716592E12, 48.67571234735417], [1.74716598E12, 50.65927977839333], [1.74716628E12, 51.4584450402145]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7471664E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74716544E12, "maxY": 17.179902755267456, "series": [{"data": [[1.74716586E12, 0.0], [1.74716616E12, 0.0], [1.74716622E12, 0.0], [1.74716556E12, 0.0], [1.7471661E12, 0.0], [1.7471664E12, 0.0], [1.74716544E12, 0.0], [1.7471655E12, 0.0], [1.7471658E12, 0.0], [1.74716634E12, 0.0], [1.74716568E12, 0.0], [1.74716574E12, 0.0], [1.74716604E12, 0.0], [1.74716562E12, 0.0], [1.74716592E12, 0.0], [1.74716598E12, 0.0], [1.74716628E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74716586E12, 0.15364238410596037], [1.74716616E12, 0.10195530726256975], [1.74716622E12, 0.11677852348993299], [1.74716556E12, 0.19556171983356452], [1.7471661E12, 0.13351877607788604], [1.7471664E12, 0.0], [1.74716544E12, 17.179902755267456], [1.7471655E12, 0.19047619047619074], [1.7471658E12, 0.11322869955156944], [1.74716634E12, 0.10406091370558375], [1.74716568E12, 0.18461538461538474], [1.74716574E12, 0.16321243523316087], [1.74716604E12, 0.13043478260869576], [1.74716562E12, 0.17379310344827606], [1.74716592E12, 0.12075983717774771], [1.74716598E12, 0.10664819944598346], [1.74716628E12, 0.13941018766756041]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7471664E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 28.0, "minX": 1.74716544E12, "maxY": 10963.0, "series": [{"data": [[1.74716586E12, 8079.0], [1.74716616E12, 9317.0], [1.74716622E12, 7449.0], [1.74716556E12, 7120.0], [1.7471661E12, 7995.0], [1.7471664E12, 1265.0], [1.74716544E12, 5912.0], [1.7471655E12, 6699.0], [1.7471658E12, 5925.0], [1.74716634E12, 7462.0], [1.74716568E12, 7868.0], [1.74716574E12, 10963.0], [1.74716604E12, 7255.0], [1.74716562E12, 7714.0], [1.74716592E12, 7152.0], [1.74716598E12, 8718.0], [1.74716628E12, 8892.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.74716586E12, 2516.3], [1.74716616E12, 2802.9000000000005], [1.74716622E12, 2575.2000000000025], [1.74716556E12, 2620.2000000000007], [1.7471661E12, 2721.9999999999995], [1.7471664E12, 769.6000000000004], [1.74716544E12, 2240.0000000000005], [1.7471655E12, 2279.7], [1.7471658E12, 2212.6], [1.74716634E12, 2066.2999999999993], [1.74716568E12, 2852.0], [1.74716574E12, 2473.6000000000004], [1.74716604E12, 2650.5], [1.74716562E12, 2754.7999999999993], [1.74716592E12, 2688.0], [1.74716598E12, 2716.6000000000013], [1.74716628E12, 2621.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.74716586E12, 4663.120000000003], [1.74716616E12, 5203.740000000002], [1.74716622E12, 5243.559999999999], [1.74716556E12, 4840.799999999998], [1.7471661E12, 5527.679999999996], [1.7471664E12, 1265.0], [1.74716544E12, 4129.79000000001], [1.7471655E12, 4114.62], [1.7471658E12, 4185.059999999992], [1.74716634E12, 4259.970000000001], [1.74716568E12, 5157.700000000004], [1.74716574E12, 4510.079999999989], [1.74716604E12, 5217.0], [1.74716562E12, 4926.76], [1.74716592E12, 4619.4400000000005], [1.74716598E12, 5193.36], [1.74716628E12, 4704.199999999989]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.74716586E12, 3281.1], [1.74716616E12, 3732.2999999999965], [1.74716622E12, 3250.7999999999984], [1.74716556E12, 3267.0], [1.7471661E12, 3518.5999999999995], [1.7471664E12, 867.75], [1.74716544E12, 2872.3999999999996], [1.7471655E12, 2885.649999999999], [1.7471658E12, 2734.95], [1.74716634E12, 2669.899999999999], [1.74716568E12, 3434.5], [1.74716574E12, 3202.9999999999977], [1.74716604E12, 3439.5], [1.74716562E12, 3524.3999999999996], [1.74716592E12, 3303.0000000000014], [1.74716598E12, 3448.8], [1.74716628E12, 3209.5]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.74716586E12, 36.0], [1.74716616E12, 32.0], [1.74716622E12, 37.0], [1.74716556E12, 35.0], [1.7471661E12, 34.0], [1.7471664E12, 28.0], [1.74716544E12, 36.0], [1.7471655E12, 37.0], [1.7471658E12, 36.0], [1.74716634E12, 29.0], [1.74716568E12, 36.0], [1.74716574E12, 36.0], [1.74716604E12, 36.0], [1.74716562E12, 36.0], [1.74716592E12, 35.0], [1.74716598E12, 35.0], [1.74716628E12, 36.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.74716586E12, 133.0], [1.74716616E12, 292.5], [1.74716622E12, 402.0], [1.74716556E12, 557.0], [1.7471661E12, 120.5], [1.7471664E12, 81.5], [1.74716544E12, 570.0], [1.7471655E12, 234.0], [1.7471658E12, 358.5], [1.74716634E12, 199.0], [1.74716568E12, 213.0], [1.74716574E12, 120.0], [1.74716604E12, 362.5], [1.74716562E12, 382.0], [1.74716592E12, 388.0], [1.74716598E12, 117.0], [1.74716628E12, 135.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7471664E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 68.0, "minX": 2.0, "maxY": 3947.0, "series": [{"data": [[32.0, 473.0], [33.0, 100.0], [2.0, 445.5], [35.0, 379.0], [34.0, 563.5], [36.0, 451.0], [37.0, 84.0], [38.0, 570.5], [39.0, 553.0], [40.0, 331.5], [4.0, 187.0], [5.0, 513.0], [6.0, 3947.0], [8.0, 787.5], [11.0, 1046.0], [12.0, 630.0], [13.0, 545.0], [14.0, 432.0], [15.0, 68.0], [16.0, 77.5], [17.0, 270.5], [18.0, 124.5], [19.0, 85.0], [20.0, 414.0], [21.0, 585.0], [22.0, 96.0], [23.0, 93.0], [24.0, 106.0], [25.0, 411.0], [26.0, 85.5], [27.0, 461.5], [28.0, 408.5], [29.0, 92.5], [30.0, 113.0], [31.0, 317.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[38.0, 3484.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 40.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 2.0, "maxY": 3947.0, "series": [{"data": [[32.0, 0.0], [33.0, 37.0], [2.0, 16.5], [35.0, 0.0], [34.0, 0.0], [36.0, 18.0], [37.0, 30.0], [38.0, 39.0], [39.0, 0.0], [40.0, 18.5], [4.0, 14.5], [5.0, 0.0], [6.0, 3947.0], [8.0, 0.0], [11.0, 40.0], [12.0, 0.0], [13.0, 0.0], [14.0, 19.0], [15.0, 38.0], [16.0, 28.5], [17.0, 19.5], [18.0, 36.5], [19.0, 39.0], [20.0, 0.0], [21.0, 0.0], [22.0, 37.0], [23.0, 29.0], [24.0, 29.0], [25.0, 0.0], [26.0, 35.0], [27.0, 18.5], [28.0, 38.0], [29.0, 37.0], [30.0, 37.0], [31.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[38.0, 3484.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 40.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.9833333333333333, "minX": 1.74716544E12, "maxY": 29.766666666666666, "series": [{"data": [[1.74716586E12, 25.133333333333333], [1.74716616E12, 23.866666666666667], [1.74716622E12, 24.883333333333333], [1.74716556E12, 24.05], [1.7471661E12, 23.933333333333334], [1.7471664E12, 0.9833333333333333], [1.74716544E12, 20.966666666666665], [1.7471655E12, 28.7], [1.7471658E12, 29.766666666666666], [1.74716634E12, 25.983333333333334], [1.74716568E12, 23.816666666666666], [1.74716574E12, 25.716666666666665], [1.74716604E12, 24.566666666666666], [1.74716562E12, 24.183333333333334], [1.74716592E12, 24.583333333333332], [1.74716598E12, 24.05], [1.74716628E12, 24.816666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7471664E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.74716544E12, "maxY": 14.9, "series": [{"data": [[1.74716586E12, 12.55], [1.74716616E12, 11.933333333333334], [1.74716622E12, 12.466666666666667], [1.74716556E12, 12.033333333333333], [1.7471661E12, 11.95], [1.7471664E12, 0.55], [1.74716544E12, 10.283333333333333], [1.7471655E12, 14.35], [1.7471658E12, 14.9], [1.74716634E12, 13.133333333333333], [1.74716568E12, 11.9], [1.74716574E12, 12.85], [1.74716604E12, 12.3], [1.74716562E12, 12.1], [1.74716592E12, 12.3], [1.74716598E12, 12.016666666666667], [1.74716628E12, 12.383333333333333]], "isOverall": false, "label": "0", "isController": false}, {"data": [[1.74716586E12, 12.583333333333334], [1.74716616E12, 11.933333333333334], [1.74716622E12, 12.416666666666666], [1.74716556E12, 12.016666666666667], [1.7471661E12, 11.983333333333333], [1.7471664E12, 0.55], [1.74716544E12, 10.25], [1.7471655E12, 14.35], [1.7471658E12, 14.866666666666667], [1.74716634E12, 13.133333333333333], [1.74716568E12, 11.916666666666666], [1.74716574E12, 12.866666666666667], [1.74716604E12, 12.266666666666667], [1.74716562E12, 12.083333333333334], [1.74716592E12, 12.283333333333333], [1.74716598E12, 12.033333333333333], [1.74716628E12, 12.433333333333334]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.74716544E12, 0.03333333333333333]], "isOverall": false, "label": "400", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7471664E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.74716544E12, "maxY": 14.9, "series": [{"data": [[1.74716586E12, 12.583333333333334], [1.74716616E12, 11.933333333333334], [1.74716622E12, 12.416666666666666], [1.74716556E12, 12.016666666666667], [1.7471661E12, 11.983333333333333], [1.7471664E12, 0.55], [1.74716544E12, 10.25], [1.7471655E12, 14.35], [1.7471658E12, 14.866666666666667], [1.74716634E12, 13.133333333333333], [1.74716568E12, 11.916666666666666], [1.74716574E12, 12.866666666666667], [1.74716604E12, 12.266666666666667], [1.74716562E12, 12.083333333333334], [1.74716592E12, 12.283333333333333], [1.74716598E12, 12.033333333333333], [1.74716628E12, 12.433333333333334]], "isOverall": false, "label": "HTTP Request - enroll-success", "isController": false}, {"data": [[1.74716544E12, 0.03333333333333333]], "isOverall": false, "label": "HTTP Request - enroll-failure", "isController": false}, {"data": [[1.74716586E12, 12.55], [1.74716616E12, 11.933333333333334], [1.74716622E12, 12.466666666666667], [1.74716556E12, 12.033333333333333], [1.7471661E12, 11.95], [1.7471664E12, 0.55], [1.74716544E12, 10.283333333333333], [1.7471655E12, 14.35], [1.7471658E12, 14.9], [1.74716634E12, 13.133333333333333], [1.74716568E12, 11.9], [1.74716574E12, 12.85], [1.74716604E12, 12.3], [1.74716562E12, 12.1], [1.74716592E12, 12.3], [1.74716598E12, 12.016666666666667], [1.74716628E12, 12.383333333333333]], "isOverall": false, "label": "Create CSR-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7471664E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.03333333333333333, "minX": 1.74716544E12, "maxY": 29.766666666666666, "series": [{"data": [[1.74716586E12, 25.133333333333333], [1.74716616E12, 23.866666666666667], [1.74716622E12, 24.883333333333333], [1.74716556E12, 24.05], [1.7471661E12, 23.933333333333334], [1.7471664E12, 1.1], [1.74716544E12, 20.533333333333335], [1.7471655E12, 28.7], [1.7471658E12, 29.766666666666666], [1.74716634E12, 26.266666666666666], [1.74716568E12, 23.816666666666666], [1.74716574E12, 25.716666666666665], [1.74716604E12, 24.566666666666666], [1.74716562E12, 24.183333333333334], [1.74716592E12, 24.583333333333332], [1.74716598E12, 24.05], [1.74716628E12, 24.816666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.74716544E12, 0.03333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7471664E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

