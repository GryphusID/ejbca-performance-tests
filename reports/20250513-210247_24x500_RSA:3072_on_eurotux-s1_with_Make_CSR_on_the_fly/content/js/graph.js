/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 26.0, "minX": 0.0, "maxY": 10494.0, "series": [{"data": [[0.0, 128.0], [0.1, 251.0], [0.2, 310.0], [0.3, 324.0], [0.4, 349.0], [0.5, 365.0], [0.6, 380.0], [0.7, 392.0], [0.8, 400.0], [0.9, 415.0], [1.0, 424.0], [1.1, 435.0], [1.2, 443.0], [1.3, 448.0], [1.4, 455.0], [1.5, 462.0], [1.6, 466.0], [1.7, 473.0], [1.8, 477.0], [1.9, 481.0], [2.0, 485.0], [2.1, 490.0], [2.2, 497.0], [2.3, 501.0], [2.4, 506.0], [2.5, 510.0], [2.6, 512.0], [2.7, 515.0], [2.8, 520.0], [2.9, 525.0], [3.0, 528.0], [3.1, 533.0], [3.2, 536.0], [3.3, 540.0], [3.4, 544.0], [3.5, 548.0], [3.6, 550.0], [3.7, 554.0], [3.8, 557.0], [3.9, 561.0], [4.0, 565.0], [4.1, 568.0], [4.2, 572.0], [4.3, 575.0], [4.4, 577.0], [4.5, 581.0], [4.6, 584.0], [4.7, 586.0], [4.8, 590.0], [4.9, 594.0], [5.0, 596.0], [5.1, 599.0], [5.2, 601.0], [5.3, 606.0], [5.4, 610.0], [5.5, 613.0], [5.6, 616.0], [5.7, 617.0], [5.8, 620.0], [5.9, 621.0], [6.0, 624.0], [6.1, 629.0], [6.2, 631.0], [6.3, 633.0], [6.4, 635.0], [6.5, 637.0], [6.6, 639.0], [6.7, 641.0], [6.8, 642.0], [6.9, 644.0], [7.0, 648.0], [7.1, 650.0], [7.2, 651.0], [7.3, 653.0], [7.4, 655.0], [7.5, 658.0], [7.6, 662.0], [7.7, 664.0], [7.8, 667.0], [7.9, 669.0], [8.0, 672.0], [8.1, 674.0], [8.2, 676.0], [8.3, 678.0], [8.4, 681.0], [8.5, 682.0], [8.6, 686.0], [8.7, 690.0], [8.8, 692.0], [8.9, 694.0], [9.0, 697.0], [9.1, 699.0], [9.2, 700.0], [9.3, 703.0], [9.4, 704.0], [9.5, 707.0], [9.6, 708.0], [9.7, 710.0], [9.8, 712.0], [9.9, 714.0], [10.0, 716.0], [10.1, 718.0], [10.2, 720.0], [10.3, 722.0], [10.4, 725.0], [10.5, 729.0], [10.6, 731.0], [10.7, 733.0], [10.8, 736.0], [10.9, 738.0], [11.0, 740.0], [11.1, 743.0], [11.2, 744.0], [11.3, 746.0], [11.4, 748.0], [11.5, 750.0], [11.6, 751.0], [11.7, 753.0], [11.8, 755.0], [11.9, 759.0], [12.0, 759.0], [12.1, 761.0], [12.2, 763.0], [12.3, 765.0], [12.4, 766.0], [12.5, 768.0], [12.6, 770.0], [12.7, 773.0], [12.8, 775.0], [12.9, 776.0], [13.0, 777.0], [13.1, 780.0], [13.2, 782.0], [13.3, 784.0], [13.4, 786.0], [13.5, 788.0], [13.6, 790.0], [13.7, 793.0], [13.8, 795.0], [13.9, 797.0], [14.0, 800.0], [14.1, 802.0], [14.2, 804.0], [14.3, 806.0], [14.4, 807.0], [14.5, 809.0], [14.6, 813.0], [14.7, 815.0], [14.8, 817.0], [14.9, 818.0], [15.0, 820.0], [15.1, 822.0], [15.2, 824.0], [15.3, 826.0], [15.4, 829.0], [15.5, 830.0], [15.6, 832.0], [15.7, 834.0], [15.8, 835.0], [15.9, 838.0], [16.0, 840.0], [16.1, 842.0], [16.2, 844.0], [16.3, 846.0], [16.4, 847.0], [16.5, 848.0], [16.6, 850.0], [16.7, 852.0], [16.8, 855.0], [16.9, 856.0], [17.0, 858.0], [17.1, 860.0], [17.2, 862.0], [17.3, 864.0], [17.4, 866.0], [17.5, 868.0], [17.6, 870.0], [17.7, 872.0], [17.8, 875.0], [17.9, 876.0], [18.0, 878.0], [18.1, 880.0], [18.2, 882.0], [18.3, 883.0], [18.4, 885.0], [18.5, 887.0], [18.6, 889.0], [18.7, 892.0], [18.8, 894.0], [18.9, 896.0], [19.0, 898.0], [19.1, 899.0], [19.2, 901.0], [19.3, 902.0], [19.4, 904.0], [19.5, 907.0], [19.6, 907.0], [19.7, 909.0], [19.8, 910.0], [19.9, 913.0], [20.0, 914.0], [20.1, 916.0], [20.2, 917.0], [20.3, 918.0], [20.4, 919.0], [20.5, 922.0], [20.6, 923.0], [20.7, 924.0], [20.8, 926.0], [20.9, 928.0], [21.0, 930.0], [21.1, 932.0], [21.2, 934.0], [21.3, 935.0], [21.4, 938.0], [21.5, 939.0], [21.6, 941.0], [21.7, 943.0], [21.8, 944.0], [21.9, 946.0], [22.0, 947.0], [22.1, 949.0], [22.2, 951.0], [22.3, 952.0], [22.4, 954.0], [22.5, 956.0], [22.6, 957.0], [22.7, 958.0], [22.8, 960.0], [22.9, 962.0], [23.0, 963.0], [23.1, 964.0], [23.2, 965.0], [23.3, 967.0], [23.4, 969.0], [23.5, 971.0], [23.6, 973.0], [23.7, 974.0], [23.8, 975.0], [23.9, 976.0], [24.0, 977.0], [24.1, 979.0], [24.2, 981.0], [24.3, 983.0], [24.4, 985.0], [24.5, 987.0], [24.6, 989.0], [24.7, 991.0], [24.8, 994.0], [24.9, 996.0], [25.0, 998.0], [25.1, 999.0], [25.2, 1001.0], [25.3, 1003.0], [25.4, 1004.0], [25.5, 1006.0], [25.6, 1007.0], [25.7, 1009.0], [25.8, 1011.0], [25.9, 1013.0], [26.0, 1014.0], [26.1, 1017.0], [26.2, 1018.0], [26.3, 1020.0], [26.4, 1022.0], [26.5, 1023.0], [26.6, 1026.0], [26.7, 1027.0], [26.8, 1030.0], [26.9, 1032.0], [27.0, 1033.0], [27.1, 1035.0], [27.2, 1037.0], [27.3, 1039.0], [27.4, 1040.0], [27.5, 1042.0], [27.6, 1044.0], [27.7, 1045.0], [27.8, 1047.0], [27.9, 1048.0], [28.0, 1049.0], [28.1, 1050.0], [28.2, 1052.0], [28.3, 1054.0], [28.4, 1056.0], [28.5, 1059.0], [28.6, 1061.0], [28.7, 1062.0], [28.8, 1064.0], [28.9, 1066.0], [29.0, 1068.0], [29.1, 1070.0], [29.2, 1071.0], [29.3, 1073.0], [29.4, 1075.0], [29.5, 1076.0], [29.6, 1078.0], [29.7, 1079.0], [29.8, 1081.0], [29.9, 1083.0], [30.0, 1086.0], [30.1, 1088.0], [30.2, 1089.0], [30.3, 1091.0], [30.4, 1093.0], [30.5, 1095.0], [30.6, 1097.0], [30.7, 1099.0], [30.8, 1101.0], [30.9, 1102.0], [31.0, 1104.0], [31.1, 1106.0], [31.2, 1107.0], [31.3, 1109.0], [31.4, 1111.0], [31.5, 1113.0], [31.6, 1115.0], [31.7, 1117.0], [31.8, 1119.0], [31.9, 1121.0], [32.0, 1123.0], [32.1, 1126.0], [32.2, 1128.0], [32.3, 1130.0], [32.4, 1131.0], [32.5, 1133.0], [32.6, 1134.0], [32.7, 1137.0], [32.8, 1138.0], [32.9, 1140.0], [33.0, 1142.0], [33.1, 1143.0], [33.2, 1145.0], [33.3, 1147.0], [33.4, 1148.0], [33.5, 1151.0], [33.6, 1153.0], [33.7, 1154.0], [33.8, 1156.0], [33.9, 1158.0], [34.0, 1160.0], [34.1, 1161.0], [34.2, 1163.0], [34.3, 1166.0], [34.4, 1168.0], [34.5, 1170.0], [34.6, 1173.0], [34.7, 1175.0], [34.8, 1176.0], [34.9, 1178.0], [35.0, 1180.0], [35.1, 1182.0], [35.2, 1183.0], [35.3, 1185.0], [35.4, 1187.0], [35.5, 1188.0], [35.6, 1190.0], [35.7, 1192.0], [35.8, 1194.0], [35.9, 1195.0], [36.0, 1197.0], [36.1, 1199.0], [36.2, 1200.0], [36.3, 1201.0], [36.4, 1203.0], [36.5, 1205.0], [36.6, 1206.0], [36.7, 1208.0], [36.8, 1210.0], [36.9, 1211.0], [37.0, 1214.0], [37.1, 1216.0], [37.2, 1218.0], [37.3, 1220.0], [37.4, 1222.0], [37.5, 1224.0], [37.6, 1225.0], [37.7, 1227.0], [37.8, 1230.0], [37.9, 1232.0], [38.0, 1234.0], [38.1, 1236.0], [38.2, 1238.0], [38.3, 1240.0], [38.4, 1241.0], [38.5, 1242.0], [38.6, 1244.0], [38.7, 1246.0], [38.8, 1247.0], [38.9, 1249.0], [39.0, 1251.0], [39.1, 1253.0], [39.2, 1255.0], [39.3, 1257.0], [39.4, 1259.0], [39.5, 1260.0], [39.6, 1264.0], [39.7, 1266.0], [39.8, 1269.0], [39.9, 1270.0], [40.0, 1272.0], [40.1, 1274.0], [40.2, 1275.0], [40.3, 1277.0], [40.4, 1279.0], [40.5, 1280.0], [40.6, 1282.0], [40.7, 1285.0], [40.8, 1286.0], [40.9, 1289.0], [41.0, 1291.0], [41.1, 1293.0], [41.2, 1296.0], [41.3, 1298.0], [41.4, 1299.0], [41.5, 1302.0], [41.6, 1304.0], [41.7, 1306.0], [41.8, 1307.0], [41.9, 1309.0], [42.0, 1311.0], [42.1, 1313.0], [42.2, 1315.0], [42.3, 1318.0], [42.4, 1320.0], [42.5, 1322.0], [42.6, 1324.0], [42.7, 1326.0], [42.8, 1328.0], [42.9, 1329.0], [43.0, 1330.0], [43.1, 1333.0], [43.2, 1334.0], [43.3, 1336.0], [43.4, 1338.0], [43.5, 1341.0], [43.6, 1342.0], [43.7, 1344.0], [43.8, 1345.0], [43.9, 1346.0], [44.0, 1348.0], [44.1, 1349.0], [44.2, 1352.0], [44.3, 1354.0], [44.4, 1356.0], [44.5, 1359.0], [44.6, 1361.0], [44.7, 1363.0], [44.8, 1365.0], [44.9, 1366.0], [45.0, 1368.0], [45.1, 1370.0], [45.2, 1372.0], [45.3, 1374.0], [45.4, 1377.0], [45.5, 1378.0], [45.6, 1381.0], [45.7, 1383.0], [45.8, 1383.0], [45.9, 1386.0], [46.0, 1387.0], [46.1, 1389.0], [46.2, 1391.0], [46.3, 1392.0], [46.4, 1395.0], [46.5, 1397.0], [46.6, 1399.0], [46.7, 1400.0], [46.8, 1402.0], [46.9, 1404.0], [47.0, 1405.0], [47.1, 1407.0], [47.2, 1409.0], [47.3, 1410.0], [47.4, 1413.0], [47.5, 1415.0], [47.6, 1417.0], [47.7, 1419.0], [47.8, 1421.0], [47.9, 1424.0], [48.0, 1426.0], [48.1, 1429.0], [48.2, 1431.0], [48.3, 1433.0], [48.4, 1435.0], [48.5, 1438.0], [48.6, 1440.0], [48.7, 1442.0], [48.8, 1444.0], [48.9, 1446.0], [49.0, 1448.0], [49.1, 1450.0], [49.2, 1451.0], [49.3, 1454.0], [49.4, 1456.0], [49.5, 1457.0], [49.6, 1459.0], [49.7, 1461.0], [49.8, 1463.0], [49.9, 1464.0], [50.0, 1467.0], [50.1, 1469.0], [50.2, 1471.0], [50.3, 1474.0], [50.4, 1477.0], [50.5, 1478.0], [50.6, 1479.0], [50.7, 1481.0], [50.8, 1482.0], [50.9, 1484.0], [51.0, 1485.0], [51.1, 1488.0], [51.2, 1491.0], [51.3, 1492.0], [51.4, 1495.0], [51.5, 1498.0], [51.6, 1499.0], [51.7, 1502.0], [51.8, 1504.0], [51.9, 1506.0], [52.0, 1508.0], [52.1, 1510.0], [52.2, 1514.0], [52.3, 1517.0], [52.4, 1518.0], [52.5, 1520.0], [52.6, 1521.0], [52.7, 1524.0], [52.8, 1527.0], [52.9, 1530.0], [53.0, 1531.0], [53.1, 1532.0], [53.2, 1535.0], [53.3, 1537.0], [53.4, 1540.0], [53.5, 1541.0], [53.6, 1543.0], [53.7, 1544.0], [53.8, 1546.0], [53.9, 1548.0], [54.0, 1551.0], [54.1, 1553.0], [54.2, 1555.0], [54.3, 1557.0], [54.4, 1560.0], [54.5, 1563.0], [54.6, 1565.0], [54.7, 1567.0], [54.8, 1570.0], [54.9, 1572.0], [55.0, 1574.0], [55.1, 1576.0], [55.2, 1578.0], [55.3, 1581.0], [55.4, 1583.0], [55.5, 1586.0], [55.6, 1588.0], [55.7, 1590.0], [55.8, 1592.0], [55.9, 1595.0], [56.0, 1597.0], [56.1, 1598.0], [56.2, 1601.0], [56.3, 1603.0], [56.4, 1605.0], [56.5, 1607.0], [56.6, 1609.0], [56.7, 1613.0], [56.8, 1615.0], [56.9, 1617.0], [57.0, 1619.0], [57.1, 1620.0], [57.2, 1623.0], [57.3, 1625.0], [57.4, 1627.0], [57.5, 1630.0], [57.6, 1634.0], [57.7, 1636.0], [57.8, 1638.0], [57.9, 1640.0], [58.0, 1642.0], [58.1, 1645.0], [58.2, 1647.0], [58.3, 1650.0], [58.4, 1651.0], [58.5, 1654.0], [58.6, 1656.0], [58.7, 1660.0], [58.8, 1662.0], [58.9, 1665.0], [59.0, 1666.0], [59.1, 1670.0], [59.2, 1671.0], [59.3, 1673.0], [59.4, 1674.0], [59.5, 1676.0], [59.6, 1678.0], [59.7, 1680.0], [59.8, 1682.0], [59.9, 1685.0], [60.0, 1688.0], [60.1, 1691.0], [60.2, 1694.0], [60.3, 1697.0], [60.4, 1701.0], [60.5, 1704.0], [60.6, 1705.0], [60.7, 1707.0], [60.8, 1709.0], [60.9, 1711.0], [61.0, 1713.0], [61.1, 1718.0], [61.2, 1722.0], [61.3, 1724.0], [61.4, 1726.0], [61.5, 1729.0], [61.6, 1731.0], [61.7, 1734.0], [61.8, 1736.0], [61.9, 1739.0], [62.0, 1740.0], [62.1, 1744.0], [62.2, 1746.0], [62.3, 1749.0], [62.4, 1753.0], [62.5, 1755.0], [62.6, 1758.0], [62.7, 1761.0], [62.8, 1764.0], [62.9, 1767.0], [63.0, 1770.0], [63.1, 1771.0], [63.2, 1773.0], [63.3, 1775.0], [63.4, 1778.0], [63.5, 1781.0], [63.6, 1785.0], [63.7, 1787.0], [63.8, 1789.0], [63.9, 1791.0], [64.0, 1794.0], [64.1, 1796.0], [64.2, 1798.0], [64.3, 1800.0], [64.4, 1802.0], [64.5, 1804.0], [64.6, 1808.0], [64.7, 1813.0], [64.8, 1815.0], [64.9, 1817.0], [65.0, 1821.0], [65.1, 1823.0], [65.2, 1827.0], [65.3, 1831.0], [65.4, 1834.0], [65.5, 1836.0], [65.6, 1839.0], [65.7, 1841.0], [65.8, 1844.0], [65.9, 1847.0], [66.0, 1850.0], [66.1, 1852.0], [66.2, 1855.0], [66.3, 1858.0], [66.4, 1860.0], [66.5, 1862.0], [66.6, 1863.0], [66.7, 1866.0], [66.8, 1869.0], [66.9, 1872.0], [67.0, 1875.0], [67.1, 1876.0], [67.2, 1879.0], [67.3, 1882.0], [67.4, 1886.0], [67.5, 1890.0], [67.6, 1892.0], [67.7, 1895.0], [67.8, 1897.0], [67.9, 1899.0], [68.0, 1902.0], [68.1, 1905.0], [68.2, 1908.0], [68.3, 1912.0], [68.4, 1915.0], [68.5, 1918.0], [68.6, 1920.0], [68.7, 1924.0], [68.8, 1926.0], [68.9, 1930.0], [69.0, 1934.0], [69.1, 1937.0], [69.2, 1940.0], [69.3, 1943.0], [69.4, 1946.0], [69.5, 1949.0], [69.6, 1954.0], [69.7, 1958.0], [69.8, 1962.0], [69.9, 1964.0], [70.0, 1968.0], [70.1, 1972.0], [70.2, 1975.0], [70.3, 1979.0], [70.4, 1983.0], [70.5, 1985.0], [70.6, 1988.0], [70.7, 1995.0], [70.8, 1999.0], [70.9, 2001.0], [71.0, 2005.0], [71.1, 2008.0], [71.2, 2010.0], [71.3, 2014.0], [71.4, 2017.0], [71.5, 2021.0], [71.6, 2024.0], [71.7, 2028.0], [71.8, 2031.0], [71.9, 2033.0], [72.0, 2036.0], [72.1, 2041.0], [72.2, 2043.0], [72.3, 2048.0], [72.4, 2052.0], [72.5, 2060.0], [72.6, 2063.0], [72.7, 2066.0], [72.8, 2071.0], [72.9, 2075.0], [73.0, 2079.0], [73.1, 2084.0], [73.2, 2087.0], [73.3, 2090.0], [73.4, 2094.0], [73.5, 2098.0], [73.6, 2100.0], [73.7, 2105.0], [73.8, 2109.0], [73.9, 2112.0], [74.0, 2115.0], [74.1, 2117.0], [74.2, 2120.0], [74.3, 2125.0], [74.4, 2129.0], [74.5, 2133.0], [74.6, 2137.0], [74.7, 2140.0], [74.8, 2144.0], [74.9, 2146.0], [75.0, 2150.0], [75.1, 2154.0], [75.2, 2157.0], [75.3, 2163.0], [75.4, 2167.0], [75.5, 2171.0], [75.6, 2173.0], [75.7, 2175.0], [75.8, 2179.0], [75.9, 2184.0], [76.0, 2187.0], [76.1, 2193.0], [76.2, 2195.0], [76.3, 2197.0], [76.4, 2201.0], [76.5, 2205.0], [76.6, 2209.0], [76.7, 2213.0], [76.8, 2218.0], [76.9, 2223.0], [77.0, 2225.0], [77.1, 2227.0], [77.2, 2231.0], [77.3, 2233.0], [77.4, 2237.0], [77.5, 2241.0], [77.6, 2246.0], [77.7, 2251.0], [77.8, 2255.0], [77.9, 2259.0], [78.0, 2264.0], [78.1, 2269.0], [78.2, 2274.0], [78.3, 2278.0], [78.4, 2281.0], [78.5, 2285.0], [78.6, 2287.0], [78.7, 2292.0], [78.8, 2296.0], [78.9, 2300.0], [79.0, 2304.0], [79.1, 2308.0], [79.2, 2315.0], [79.3, 2320.0], [79.4, 2325.0], [79.5, 2330.0], [79.6, 2336.0], [79.7, 2342.0], [79.8, 2347.0], [79.9, 2350.0], [80.0, 2354.0], [80.1, 2359.0], [80.2, 2364.0], [80.3, 2367.0], [80.4, 2370.0], [80.5, 2375.0], [80.6, 2379.0], [80.7, 2383.0], [80.8, 2387.0], [80.9, 2391.0], [81.0, 2394.0], [81.1, 2398.0], [81.2, 2402.0], [81.3, 2406.0], [81.4, 2413.0], [81.5, 2417.0], [81.6, 2421.0], [81.7, 2423.0], [81.8, 2431.0], [81.9, 2436.0], [82.0, 2439.0], [82.1, 2444.0], [82.2, 2448.0], [82.3, 2453.0], [82.4, 2459.0], [82.5, 2464.0], [82.6, 2469.0], [82.7, 2477.0], [82.8, 2483.0], [82.9, 2490.0], [83.0, 2494.0], [83.1, 2500.0], [83.2, 2503.0], [83.3, 2510.0], [83.4, 2514.0], [83.5, 2519.0], [83.6, 2525.0], [83.7, 2530.0], [83.8, 2534.0], [83.9, 2540.0], [84.0, 2544.0], [84.1, 2550.0], [84.2, 2554.0], [84.3, 2562.0], [84.4, 2567.0], [84.5, 2572.0], [84.6, 2576.0], [84.7, 2583.0], [84.8, 2590.0], [84.9, 2595.0], [85.0, 2600.0], [85.1, 2606.0], [85.2, 2610.0], [85.3, 2615.0], [85.4, 2618.0], [85.5, 2624.0], [85.6, 2631.0], [85.7, 2636.0], [85.8, 2642.0], [85.9, 2649.0], [86.0, 2655.0], [86.1, 2663.0], [86.2, 2673.0], [86.3, 2678.0], [86.4, 2685.0], [86.5, 2694.0], [86.6, 2703.0], [86.7, 2713.0], [86.8, 2721.0], [86.9, 2727.0], [87.0, 2737.0], [87.1, 2742.0], [87.2, 2751.0], [87.3, 2758.0], [87.4, 2764.0], [87.5, 2769.0], [87.6, 2780.0], [87.7, 2788.0], [87.8, 2795.0], [87.9, 2801.0], [88.0, 2807.0], [88.1, 2813.0], [88.2, 2818.0], [88.3, 2824.0], [88.4, 2833.0], [88.5, 2844.0], [88.6, 2852.0], [88.7, 2857.0], [88.8, 2862.0], [88.9, 2868.0], [89.0, 2875.0], [89.1, 2887.0], [89.2, 2895.0], [89.3, 2902.0], [89.4, 2913.0], [89.5, 2925.0], [89.6, 2931.0], [89.7, 2942.0], [89.8, 2951.0], [89.9, 2961.0], [90.0, 2970.0], [90.1, 2977.0], [90.2, 2982.0], [90.3, 2990.0], [90.4, 2997.0], [90.5, 3005.0], [90.6, 3014.0], [90.7, 3028.0], [90.8, 3037.0], [90.9, 3047.0], [91.0, 3065.0], [91.1, 3079.0], [91.2, 3087.0], [91.3, 3094.0], [91.4, 3102.0], [91.5, 3114.0], [91.6, 3121.0], [91.7, 3129.0], [91.8, 3138.0], [91.9, 3145.0], [92.0, 3161.0], [92.1, 3169.0], [92.2, 3177.0], [92.3, 3189.0], [92.4, 3196.0], [92.5, 3209.0], [92.6, 3219.0], [92.7, 3234.0], [92.8, 3247.0], [92.9, 3270.0], [93.0, 3279.0], [93.1, 3297.0], [93.2, 3309.0], [93.3, 3323.0], [93.4, 3334.0], [93.5, 3343.0], [93.6, 3354.0], [93.7, 3367.0], [93.8, 3382.0], [93.9, 3398.0], [94.0, 3408.0], [94.1, 3422.0], [94.2, 3434.0], [94.3, 3453.0], [94.4, 3469.0], [94.5, 3483.0], [94.6, 3503.0], [94.7, 3519.0], [94.8, 3534.0], [94.9, 3545.0], [95.0, 3569.0], [95.1, 3590.0], [95.2, 3610.0], [95.3, 3623.0], [95.4, 3648.0], [95.5, 3666.0], [95.6, 3683.0], [95.7, 3701.0], [95.8, 3720.0], [95.9, 3741.0], [96.0, 3769.0], [96.1, 3795.0], [96.2, 3820.0], [96.3, 3841.0], [96.4, 3858.0], [96.5, 3893.0], [96.6, 3919.0], [96.7, 3938.0], [96.8, 3972.0], [96.9, 4011.0], [97.0, 4040.0], [97.1, 4064.0], [97.2, 4103.0], [97.3, 4126.0], [97.4, 4154.0], [97.5, 4195.0], [97.6, 4229.0], [97.7, 4277.0], [97.8, 4307.0], [97.9, 4358.0], [98.0, 4398.0], [98.1, 4437.0], [98.2, 4522.0], [98.3, 4566.0], [98.4, 4613.0], [98.5, 4678.0], [98.6, 4729.0], [98.7, 4812.0], [98.8, 4905.0], [98.9, 4965.0], [99.0, 5030.0], [99.1, 5137.0], [99.2, 5289.0], [99.3, 5452.0], [99.4, 5578.0], [99.5, 5679.0], [99.6, 5854.0], [99.7, 6252.0], [99.8, 6710.0], [99.9, 7363.0], [100.0, 10494.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 26.0], [0.1, 29.0], [0.2, 29.0], [0.3, 30.0], [0.4, 30.0], [0.5, 31.0], [0.6, 34.0], [0.7, 36.0], [0.8, 36.0], [0.9, 36.0], [1.0, 37.0], [1.1, 37.0], [1.2, 37.0], [1.3, 37.0], [1.4, 37.0], [1.5, 37.0], [1.6, 37.0], [1.7, 37.0], [1.8, 37.0], [1.9, 38.0], [2.0, 38.0], [2.1, 38.0], [2.2, 38.0], [2.3, 38.0], [2.4, 38.0], [2.5, 38.0], [2.6, 38.0], [2.7, 38.0], [2.8, 38.0], [2.9, 38.0], [3.0, 38.0], [3.1, 38.0], [3.2, 38.0], [3.3, 38.0], [3.4, 38.0], [3.5, 38.0], [3.6, 38.0], [3.7, 38.0], [3.8, 38.0], [3.9, 38.0], [4.0, 38.0], [4.1, 38.0], [4.2, 38.0], [4.3, 39.0], [4.4, 39.0], [4.5, 39.0], [4.6, 39.0], [4.7, 39.0], [4.8, 39.0], [4.9, 39.0], [5.0, 39.0], [5.1, 39.0], [5.2, 39.0], [5.3, 39.0], [5.4, 39.0], [5.5, 39.0], [5.6, 39.0], [5.7, 39.0], [5.8, 39.0], [5.9, 39.0], [6.0, 39.0], [6.1, 39.0], [6.2, 39.0], [6.3, 39.0], [6.4, 39.0], [6.5, 39.0], [6.6, 39.0], [6.7, 39.0], [6.8, 39.0], [6.9, 39.0], [7.0, 39.0], [7.1, 39.0], [7.2, 39.0], [7.3, 39.0], [7.4, 39.0], [7.5, 39.0], [7.6, 39.0], [7.7, 39.0], [7.8, 39.0], [7.9, 39.0], [8.0, 39.0], [8.1, 40.0], [8.2, 40.0], [8.3, 40.0], [8.4, 40.0], [8.5, 40.0], [8.6, 40.0], [8.7, 40.0], [8.8, 40.0], [8.9, 40.0], [9.0, 40.0], [9.1, 40.0], [9.2, 40.0], [9.3, 40.0], [9.4, 40.0], [9.5, 40.0], [9.6, 40.0], [9.7, 40.0], [9.8, 40.0], [9.9, 40.0], [10.0, 40.0], [10.1, 40.0], [10.2, 40.0], [10.3, 40.0], [10.4, 40.0], [10.5, 40.0], [10.6, 40.0], [10.7, 40.0], [10.8, 40.0], [10.9, 40.0], [11.0, 40.0], [11.1, 40.0], [11.2, 40.0], [11.3, 40.0], [11.4, 40.0], [11.5, 40.0], [11.6, 40.0], [11.7, 40.0], [11.8, 40.0], [11.9, 40.0], [12.0, 40.0], [12.1, 40.0], [12.2, 40.0], [12.3, 40.0], [12.4, 40.0], [12.5, 40.0], [12.6, 40.0], [12.7, 40.0], [12.8, 40.0], [12.9, 40.0], [13.0, 40.0], [13.1, 40.0], [13.2, 41.0], [13.3, 41.0], [13.4, 41.0], [13.5, 41.0], [13.6, 41.0], [13.7, 41.0], [13.8, 41.0], [13.9, 41.0], [14.0, 41.0], [14.1, 41.0], [14.2, 41.0], [14.3, 41.0], [14.4, 41.0], [14.5, 41.0], [14.6, 41.0], [14.7, 41.0], [14.8, 41.0], [14.9, 41.0], [15.0, 41.0], [15.1, 41.0], [15.2, 41.0], [15.3, 41.0], [15.4, 41.0], [15.5, 41.0], [15.6, 41.0], [15.7, 41.0], [15.8, 41.0], [15.9, 41.0], [16.0, 41.0], [16.1, 41.0], [16.2, 41.0], [16.3, 41.0], [16.4, 41.0], [16.5, 41.0], [16.6, 41.0], [16.7, 41.0], [16.8, 41.0], [16.9, 41.0], [17.0, 41.0], [17.1, 41.0], [17.2, 41.0], [17.3, 41.0], [17.4, 41.0], [17.5, 41.0], [17.6, 41.0], [17.7, 41.0], [17.8, 41.0], [17.9, 41.0], [18.0, 41.0], [18.1, 41.0], [18.2, 41.0], [18.3, 41.0], [18.4, 41.0], [18.5, 41.0], [18.6, 41.0], [18.7, 41.0], [18.8, 41.0], [18.9, 41.0], [19.0, 41.0], [19.1, 42.0], [19.2, 42.0], [19.3, 42.0], [19.4, 42.0], [19.5, 42.0], [19.6, 42.0], [19.7, 42.0], [19.8, 42.0], [19.9, 42.0], [20.0, 42.0], [20.1, 42.0], [20.2, 42.0], [20.3, 42.0], [20.4, 42.0], [20.5, 42.0], [20.6, 42.0], [20.7, 42.0], [20.8, 42.0], [20.9, 42.0], [21.0, 42.0], [21.1, 42.0], [21.2, 42.0], [21.3, 42.0], [21.4, 42.0], [21.5, 42.0], [21.6, 42.0], [21.7, 42.0], [21.8, 42.0], [21.9, 42.0], [22.0, 42.0], [22.1, 42.0], [22.2, 42.0], [22.3, 42.0], [22.4, 42.0], [22.5, 42.0], [22.6, 42.0], [22.7, 42.0], [22.8, 42.0], [22.9, 42.0], [23.0, 42.0], [23.1, 42.0], [23.2, 42.0], [23.3, 42.0], [23.4, 42.0], [23.5, 42.0], [23.6, 42.0], [23.7, 42.0], [23.8, 42.0], [23.9, 42.0], [24.0, 42.0], [24.1, 42.0], [24.2, 42.0], [24.3, 42.0], [24.4, 42.0], [24.5, 42.0], [24.6, 42.0], [24.7, 42.0], [24.8, 42.0], [24.9, 42.0], [25.0, 42.0], [25.1, 42.0], [25.2, 42.0], [25.3, 42.0], [25.4, 42.0], [25.5, 42.0], [25.6, 42.0], [25.7, 42.0], [25.8, 42.0], [25.9, 43.0], [26.0, 43.0], [26.1, 43.0], [26.2, 43.0], [26.3, 43.0], [26.4, 43.0], [26.5, 43.0], [26.6, 43.0], [26.7, 43.0], [26.8, 43.0], [26.9, 43.0], [27.0, 43.0], [27.1, 43.0], [27.2, 43.0], [27.3, 43.0], [27.4, 43.0], [27.5, 43.0], [27.6, 43.0], [27.7, 43.0], [27.8, 43.0], [27.9, 43.0], [28.0, 43.0], [28.1, 43.0], [28.2, 43.0], [28.3, 43.0], [28.4, 43.0], [28.5, 43.0], [28.6, 43.0], [28.7, 43.0], [28.8, 43.0], [28.9, 43.0], [29.0, 43.0], [29.1, 43.0], [29.2, 43.0], [29.3, 43.0], [29.4, 43.0], [29.5, 43.0], [29.6, 43.0], [29.7, 43.0], [29.8, 43.0], [29.9, 43.0], [30.0, 43.0], [30.1, 43.0], [30.2, 43.0], [30.3, 43.0], [30.4, 43.0], [30.5, 43.0], [30.6, 43.0], [30.7, 43.0], [30.8, 43.0], [30.9, 43.0], [31.0, 43.0], [31.1, 43.0], [31.2, 43.0], [31.3, 43.0], [31.4, 43.0], [31.5, 43.0], [31.6, 43.0], [31.7, 43.0], [31.8, 43.0], [31.9, 43.0], [32.0, 43.0], [32.1, 43.0], [32.2, 43.0], [32.3, 43.0], [32.4, 43.0], [32.5, 43.0], [32.6, 43.0], [32.7, 43.0], [32.8, 43.0], [32.9, 43.0], [33.0, 43.0], [33.1, 43.0], [33.2, 43.0], [33.3, 43.0], [33.4, 43.0], [33.5, 43.0], [33.6, 43.0], [33.7, 44.0], [33.8, 44.0], [33.9, 44.0], [34.0, 44.0], [34.1, 44.0], [34.2, 44.0], [34.3, 44.0], [34.4, 44.0], [34.5, 44.0], [34.6, 44.0], [34.7, 44.0], [34.8, 44.0], [34.9, 44.0], [35.0, 44.0], [35.1, 44.0], [35.2, 44.0], [35.3, 44.0], [35.4, 44.0], [35.5, 44.0], [35.6, 44.0], [35.7, 44.0], [35.8, 44.0], [35.9, 44.0], [36.0, 44.0], [36.1, 44.0], [36.2, 44.0], [36.3, 44.0], [36.4, 44.0], [36.5, 44.0], [36.6, 44.0], [36.7, 44.0], [36.8, 44.0], [36.9, 44.0], [37.0, 44.0], [37.1, 44.0], [37.2, 44.0], [37.3, 44.0], [37.4, 44.0], [37.5, 44.0], [37.6, 44.0], [37.7, 44.0], [37.8, 44.0], [37.9, 44.0], [38.0, 44.0], [38.1, 44.0], [38.2, 44.0], [38.3, 44.0], [38.4, 44.0], [38.5, 44.0], [38.6, 44.0], [38.7, 44.0], [38.8, 44.0], [38.9, 44.0], [39.0, 44.0], [39.1, 44.0], [39.2, 44.0], [39.3, 44.0], [39.4, 44.0], [39.5, 44.0], [39.6, 44.0], [39.7, 44.0], [39.8, 44.0], [39.9, 44.0], [40.0, 44.0], [40.1, 44.0], [40.2, 44.0], [40.3, 44.0], [40.4, 44.0], [40.5, 44.0], [40.6, 44.0], [40.7, 44.0], [40.8, 44.0], [40.9, 44.0], [41.0, 44.0], [41.1, 44.0], [41.2, 44.0], [41.3, 44.0], [41.4, 44.0], [41.5, 44.0], [41.6, 44.0], [41.7, 44.0], [41.8, 44.0], [41.9, 44.0], [42.0, 44.0], [42.1, 44.0], [42.2, 44.0], [42.3, 44.0], [42.4, 44.0], [42.5, 45.0], [42.6, 45.0], [42.7, 45.0], [42.8, 45.0], [42.9, 45.0], [43.0, 45.0], [43.1, 45.0], [43.2, 45.0], [43.3, 45.0], [43.4, 45.0], [43.5, 45.0], [43.6, 45.0], [43.7, 45.0], [43.8, 45.0], [43.9, 45.0], [44.0, 45.0], [44.1, 45.0], [44.2, 45.0], [44.3, 45.0], [44.4, 45.0], [44.5, 45.0], [44.6, 45.0], [44.7, 45.0], [44.8, 45.0], [44.9, 45.0], [45.0, 45.0], [45.1, 45.0], [45.2, 45.0], [45.3, 45.0], [45.4, 45.0], [45.5, 45.0], [45.6, 45.0], [45.7, 45.0], [45.8, 45.0], [45.9, 45.0], [46.0, 45.0], [46.1, 45.0], [46.2, 45.0], [46.3, 45.0], [46.4, 45.0], [46.5, 45.0], [46.6, 45.0], [46.7, 45.0], [46.8, 45.0], [46.9, 45.0], [47.0, 45.0], [47.1, 45.0], [47.2, 45.0], [47.3, 45.0], [47.4, 45.0], [47.5, 45.0], [47.6, 45.0], [47.7, 45.0], [47.8, 45.0], [47.9, 45.0], [48.0, 45.0], [48.1, 45.0], [48.2, 45.0], [48.3, 45.0], [48.4, 45.0], [48.5, 45.0], [48.6, 45.0], [48.7, 45.0], [48.8, 45.0], [48.9, 45.0], [49.0, 45.0], [49.1, 45.0], [49.2, 45.0], [49.3, 45.0], [49.4, 45.0], [49.5, 45.0], [49.6, 45.0], [49.7, 45.0], [49.8, 45.0], [49.9, 45.0], [50.0, 45.0], [50.1, 45.0], [50.2, 45.0], [50.3, 45.0], [50.4, 45.0], [50.5, 45.0], [50.6, 45.0], [50.7, 45.0], [50.8, 45.0], [50.9, 46.0], [51.0, 46.0], [51.1, 46.0], [51.2, 46.0], [51.3, 46.0], [51.4, 46.0], [51.5, 46.0], [51.6, 46.0], [51.7, 46.0], [51.8, 46.0], [51.9, 46.0], [52.0, 46.0], [52.1, 46.0], [52.2, 46.0], [52.3, 46.0], [52.4, 46.0], [52.5, 46.0], [52.6, 46.0], [52.7, 46.0], [52.8, 46.0], [52.9, 46.0], [53.0, 46.0], [53.1, 46.0], [53.2, 46.0], [53.3, 46.0], [53.4, 46.0], [53.5, 46.0], [53.6, 46.0], [53.7, 46.0], [53.8, 46.0], [53.9, 46.0], [54.0, 46.0], [54.1, 46.0], [54.2, 46.0], [54.3, 46.0], [54.4, 46.0], [54.5, 46.0], [54.6, 46.0], [54.7, 46.0], [54.8, 46.0], [54.9, 46.0], [55.0, 46.0], [55.1, 46.0], [55.2, 46.0], [55.3, 46.0], [55.4, 46.0], [55.5, 46.0], [55.6, 46.0], [55.7, 46.0], [55.8, 46.0], [55.9, 46.0], [56.0, 46.0], [56.1, 46.0], [56.2, 46.0], [56.3, 46.0], [56.4, 46.0], [56.5, 46.0], [56.6, 47.0], [56.7, 47.0], [56.8, 47.0], [56.9, 47.0], [57.0, 47.0], [57.1, 47.0], [57.2, 47.0], [57.3, 47.0], [57.4, 47.0], [57.5, 47.0], [57.6, 47.0], [57.7, 47.0], [57.8, 47.0], [57.9, 47.0], [58.0, 47.0], [58.1, 47.0], [58.2, 47.0], [58.3, 47.0], [58.4, 47.0], [58.5, 47.0], [58.6, 47.0], [58.7, 47.0], [58.8, 47.0], [58.9, 47.0], [59.0, 47.0], [59.1, 47.0], [59.2, 47.0], [59.3, 47.0], [59.4, 47.0], [59.5, 47.0], [59.6, 47.0], [59.7, 47.0], [59.8, 47.0], [59.9, 47.0], [60.0, 47.0], [60.1, 47.0], [60.2, 47.0], [60.3, 47.0], [60.4, 47.0], [60.5, 47.0], [60.6, 47.0], [60.7, 47.0], [60.8, 47.0], [60.9, 48.0], [61.0, 48.0], [61.1, 48.0], [61.2, 48.0], [61.3, 48.0], [61.4, 48.0], [61.5, 48.0], [61.6, 48.0], [61.7, 48.0], [61.8, 48.0], [61.9, 48.0], [62.0, 48.0], [62.1, 48.0], [62.2, 48.0], [62.3, 48.0], [62.4, 48.0], [62.5, 48.0], [62.6, 48.0], [62.7, 48.0], [62.8, 48.0], [62.9, 48.0], [63.0, 48.0], [63.1, 48.0], [63.2, 48.0], [63.3, 48.0], [63.4, 48.0], [63.5, 48.0], [63.6, 48.0], [63.7, 48.0], [63.8, 48.0], [63.9, 48.0], [64.0, 48.0], [64.1, 48.0], [64.2, 48.0], [64.3, 48.0], [64.4, 48.0], [64.5, 48.0], [64.6, 48.0], [64.7, 48.0], [64.8, 48.0], [64.9, 48.0], [65.0, 49.0], [65.1, 49.0], [65.2, 49.0], [65.3, 49.0], [65.4, 49.0], [65.5, 49.0], [65.6, 49.0], [65.7, 49.0], [65.8, 49.0], [65.9, 49.0], [66.0, 49.0], [66.1, 49.0], [66.2, 49.0], [66.3, 49.0], [66.4, 49.0], [66.5, 49.0], [66.6, 49.0], [66.7, 49.0], [66.8, 49.0], [66.9, 49.0], [67.0, 49.0], [67.1, 49.0], [67.2, 49.0], [67.3, 49.0], [67.4, 49.0], [67.5, 49.0], [67.6, 49.0], [67.7, 49.0], [67.8, 49.0], [67.9, 49.0], [68.0, 49.0], [68.1, 49.0], [68.2, 49.0], [68.3, 49.0], [68.4, 49.0], [68.5, 49.0], [68.6, 49.0], [68.7, 49.0], [68.8, 49.0], [68.9, 49.0], [69.0, 49.0], [69.1, 49.0], [69.2, 49.0], [69.3, 49.0], [69.4, 49.0], [69.5, 49.0], [69.6, 49.0], [69.7, 49.0], [69.8, 49.0], [69.9, 50.0], [70.0, 50.0], [70.1, 50.0], [70.2, 50.0], [70.3, 50.0], [70.4, 50.0], [70.5, 50.0], [70.6, 50.0], [70.7, 50.0], [70.8, 50.0], [70.9, 50.0], [71.0, 50.0], [71.1, 50.0], [71.2, 50.0], [71.3, 50.0], [71.4, 50.0], [71.5, 50.0], [71.6, 50.0], [71.7, 50.0], [71.8, 50.0], [71.9, 50.0], [72.0, 50.0], [72.1, 50.0], [72.2, 50.0], [72.3, 50.0], [72.4, 50.0], [72.5, 50.0], [72.6, 50.0], [72.7, 50.0], [72.8, 50.0], [72.9, 50.0], [73.0, 50.0], [73.1, 50.0], [73.2, 50.0], [73.3, 50.0], [73.4, 50.0], [73.5, 50.0], [73.6, 50.0], [73.7, 50.0], [73.8, 50.0], [73.9, 50.0], [74.0, 50.0], [74.1, 50.0], [74.2, 50.0], [74.3, 50.0], [74.4, 50.0], [74.5, 50.0], [74.6, 50.0], [74.7, 50.0], [74.8, 50.0], [74.9, 51.0], [75.0, 51.0], [75.1, 51.0], [75.2, 51.0], [75.3, 51.0], [75.4, 51.0], [75.5, 51.0], [75.6, 51.0], [75.7, 51.0], [75.8, 51.0], [75.9, 51.0], [76.0, 51.0], [76.1, 51.0], [76.2, 51.0], [76.3, 51.0], [76.4, 51.0], [76.5, 51.0], [76.6, 51.0], [76.7, 51.0], [76.8, 51.0], [76.9, 51.0], [77.0, 51.0], [77.1, 51.0], [77.2, 51.0], [77.3, 51.0], [77.4, 51.0], [77.5, 51.0], [77.6, 51.0], [77.7, 51.0], [77.8, 51.0], [77.9, 51.0], [78.0, 51.0], [78.1, 51.0], [78.2, 51.0], [78.3, 51.0], [78.4, 51.0], [78.5, 51.0], [78.6, 51.0], [78.7, 51.0], [78.8, 51.0], [78.9, 51.0], [79.0, 51.0], [79.1, 52.0], [79.2, 52.0], [79.3, 52.0], [79.4, 52.0], [79.5, 52.0], [79.6, 52.0], [79.7, 52.0], [79.8, 52.0], [79.9, 52.0], [80.0, 52.0], [80.1, 52.0], [80.2, 52.0], [80.3, 52.0], [80.4, 52.0], [80.5, 52.0], [80.6, 52.0], [80.7, 52.0], [80.8, 52.0], [80.9, 52.0], [81.0, 52.0], [81.1, 52.0], [81.2, 52.0], [81.3, 52.0], [81.4, 52.0], [81.5, 52.0], [81.6, 52.0], [81.7, 52.0], [81.8, 52.0], [81.9, 52.0], [82.0, 52.0], [82.1, 52.0], [82.2, 52.0], [82.3, 52.0], [82.4, 52.0], [82.5, 52.0], [82.6, 53.0], [82.7, 53.0], [82.8, 53.0], [82.9, 53.0], [83.0, 53.0], [83.1, 53.0], [83.2, 53.0], [83.3, 53.0], [83.4, 53.0], [83.5, 53.0], [83.6, 53.0], [83.7, 53.0], [83.8, 53.0], [83.9, 53.0], [84.0, 53.0], [84.1, 53.0], [84.2, 53.0], [84.3, 53.0], [84.4, 53.0], [84.5, 53.0], [84.6, 53.0], [84.7, 53.0], [84.8, 53.0], [84.9, 53.0], [85.0, 53.0], [85.1, 53.0], [85.2, 53.0], [85.3, 53.0], [85.4, 54.0], [85.5, 54.0], [85.6, 54.0], [85.7, 54.0], [85.8, 54.0], [85.9, 54.0], [86.0, 54.0], [86.1, 54.0], [86.2, 54.0], [86.3, 54.0], [86.4, 54.0], [86.5, 54.0], [86.6, 54.0], [86.7, 54.0], [86.8, 54.0], [86.9, 54.0], [87.0, 54.0], [87.1, 54.0], [87.2, 54.0], [87.3, 54.0], [87.4, 54.0], [87.5, 55.0], [87.6, 55.0], [87.7, 55.0], [87.8, 55.0], [87.9, 55.0], [88.0, 55.0], [88.1, 55.0], [88.2, 55.0], [88.3, 55.0], [88.4, 55.0], [88.5, 55.0], [88.6, 55.0], [88.7, 55.0], [88.8, 55.0], [88.9, 56.0], [89.0, 56.0], [89.1, 56.0], [89.2, 56.0], [89.3, 56.0], [89.4, 56.0], [89.5, 56.0], [89.6, 56.0], [89.7, 56.0], [89.8, 56.0], [89.9, 57.0], [90.0, 57.0], [90.1, 57.0], [90.2, 57.0], [90.3, 57.0], [90.4, 57.0], [90.5, 57.0], [90.6, 57.0], [90.7, 57.0], [90.8, 58.0], [90.9, 58.0], [91.0, 58.0], [91.1, 58.0], [91.2, 58.0], [91.3, 58.0], [91.4, 59.0], [91.5, 59.0], [91.6, 59.0], [91.7, 59.0], [91.8, 59.0], [91.9, 59.0], [92.0, 59.0], [92.1, 60.0], [92.2, 60.0], [92.3, 60.0], [92.4, 60.0], [92.5, 60.0], [92.6, 60.0], [92.7, 61.0], [92.8, 61.0], [92.9, 61.0], [93.0, 61.0], [93.1, 62.0], [93.2, 62.0], [93.3, 62.0], [93.4, 62.0], [93.5, 62.0], [93.6, 63.0], [93.7, 63.0], [93.8, 63.0], [93.9, 63.0], [94.0, 64.0], [94.1, 64.0], [94.2, 64.0], [94.3, 65.0], [94.4, 65.0], [94.5, 65.0], [94.6, 65.0], [94.7, 65.0], [94.8, 66.0], [94.9, 66.0], [95.0, 66.0], [95.1, 67.0], [95.2, 67.0], [95.3, 67.0], [95.4, 68.0], [95.5, 68.0], [95.6, 68.0], [95.7, 68.0], [95.8, 69.0], [95.9, 69.0], [96.0, 70.0], [96.1, 70.0], [96.2, 70.0], [96.3, 71.0], [96.4, 71.0], [96.5, 72.0], [96.6, 72.0], [96.7, 72.0], [96.8, 73.0], [96.9, 74.0], [97.0, 74.0], [97.1, 75.0], [97.2, 75.0], [97.3, 76.0], [97.4, 76.0], [97.5, 77.0], [97.6, 78.0], [97.7, 79.0], [97.8, 79.0], [97.9, 80.0], [98.0, 81.0], [98.1, 82.0], [98.2, 84.0], [98.3, 85.0], [98.4, 87.0], [98.5, 90.0], [98.6, 92.0], [98.7, 95.0], [98.8, 97.0], [98.9, 99.0], [99.0, 101.0], [99.1, 103.0], [99.2, 107.0], [99.3, 114.0], [99.4, 120.0], [99.5, 129.0], [99.6, 140.0], [99.7, 157.0], [99.8, 1561.0], [99.9, 2985.0], [100.0, 3833.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 11873.0, "series": [{"data": [[600.0, 483.0], [700.0, 580.0], [800.0, 615.0], [900.0, 719.0], [1000.0, 674.0], [1100.0, 652.0], [1200.0, 631.0], [1300.0, 628.0], [1400.0, 596.0], [1500.0, 543.0], [1600.0, 507.0], [1700.0, 472.0], [1800.0, 434.0], [1900.0, 351.0], [2000.0, 328.0], [2100.0, 336.0], [2200.0, 303.0], [2300.0, 270.0], [2400.0, 234.0], [2500.0, 226.0], [2600.0, 191.0], [2800.0, 166.0], [2700.0, 157.0], [2900.0, 142.0], [3000.0, 112.0], [3100.0, 126.0], [3300.0, 95.0], [3200.0, 82.0], [3400.0, 83.0], [3500.0, 64.0], [3600.0, 66.0], [3700.0, 52.0], [3800.0, 50.0], [3900.0, 40.0], [4000.0, 38.0], [4100.0, 39.0], [4300.0, 27.0], [4200.0, 34.0], [4500.0, 24.0], [4600.0, 22.0], [4400.0, 18.0], [4800.0, 12.0], [4700.0, 17.0], [5000.0, 15.0], [4900.0, 18.0], [5100.0, 10.0], [5200.0, 7.0], [5300.0, 6.0], [5400.0, 10.0], [5600.0, 12.0], [5500.0, 9.0], [5800.0, 7.0], [5700.0, 5.0], [6000.0, 5.0], [5900.0, 2.0], [6100.0, 2.0], [6300.0, 6.0], [6200.0, 2.0], [6600.0, 1.0], [6400.0, 2.0], [6500.0, 2.0], [6900.0, 2.0], [6800.0, 1.0], [6700.0, 2.0], [7000.0, 3.0], [7100.0, 3.0], [7300.0, 2.0], [7200.0, 1.0], [7400.0, 1.0], [7600.0, 1.0], [7500.0, 1.0], [7700.0, 2.0], [8100.0, 2.0], [8400.0, 1.0], [8300.0, 1.0], [9000.0, 1.0], [10400.0, 1.0], [100.0, 3.0], [200.0, 20.0], [300.0, 72.0], [400.0, 175.0], [500.0, 345.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[2100.0, 2.0], [0.0, 11873.0], [2200.0, 1.0], [2400.0, 1.0], [2500.0, 1.0], [2600.0, 3.0], [2900.0, 2.0], [3000.0, 1.0], [3100.0, 1.0], [800.0, 5.0], [200.0, 1.0], [3200.0, 1.0], [3400.0, 1.0], [3500.0, 3.0], [3700.0, 2.0], [3600.0, 1.0], [3800.0, 2.0], [1100.0, 1.0], [300.0, 1.0], [1400.0, 1.0], [1500.0, 1.0], [100.0, 93.0], [1700.0, 1.0], [1800.0, 1.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 10400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 12242.0, "series": [{"data": [[0.0, 12242.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 5929.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5826.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 3.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 15.814018691588771, "minX": 1.74716652E12, "maxY": 24.0, "series": [{"data": [[1.74716718E12, 24.0], [1.74716712E12, 24.0], [1.74716652E12, 23.959839357429725], [1.74716682E12, 24.0], [1.74716676E12, 24.0], [1.74716742E12, 15.814018691588771], [1.74716736E12, 23.935446009389654], [1.74716706E12, 24.0], [1.747167E12, 24.0], [1.74716664E12, 24.0], [1.7471667E12, 24.0], [1.7471673E12, 24.0], [1.74716658E12, 24.0], [1.74716724E12, 24.0], [1.74716694E12, 24.0], [1.74716688E12, 24.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74716742E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 28.666666666666668, "minX": 1.0, "maxY": 1724.1690918653526, "series": [{"data": [[8.0, 942.7142857142857], [2.0, 432.8333333333333], [9.0, 468.375], [10.0, 828.4230769230769], [11.0, 960.0], [12.0, 866.4444444444443], [3.0, 469.5], [13.0, 950.3846153846154], [14.0, 561.5], [15.0, 1145.565217391304], [16.0, 1122.7], [4.0, 558.3076923076923], [1.0, 499.875], [17.0, 1525.625], [18.0, 1387.0769230769229], [19.0, 1248.7419354838707], [20.0, 1355.1265822784808], [5.0, 564.5909090909091], [21.0, 1607.125], [22.0, 1279.3076923076924], [23.0, 1526.5094339622647], [24.0, 1724.1690918653526], [6.0, 364.0], [7.0, 520.9999999999999]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[23.630000000000063, 1697.5744166666595]], "isOverall": false, "label": "Create CSR-Aggregated", "isController": false}, {"data": [[8.0, 36.0], [2.0, 29.38461538461538], [9.0, 35.25], [10.0, 38.00000000000001], [11.0, 37.300000000000004], [12.0, 39.5], [3.0, 28.666666666666668], [13.0, 45.69230769230769], [14.0, 41.0], [15.0, 46.054945054945065], [16.0, 45.0], [4.0, 29.076923076923077], [1.0, 31.0], [17.0, 43.142857142857146], [18.0, 53.96153846153846], [19.0, 46.8125], [20.0, 45.03846153846154], [5.0, 31.77272727272728], [21.0, 44.81250000000001], [22.0, 44.6875], [23.0, 45.14838709677421], [24.0, 55.13435582822101], [6.0, 36.0], [7.0, 33.79166666666667]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}, {"data": [[23.63008333333334, 54.53700000000012]], "isOverall": false, "label": "HTTP Request - enroll-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 24.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 3680.6666666666665, "minX": 1.74716652E12, "maxY": 129865.76666666666, "series": [{"data": [[1.74716718E12, 129405.2], [1.74716712E12, 118420.55], [1.74716652E12, 17916.65], [1.74716682E12, 127826.83333333333], [1.74716676E12, 127677.95], [1.74716742E12, 78885.76666666666], [1.74716736E12, 125365.78333333334], [1.74716706E12, 106029.81666666667], [1.747167E12, 107777.41666666667], [1.74716664E12, 122840.48333333334], [1.7471667E12, 127531.9], [1.7471673E12, 111183.78333333334], [1.74716658E12, 129865.76666666666], [1.74716724E12, 118254.38333333333], [1.74716694E12, 106368.1], [1.74716688E12, 111458.43333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74716718E12, 26089.45], [1.74716712E12, 23861.2], [1.74716652E12, 3680.6666666666665], [1.74716682E12, 25762.466666666667], [1.74716676E12, 25731.55], [1.74716742E12, 15903.633333333333], [1.74716736E12, 25258.083333333332], [1.74716706E12, 21368.5], [1.747167E12, 21725.9], [1.74716664E12, 24752.9], [1.7471667E12, 25702.433333333334], [1.7471673E12, 22406.883333333335], [1.74716658E12, 26176.7], [1.74716724E12, 23833.183333333334], [1.74716694E12, 21429.133333333335], [1.74716688E12, 22467.316666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74716742E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 42.70149253731344, "minX": 1.74716652E12, "maxY": 1944.6347222222219, "series": [{"data": [[1.74716718E12, 1598.4378563283935], [1.74716712E12, 1745.1180124223613], [1.74716652E12, 1265.28], [1.74716682E12, 1611.078341013824], [1.74716676E12, 1620.4152249134945], [1.74716742E12, 1144.0318352059924], [1.74716736E12, 1633.6131301289565], [1.74716706E12, 1944.6347222222219], [1.747167E12, 1916.850889192887], [1.74716664E12, 1674.6778443113774], [1.7471667E12, 1608.6905311778278], [1.7471673E12, 1868.492715231789], [1.74716658E12, 1589.1589103291724], [1.74716724E12, 1734.703611457037], [1.74716694E12, 1937.9986187845302], [1.74716688E12, 1850.1402116402116]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74716718E12, 45.66666666666665], [1.74716712E12, 48.53482587064678], [1.74716652E12, 681.6209677419351], [1.74716682E12, 45.89285714285712], [1.74716676E12, 46.695501730103814], [1.74716742E12, 42.70149253731344], [1.74716736E12, 46.455934195064565], [1.74716706E12, 51.312499999999964], [1.747167E12, 51.733606557377094], [1.74716664E12, 48.63549160671465], [1.7471667E12, 45.706697459584284], [1.7471673E12, 50.39337748344369], [1.74716658E12, 46.520408163265266], [1.74716724E12, 47.546699875467034], [1.74716694E12, 51.24653739612187], [1.74716688E12, 51.257595772787354]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74716742E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74716652E12, "maxY": 681.6048387096773, "series": [{"data": [[1.74716718E12, 0.0], [1.74716712E12, 0.0], [1.74716652E12, 0.0], [1.74716682E12, 0.0], [1.74716676E12, 0.0], [1.74716742E12, 0.0], [1.74716736E12, 0.0], [1.74716706E12, 0.0], [1.747167E12, 0.0], [1.74716664E12, 0.0], [1.7471667E12, 0.0], [1.7471673E12, 0.0], [1.74716658E12, 0.0], [1.74716724E12, 0.0], [1.74716694E12, 0.0], [1.74716688E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74716718E12, 45.65984072810019], [1.74716712E12, 48.52736318407958], [1.74716652E12, 681.6048387096773], [1.74716682E12, 45.885944700460854], [1.74716676E12, 46.678200692041585], [1.74716742E12, 42.69029850746268], [1.74716736E12, 46.450058754406605], [1.74716706E12, 51.30694444444444], [1.747167E12, 51.73087431693992], [1.74716664E12, 48.622302158273385], [1.7471667E12, 45.69168591224022], [1.7471673E12, 50.39072847682123], [1.74716658E12, 46.50453514739232], [1.74716724E12, 47.5429638854296], [1.74716694E12, 51.234072022160696], [1.74716688E12, 51.24834874504626]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74716742E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74716652E12, "maxY": 106.50806451612905, "series": [{"data": [[1.74716718E12, 0.0], [1.74716712E12, 0.0], [1.74716652E12, 0.0], [1.74716682E12, 0.0], [1.74716676E12, 0.0], [1.74716742E12, 0.0], [1.74716736E12, 0.0], [1.74716706E12, 0.0], [1.747167E12, 0.0], [1.74716664E12, 0.0], [1.7471667E12, 0.0], [1.7471673E12, 0.0], [1.74716658E12, 0.0], [1.74716724E12, 0.0], [1.74716694E12, 0.0], [1.74716688E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74716718E12, 0.08532423208191128], [1.74716712E12, 0.08706467661691544], [1.74716652E12, 106.50806451612905], [1.74716682E12, 0.09331797235023037], [1.74716676E12, 0.10495963091118794], [1.74716742E12, 0.10261194029850759], [1.74716736E12, 0.08460634547591073], [1.74716706E12, 0.12083333333333325], [1.747167E12, 0.09972677595628415], [1.74716664E12, 0.1546762589928057], [1.7471667E12, 0.13394919168591224], [1.7471673E12, 0.11788079470198677], [1.74716658E12, 0.1575963718820862], [1.74716724E12, 0.06849315068493152], [1.74716694E12, 0.11495844875346255], [1.74716688E12, 0.12945838837516507]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74716742E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 26.0, "minX": 1.74716652E12, "maxY": 10494.0, "series": [{"data": [[1.74716718E12, 7192.0], [1.74716712E12, 6779.0], [1.74716652E12, 4322.0], [1.74716682E12, 6831.0], [1.74716676E12, 7013.0], [1.74716742E12, 4701.0], [1.74716736E12, 5391.0], [1.74716706E12, 8488.0], [1.747167E12, 7590.0], [1.74716664E12, 7381.0], [1.7471667E12, 6902.0], [1.7471673E12, 8154.0], [1.74716658E12, 7622.0], [1.74716724E12, 7009.0], [1.74716694E12, 8107.0], [1.74716688E12, 10494.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.74716718E12, 2165.0], [1.74716712E12, 2455.0], [1.74716652E12, 2550.0], [1.74716682E12, 2210.6], [1.74716676E12, 2270.0], [1.74716742E12, 1626.1999999999998], [1.74716736E12, 2255.5], [1.74716706E12, 2684.3000000000006], [1.747167E12, 2637.0], [1.74716664E12, 2360.0], [1.7471667E12, 2210.1000000000013], [1.7471673E12, 2565.9], [1.74716658E12, 2234.0], [1.74716724E12, 2388.8999999999996], [1.74716694E12, 2600.999999999999], [1.74716688E12, 2621.6000000000035]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.74716718E12, 4039.4900000000025], [1.74716712E12, 4134.900000000007], [1.74716652E12, 4002.6000000000004], [1.74716682E12, 4037.2399999999943], [1.74716676E12, 3817.100000000003], [1.74716742E12, 3230.0099999999975], [1.74716736E12, 4109.75], [1.74716706E12, 4845.039999999995], [1.747167E12, 4889.879999999982], [1.74716664E12, 4354.899999999999], [1.7471667E12, 3974.34], [1.7471673E12, 5501.240000000022], [1.74716658E12, 3613.7599999999984], [1.74716724E12, 4461.920000000003], [1.74716694E12, 5448.24], [1.74716688E12, 4902.199999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.74716718E12, 2719.2999999999997], [1.74716712E12, 3037.0], [1.74716652E12, 3284.45], [1.74716682E12, 2805.2999999999997], [1.74716676E12, 2756.0], [1.74716742E12, 2100.8999999999996], [1.74716736E12, 2818.0], [1.74716706E12, 3350.95], [1.747167E12, 3309.999999999999], [1.74716664E12, 3024.5], [1.7471667E12, 2647.2999999999984], [1.7471673E12, 3379.1500000000015], [1.74716658E12, 2648.8], [1.74716724E12, 3051.5499999999993], [1.74716694E12, 3451.5499999999965], [1.74716688E12, 3227.8999999999996]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.74716718E12, 37.0], [1.74716712E12, 36.0], [1.74716652E12, 36.0], [1.74716682E12, 37.0], [1.74716676E12, 36.0], [1.74716742E12, 26.0], [1.74716736E12, 36.0], [1.74716706E12, 34.0], [1.747167E12, 37.0], [1.74716664E12, 36.0], [1.7471667E12, 36.0], [1.7471673E12, 36.0], [1.74716658E12, 35.0], [1.74716724E12, 36.0], [1.74716694E12, 36.0], [1.74716688E12, 36.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.74716718E12, 135.0], [1.74716712E12, 392.0], [1.74716652E12, 739.0], [1.74716682E12, 208.5], [1.74716676E12, 212.5], [1.74716742E12, 115.5], [1.74716736E12, 373.5], [1.74716706E12, 293.0], [1.747167E12, 155.0], [1.74716664E12, 321.0], [1.7471667E12, 233.0], [1.7471673E12, 245.0], [1.74716658E12, 146.0], [1.74716724E12, 234.5], [1.74716694E12, 417.0], [1.74716688E12, 142.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74716742E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 61.0, "minX": 1.0, "maxY": 3036.0, "series": [{"data": [[33.0, 231.0], [32.0, 357.0], [2.0, 234.0], [35.0, 446.5], [34.0, 346.5], [36.0, 438.5], [37.0, 76.0], [38.0, 125.0], [39.0, 454.5], [41.0, 484.0], [40.0, 264.0], [42.0, 316.0], [43.0, 453.5], [44.0, 250.0], [4.0, 80.5], [6.0, 299.0], [8.0, 214.5], [10.0, 133.0], [12.0, 444.0], [13.0, 61.0], [14.0, 249.5], [15.0, 227.0], [1.0, 263.0], [16.0, 155.0], [17.0, 561.5], [18.0, 616.0], [19.0, 451.0], [20.0, 227.5], [21.0, 235.5], [22.0, 75.5], [23.0, 103.0], [24.0, 95.5], [25.0, 86.0], [26.0, 175.5], [27.0, 501.0], [28.0, 368.5], [29.0, 448.0], [30.0, 143.5], [31.0, 365.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[35.0, 3036.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 44.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 3036.0, "series": [{"data": [[33.0, 18.0], [32.0, 0.0], [2.0, 16.0], [35.0, 38.5], [34.0, 0.0], [36.0, 0.0], [37.0, 38.0], [38.0, 37.0], [39.0, 0.0], [41.0, 0.0], [40.0, 18.5], [42.0, 17.5], [43.0, 0.0], [44.0, 18.5], [4.0, 14.5], [6.0, 0.0], [8.0, 14.0], [10.0, 14.5], [12.0, 25.0], [13.0, 46.0], [14.0, 0.0], [15.0, 0.0], [1.0, 0.0], [16.0, 13.5], [17.0, 0.0], [18.0, 0.0], [19.0, 36.5], [20.0, 0.0], [21.0, 15.0], [22.0, 35.0], [23.0, 38.0], [24.0, 37.0], [25.0, 37.0], [26.0, 15.0], [27.0, 0.0], [28.0, 0.0], [29.0, 0.0], [30.0, 32.0], [31.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[35.0, 3036.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 44.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 4.55, "minX": 1.74716652E12, "maxY": 29.383333333333333, "series": [{"data": [[1.74716718E12, 29.266666666666666], [1.74716712E12, 26.816666666666666], [1.74716652E12, 4.55], [1.74716682E12, 28.933333333333334], [1.74716676E12, 28.9], [1.74716742E12, 17.45], [1.74716736E12, 28.383333333333333], [1.74716706E12, 24.0], [1.747167E12, 24.383333333333333], [1.74716664E12, 27.816666666666666], [1.7471667E12, 28.866666666666667], [1.7471673E12, 25.166666666666668], [1.74716658E12, 29.383333333333333], [1.74716724E12, 26.766666666666666], [1.74716694E12, 24.1], [1.74716688E12, 25.216666666666665]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74716742E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.74716652E12, "maxY": 14.7, "series": [{"data": [[1.74716718E12, 14.616666666666667], [1.74716712E12, 13.416666666666666], [1.74716652E12, 2.0833333333333335], [1.74716682E12, 14.466666666666667], [1.74716676E12, 14.45], [1.74716742E12, 8.9], [1.74716736E12, 14.216666666666667], [1.74716706E12, 12.0], [1.747167E12, 12.183333333333334], [1.74716664E12, 13.916666666666666], [1.7471667E12, 14.433333333333334], [1.7471673E12, 12.583333333333334], [1.74716658E12, 14.683333333333334], [1.74716724E12, 13.383333333333333], [1.74716694E12, 12.066666666666666], [1.74716688E12, 12.6]], "isOverall": false, "label": "0", "isController": false}, {"data": [[1.74716718E12, 14.65], [1.74716712E12, 13.4], [1.74716652E12, 2.0166666666666666], [1.74716682E12, 14.466666666666667], [1.74716676E12, 14.45], [1.74716742E12, 8.933333333333334], [1.74716736E12, 14.183333333333334], [1.74716706E12, 12.0], [1.747167E12, 12.2], [1.74716664E12, 13.9], [1.7471667E12, 14.433333333333334], [1.7471673E12, 12.583333333333334], [1.74716658E12, 14.7], [1.74716724E12, 13.383333333333333], [1.74716694E12, 12.033333333333333], [1.74716688E12, 12.616666666666667]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.74716652E12, 0.05]], "isOverall": false, "label": "400", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74716742E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.74716652E12, "maxY": 14.7, "series": [{"data": [[1.74716718E12, 14.65], [1.74716712E12, 13.4], [1.74716652E12, 2.0166666666666666], [1.74716682E12, 14.466666666666667], [1.74716676E12, 14.45], [1.74716742E12, 8.933333333333334], [1.74716736E12, 14.183333333333334], [1.74716706E12, 12.0], [1.747167E12, 12.2], [1.74716664E12, 13.9], [1.7471667E12, 14.433333333333334], [1.7471673E12, 12.583333333333334], [1.74716658E12, 14.7], [1.74716724E12, 13.383333333333333], [1.74716694E12, 12.033333333333333], [1.74716688E12, 12.616666666666667]], "isOverall": false, "label": "HTTP Request - enroll-success", "isController": false}, {"data": [[1.74716652E12, 0.05]], "isOverall": false, "label": "HTTP Request - enroll-failure", "isController": false}, {"data": [[1.74716718E12, 14.616666666666667], [1.74716712E12, 13.416666666666666], [1.74716652E12, 2.0833333333333335], [1.74716682E12, 14.466666666666667], [1.74716676E12, 14.45], [1.74716742E12, 8.9], [1.74716736E12, 14.216666666666667], [1.74716706E12, 12.0], [1.747167E12, 12.183333333333334], [1.74716664E12, 13.916666666666666], [1.7471667E12, 14.433333333333334], [1.7471673E12, 12.583333333333334], [1.74716658E12, 14.683333333333334], [1.74716724E12, 13.383333333333333], [1.74716694E12, 12.066666666666666], [1.74716688E12, 12.6]], "isOverall": false, "label": "Create CSR-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74716742E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.74716652E12, "maxY": 29.383333333333333, "series": [{"data": [[1.74716718E12, 29.266666666666666], [1.74716712E12, 26.816666666666666], [1.74716652E12, 4.1], [1.74716682E12, 28.933333333333334], [1.74716676E12, 28.9], [1.74716742E12, 17.833333333333332], [1.74716736E12, 28.4], [1.74716706E12, 24.0], [1.747167E12, 24.383333333333333], [1.74716664E12, 27.816666666666666], [1.7471667E12, 28.866666666666667], [1.7471673E12, 25.166666666666668], [1.74716658E12, 29.383333333333333], [1.74716724E12, 26.766666666666666], [1.74716694E12, 24.1], [1.74716688E12, 25.216666666666665]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.74716652E12, 0.05]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74716742E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

