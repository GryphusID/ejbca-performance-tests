/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 28.0, "minX": 0.0, "maxY": 9989.0, "series": [{"data": [[0.0, 129.0], [0.1, 242.0], [0.2, 312.0], [0.3, 339.0], [0.4, 368.0], [0.5, 380.0], [0.6, 388.0], [0.7, 402.0], [0.8, 413.0], [0.9, 425.0], [1.0, 430.0], [1.1, 435.0], [1.2, 448.0], [1.3, 455.0], [1.4, 465.0], [1.5, 471.0], [1.6, 477.0], [1.7, 483.0], [1.8, 488.0], [1.9, 493.0], [2.0, 497.0], [2.1, 500.0], [2.2, 504.0], [2.3, 512.0], [2.4, 516.0], [2.5, 521.0], [2.6, 523.0], [2.7, 528.0], [2.8, 533.0], [2.9, 538.0], [3.0, 543.0], [3.1, 545.0], [3.2, 548.0], [3.3, 551.0], [3.4, 555.0], [3.5, 559.0], [3.6, 563.0], [3.7, 566.0], [3.8, 569.0], [3.9, 571.0], [4.0, 575.0], [4.1, 577.0], [4.2, 581.0], [4.3, 583.0], [4.4, 589.0], [4.5, 591.0], [4.6, 595.0], [4.7, 596.0], [4.8, 600.0], [4.9, 603.0], [5.0, 606.0], [5.1, 610.0], [5.2, 613.0], [5.3, 617.0], [5.4, 619.0], [5.5, 621.0], [5.6, 625.0], [5.7, 627.0], [5.8, 631.0], [5.9, 633.0], [6.0, 636.0], [6.1, 639.0], [6.2, 642.0], [6.3, 644.0], [6.4, 646.0], [6.5, 649.0], [6.6, 651.0], [6.7, 653.0], [6.8, 655.0], [6.9, 659.0], [7.0, 661.0], [7.1, 663.0], [7.2, 664.0], [7.3, 667.0], [7.4, 668.0], [7.5, 669.0], [7.6, 671.0], [7.7, 674.0], [7.8, 677.0], [7.9, 679.0], [8.0, 681.0], [8.1, 684.0], [8.2, 687.0], [8.3, 690.0], [8.4, 692.0], [8.5, 695.0], [8.6, 698.0], [8.7, 701.0], [8.8, 704.0], [8.9, 707.0], [9.0, 710.0], [9.1, 712.0], [9.2, 713.0], [9.3, 716.0], [9.4, 718.0], [9.5, 720.0], [9.6, 722.0], [9.7, 723.0], [9.8, 725.0], [9.9, 727.0], [10.0, 729.0], [10.1, 731.0], [10.2, 733.0], [10.3, 735.0], [10.4, 737.0], [10.5, 740.0], [10.6, 741.0], [10.7, 743.0], [10.8, 745.0], [10.9, 748.0], [11.0, 750.0], [11.1, 753.0], [11.2, 756.0], [11.3, 758.0], [11.4, 760.0], [11.5, 763.0], [11.6, 764.0], [11.7, 766.0], [11.8, 769.0], [11.9, 770.0], [12.0, 773.0], [12.1, 774.0], [12.2, 776.0], [12.3, 778.0], [12.4, 780.0], [12.5, 781.0], [12.6, 784.0], [12.7, 785.0], [12.8, 787.0], [12.9, 790.0], [13.0, 792.0], [13.1, 793.0], [13.2, 795.0], [13.3, 797.0], [13.4, 799.0], [13.5, 802.0], [13.6, 804.0], [13.7, 806.0], [13.8, 808.0], [13.9, 810.0], [14.0, 811.0], [14.1, 814.0], [14.2, 816.0], [14.3, 817.0], [14.4, 819.0], [14.5, 821.0], [14.6, 822.0], [14.7, 823.0], [14.8, 824.0], [14.9, 826.0], [15.0, 828.0], [15.1, 830.0], [15.2, 834.0], [15.3, 836.0], [15.4, 838.0], [15.5, 840.0], [15.6, 843.0], [15.7, 845.0], [15.8, 847.0], [15.9, 849.0], [16.0, 850.0], [16.1, 852.0], [16.2, 854.0], [16.3, 855.0], [16.4, 858.0], [16.5, 859.0], [16.6, 861.0], [16.7, 864.0], [16.8, 865.0], [16.9, 868.0], [17.0, 870.0], [17.1, 871.0], [17.2, 873.0], [17.3, 874.0], [17.4, 877.0], [17.5, 879.0], [17.6, 881.0], [17.7, 882.0], [17.8, 884.0], [17.9, 885.0], [18.0, 886.0], [18.1, 888.0], [18.2, 889.0], [18.3, 892.0], [18.4, 894.0], [18.5, 896.0], [18.6, 897.0], [18.7, 901.0], [18.8, 903.0], [18.9, 904.0], [19.0, 906.0], [19.1, 908.0], [19.2, 909.0], [19.3, 911.0], [19.4, 913.0], [19.5, 915.0], [19.6, 917.0], [19.7, 919.0], [19.8, 922.0], [19.9, 925.0], [20.0, 927.0], [20.1, 929.0], [20.2, 930.0], [20.3, 933.0], [20.4, 934.0], [20.5, 936.0], [20.6, 938.0], [20.7, 939.0], [20.8, 942.0], [20.9, 944.0], [21.0, 945.0], [21.1, 947.0], [21.2, 950.0], [21.3, 952.0], [21.4, 954.0], [21.5, 956.0], [21.6, 958.0], [21.7, 960.0], [21.8, 962.0], [21.9, 963.0], [22.0, 965.0], [22.1, 967.0], [22.2, 969.0], [22.3, 971.0], [22.4, 973.0], [22.5, 974.0], [22.6, 976.0], [22.7, 979.0], [22.8, 982.0], [22.9, 984.0], [23.0, 986.0], [23.1, 988.0], [23.2, 990.0], [23.3, 991.0], [23.4, 994.0], [23.5, 995.0], [23.6, 997.0], [23.7, 1000.0], [23.8, 1002.0], [23.9, 1004.0], [24.0, 1006.0], [24.1, 1006.0], [24.2, 1008.0], [24.3, 1010.0], [24.4, 1012.0], [24.5, 1014.0], [24.6, 1016.0], [24.7, 1018.0], [24.8, 1019.0], [24.9, 1020.0], [25.0, 1022.0], [25.1, 1023.0], [25.2, 1025.0], [25.3, 1026.0], [25.4, 1028.0], [25.5, 1031.0], [25.6, 1032.0], [25.7, 1034.0], [25.8, 1036.0], [25.9, 1037.0], [26.0, 1038.0], [26.1, 1041.0], [26.2, 1044.0], [26.3, 1046.0], [26.4, 1047.0], [26.5, 1049.0], [26.6, 1051.0], [26.7, 1053.0], [26.8, 1055.0], [26.9, 1057.0], [27.0, 1059.0], [27.1, 1060.0], [27.2, 1064.0], [27.3, 1066.0], [27.4, 1068.0], [27.5, 1070.0], [27.6, 1072.0], [27.7, 1073.0], [27.8, 1075.0], [27.9, 1077.0], [28.0, 1079.0], [28.1, 1081.0], [28.2, 1083.0], [28.3, 1085.0], [28.4, 1086.0], [28.5, 1089.0], [28.6, 1091.0], [28.7, 1092.0], [28.8, 1095.0], [28.9, 1096.0], [29.0, 1099.0], [29.1, 1100.0], [29.2, 1103.0], [29.3, 1104.0], [29.4, 1108.0], [29.5, 1110.0], [29.6, 1111.0], [29.7, 1113.0], [29.8, 1115.0], [29.9, 1116.0], [30.0, 1119.0], [30.1, 1120.0], [30.2, 1123.0], [30.3, 1124.0], [30.4, 1125.0], [30.5, 1127.0], [30.6, 1128.0], [30.7, 1131.0], [30.8, 1133.0], [30.9, 1134.0], [31.0, 1137.0], [31.1, 1139.0], [31.2, 1140.0], [31.3, 1142.0], [31.4, 1143.0], [31.5, 1145.0], [31.6, 1147.0], [31.7, 1149.0], [31.8, 1150.0], [31.9, 1151.0], [32.0, 1153.0], [32.1, 1154.0], [32.2, 1156.0], [32.3, 1158.0], [32.4, 1160.0], [32.5, 1162.0], [32.6, 1164.0], [32.7, 1166.0], [32.8, 1168.0], [32.9, 1170.0], [33.0, 1172.0], [33.1, 1173.0], [33.2, 1176.0], [33.3, 1178.0], [33.4, 1178.0], [33.5, 1181.0], [33.6, 1182.0], [33.7, 1185.0], [33.8, 1187.0], [33.9, 1188.0], [34.0, 1190.0], [34.1, 1192.0], [34.2, 1194.0], [34.3, 1196.0], [34.4, 1198.0], [34.5, 1200.0], [34.6, 1202.0], [34.7, 1204.0], [34.8, 1206.0], [34.9, 1207.0], [35.0, 1208.0], [35.1, 1210.0], [35.2, 1212.0], [35.3, 1213.0], [35.4, 1216.0], [35.5, 1217.0], [35.6, 1218.0], [35.7, 1221.0], [35.8, 1223.0], [35.9, 1225.0], [36.0, 1227.0], [36.1, 1229.0], [36.2, 1231.0], [36.3, 1232.0], [36.4, 1234.0], [36.5, 1236.0], [36.6, 1237.0], [36.7, 1239.0], [36.8, 1242.0], [36.9, 1243.0], [37.0, 1245.0], [37.1, 1246.0], [37.2, 1248.0], [37.3, 1250.0], [37.4, 1252.0], [37.5, 1253.0], [37.6, 1255.0], [37.7, 1256.0], [37.8, 1257.0], [37.9, 1259.0], [38.0, 1260.0], [38.1, 1263.0], [38.2, 1266.0], [38.3, 1267.0], [38.4, 1270.0], [38.5, 1272.0], [38.6, 1274.0], [38.7, 1276.0], [38.8, 1279.0], [38.9, 1281.0], [39.0, 1284.0], [39.1, 1286.0], [39.2, 1288.0], [39.3, 1291.0], [39.4, 1293.0], [39.5, 1295.0], [39.6, 1296.0], [39.7, 1298.0], [39.8, 1300.0], [39.9, 1303.0], [40.0, 1305.0], [40.1, 1306.0], [40.2, 1307.0], [40.3, 1311.0], [40.4, 1312.0], [40.5, 1315.0], [40.6, 1317.0], [40.7, 1319.0], [40.8, 1322.0], [40.9, 1323.0], [41.0, 1325.0], [41.1, 1326.0], [41.2, 1329.0], [41.3, 1330.0], [41.4, 1333.0], [41.5, 1335.0], [41.6, 1337.0], [41.7, 1339.0], [41.8, 1342.0], [41.9, 1344.0], [42.0, 1347.0], [42.1, 1349.0], [42.2, 1351.0], [42.3, 1352.0], [42.4, 1353.0], [42.5, 1356.0], [42.6, 1357.0], [42.7, 1360.0], [42.8, 1362.0], [42.9, 1363.0], [43.0, 1367.0], [43.1, 1369.0], [43.2, 1371.0], [43.3, 1372.0], [43.4, 1373.0], [43.5, 1376.0], [43.6, 1379.0], [43.7, 1381.0], [43.8, 1383.0], [43.9, 1387.0], [44.0, 1388.0], [44.1, 1391.0], [44.2, 1394.0], [44.3, 1395.0], [44.4, 1397.0], [44.5, 1400.0], [44.6, 1402.0], [44.7, 1405.0], [44.8, 1407.0], [44.9, 1409.0], [45.0, 1411.0], [45.1, 1413.0], [45.2, 1415.0], [45.3, 1417.0], [45.4, 1419.0], [45.5, 1422.0], [45.6, 1424.0], [45.7, 1426.0], [45.8, 1429.0], [45.9, 1430.0], [46.0, 1432.0], [46.1, 1434.0], [46.2, 1436.0], [46.3, 1438.0], [46.4, 1442.0], [46.5, 1444.0], [46.6, 1447.0], [46.7, 1450.0], [46.8, 1452.0], [46.9, 1455.0], [47.0, 1456.0], [47.1, 1457.0], [47.2, 1459.0], [47.3, 1461.0], [47.4, 1463.0], [47.5, 1465.0], [47.6, 1466.0], [47.7, 1468.0], [47.8, 1470.0], [47.9, 1473.0], [48.0, 1474.0], [48.1, 1477.0], [48.2, 1479.0], [48.3, 1481.0], [48.4, 1485.0], [48.5, 1487.0], [48.6, 1490.0], [48.7, 1491.0], [48.8, 1494.0], [48.9, 1496.0], [49.0, 1497.0], [49.1, 1500.0], [49.2, 1502.0], [49.3, 1503.0], [49.4, 1506.0], [49.5, 1509.0], [49.6, 1511.0], [49.7, 1513.0], [49.8, 1516.0], [49.9, 1519.0], [50.0, 1521.0], [50.1, 1522.0], [50.2, 1523.0], [50.3, 1525.0], [50.4, 1527.0], [50.5, 1530.0], [50.6, 1531.0], [50.7, 1534.0], [50.8, 1536.0], [50.9, 1539.0], [51.0, 1540.0], [51.1, 1543.0], [51.2, 1545.0], [51.3, 1547.0], [51.4, 1550.0], [51.5, 1552.0], [51.6, 1554.0], [51.7, 1557.0], [51.8, 1561.0], [51.9, 1565.0], [52.0, 1568.0], [52.1, 1569.0], [52.2, 1571.0], [52.3, 1573.0], [52.4, 1575.0], [52.5, 1577.0], [52.6, 1579.0], [52.7, 1582.0], [52.8, 1583.0], [52.9, 1586.0], [53.0, 1588.0], [53.1, 1591.0], [53.2, 1593.0], [53.3, 1596.0], [53.4, 1598.0], [53.5, 1599.0], [53.6, 1602.0], [53.7, 1603.0], [53.8, 1605.0], [53.9, 1608.0], [54.0, 1610.0], [54.1, 1612.0], [54.2, 1615.0], [54.3, 1618.0], [54.4, 1620.0], [54.5, 1622.0], [54.6, 1624.0], [54.7, 1625.0], [54.8, 1627.0], [54.9, 1629.0], [55.0, 1632.0], [55.1, 1634.0], [55.2, 1637.0], [55.3, 1639.0], [55.4, 1641.0], [55.5, 1643.0], [55.6, 1645.0], [55.7, 1648.0], [55.8, 1650.0], [55.9, 1654.0], [56.0, 1656.0], [56.1, 1659.0], [56.2, 1663.0], [56.3, 1665.0], [56.4, 1668.0], [56.5, 1671.0], [56.6, 1674.0], [56.7, 1677.0], [56.8, 1679.0], [56.9, 1682.0], [57.0, 1684.0], [57.1, 1688.0], [57.2, 1691.0], [57.3, 1693.0], [57.4, 1696.0], [57.5, 1698.0], [57.6, 1700.0], [57.7, 1704.0], [57.8, 1708.0], [57.9, 1712.0], [58.0, 1714.0], [58.1, 1717.0], [58.2, 1719.0], [58.3, 1722.0], [58.4, 1724.0], [58.5, 1727.0], [58.6, 1730.0], [58.7, 1731.0], [58.8, 1735.0], [58.9, 1739.0], [59.0, 1740.0], [59.1, 1743.0], [59.2, 1746.0], [59.3, 1748.0], [59.4, 1750.0], [59.5, 1751.0], [59.6, 1753.0], [59.7, 1756.0], [59.8, 1758.0], [59.9, 1760.0], [60.0, 1762.0], [60.1, 1764.0], [60.2, 1768.0], [60.3, 1769.0], [60.4, 1773.0], [60.5, 1776.0], [60.6, 1779.0], [60.7, 1783.0], [60.8, 1785.0], [60.9, 1787.0], [61.0, 1789.0], [61.1, 1792.0], [61.2, 1796.0], [61.3, 1798.0], [61.4, 1802.0], [61.5, 1804.0], [61.6, 1806.0], [61.7, 1808.0], [61.8, 1813.0], [61.9, 1817.0], [62.0, 1821.0], [62.1, 1823.0], [62.2, 1826.0], [62.3, 1829.0], [62.4, 1833.0], [62.5, 1836.0], [62.6, 1839.0], [62.7, 1844.0], [62.8, 1846.0], [62.9, 1850.0], [63.0, 1852.0], [63.1, 1853.0], [63.2, 1856.0], [63.3, 1859.0], [63.4, 1862.0], [63.5, 1866.0], [63.6, 1868.0], [63.7, 1870.0], [63.8, 1873.0], [63.9, 1876.0], [64.0, 1880.0], [64.1, 1883.0], [64.2, 1885.0], [64.3, 1888.0], [64.4, 1892.0], [64.5, 1894.0], [64.6, 1898.0], [64.7, 1901.0], [64.8, 1905.0], [64.9, 1907.0], [65.0, 1909.0], [65.1, 1912.0], [65.2, 1915.0], [65.3, 1920.0], [65.4, 1922.0], [65.5, 1925.0], [65.6, 1928.0], [65.7, 1932.0], [65.8, 1935.0], [65.9, 1939.0], [66.0, 1943.0], [66.1, 1946.0], [66.2, 1948.0], [66.3, 1951.0], [66.4, 1955.0], [66.5, 1959.0], [66.6, 1964.0], [66.7, 1968.0], [66.8, 1971.0], [66.9, 1974.0], [67.0, 1977.0], [67.1, 1981.0], [67.2, 1983.0], [67.3, 1987.0], [67.4, 1991.0], [67.5, 1994.0], [67.6, 1997.0], [67.7, 2001.0], [67.8, 2006.0], [67.9, 2009.0], [68.0, 2012.0], [68.1, 2017.0], [68.2, 2019.0], [68.3, 2023.0], [68.4, 2026.0], [68.5, 2029.0], [68.6, 2033.0], [68.7, 2038.0], [68.8, 2040.0], [68.9, 2042.0], [69.0, 2047.0], [69.1, 2051.0], [69.2, 2057.0], [69.3, 2060.0], [69.4, 2063.0], [69.5, 2066.0], [69.6, 2069.0], [69.7, 2072.0], [69.8, 2077.0], [69.9, 2079.0], [70.0, 2081.0], [70.1, 2084.0], [70.2, 2086.0], [70.3, 2090.0], [70.4, 2092.0], [70.5, 2095.0], [70.6, 2099.0], [70.7, 2103.0], [70.8, 2107.0], [70.9, 2109.0], [71.0, 2112.0], [71.1, 2115.0], [71.2, 2119.0], [71.3, 2121.0], [71.4, 2126.0], [71.5, 2129.0], [71.6, 2132.0], [71.7, 2135.0], [71.8, 2138.0], [71.9, 2141.0], [72.0, 2145.0], [72.1, 2149.0], [72.2, 2151.0], [72.3, 2157.0], [72.4, 2162.0], [72.5, 2165.0], [72.6, 2167.0], [72.7, 2171.0], [72.8, 2175.0], [72.9, 2181.0], [73.0, 2186.0], [73.1, 2191.0], [73.2, 2195.0], [73.3, 2199.0], [73.4, 2204.0], [73.5, 2207.0], [73.6, 2212.0], [73.7, 2215.0], [73.8, 2219.0], [73.9, 2221.0], [74.0, 2226.0], [74.1, 2230.0], [74.2, 2234.0], [74.3, 2238.0], [74.4, 2245.0], [74.5, 2249.0], [74.6, 2252.0], [74.7, 2259.0], [74.8, 2264.0], [74.9, 2268.0], [75.0, 2273.0], [75.1, 2277.0], [75.2, 2280.0], [75.3, 2283.0], [75.4, 2286.0], [75.5, 2291.0], [75.6, 2295.0], [75.7, 2298.0], [75.8, 2302.0], [75.9, 2306.0], [76.0, 2310.0], [76.1, 2316.0], [76.2, 2322.0], [76.3, 2327.0], [76.4, 2329.0], [76.5, 2333.0], [76.6, 2338.0], [76.7, 2344.0], [76.8, 2349.0], [76.9, 2353.0], [77.0, 2356.0], [77.1, 2359.0], [77.2, 2362.0], [77.3, 2365.0], [77.4, 2369.0], [77.5, 2374.0], [77.6, 2378.0], [77.7, 2382.0], [77.8, 2388.0], [77.9, 2392.0], [78.0, 2398.0], [78.1, 2401.0], [78.2, 2409.0], [78.3, 2415.0], [78.4, 2421.0], [78.5, 2425.0], [78.6, 2432.0], [78.7, 2436.0], [78.8, 2439.0], [78.9, 2445.0], [79.0, 2451.0], [79.1, 2455.0], [79.2, 2461.0], [79.3, 2466.0], [79.4, 2470.0], [79.5, 2476.0], [79.6, 2481.0], [79.7, 2483.0], [79.8, 2488.0], [79.9, 2491.0], [80.0, 2496.0], [80.1, 2498.0], [80.2, 2505.0], [80.3, 2509.0], [80.4, 2513.0], [80.5, 2520.0], [80.6, 2526.0], [80.7, 2534.0], [80.8, 2538.0], [80.9, 2541.0], [81.0, 2548.0], [81.1, 2553.0], [81.2, 2557.0], [81.3, 2560.0], [81.4, 2566.0], [81.5, 2572.0], [81.6, 2575.0], [81.7, 2581.0], [81.8, 2586.0], [81.9, 2591.0], [82.0, 2597.0], [82.1, 2604.0], [82.2, 2608.0], [82.3, 2618.0], [82.4, 2623.0], [82.5, 2628.0], [82.6, 2632.0], [82.7, 2638.0], [82.8, 2647.0], [82.9, 2654.0], [83.0, 2660.0], [83.1, 2664.0], [83.2, 2669.0], [83.3, 2672.0], [83.4, 2677.0], [83.5, 2679.0], [83.6, 2684.0], [83.7, 2693.0], [83.8, 2699.0], [83.9, 2705.0], [84.0, 2711.0], [84.1, 2714.0], [84.2, 2721.0], [84.3, 2728.0], [84.4, 2738.0], [84.5, 2748.0], [84.6, 2753.0], [84.7, 2758.0], [84.8, 2766.0], [84.9, 2770.0], [85.0, 2778.0], [85.1, 2783.0], [85.2, 2791.0], [85.3, 2798.0], [85.4, 2801.0], [85.5, 2808.0], [85.6, 2814.0], [85.7, 2821.0], [85.8, 2826.0], [85.9, 2836.0], [86.0, 2841.0], [86.1, 2853.0], [86.2, 2857.0], [86.3, 2865.0], [86.4, 2870.0], [86.5, 2880.0], [86.6, 2886.0], [86.7, 2890.0], [86.8, 2899.0], [86.9, 2906.0], [87.0, 2917.0], [87.1, 2923.0], [87.2, 2936.0], [87.3, 2943.0], [87.4, 2955.0], [87.5, 2962.0], [87.6, 2969.0], [87.7, 2977.0], [87.8, 2988.0], [87.9, 2996.0], [88.0, 3004.0], [88.1, 3011.0], [88.2, 3019.0], [88.3, 3024.0], [88.4, 3030.0], [88.5, 3038.0], [88.6, 3047.0], [88.7, 3059.0], [88.8, 3067.0], [88.9, 3074.0], [89.0, 3079.0], [89.1, 3086.0], [89.2, 3099.0], [89.3, 3111.0], [89.4, 3122.0], [89.5, 3130.0], [89.6, 3142.0], [89.7, 3157.0], [89.8, 3172.0], [89.9, 3180.0], [90.0, 3189.0], [90.1, 3198.0], [90.2, 3206.0], [90.3, 3214.0], [90.4, 3223.0], [90.5, 3240.0], [90.6, 3257.0], [90.7, 3266.0], [90.8, 3275.0], [90.9, 3286.0], [91.0, 3295.0], [91.1, 3303.0], [91.2, 3314.0], [91.3, 3328.0], [91.4, 3339.0], [91.5, 3353.0], [91.6, 3365.0], [91.7, 3388.0], [91.8, 3395.0], [91.9, 3405.0], [92.0, 3415.0], [92.1, 3424.0], [92.2, 3436.0], [92.3, 3446.0], [92.4, 3456.0], [92.5, 3467.0], [92.6, 3475.0], [92.7, 3489.0], [92.8, 3504.0], [92.9, 3514.0], [93.0, 3522.0], [93.1, 3530.0], [93.2, 3538.0], [93.3, 3556.0], [93.4, 3569.0], [93.5, 3583.0], [93.6, 3595.0], [93.7, 3608.0], [93.8, 3620.0], [93.9, 3642.0], [94.0, 3653.0], [94.1, 3664.0], [94.2, 3684.0], [94.3, 3699.0], [94.4, 3713.0], [94.5, 3733.0], [94.6, 3745.0], [94.7, 3756.0], [94.8, 3769.0], [94.9, 3779.0], [95.0, 3793.0], [95.1, 3816.0], [95.2, 3830.0], [95.3, 3844.0], [95.4, 3871.0], [95.5, 3905.0], [95.6, 3925.0], [95.7, 3937.0], [95.8, 3960.0], [95.9, 3996.0], [96.0, 4022.0], [96.1, 4048.0], [96.2, 4077.0], [96.3, 4111.0], [96.4, 4136.0], [96.5, 4152.0], [96.6, 4183.0], [96.7, 4214.0], [96.8, 4252.0], [96.9, 4286.0], [97.0, 4326.0], [97.1, 4360.0], [97.2, 4401.0], [97.3, 4425.0], [97.4, 4447.0], [97.5, 4472.0], [97.6, 4517.0], [97.7, 4564.0], [97.8, 4613.0], [97.9, 4634.0], [98.0, 4690.0], [98.1, 4723.0], [98.2, 4761.0], [98.3, 4808.0], [98.4, 4865.0], [98.5, 4933.0], [98.6, 5025.0], [98.7, 5061.0], [98.8, 5156.0], [98.9, 5239.0], [99.0, 5316.0], [99.1, 5426.0], [99.2, 5527.0], [99.3, 5687.0], [99.4, 5796.0], [99.5, 5981.0], [99.6, 6169.0], [99.7, 6442.0], [99.8, 6839.0], [99.9, 7467.0], [100.0, 9989.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 28.0], [0.1, 29.0], [0.2, 30.0], [0.3, 30.0], [0.4, 32.0], [0.5, 35.0], [0.6, 36.0], [0.7, 37.0], [0.8, 37.0], [0.9, 37.0], [1.0, 37.0], [1.1, 37.0], [1.2, 37.0], [1.3, 38.0], [1.4, 38.0], [1.5, 38.0], [1.6, 38.0], [1.7, 38.0], [1.8, 38.0], [1.9, 38.0], [2.0, 38.0], [2.1, 38.0], [2.2, 38.0], [2.3, 38.0], [2.4, 38.0], [2.5, 38.0], [2.6, 38.0], [2.7, 38.0], [2.8, 38.0], [2.9, 39.0], [3.0, 39.0], [3.1, 39.0], [3.2, 39.0], [3.3, 39.0], [3.4, 39.0], [3.5, 39.0], [3.6, 39.0], [3.7, 39.0], [3.8, 39.0], [3.9, 39.0], [4.0, 39.0], [4.1, 39.0], [4.2, 39.0], [4.3, 39.0], [4.4, 39.0], [4.5, 39.0], [4.6, 39.0], [4.7, 39.0], [4.8, 39.0], [4.9, 39.0], [5.0, 39.0], [5.1, 39.0], [5.2, 39.0], [5.3, 39.0], [5.4, 39.0], [5.5, 39.0], [5.6, 39.0], [5.7, 40.0], [5.8, 40.0], [5.9, 40.0], [6.0, 40.0], [6.1, 40.0], [6.2, 40.0], [6.3, 40.0], [6.4, 40.0], [6.5, 40.0], [6.6, 40.0], [6.7, 40.0], [6.8, 40.0], [6.9, 40.0], [7.0, 40.0], [7.1, 40.0], [7.2, 40.0], [7.3, 40.0], [7.4, 40.0], [7.5, 40.0], [7.6, 40.0], [7.7, 40.0], [7.8, 40.0], [7.9, 40.0], [8.0, 40.0], [8.1, 40.0], [8.2, 40.0], [8.3, 40.0], [8.4, 40.0], [8.5, 40.0], [8.6, 40.0], [8.7, 40.0], [8.8, 40.0], [8.9, 40.0], [9.0, 40.0], [9.1, 40.0], [9.2, 40.0], [9.3, 40.0], [9.4, 40.0], [9.5, 40.0], [9.6, 41.0], [9.7, 41.0], [9.8, 41.0], [9.9, 41.0], [10.0, 41.0], [10.1, 41.0], [10.2, 41.0], [10.3, 41.0], [10.4, 41.0], [10.5, 41.0], [10.6, 41.0], [10.7, 41.0], [10.8, 41.0], [10.9, 41.0], [11.0, 41.0], [11.1, 41.0], [11.2, 41.0], [11.3, 41.0], [11.4, 41.0], [11.5, 41.0], [11.6, 41.0], [11.7, 41.0], [11.8, 41.0], [11.9, 41.0], [12.0, 41.0], [12.1, 41.0], [12.2, 41.0], [12.3, 41.0], [12.4, 41.0], [12.5, 41.0], [12.6, 41.0], [12.7, 41.0], [12.8, 41.0], [12.9, 41.0], [13.0, 41.0], [13.1, 41.0], [13.2, 41.0], [13.3, 41.0], [13.4, 41.0], [13.5, 41.0], [13.6, 41.0], [13.7, 41.0], [13.8, 41.0], [13.9, 41.0], [14.0, 41.0], [14.1, 41.0], [14.2, 41.0], [14.3, 41.0], [14.4, 41.0], [14.5, 41.0], [14.6, 41.0], [14.7, 42.0], [14.8, 42.0], [14.9, 42.0], [15.0, 42.0], [15.1, 42.0], [15.2, 42.0], [15.3, 42.0], [15.4, 42.0], [15.5, 42.0], [15.6, 42.0], [15.7, 42.0], [15.8, 42.0], [15.9, 42.0], [16.0, 42.0], [16.1, 42.0], [16.2, 42.0], [16.3, 42.0], [16.4, 42.0], [16.5, 42.0], [16.6, 42.0], [16.7, 42.0], [16.8, 42.0], [16.9, 42.0], [17.0, 42.0], [17.1, 42.0], [17.2, 42.0], [17.3, 42.0], [17.4, 42.0], [17.5, 42.0], [17.6, 42.0], [17.7, 42.0], [17.8, 42.0], [17.9, 42.0], [18.0, 42.0], [18.1, 42.0], [18.2, 42.0], [18.3, 42.0], [18.4, 42.0], [18.5, 42.0], [18.6, 42.0], [18.7, 42.0], [18.8, 42.0], [18.9, 42.0], [19.0, 42.0], [19.1, 42.0], [19.2, 42.0], [19.3, 42.0], [19.4, 42.0], [19.5, 42.0], [19.6, 42.0], [19.7, 42.0], [19.8, 42.0], [19.9, 42.0], [20.0, 42.0], [20.1, 42.0], [20.2, 42.0], [20.3, 42.0], [20.4, 42.0], [20.5, 42.0], [20.6, 42.0], [20.7, 43.0], [20.8, 43.0], [20.9, 43.0], [21.0, 43.0], [21.1, 43.0], [21.2, 43.0], [21.3, 43.0], [21.4, 43.0], [21.5, 43.0], [21.6, 43.0], [21.7, 43.0], [21.8, 43.0], [21.9, 43.0], [22.0, 43.0], [22.1, 43.0], [22.2, 43.0], [22.3, 43.0], [22.4, 43.0], [22.5, 43.0], [22.6, 43.0], [22.7, 43.0], [22.8, 43.0], [22.9, 43.0], [23.0, 43.0], [23.1, 43.0], [23.2, 43.0], [23.3, 43.0], [23.4, 43.0], [23.5, 43.0], [23.6, 43.0], [23.7, 43.0], [23.8, 43.0], [23.9, 43.0], [24.0, 43.0], [24.1, 43.0], [24.2, 43.0], [24.3, 43.0], [24.4, 43.0], [24.5, 43.0], [24.6, 43.0], [24.7, 43.0], [24.8, 43.0], [24.9, 43.0], [25.0, 43.0], [25.1, 43.0], [25.2, 43.0], [25.3, 43.0], [25.4, 43.0], [25.5, 43.0], [25.6, 43.0], [25.7, 43.0], [25.8, 43.0], [25.9, 43.0], [26.0, 43.0], [26.1, 43.0], [26.2, 43.0], [26.3, 43.0], [26.4, 43.0], [26.5, 43.0], [26.6, 43.0], [26.7, 43.0], [26.8, 43.0], [26.9, 43.0], [27.0, 43.0], [27.1, 43.0], [27.2, 43.0], [27.3, 43.0], [27.4, 43.0], [27.5, 44.0], [27.6, 44.0], [27.7, 44.0], [27.8, 44.0], [27.9, 44.0], [28.0, 44.0], [28.1, 44.0], [28.2, 44.0], [28.3, 44.0], [28.4, 44.0], [28.5, 44.0], [28.6, 44.0], [28.7, 44.0], [28.8, 44.0], [28.9, 44.0], [29.0, 44.0], [29.1, 44.0], [29.2, 44.0], [29.3, 44.0], [29.4, 44.0], [29.5, 44.0], [29.6, 44.0], [29.7, 44.0], [29.8, 44.0], [29.9, 44.0], [30.0, 44.0], [30.1, 44.0], [30.2, 44.0], [30.3, 44.0], [30.4, 44.0], [30.5, 44.0], [30.6, 44.0], [30.7, 44.0], [30.8, 44.0], [30.9, 44.0], [31.0, 44.0], [31.1, 44.0], [31.2, 44.0], [31.3, 44.0], [31.4, 44.0], [31.5, 44.0], [31.6, 44.0], [31.7, 44.0], [31.8, 44.0], [31.9, 44.0], [32.0, 44.0], [32.1, 44.0], [32.2, 44.0], [32.3, 44.0], [32.4, 44.0], [32.5, 44.0], [32.6, 44.0], [32.7, 44.0], [32.8, 44.0], [32.9, 44.0], [33.0, 44.0], [33.1, 44.0], [33.2, 44.0], [33.3, 44.0], [33.4, 44.0], [33.5, 44.0], [33.6, 44.0], [33.7, 44.0], [33.8, 44.0], [33.9, 44.0], [34.0, 44.0], [34.1, 44.0], [34.2, 44.0], [34.3, 44.0], [34.4, 45.0], [34.5, 45.0], [34.6, 45.0], [34.7, 45.0], [34.8, 45.0], [34.9, 45.0], [35.0, 45.0], [35.1, 45.0], [35.2, 45.0], [35.3, 45.0], [35.4, 45.0], [35.5, 45.0], [35.6, 45.0], [35.7, 45.0], [35.8, 45.0], [35.9, 45.0], [36.0, 45.0], [36.1, 45.0], [36.2, 45.0], [36.3, 45.0], [36.4, 45.0], [36.5, 45.0], [36.6, 45.0], [36.7, 45.0], [36.8, 45.0], [36.9, 45.0], [37.0, 45.0], [37.1, 45.0], [37.2, 45.0], [37.3, 45.0], [37.4, 45.0], [37.5, 45.0], [37.6, 45.0], [37.7, 45.0], [37.8, 45.0], [37.9, 45.0], [38.0, 45.0], [38.1, 45.0], [38.2, 45.0], [38.3, 45.0], [38.4, 45.0], [38.5, 45.0], [38.6, 45.0], [38.7, 45.0], [38.8, 45.0], [38.9, 45.0], [39.0, 45.0], [39.1, 45.0], [39.2, 45.0], [39.3, 45.0], [39.4, 45.0], [39.5, 45.0], [39.6, 45.0], [39.7, 45.0], [39.8, 45.0], [39.9, 45.0], [40.0, 45.0], [40.1, 45.0], [40.2, 45.0], [40.3, 45.0], [40.4, 45.0], [40.5, 46.0], [40.6, 46.0], [40.7, 46.0], [40.8, 46.0], [40.9, 46.0], [41.0, 46.0], [41.1, 46.0], [41.2, 46.0], [41.3, 46.0], [41.4, 46.0], [41.5, 46.0], [41.6, 46.0], [41.7, 46.0], [41.8, 46.0], [41.9, 46.0], [42.0, 46.0], [42.1, 46.0], [42.2, 46.0], [42.3, 46.0], [42.4, 46.0], [42.5, 46.0], [42.6, 46.0], [42.7, 46.0], [42.8, 46.0], [42.9, 46.0], [43.0, 46.0], [43.1, 46.0], [43.2, 46.0], [43.3, 46.0], [43.4, 46.0], [43.5, 46.0], [43.6, 46.0], [43.7, 46.0], [43.8, 46.0], [43.9, 46.0], [44.0, 46.0], [44.1, 46.0], [44.2, 46.0], [44.3, 46.0], [44.4, 46.0], [44.5, 46.0], [44.6, 46.0], [44.7, 46.0], [44.8, 46.0], [44.9, 46.0], [45.0, 46.0], [45.1, 46.0], [45.2, 46.0], [45.3, 46.0], [45.4, 46.0], [45.5, 47.0], [45.6, 47.0], [45.7, 47.0], [45.8, 47.0], [45.9, 47.0], [46.0, 47.0], [46.1, 47.0], [46.2, 47.0], [46.3, 47.0], [46.4, 47.0], [46.5, 47.0], [46.6, 47.0], [46.7, 47.0], [46.8, 47.0], [46.9, 47.0], [47.0, 47.0], [47.1, 47.0], [47.2, 47.0], [47.3, 47.0], [47.4, 47.0], [47.5, 47.0], [47.6, 47.0], [47.7, 47.0], [47.8, 47.0], [47.9, 47.0], [48.0, 47.0], [48.1, 47.0], [48.2, 47.0], [48.3, 47.0], [48.4, 47.0], [48.5, 47.0], [48.6, 47.0], [48.7, 47.0], [48.8, 47.0], [48.9, 47.0], [49.0, 47.0], [49.1, 47.0], [49.2, 47.0], [49.3, 47.0], [49.4, 47.0], [49.5, 47.0], [49.6, 47.0], [49.7, 48.0], [49.8, 48.0], [49.9, 48.0], [50.0, 48.0], [50.1, 48.0], [50.2, 48.0], [50.3, 48.0], [50.4, 48.0], [50.5, 48.0], [50.6, 48.0], [50.7, 48.0], [50.8, 48.0], [50.9, 48.0], [51.0, 48.0], [51.1, 48.0], [51.2, 48.0], [51.3, 48.0], [51.4, 48.0], [51.5, 48.0], [51.6, 48.0], [51.7, 48.0], [51.8, 48.0], [51.9, 48.0], [52.0, 48.0], [52.1, 48.0], [52.2, 48.0], [52.3, 48.0], [52.4, 48.0], [52.5, 48.0], [52.6, 48.0], [52.7, 48.0], [52.8, 48.0], [52.9, 48.0], [53.0, 48.0], [53.1, 48.0], [53.2, 48.0], [53.3, 48.0], [53.4, 48.0], [53.5, 48.0], [53.6, 48.0], [53.7, 48.0], [53.8, 48.0], [53.9, 48.0], [54.0, 48.0], [54.1, 48.0], [54.2, 48.0], [54.3, 49.0], [54.4, 49.0], [54.5, 49.0], [54.6, 49.0], [54.7, 49.0], [54.8, 49.0], [54.9, 49.0], [55.0, 49.0], [55.1, 49.0], [55.2, 49.0], [55.3, 49.0], [55.4, 49.0], [55.5, 49.0], [55.6, 49.0], [55.7, 49.0], [55.8, 49.0], [55.9, 49.0], [56.0, 49.0], [56.1, 49.0], [56.2, 49.0], [56.3, 49.0], [56.4, 49.0], [56.5, 49.0], [56.6, 49.0], [56.7, 49.0], [56.8, 49.0], [56.9, 49.0], [57.0, 49.0], [57.1, 49.0], [57.2, 49.0], [57.3, 49.0], [57.4, 49.0], [57.5, 49.0], [57.6, 49.0], [57.7, 49.0], [57.8, 49.0], [57.9, 49.0], [58.0, 49.0], [58.1, 49.0], [58.2, 49.0], [58.3, 49.0], [58.4, 49.0], [58.5, 49.0], [58.6, 49.0], [58.7, 49.0], [58.8, 49.0], [58.9, 49.0], [59.0, 49.0], [59.1, 49.0], [59.2, 50.0], [59.3, 50.0], [59.4, 50.0], [59.5, 50.0], [59.6, 50.0], [59.7, 50.0], [59.8, 50.0], [59.9, 50.0], [60.0, 50.0], [60.1, 50.0], [60.2, 50.0], [60.3, 50.0], [60.4, 50.0], [60.5, 50.0], [60.6, 50.0], [60.7, 50.0], [60.8, 50.0], [60.9, 50.0], [61.0, 50.0], [61.1, 50.0], [61.2, 50.0], [61.3, 50.0], [61.4, 50.0], [61.5, 50.0], [61.6, 50.0], [61.7, 50.0], [61.8, 50.0], [61.9, 50.0], [62.0, 50.0], [62.1, 50.0], [62.2, 50.0], [62.3, 50.0], [62.4, 50.0], [62.5, 50.0], [62.6, 50.0], [62.7, 50.0], [62.8, 50.0], [62.9, 50.0], [63.0, 50.0], [63.1, 50.0], [63.2, 50.0], [63.3, 50.0], [63.4, 50.0], [63.5, 50.0], [63.6, 50.0], [63.7, 50.0], [63.8, 50.0], [63.9, 50.0], [64.0, 50.0], [64.1, 50.0], [64.2, 50.0], [64.3, 50.0], [64.4, 50.0], [64.5, 50.0], [64.6, 50.0], [64.7, 50.0], [64.8, 50.0], [64.9, 50.0], [65.0, 50.0], [65.1, 50.0], [65.2, 50.0], [65.3, 50.0], [65.4, 50.0], [65.5, 51.0], [65.6, 51.0], [65.7, 51.0], [65.8, 51.0], [65.9, 51.0], [66.0, 51.0], [66.1, 51.0], [66.2, 51.0], [66.3, 51.0], [66.4, 51.0], [66.5, 51.0], [66.6, 51.0], [66.7, 51.0], [66.8, 51.0], [66.9, 51.0], [67.0, 51.0], [67.1, 51.0], [67.2, 51.0], [67.3, 51.0], [67.4, 51.0], [67.5, 51.0], [67.6, 51.0], [67.7, 51.0], [67.8, 51.0], [67.9, 51.0], [68.0, 51.0], [68.1, 51.0], [68.2, 51.0], [68.3, 51.0], [68.4, 51.0], [68.5, 51.0], [68.6, 51.0], [68.7, 51.0], [68.8, 51.0], [68.9, 51.0], [69.0, 51.0], [69.1, 51.0], [69.2, 51.0], [69.3, 51.0], [69.4, 51.0], [69.5, 51.0], [69.6, 51.0], [69.7, 51.0], [69.8, 51.0], [69.9, 51.0], [70.0, 51.0], [70.1, 51.0], [70.2, 51.0], [70.3, 51.0], [70.4, 51.0], [70.5, 51.0], [70.6, 51.0], [70.7, 51.0], [70.8, 51.0], [70.9, 52.0], [71.0, 52.0], [71.1, 52.0], [71.2, 52.0], [71.3, 52.0], [71.4, 52.0], [71.5, 52.0], [71.6, 52.0], [71.7, 52.0], [71.8, 52.0], [71.9, 52.0], [72.0, 52.0], [72.1, 52.0], [72.2, 52.0], [72.3, 52.0], [72.4, 52.0], [72.5, 52.0], [72.6, 52.0], [72.7, 52.0], [72.8, 52.0], [72.9, 52.0], [73.0, 52.0], [73.1, 52.0], [73.2, 52.0], [73.3, 52.0], [73.4, 52.0], [73.5, 52.0], [73.6, 52.0], [73.7, 52.0], [73.8, 52.0], [73.9, 52.0], [74.0, 52.0], [74.1, 52.0], [74.2, 52.0], [74.3, 52.0], [74.4, 52.0], [74.5, 52.0], [74.6, 52.0], [74.7, 52.0], [74.8, 52.0], [74.9, 52.0], [75.0, 52.0], [75.1, 52.0], [75.2, 52.0], [75.3, 52.0], [75.4, 52.0], [75.5, 53.0], [75.6, 53.0], [75.7, 53.0], [75.8, 53.0], [75.9, 53.0], [76.0, 53.0], [76.1, 53.0], [76.2, 53.0], [76.3, 53.0], [76.4, 53.0], [76.5, 53.0], [76.6, 53.0], [76.7, 53.0], [76.8, 53.0], [76.9, 53.0], [77.0, 53.0], [77.1, 53.0], [77.2, 53.0], [77.3, 53.0], [77.4, 53.0], [77.5, 53.0], [77.6, 53.0], [77.7, 53.0], [77.8, 53.0], [77.9, 53.0], [78.0, 53.0], [78.1, 53.0], [78.2, 53.0], [78.3, 53.0], [78.4, 53.0], [78.5, 53.0], [78.6, 53.0], [78.7, 53.0], [78.8, 53.0], [78.9, 53.0], [79.0, 53.0], [79.1, 53.0], [79.2, 53.0], [79.3, 53.0], [79.4, 53.0], [79.5, 54.0], [79.6, 54.0], [79.7, 54.0], [79.8, 54.0], [79.9, 54.0], [80.0, 54.0], [80.1, 54.0], [80.2, 54.0], [80.3, 54.0], [80.4, 54.0], [80.5, 54.0], [80.6, 54.0], [80.7, 54.0], [80.8, 54.0], [80.9, 54.0], [81.0, 54.0], [81.1, 54.0], [81.2, 54.0], [81.3, 54.0], [81.4, 54.0], [81.5, 54.0], [81.6, 54.0], [81.7, 54.0], [81.8, 54.0], [81.9, 54.0], [82.0, 54.0], [82.1, 54.0], [82.2, 54.0], [82.3, 55.0], [82.4, 55.0], [82.5, 55.0], [82.6, 55.0], [82.7, 55.0], [82.8, 55.0], [82.9, 55.0], [83.0, 55.0], [83.1, 55.0], [83.2, 55.0], [83.3, 55.0], [83.4, 55.0], [83.5, 55.0], [83.6, 55.0], [83.7, 55.0], [83.8, 55.0], [83.9, 55.0], [84.0, 55.0], [84.1, 55.0], [84.2, 55.0], [84.3, 55.0], [84.4, 55.0], [84.5, 55.0], [84.6, 55.0], [84.7, 55.0], [84.8, 55.0], [84.9, 56.0], [85.0, 56.0], [85.1, 56.0], [85.2, 56.0], [85.3, 56.0], [85.4, 56.0], [85.5, 56.0], [85.6, 56.0], [85.7, 56.0], [85.8, 56.0], [85.9, 56.0], [86.0, 56.0], [86.1, 56.0], [86.2, 56.0], [86.3, 56.0], [86.4, 56.0], [86.5, 56.0], [86.6, 57.0], [86.7, 57.0], [86.8, 57.0], [86.9, 57.0], [87.0, 57.0], [87.1, 57.0], [87.2, 57.0], [87.3, 57.0], [87.4, 57.0], [87.5, 57.0], [87.6, 57.0], [87.7, 58.0], [87.8, 58.0], [87.9, 58.0], [88.0, 58.0], [88.1, 58.0], [88.2, 58.0], [88.3, 58.0], [88.4, 58.0], [88.5, 58.0], [88.6, 58.0], [88.7, 59.0], [88.8, 59.0], [88.9, 59.0], [89.0, 59.0], [89.1, 59.0], [89.2, 59.0], [89.3, 59.0], [89.4, 59.0], [89.5, 60.0], [89.6, 60.0], [89.7, 60.0], [89.8, 60.0], [89.9, 60.0], [90.0, 60.0], [90.1, 60.0], [90.2, 61.0], [90.3, 61.0], [90.4, 61.0], [90.5, 61.0], [90.6, 61.0], [90.7, 61.0], [90.8, 61.0], [90.9, 62.0], [91.0, 62.0], [91.1, 62.0], [91.2, 62.0], [91.3, 62.0], [91.4, 62.0], [91.5, 62.0], [91.6, 63.0], [91.7, 63.0], [91.8, 63.0], [91.9, 63.0], [92.0, 63.0], [92.1, 63.0], [92.2, 63.0], [92.3, 64.0], [92.4, 64.0], [92.5, 64.0], [92.6, 64.0], [92.7, 64.0], [92.8, 64.0], [92.9, 65.0], [93.0, 65.0], [93.1, 65.0], [93.2, 65.0], [93.3, 65.0], [93.4, 66.0], [93.5, 66.0], [93.6, 66.0], [93.7, 66.0], [93.8, 66.0], [93.9, 67.0], [94.0, 67.0], [94.1, 67.0], [94.2, 67.0], [94.3, 68.0], [94.4, 68.0], [94.5, 68.0], [94.6, 68.0], [94.7, 69.0], [94.8, 69.0], [94.9, 69.0], [95.0, 69.0], [95.1, 70.0], [95.2, 70.0], [95.3, 71.0], [95.4, 71.0], [95.5, 71.0], [95.6, 71.0], [95.7, 72.0], [95.8, 72.0], [95.9, 72.0], [96.0, 73.0], [96.1, 73.0], [96.2, 73.0], [96.3, 74.0], [96.4, 74.0], [96.5, 75.0], [96.6, 75.0], [96.7, 76.0], [96.8, 76.0], [96.9, 77.0], [97.0, 77.0], [97.1, 78.0], [97.2, 78.0], [97.3, 79.0], [97.4, 79.0], [97.5, 80.0], [97.6, 80.0], [97.7, 81.0], [97.8, 82.0], [97.9, 82.0], [98.0, 83.0], [98.1, 84.0], [98.2, 85.0], [98.3, 86.0], [98.4, 87.0], [98.5, 87.0], [98.6, 89.0], [98.7, 91.0], [98.8, 92.0], [98.9, 95.0], [99.0, 97.0], [99.1, 101.0], [99.2, 105.0], [99.3, 109.0], [99.4, 115.0], [99.5, 123.0], [99.6, 135.0], [99.7, 154.0], [99.8, 485.0], [99.9, 770.0], [100.0, 1628.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 11885.0, "series": [{"data": [[600.0, 461.0], [700.0, 573.0], [800.0, 631.0], [900.0, 603.0], [1000.0, 645.0], [1100.0, 643.0], [1200.0, 641.0], [1300.0, 567.0], [1400.0, 553.0], [1500.0, 530.0], [1600.0, 487.0], [1700.0, 453.0], [1800.0, 401.0], [1900.0, 356.0], [2000.0, 354.0], [2100.0, 324.0], [2200.0, 294.0], [2300.0, 276.0], [2400.0, 248.0], [2500.0, 232.0], [2600.0, 212.0], [2700.0, 182.0], [2800.0, 177.0], [2900.0, 134.0], [3000.0, 152.0], [3100.0, 111.0], [3200.0, 108.0], [3300.0, 99.0], [3400.0, 109.0], [3500.0, 106.0], [3600.0, 79.0], [3700.0, 85.0], [3800.0, 58.0], [3900.0, 51.0], [4000.0, 37.0], [4200.0, 35.0], [4300.0, 32.0], [4100.0, 49.0], [4500.0, 31.0], [4400.0, 40.0], [4600.0, 29.0], [4700.0, 29.0], [4800.0, 20.0], [5000.0, 21.0], [4900.0, 17.0], [5100.0, 11.0], [5200.0, 14.0], [5300.0, 14.0], [5400.0, 14.0], [5600.0, 8.0], [5500.0, 5.0], [5700.0, 12.0], [5800.0, 6.0], [5900.0, 8.0], [6100.0, 4.0], [6000.0, 6.0], [6200.0, 7.0], [6300.0, 2.0], [6400.0, 4.0], [6500.0, 5.0], [6600.0, 2.0], [6800.0, 4.0], [6700.0, 3.0], [6900.0, 2.0], [7000.0, 2.0], [7200.0, 4.0], [7400.0, 1.0], [7500.0, 2.0], [7600.0, 2.0], [7800.0, 1.0], [8000.0, 1.0], [8500.0, 1.0], [8300.0, 1.0], [8200.0, 1.0], [9000.0, 1.0], [9700.0, 1.0], [9900.0, 1.0], [100.0, 7.0], [200.0, 15.0], [300.0, 58.0], [400.0, 172.0], [500.0, 323.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 11885.0], [1100.0, 2.0], [600.0, 4.0], [1200.0, 3.0], [1300.0, 3.0], [700.0, 8.0], [1600.0, 3.0], [400.0, 3.0], [800.0, 1.0], [100.0, 85.0], [200.0, 3.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 9900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5659.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 12233.0, "series": [{"data": [[0.0, 12233.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 5659.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 6108.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 15.005668934240365, "minX": 1.74722184E12, "maxY": 24.0, "series": [{"data": [[1.74722256E12, 24.0], [1.74722226E12, 24.0], [1.74722196E12, 24.0], [1.74722262E12, 24.0], [1.74722232E12, 24.0], [1.74722202E12, 24.0], [1.74722268E12, 23.247282608695674], [1.74722238E12, 24.0], [1.74722208E12, 24.0], [1.74722274E12, 15.005668934240365], [1.74722244E12, 24.0], [1.74722214E12, 24.0], [1.74722184E12, 23.98236775818641], [1.7472225E12, 24.0], [1.7472222E12, 24.0], [1.7472219E12, 24.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74722274E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 29.555555555555554, "minX": 1.0, "maxY": 1833.1666666666665, "series": [{"data": [[8.0, 619.8181818181819], [2.0, 489.2], [9.0, 481.16666666666663], [10.0, 1236.5], [11.0, 964.75], [12.0, 911.3888888888888], [3.0, 713.2222222222222], [13.0, 998.1249999999999], [14.0, 1210.52], [15.0, 1020.0], [16.0, 1137.5384615384621], [4.0, 498.53333333333325], [1.0, 820.0], [17.0, 496.33333333333337], [18.0, 1365.5384615384614], [19.0, 1591.9523809523807], [20.0, 1699.753623188406], [5.0, 546.4782608695652], [21.0, 1511.9268292682927], [22.0, 1833.1666666666665], [23.0, 1770.2408376963356], [24.0, 1801.3322655276763], [6.0, 526.5555555555555], [7.0, 385.6666666666667]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[23.621250000000018, 1779.5401666666712]], "isOverall": false, "label": "Create CSR-Aggregated", "isController": false}, {"data": [[8.0, 36.18181818181818], [2.0, 29.6], [9.0, 36.4], [10.0, 40.75], [11.0, 41.25], [12.0, 45.61111111111112], [3.0, 29.555555555555554], [13.0, 52.5], [14.0, 51.040000000000006], [15.0, 47.0], [16.0, 49.57692307692309], [4.0, 30.6], [1.0, 31.0], [17.0, 47.5], [18.0, 48.92307692307692], [19.0, 55.074999999999996], [20.0, 50.65700483091789], [5.0, 32.375], [21.0, 53.125], [22.0, 47.34042553191489], [23.0, 50.8936170212766], [24.0, 51.89151698381654], [6.0, 33.44444444444444], [7.0, 37.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}, {"data": [[23.623000000000015, 51.669833333333365]], "isOverall": false, "label": "HTTP Request - enroll-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 24.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 13087.65, "minX": 1.74722184E12, "maxY": 128287.98333333334, "series": [{"data": [[1.74722256E12, 127952.33333333333], [1.74722226E12, 113353.05], [1.74722196E12, 106469.9], [1.74722262E12, 123702.08333333333], [1.74722232E12, 102641.48333333334], [1.74722202E12, 105420.11666666667], [1.74722268E12, 108385.85], [1.74722238E12, 112068.3], [1.74722208E12, 111628.13333333333], [1.74722274E12, 64942.48333333333], [1.74722244E12, 116930.43333333333], [1.74722214E12, 105441.01666666666], [1.74722184E12, 116929.16666666667], [1.7472225E12, 128287.98333333334], [1.7472222E12, 107545.18333333333], [1.7472219E12, 115478.25]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74722256E12, 25791.483333333334], [1.74722226E12, 22854.033333333333], [1.74722196E12, 21456.35], [1.74722262E12, 24930.5], [1.74722232E12, 20684.916666666668], [1.74722202E12, 21250.233333333334], [1.74722268E12, 21843.166666666668], [1.74722238E12, 22585.783333333333], [1.74722208E12, 22497.833333333332], [1.74722274E12, 13087.65], [1.74722244E12, 23566.933333333334], [1.74722214E12, 21249.933333333334], [1.74722184E12, 23566.133333333335], [1.7472225E12, 25849.916666666668], [1.7472222E12, 21665.366666666665], [1.7472219E12, 23269.766666666666]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74722274E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 45.80597014925374, "minX": 1.74722184E12, "maxY": 2010.7704447632723, "series": [{"data": [[1.74722256E12, 1615.1520737327198], [1.74722226E12, 1828.5169270833333], [1.74722196E12, 1931.4799446749662], [1.74722262E12, 1663.1190476190466], [1.74722232E12, 2010.7704447632723], [1.74722202E12, 1965.2335664335665], [1.74722268E12, 1866.3600543478256], [1.74722238E12, 1846.2706964520364], [1.74722208E12, 1849.2401055408964], [1.74722274E12, 1260.0000000000005], [1.74722244E12, 1769.0050377833752], [1.74722214E12, 1950.3226256983253], [1.74722184E12, 1547.845088161208], [1.7472225E12, 1596.327981651377], [1.7472222E12, 1914.91256830601], [1.7472219E12, 1768.5847133757948]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74722256E12, 46.02646720368238], [1.74722226E12, 52.49350649350644], [1.74722196E12, 51.952973720608554], [1.74722262E12, 47.28690476190475], [1.74722232E12, 52.35150645624105], [1.74722202E12, 50.40363128491618], [1.74722268E12, 50.55298913043474], [1.74722238E12, 52.566360052562416], [1.74722208E12, 49.83773087071239], [1.74722274E12, 46.65986394557822], [1.74722244E12, 48.65869017632244], [1.74722214E12, 51.879888268156435], [1.74722184E12, 79.56926952141055], [1.7472225E12, 45.80597014925374], [1.7472222E12, 51.193150684931496], [1.7472219E12, 48.429846938775476]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74722274E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74722184E12, "maxY": 79.5403022670025, "series": [{"data": [[1.74722256E12, 0.0], [1.74722226E12, 0.0], [1.74722196E12, 0.0], [1.74722262E12, 0.0], [1.74722232E12, 0.0], [1.74722202E12, 0.0], [1.74722268E12, 0.0], [1.74722238E12, 0.0], [1.74722208E12, 0.0], [1.74722274E12, 0.0], [1.74722244E12, 0.0], [1.74722214E12, 0.0], [1.74722184E12, 0.0], [1.7472225E12, 0.0], [1.7472222E12, 0.0], [1.7472219E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74722256E12, 46.02301495972383], [1.74722226E12, 52.48311688311691], [1.74722196E12, 51.940525587828525], [1.74722262E12, 47.28452380952382], [1.74722232E12, 52.34720229555236], [1.74722202E12, 50.389664804469255], [1.74722268E12, 50.54347826086959], [1.74722238E12, 52.55716162943497], [1.74722208E12, 49.82453825857522], [1.74722274E12, 46.657596371882114], [1.74722244E12, 48.6523929471032], [1.74722214E12, 51.8687150837989], [1.74722184E12, 79.5403022670025], [1.7472225E12, 45.791044776119385], [1.7472222E12, 51.1835616438356], [1.7472219E12, 48.41198979591838]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74722274E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74722184E12, "maxY": 13.989924433249353, "series": [{"data": [[1.74722256E12, 0.0], [1.74722226E12, 0.0], [1.74722196E12, 0.0], [1.74722262E12, 0.0], [1.74722232E12, 0.0], [1.74722202E12, 0.0], [1.74722268E12, 0.0], [1.74722238E12, 0.0], [1.74722208E12, 0.0], [1.74722274E12, 0.0], [1.74722244E12, 0.0], [1.74722214E12, 0.0], [1.74722184E12, 0.0], [1.7472225E12, 0.0], [1.7472222E12, 0.0], [1.7472219E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74722256E12, 0.08860759493670886], [1.74722226E12, 0.09740259740259744], [1.74722196E12, 0.15214384508990336], [1.74722262E12, 0.0785714285714287], [1.74722232E12, 0.16212338593974193], [1.74722202E12, 0.15223463687150834], [1.74722268E12, 0.09918478260869559], [1.74722238E12, 0.12483574244415249], [1.74722208E12, 0.16226912928759885], [1.74722274E12, 0.12471655328798191], [1.74722244E12, 0.09319899244332491], [1.74722214E12, 0.1256983240223462], [1.74722184E12, 13.989924433249353], [1.7472225E12, 0.08266360505166478], [1.7472222E12, 0.17808219178082194], [1.7472219E12, 0.17091836734693874]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74722274E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 28.0, "minX": 1.74722184E12, "maxY": 9989.0, "series": [{"data": [[1.74722256E12, 7096.0], [1.74722226E12, 7606.0], [1.74722196E12, 7274.0], [1.74722262E12, 9989.0], [1.74722232E12, 7273.0], [1.74722202E12, 8567.0], [1.74722268E12, 8232.0], [1.74722238E12, 9753.0], [1.74722208E12, 6939.0], [1.74722274E12, 7467.0], [1.74722244E12, 8315.0], [1.74722214E12, 9063.0], [1.74722184E12, 5404.0], [1.7472225E12, 5230.0], [1.7472222E12, 7597.0], [1.7472219E12, 6839.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.74722256E12, 2271.4], [1.74722226E12, 2557.0], [1.74722196E12, 2741.0], [1.74722262E12, 2274.4000000000005], [1.74722232E12, 2887.0], [1.74722202E12, 2802.2], [1.74722268E12, 2560.3], [1.74722238E12, 2672.4], [1.74722208E12, 2608.8999999999996], [1.74722274E12, 1874.9000000000008], [1.74722244E12, 2509.0], [1.74722214E12, 2738.4], [1.74722184E12, 2144.600000000001], [1.7472225E12, 2180.6000000000004], [1.7472222E12, 2697.2000000000003], [1.7472219E12, 2450.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.74722256E12, 4006.5599999999904], [1.74722226E12, 4825.309999999993], [1.74722196E12, 5155.729999999996], [1.74722262E12, 4569.880000000008], [1.74722232E12, 5305.949999999992], [1.74722202E12, 5237.680000000005], [1.74722268E12, 4839.7], [1.74722238E12, 4789.669999999998], [1.74722208E12, 4800.559999999998], [1.74722274E12, 3580.899999999997], [1.74722244E12, 4581.8299999999945], [1.74722214E12, 5402.570000000005], [1.74722184E12, 3812.319999999999], [1.7472225E12, 3887.9599999999964], [1.7472222E12, 4652.809999999999], [1.7472219E12, 4571.099999999996]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.74722256E12, 2781.0], [1.74722226E12, 3110.249999999999], [1.74722196E12, 3381.9499999999944], [1.74722262E12, 2896.5499999999984], [1.74722232E12, 3600.75], [1.74722202E12, 3619.3999999999996], [1.74722268E12, 3411.049999999998], [1.74722238E12, 3220.3999999999996], [1.74722208E12, 3275.3499999999985], [1.74722274E12, 2457.199999999999], [1.74722244E12, 3178.75], [1.74722214E12, 3512.199999999999], [1.74722184E12, 2714.75], [1.7472225E12, 2776.7999999999993], [1.7472222E12, 3413.499999999999], [1.7472219E12, 3084.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.74722256E12, 36.0], [1.74722226E12, 36.0], [1.74722196E12, 35.0], [1.74722262E12, 36.0], [1.74722232E12, 37.0], [1.74722202E12, 36.0], [1.74722268E12, 36.0], [1.74722238E12, 36.0], [1.74722208E12, 36.0], [1.74722274E12, 28.0], [1.74722244E12, 35.0], [1.74722214E12, 37.0], [1.74722184E12, 36.0], [1.7472225E12, 35.0], [1.7472222E12, 35.0], [1.7472219E12, 36.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.74722256E12, 135.0], [1.74722226E12, 169.5], [1.74722196E12, 251.5], [1.74722262E12, 216.0], [1.74722232E12, 236.0], [1.74722202E12, 154.0], [1.74722268E12, 251.0], [1.74722238E12, 218.5], [1.74722208E12, 219.5], [1.74722274E12, 115.5], [1.74722244E12, 237.5], [1.74722214E12, 262.0], [1.74722184E12, 513.0], [1.7472225E12, 383.0], [1.7472222E12, 387.5], [1.7472219E12, 332.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74722274E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 58.0, "minX": 6.0, "maxY": 1257.0, "series": [{"data": [[33.0, 441.0], [32.0, 170.5], [35.0, 117.0], [34.0, 398.5], [36.0, 94.5], [37.0, 104.5], [38.0, 394.5], [39.0, 86.0], [40.0, 86.0], [41.0, 525.5], [42.0, 78.0], [43.0, 143.0], [47.0, 485.0], [6.0, 208.0], [8.0, 231.5], [9.0, 1257.0], [10.0, 130.0], [12.0, 303.0], [13.0, 58.0], [14.0, 474.5], [15.0, 646.0], [16.0, 67.0], [17.0, 454.5], [18.0, 268.0], [19.0, 487.0], [20.0, 230.0], [21.0, 103.5], [22.0, 86.5], [23.0, 433.0], [24.0, 169.5], [25.0, 400.0], [26.0, 109.5], [27.0, 115.0], [28.0, 410.0], [29.0, 353.0], [30.0, 123.0], [31.0, 411.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 47.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 6.0, "maxY": 49.0, "series": [{"data": [[33.0, 38.0], [32.0, 36.5], [35.0, 38.0], [34.0, 0.0], [36.0, 37.5], [37.0, 40.0], [38.0, 0.0], [39.0, 39.0], [40.0, 39.5], [41.0, 0.0], [42.0, 38.0], [43.0, 49.0], [47.0, 0.0], [6.0, 14.5], [8.0, 14.0], [9.0, 0.0], [10.0, 14.0], [12.0, 18.0], [13.0, 29.0], [14.0, 0.0], [15.0, 0.0], [16.0, 28.0], [17.0, 0.0], [18.0, 18.5], [19.0, 0.0], [20.0, 17.5], [21.0, 36.0], [22.0, 35.5], [23.0, 0.0], [24.0, 36.0], [25.0, 0.0], [26.0, 29.5], [27.0, 32.0], [28.0, 0.0], [29.0, 0.0], [30.0, 36.0], [31.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 47.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 14.366666666666667, "minX": 1.74722184E12, "maxY": 29.05, "series": [{"data": [[1.74722256E12, 28.95], [1.74722226E12, 25.633333333333333], [1.74722196E12, 24.1], [1.74722262E12, 28.0], [1.74722232E12, 23.233333333333334], [1.74722202E12, 23.85], [1.74722268E12, 24.466666666666665], [1.74722238E12, 25.366666666666667], [1.74722208E12, 25.25], [1.74722274E12, 14.366666666666667], [1.74722244E12, 26.466666666666665], [1.74722214E12, 23.883333333333333], [1.74722184E12, 26.866666666666667], [1.7472225E12, 29.05], [1.7472222E12, 24.366666666666667], [1.7472219E12, 26.15]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74722274E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 7.35, "minX": 1.74722184E12, "maxY": 14.533333333333333, "series": [{"data": [[1.74722256E12, 14.466666666666667], [1.74722226E12, 12.8], [1.74722196E12, 12.05], [1.74722262E12, 14.0], [1.74722232E12, 11.616666666666667], [1.74722202E12, 11.916666666666666], [1.74722268E12, 12.266666666666667], [1.74722238E12, 12.683333333333334], [1.74722208E12, 12.633333333333333], [1.74722274E12, 7.35], [1.74722244E12, 13.233333333333333], [1.74722214E12, 11.933333333333334], [1.74722184E12, 13.233333333333333], [1.7472225E12, 14.533333333333333], [1.7472222E12, 12.2], [1.7472219E12, 13.083333333333334]], "isOverall": false, "label": "0", "isController": false}, {"data": [[1.74722256E12, 14.483333333333333], [1.74722226E12, 12.833333333333334], [1.74722196E12, 12.05], [1.74722262E12, 14.0], [1.74722232E12, 11.616666666666667], [1.74722202E12, 11.933333333333334], [1.74722268E12, 12.266666666666667], [1.74722238E12, 12.683333333333334], [1.74722208E12, 12.633333333333333], [1.74722274E12, 7.35], [1.74722244E12, 13.233333333333333], [1.74722214E12, 11.933333333333334], [1.74722184E12, 13.233333333333333], [1.7472225E12, 14.516666666666667], [1.7472222E12, 12.166666666666666], [1.7472219E12, 13.066666666666666]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74722274E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 7.35, "minX": 1.74722184E12, "maxY": 14.533333333333333, "series": [{"data": [[1.74722256E12, 14.483333333333333], [1.74722226E12, 12.833333333333334], [1.74722196E12, 12.05], [1.74722262E12, 14.0], [1.74722232E12, 11.616666666666667], [1.74722202E12, 11.933333333333334], [1.74722268E12, 12.266666666666667], [1.74722238E12, 12.683333333333334], [1.74722208E12, 12.633333333333333], [1.74722274E12, 7.35], [1.74722244E12, 13.233333333333333], [1.74722214E12, 11.933333333333334], [1.74722184E12, 13.233333333333333], [1.7472225E12, 14.516666666666667], [1.7472222E12, 12.166666666666666], [1.7472219E12, 13.066666666666666]], "isOverall": false, "label": "HTTP Request - enroll-success", "isController": false}, {"data": [[1.74722256E12, 14.466666666666667], [1.74722226E12, 12.8], [1.74722196E12, 12.05], [1.74722262E12, 14.0], [1.74722232E12, 11.616666666666667], [1.74722202E12, 11.916666666666666], [1.74722268E12, 12.266666666666667], [1.74722238E12, 12.683333333333334], [1.74722208E12, 12.633333333333333], [1.74722274E12, 7.35], [1.74722244E12, 13.233333333333333], [1.74722214E12, 11.933333333333334], [1.74722184E12, 13.233333333333333], [1.7472225E12, 14.533333333333333], [1.7472222E12, 12.2], [1.7472219E12, 13.083333333333334]], "isOverall": false, "label": "Create CSR-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74722274E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 14.7, "minX": 1.74722184E12, "maxY": 29.05, "series": [{"data": [[1.74722256E12, 28.95], [1.74722226E12, 25.633333333333333], [1.74722196E12, 24.1], [1.74722262E12, 28.0], [1.74722232E12, 23.233333333333334], [1.74722202E12, 23.85], [1.74722268E12, 24.533333333333335], [1.74722238E12, 25.366666666666667], [1.74722208E12, 25.266666666666666], [1.74722274E12, 14.7], [1.74722244E12, 26.466666666666665], [1.74722214E12, 23.866666666666667], [1.74722184E12, 26.466666666666665], [1.7472225E12, 29.05], [1.7472222E12, 24.366666666666667], [1.7472219E12, 26.15]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74722274E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

