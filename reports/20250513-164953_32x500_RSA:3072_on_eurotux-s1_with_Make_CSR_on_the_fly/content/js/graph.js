/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 27.0, "minX": 0.0, "maxY": 14788.0, "series": [{"data": [[0.0, 147.0], [0.1, 226.0], [0.2, 261.0], [0.3, 301.0], [0.4, 322.0], [0.5, 359.0], [0.6, 381.0], [0.7, 398.0], [0.8, 411.0], [0.9, 426.0], [1.0, 439.0], [1.1, 447.0], [1.2, 461.0], [1.3, 467.0], [1.4, 475.0], [1.5, 484.0], [1.6, 493.0], [1.7, 504.0], [1.8, 509.0], [1.9, 515.0], [2.0, 521.0], [2.1, 530.0], [2.2, 535.0], [2.3, 544.0], [2.4, 550.0], [2.5, 557.0], [2.6, 564.0], [2.7, 569.0], [2.8, 572.0], [2.9, 579.0], [3.0, 586.0], [3.1, 591.0], [3.2, 596.0], [3.3, 602.0], [3.4, 607.0], [3.5, 612.0], [3.6, 617.0], [3.7, 620.0], [3.8, 625.0], [3.9, 629.0], [4.0, 633.0], [4.1, 638.0], [4.2, 644.0], [4.3, 649.0], [4.4, 653.0], [4.5, 658.0], [4.6, 660.0], [4.7, 664.0], [4.8, 668.0], [4.9, 675.0], [5.0, 680.0], [5.1, 685.0], [5.2, 690.0], [5.3, 692.0], [5.4, 697.0], [5.5, 701.0], [5.6, 704.0], [5.7, 710.0], [5.8, 713.0], [5.9, 717.0], [6.0, 723.0], [6.1, 728.0], [6.2, 731.0], [6.3, 734.0], [6.4, 738.0], [6.5, 743.0], [6.6, 747.0], [6.7, 750.0], [6.8, 754.0], [6.9, 758.0], [7.0, 761.0], [7.1, 762.0], [7.2, 767.0], [7.3, 770.0], [7.4, 773.0], [7.5, 776.0], [7.6, 779.0], [7.7, 784.0], [7.8, 788.0], [7.9, 790.0], [8.0, 793.0], [8.1, 797.0], [8.2, 799.0], [8.3, 803.0], [8.4, 806.0], [8.5, 810.0], [8.6, 813.0], [8.7, 815.0], [8.8, 819.0], [8.9, 822.0], [9.0, 824.0], [9.1, 826.0], [9.2, 830.0], [9.3, 834.0], [9.4, 837.0], [9.5, 841.0], [9.6, 845.0], [9.7, 848.0], [9.8, 852.0], [9.9, 855.0], [10.0, 859.0], [10.1, 862.0], [10.2, 865.0], [10.3, 868.0], [10.4, 870.0], [10.5, 874.0], [10.6, 876.0], [10.7, 879.0], [10.8, 881.0], [10.9, 884.0], [11.0, 887.0], [11.1, 891.0], [11.2, 892.0], [11.3, 895.0], [11.4, 898.0], [11.5, 901.0], [11.6, 906.0], [11.7, 908.0], [11.8, 911.0], [11.9, 913.0], [12.0, 916.0], [12.1, 918.0], [12.2, 922.0], [12.3, 925.0], [12.4, 928.0], [12.5, 931.0], [12.6, 934.0], [12.7, 937.0], [12.8, 940.0], [12.9, 942.0], [13.0, 946.0], [13.1, 950.0], [13.2, 952.0], [13.3, 955.0], [13.4, 959.0], [13.5, 963.0], [13.6, 965.0], [13.7, 967.0], [13.8, 969.0], [13.9, 972.0], [14.0, 974.0], [14.1, 976.0], [14.2, 979.0], [14.3, 981.0], [14.4, 984.0], [14.5, 987.0], [14.6, 990.0], [14.7, 993.0], [14.8, 996.0], [14.9, 998.0], [15.0, 1001.0], [15.1, 1004.0], [15.2, 1007.0], [15.3, 1011.0], [15.4, 1014.0], [15.5, 1017.0], [15.6, 1020.0], [15.7, 1022.0], [15.8, 1026.0], [15.9, 1028.0], [16.0, 1031.0], [16.1, 1034.0], [16.2, 1038.0], [16.3, 1040.0], [16.4, 1042.0], [16.5, 1046.0], [16.6, 1048.0], [16.7, 1051.0], [16.8, 1054.0], [16.9, 1056.0], [17.0, 1060.0], [17.1, 1062.0], [17.2, 1064.0], [17.3, 1066.0], [17.4, 1070.0], [17.5, 1073.0], [17.6, 1075.0], [17.7, 1078.0], [17.8, 1082.0], [17.9, 1085.0], [18.0, 1088.0], [18.1, 1091.0], [18.2, 1093.0], [18.3, 1096.0], [18.4, 1099.0], [18.5, 1102.0], [18.6, 1105.0], [18.7, 1107.0], [18.8, 1111.0], [18.9, 1113.0], [19.0, 1116.0], [19.1, 1119.0], [19.2, 1122.0], [19.3, 1124.0], [19.4, 1125.0], [19.5, 1126.0], [19.6, 1129.0], [19.7, 1131.0], [19.8, 1134.0], [19.9, 1136.0], [20.0, 1138.0], [20.1, 1141.0], [20.2, 1144.0], [20.3, 1147.0], [20.4, 1150.0], [20.5, 1153.0], [20.6, 1155.0], [20.7, 1158.0], [20.8, 1160.0], [20.9, 1163.0], [21.0, 1167.0], [21.1, 1170.0], [21.2, 1172.0], [21.3, 1174.0], [21.4, 1176.0], [21.5, 1178.0], [21.6, 1181.0], [21.7, 1183.0], [21.8, 1185.0], [21.9, 1188.0], [22.0, 1191.0], [22.1, 1195.0], [22.2, 1198.0], [22.3, 1201.0], [22.4, 1204.0], [22.5, 1207.0], [22.6, 1211.0], [22.7, 1214.0], [22.8, 1218.0], [22.9, 1221.0], [23.0, 1223.0], [23.1, 1226.0], [23.2, 1227.0], [23.3, 1231.0], [23.4, 1234.0], [23.5, 1237.0], [23.6, 1238.0], [23.7, 1241.0], [23.8, 1244.0], [23.9, 1246.0], [24.0, 1248.0], [24.1, 1251.0], [24.2, 1254.0], [24.3, 1256.0], [24.4, 1258.0], [24.5, 1261.0], [24.6, 1263.0], [24.7, 1266.0], [24.8, 1269.0], [24.9, 1271.0], [25.0, 1273.0], [25.1, 1276.0], [25.2, 1278.0], [25.3, 1281.0], [25.4, 1283.0], [25.5, 1286.0], [25.6, 1288.0], [25.7, 1290.0], [25.8, 1292.0], [25.9, 1296.0], [26.0, 1298.0], [26.1, 1301.0], [26.2, 1303.0], [26.3, 1305.0], [26.4, 1308.0], [26.5, 1311.0], [26.6, 1314.0], [26.7, 1315.0], [26.8, 1318.0], [26.9, 1321.0], [27.0, 1323.0], [27.1, 1324.0], [27.2, 1329.0], [27.3, 1331.0], [27.4, 1334.0], [27.5, 1336.0], [27.6, 1338.0], [27.7, 1339.0], [27.8, 1343.0], [27.9, 1346.0], [28.0, 1348.0], [28.1, 1352.0], [28.2, 1354.0], [28.3, 1356.0], [28.4, 1359.0], [28.5, 1361.0], [28.6, 1364.0], [28.7, 1366.0], [28.8, 1369.0], [28.9, 1371.0], [29.0, 1374.0], [29.1, 1378.0], [29.2, 1380.0], [29.3, 1383.0], [29.4, 1388.0], [29.5, 1391.0], [29.6, 1394.0], [29.7, 1396.0], [29.8, 1400.0], [29.9, 1403.0], [30.0, 1407.0], [30.1, 1409.0], [30.2, 1412.0], [30.3, 1414.0], [30.4, 1417.0], [30.5, 1419.0], [30.6, 1423.0], [30.7, 1426.0], [30.8, 1428.0], [30.9, 1431.0], [31.0, 1432.0], [31.1, 1435.0], [31.2, 1437.0], [31.3, 1439.0], [31.4, 1442.0], [31.5, 1444.0], [31.6, 1446.0], [31.7, 1448.0], [31.8, 1450.0], [31.9, 1453.0], [32.0, 1455.0], [32.1, 1459.0], [32.2, 1461.0], [32.3, 1464.0], [32.4, 1466.0], [32.5, 1468.0], [32.6, 1470.0], [32.7, 1474.0], [32.8, 1476.0], [32.9, 1479.0], [33.0, 1482.0], [33.1, 1485.0], [33.2, 1487.0], [33.3, 1490.0], [33.4, 1492.0], [33.5, 1496.0], [33.6, 1500.0], [33.7, 1503.0], [33.8, 1506.0], [33.9, 1508.0], [34.0, 1511.0], [34.1, 1514.0], [34.2, 1516.0], [34.3, 1518.0], [34.4, 1521.0], [34.5, 1524.0], [34.6, 1527.0], [34.7, 1530.0], [34.8, 1532.0], [34.9, 1535.0], [35.0, 1538.0], [35.1, 1540.0], [35.2, 1543.0], [35.3, 1546.0], [35.4, 1549.0], [35.5, 1551.0], [35.6, 1553.0], [35.7, 1557.0], [35.8, 1559.0], [35.9, 1562.0], [36.0, 1564.0], [36.1, 1567.0], [36.2, 1570.0], [36.3, 1573.0], [36.4, 1577.0], [36.5, 1581.0], [36.6, 1584.0], [36.7, 1586.0], [36.8, 1589.0], [36.9, 1592.0], [37.0, 1595.0], [37.1, 1598.0], [37.2, 1599.0], [37.3, 1603.0], [37.4, 1605.0], [37.5, 1608.0], [37.6, 1612.0], [37.7, 1617.0], [37.8, 1618.0], [37.9, 1622.0], [38.0, 1624.0], [38.1, 1626.0], [38.2, 1629.0], [38.3, 1632.0], [38.4, 1634.0], [38.5, 1638.0], [38.6, 1641.0], [38.7, 1645.0], [38.8, 1648.0], [38.9, 1651.0], [39.0, 1654.0], [39.1, 1656.0], [39.2, 1660.0], [39.3, 1662.0], [39.4, 1664.0], [39.5, 1667.0], [39.6, 1670.0], [39.7, 1672.0], [39.8, 1675.0], [39.9, 1677.0], [40.0, 1679.0], [40.1, 1682.0], [40.2, 1684.0], [40.3, 1686.0], [40.4, 1689.0], [40.5, 1691.0], [40.6, 1695.0], [40.7, 1699.0], [40.8, 1701.0], [40.9, 1703.0], [41.0, 1706.0], [41.1, 1709.0], [41.2, 1711.0], [41.3, 1714.0], [41.4, 1716.0], [41.5, 1719.0], [41.6, 1721.0], [41.7, 1725.0], [41.8, 1727.0], [41.9, 1730.0], [42.0, 1734.0], [42.1, 1737.0], [42.2, 1740.0], [42.3, 1743.0], [42.4, 1745.0], [42.5, 1749.0], [42.6, 1752.0], [42.7, 1756.0], [42.8, 1759.0], [42.9, 1762.0], [43.0, 1764.0], [43.1, 1768.0], [43.2, 1772.0], [43.3, 1774.0], [43.4, 1777.0], [43.5, 1779.0], [43.6, 1783.0], [43.7, 1786.0], [43.8, 1788.0], [43.9, 1791.0], [44.0, 1794.0], [44.1, 1796.0], [44.2, 1799.0], [44.3, 1803.0], [44.4, 1806.0], [44.5, 1810.0], [44.6, 1812.0], [44.7, 1815.0], [44.8, 1817.0], [44.9, 1820.0], [45.0, 1824.0], [45.1, 1827.0], [45.2, 1831.0], [45.3, 1835.0], [45.4, 1838.0], [45.5, 1840.0], [45.6, 1843.0], [45.7, 1846.0], [45.8, 1849.0], [45.9, 1852.0], [46.0, 1854.0], [46.1, 1857.0], [46.2, 1862.0], [46.3, 1865.0], [46.4, 1867.0], [46.5, 1870.0], [46.6, 1873.0], [46.7, 1877.0], [46.8, 1879.0], [46.9, 1883.0], [47.0, 1885.0], [47.1, 1887.0], [47.2, 1890.0], [47.3, 1893.0], [47.4, 1897.0], [47.5, 1901.0], [47.6, 1903.0], [47.7, 1906.0], [47.8, 1909.0], [47.9, 1911.0], [48.0, 1914.0], [48.1, 1917.0], [48.2, 1921.0], [48.3, 1923.0], [48.4, 1926.0], [48.5, 1930.0], [48.6, 1932.0], [48.7, 1935.0], [48.8, 1937.0], [48.9, 1941.0], [49.0, 1944.0], [49.1, 1948.0], [49.2, 1950.0], [49.3, 1953.0], [49.4, 1956.0], [49.5, 1960.0], [49.6, 1963.0], [49.7, 1967.0], [49.8, 1969.0], [49.9, 1973.0], [50.0, 1976.0], [50.1, 1979.0], [50.2, 1983.0], [50.3, 1986.0], [50.4, 1989.0], [50.5, 1992.0], [50.6, 1994.0], [50.7, 1999.0], [50.8, 2003.0], [50.9, 2008.0], [51.0, 2012.0], [51.1, 2015.0], [51.2, 2018.0], [51.3, 2021.0], [51.4, 2024.0], [51.5, 2028.0], [51.6, 2033.0], [51.7, 2035.0], [51.8, 2038.0], [51.9, 2042.0], [52.0, 2046.0], [52.1, 2048.0], [52.2, 2051.0], [52.3, 2055.0], [52.4, 2058.0], [52.5, 2061.0], [52.6, 2065.0], [52.7, 2067.0], [52.8, 2069.0], [52.9, 2073.0], [53.0, 2077.0], [53.1, 2081.0], [53.2, 2083.0], [53.3, 2086.0], [53.4, 2089.0], [53.5, 2093.0], [53.6, 2097.0], [53.7, 2100.0], [53.8, 2102.0], [53.9, 2107.0], [54.0, 2110.0], [54.1, 2113.0], [54.2, 2118.0], [54.3, 2121.0], [54.4, 2124.0], [54.5, 2126.0], [54.6, 2132.0], [54.7, 2137.0], [54.8, 2140.0], [54.9, 2142.0], [55.0, 2145.0], [55.1, 2148.0], [55.2, 2152.0], [55.3, 2156.0], [55.4, 2158.0], [55.5, 2162.0], [55.6, 2166.0], [55.7, 2169.0], [55.8, 2173.0], [55.9, 2176.0], [56.0, 2178.0], [56.1, 2182.0], [56.2, 2185.0], [56.3, 2189.0], [56.4, 2192.0], [56.5, 2195.0], [56.6, 2198.0], [56.7, 2202.0], [56.8, 2205.0], [56.9, 2209.0], [57.0, 2212.0], [57.1, 2216.0], [57.2, 2221.0], [57.3, 2226.0], [57.4, 2231.0], [57.5, 2235.0], [57.6, 2237.0], [57.7, 2242.0], [57.8, 2246.0], [57.9, 2250.0], [58.0, 2254.0], [58.1, 2258.0], [58.2, 2261.0], [58.3, 2265.0], [58.4, 2269.0], [58.5, 2273.0], [58.6, 2276.0], [58.7, 2281.0], [58.8, 2285.0], [58.9, 2288.0], [59.0, 2294.0], [59.1, 2297.0], [59.2, 2302.0], [59.3, 2305.0], [59.4, 2308.0], [59.5, 2311.0], [59.6, 2314.0], [59.7, 2318.0], [59.8, 2322.0], [59.9, 2326.0], [60.0, 2329.0], [60.1, 2334.0], [60.2, 2339.0], [60.3, 2343.0], [60.4, 2346.0], [60.5, 2350.0], [60.6, 2353.0], [60.7, 2357.0], [60.8, 2361.0], [60.9, 2364.0], [61.0, 2367.0], [61.1, 2372.0], [61.2, 2375.0], [61.3, 2378.0], [61.4, 2382.0], [61.5, 2387.0], [61.6, 2391.0], [61.7, 2393.0], [61.8, 2397.0], [61.9, 2401.0], [62.0, 2407.0], [62.1, 2412.0], [62.2, 2417.0], [62.3, 2420.0], [62.4, 2424.0], [62.5, 2428.0], [62.6, 2431.0], [62.7, 2436.0], [62.8, 2441.0], [62.9, 2446.0], [63.0, 2450.0], [63.1, 2454.0], [63.2, 2459.0], [63.3, 2464.0], [63.4, 2469.0], [63.5, 2474.0], [63.6, 2476.0], [63.7, 2482.0], [63.8, 2486.0], [63.9, 2490.0], [64.0, 2493.0], [64.1, 2499.0], [64.2, 2502.0], [64.3, 2505.0], [64.4, 2508.0], [64.5, 2511.0], [64.6, 2519.0], [64.7, 2521.0], [64.8, 2524.0], [64.9, 2526.0], [65.0, 2531.0], [65.1, 2536.0], [65.2, 2540.0], [65.3, 2543.0], [65.4, 2547.0], [65.5, 2551.0], [65.6, 2556.0], [65.7, 2561.0], [65.8, 2564.0], [65.9, 2568.0], [66.0, 2573.0], [66.1, 2577.0], [66.2, 2583.0], [66.3, 2587.0], [66.4, 2593.0], [66.5, 2596.0], [66.6, 2600.0], [66.7, 2604.0], [66.8, 2607.0], [66.9, 2611.0], [67.0, 2614.0], [67.1, 2619.0], [67.2, 2622.0], [67.3, 2627.0], [67.4, 2631.0], [67.5, 2636.0], [67.6, 2642.0], [67.7, 2646.0], [67.8, 2652.0], [67.9, 2655.0], [68.0, 2659.0], [68.1, 2665.0], [68.2, 2670.0], [68.3, 2674.0], [68.4, 2678.0], [68.5, 2682.0], [68.6, 2686.0], [68.7, 2688.0], [68.8, 2694.0], [68.9, 2699.0], [69.0, 2704.0], [69.1, 2710.0], [69.2, 2715.0], [69.3, 2718.0], [69.4, 2723.0], [69.5, 2728.0], [69.6, 2734.0], [69.7, 2739.0], [69.8, 2743.0], [69.9, 2747.0], [70.0, 2753.0], [70.1, 2756.0], [70.2, 2761.0], [70.3, 2765.0], [70.4, 2769.0], [70.5, 2774.0], [70.6, 2779.0], [70.7, 2785.0], [70.8, 2791.0], [70.9, 2795.0], [71.0, 2802.0], [71.1, 2806.0], [71.2, 2811.0], [71.3, 2816.0], [71.4, 2820.0], [71.5, 2825.0], [71.6, 2830.0], [71.7, 2833.0], [71.8, 2839.0], [71.9, 2844.0], [72.0, 2850.0], [72.1, 2856.0], [72.2, 2862.0], [72.3, 2868.0], [72.4, 2873.0], [72.5, 2878.0], [72.6, 2885.0], [72.7, 2890.0], [72.8, 2894.0], [72.9, 2901.0], [73.0, 2906.0], [73.1, 2912.0], [73.2, 2918.0], [73.3, 2924.0], [73.4, 2932.0], [73.5, 2939.0], [73.6, 2946.0], [73.7, 2953.0], [73.8, 2957.0], [73.9, 2963.0], [74.0, 2976.0], [74.1, 2981.0], [74.2, 2987.0], [74.3, 2992.0], [74.4, 2996.0], [74.5, 3004.0], [74.6, 3007.0], [74.7, 3012.0], [74.8, 3018.0], [74.9, 3025.0], [75.0, 3029.0], [75.1, 3035.0], [75.2, 3038.0], [75.3, 3046.0], [75.4, 3049.0], [75.5, 3057.0], [75.6, 3067.0], [75.7, 3074.0], [75.8, 3079.0], [75.9, 3086.0], [76.0, 3091.0], [76.1, 3098.0], [76.2, 3101.0], [76.3, 3107.0], [76.4, 3114.0], [76.5, 3119.0], [76.6, 3129.0], [76.7, 3135.0], [76.8, 3143.0], [76.9, 3151.0], [77.0, 3159.0], [77.1, 3163.0], [77.2, 3167.0], [77.3, 3172.0], [77.4, 3176.0], [77.5, 3179.0], [77.6, 3186.0], [77.7, 3194.0], [77.8, 3201.0], [77.9, 3209.0], [78.0, 3215.0], [78.1, 3220.0], [78.2, 3226.0], [78.3, 3232.0], [78.4, 3239.0], [78.5, 3247.0], [78.6, 3254.0], [78.7, 3262.0], [78.8, 3270.0], [78.9, 3279.0], [79.0, 3285.0], [79.1, 3291.0], [79.2, 3300.0], [79.3, 3311.0], [79.4, 3319.0], [79.5, 3328.0], [79.6, 3336.0], [79.7, 3345.0], [79.8, 3349.0], [79.9, 3356.0], [80.0, 3366.0], [80.1, 3372.0], [80.2, 3379.0], [80.3, 3386.0], [80.4, 3394.0], [80.5, 3402.0], [80.6, 3411.0], [80.7, 3418.0], [80.8, 3424.0], [80.9, 3430.0], [81.0, 3434.0], [81.1, 3442.0], [81.2, 3447.0], [81.3, 3453.0], [81.4, 3458.0], [81.5, 3471.0], [81.6, 3478.0], [81.7, 3483.0], [81.8, 3493.0], [81.9, 3499.0], [82.0, 3505.0], [82.1, 3514.0], [82.2, 3519.0], [82.3, 3524.0], [82.4, 3533.0], [82.5, 3539.0], [82.6, 3547.0], [82.7, 3562.0], [82.8, 3572.0], [82.9, 3583.0], [83.0, 3591.0], [83.1, 3599.0], [83.2, 3610.0], [83.3, 3616.0], [83.4, 3626.0], [83.5, 3632.0], [83.6, 3641.0], [83.7, 3648.0], [83.8, 3657.0], [83.9, 3666.0], [84.0, 3674.0], [84.1, 3683.0], [84.2, 3690.0], [84.3, 3698.0], [84.4, 3704.0], [84.5, 3718.0], [84.6, 3725.0], [84.7, 3733.0], [84.8, 3739.0], [84.9, 3747.0], [85.0, 3755.0], [85.1, 3762.0], [85.2, 3769.0], [85.3, 3776.0], [85.4, 3788.0], [85.5, 3799.0], [85.6, 3810.0], [85.7, 3821.0], [85.8, 3827.0], [85.9, 3838.0], [86.0, 3844.0], [86.1, 3856.0], [86.2, 3863.0], [86.3, 3876.0], [86.4, 3887.0], [86.5, 3901.0], [86.6, 3913.0], [86.7, 3924.0], [86.8, 3936.0], [86.9, 3949.0], [87.0, 3961.0], [87.1, 3973.0], [87.2, 3984.0], [87.3, 3994.0], [87.4, 4000.0], [87.5, 4011.0], [87.6, 4018.0], [87.7, 4027.0], [87.8, 4037.0], [87.9, 4047.0], [88.0, 4056.0], [88.1, 4070.0], [88.2, 4080.0], [88.3, 4091.0], [88.4, 4104.0], [88.5, 4114.0], [88.6, 4127.0], [88.7, 4135.0], [88.8, 4144.0], [88.9, 4153.0], [89.0, 4172.0], [89.1, 4183.0], [89.2, 4195.0], [89.3, 4212.0], [89.4, 4221.0], [89.5, 4234.0], [89.6, 4247.0], [89.7, 4260.0], [89.8, 4278.0], [89.9, 4296.0], [90.0, 4307.0], [90.1, 4317.0], [90.2, 4329.0], [90.3, 4345.0], [90.4, 4357.0], [90.5, 4371.0], [90.6, 4389.0], [90.7, 4402.0], [90.8, 4418.0], [90.9, 4433.0], [91.0, 4455.0], [91.1, 4478.0], [91.2, 4497.0], [91.3, 4513.0], [91.4, 4535.0], [91.5, 4552.0], [91.6, 4568.0], [91.7, 4579.0], [91.8, 4602.0], [91.9, 4613.0], [92.0, 4622.0], [92.1, 4639.0], [92.2, 4651.0], [92.3, 4666.0], [92.4, 4684.0], [92.5, 4696.0], [92.6, 4726.0], [92.7, 4744.0], [92.8, 4760.0], [92.9, 4773.0], [93.0, 4790.0], [93.1, 4802.0], [93.2, 4833.0], [93.3, 4851.0], [93.4, 4869.0], [93.5, 4889.0], [93.6, 4907.0], [93.7, 4929.0], [93.8, 4953.0], [93.9, 4966.0], [94.0, 4995.0], [94.1, 5010.0], [94.2, 5029.0], [94.3, 5049.0], [94.4, 5074.0], [94.5, 5098.0], [94.6, 5117.0], [94.7, 5148.0], [94.8, 5169.0], [94.9, 5191.0], [95.0, 5207.0], [95.1, 5230.0], [95.2, 5248.0], [95.3, 5281.0], [95.4, 5317.0], [95.5, 5331.0], [95.6, 5346.0], [95.7, 5381.0], [95.8, 5410.0], [95.9, 5435.0], [96.0, 5461.0], [96.1, 5482.0], [96.2, 5500.0], [96.3, 5532.0], [96.4, 5568.0], [96.5, 5596.0], [96.6, 5631.0], [96.7, 5677.0], [96.8, 5709.0], [96.9, 5740.0], [97.0, 5810.0], [97.1, 5847.0], [97.2, 5898.0], [97.3, 5963.0], [97.4, 6006.0], [97.5, 6064.0], [97.6, 6130.0], [97.7, 6171.0], [97.8, 6226.0], [97.9, 6270.0], [98.0, 6369.0], [98.1, 6430.0], [98.2, 6494.0], [98.3, 6547.0], [98.4, 6599.0], [98.5, 6659.0], [98.6, 6761.0], [98.7, 6853.0], [98.8, 6990.0], [98.9, 7088.0], [99.0, 7210.0], [99.1, 7348.0], [99.2, 7528.0], [99.3, 7706.0], [99.4, 7918.0], [99.5, 8136.0], [99.6, 8425.0], [99.7, 8668.0], [99.8, 9001.0], [99.9, 10154.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 27.0], [0.1, 29.0], [0.2, 31.0], [0.3, 34.0], [0.4, 34.0], [0.5, 35.0], [0.6, 36.0], [0.7, 36.0], [0.8, 36.0], [0.9, 36.0], [1.0, 36.0], [1.1, 37.0], [1.2, 37.0], [1.3, 37.0], [1.4, 37.0], [1.5, 37.0], [1.6, 37.0], [1.7, 37.0], [1.8, 37.0], [1.9, 37.0], [2.0, 37.0], [2.1, 37.0], [2.2, 38.0], [2.3, 38.0], [2.4, 38.0], [2.5, 38.0], [2.6, 38.0], [2.7, 38.0], [2.8, 38.0], [2.9, 38.0], [3.0, 38.0], [3.1, 38.0], [3.2, 38.0], [3.3, 38.0], [3.4, 38.0], [3.5, 38.0], [3.6, 38.0], [3.7, 38.0], [3.8, 38.0], [3.9, 38.0], [4.0, 38.0], [4.1, 38.0], [4.2, 38.0], [4.3, 38.0], [4.4, 38.0], [4.5, 38.0], [4.6, 38.0], [4.7, 39.0], [4.8, 39.0], [4.9, 39.0], [5.0, 39.0], [5.1, 39.0], [5.2, 39.0], [5.3, 39.0], [5.4, 39.0], [5.5, 39.0], [5.6, 39.0], [5.7, 39.0], [5.8, 39.0], [5.9, 39.0], [6.0, 39.0], [6.1, 39.0], [6.2, 39.0], [6.3, 39.0], [6.4, 39.0], [6.5, 39.0], [6.6, 39.0], [6.7, 39.0], [6.8, 39.0], [6.9, 39.0], [7.0, 39.0], [7.1, 39.0], [7.2, 39.0], [7.3, 39.0], [7.4, 39.0], [7.5, 39.0], [7.6, 39.0], [7.7, 39.0], [7.8, 39.0], [7.9, 39.0], [8.0, 39.0], [8.1, 39.0], [8.2, 39.0], [8.3, 39.0], [8.4, 39.0], [8.5, 39.0], [8.6, 40.0], [8.7, 40.0], [8.8, 40.0], [8.9, 40.0], [9.0, 40.0], [9.1, 40.0], [9.2, 40.0], [9.3, 40.0], [9.4, 40.0], [9.5, 40.0], [9.6, 40.0], [9.7, 40.0], [9.8, 40.0], [9.9, 40.0], [10.0, 40.0], [10.1, 40.0], [10.2, 40.0], [10.3, 40.0], [10.4, 40.0], [10.5, 40.0], [10.6, 40.0], [10.7, 40.0], [10.8, 40.0], [10.9, 40.0], [11.0, 40.0], [11.1, 40.0], [11.2, 40.0], [11.3, 40.0], [11.4, 40.0], [11.5, 40.0], [11.6, 40.0], [11.7, 40.0], [11.8, 40.0], [11.9, 40.0], [12.0, 40.0], [12.1, 40.0], [12.2, 40.0], [12.3, 40.0], [12.4, 40.0], [12.5, 40.0], [12.6, 40.0], [12.7, 40.0], [12.8, 40.0], [12.9, 40.0], [13.0, 40.0], [13.1, 41.0], [13.2, 41.0], [13.3, 41.0], [13.4, 41.0], [13.5, 41.0], [13.6, 41.0], [13.7, 41.0], [13.8, 41.0], [13.9, 41.0], [14.0, 41.0], [14.1, 41.0], [14.2, 41.0], [14.3, 41.0], [14.4, 41.0], [14.5, 41.0], [14.6, 41.0], [14.7, 41.0], [14.8, 41.0], [14.9, 41.0], [15.0, 41.0], [15.1, 41.0], [15.2, 41.0], [15.3, 41.0], [15.4, 41.0], [15.5, 41.0], [15.6, 41.0], [15.7, 41.0], [15.8, 41.0], [15.9, 41.0], [16.0, 41.0], [16.1, 41.0], [16.2, 41.0], [16.3, 41.0], [16.4, 41.0], [16.5, 41.0], [16.6, 41.0], [16.7, 41.0], [16.8, 41.0], [16.9, 41.0], [17.0, 41.0], [17.1, 41.0], [17.2, 41.0], [17.3, 41.0], [17.4, 41.0], [17.5, 41.0], [17.6, 41.0], [17.7, 41.0], [17.8, 41.0], [17.9, 42.0], [18.0, 42.0], [18.1, 42.0], [18.2, 42.0], [18.3, 42.0], [18.4, 42.0], [18.5, 42.0], [18.6, 42.0], [18.7, 42.0], [18.8, 42.0], [18.9, 42.0], [19.0, 42.0], [19.1, 42.0], [19.2, 42.0], [19.3, 42.0], [19.4, 42.0], [19.5, 42.0], [19.6, 42.0], [19.7, 42.0], [19.8, 42.0], [19.9, 42.0], [20.0, 42.0], [20.1, 42.0], [20.2, 42.0], [20.3, 42.0], [20.4, 42.0], [20.5, 42.0], [20.6, 42.0], [20.7, 42.0], [20.8, 42.0], [20.9, 42.0], [21.0, 42.0], [21.1, 42.0], [21.2, 42.0], [21.3, 42.0], [21.4, 42.0], [21.5, 42.0], [21.6, 42.0], [21.7, 42.0], [21.8, 42.0], [21.9, 42.0], [22.0, 42.0], [22.1, 42.0], [22.2, 42.0], [22.3, 42.0], [22.4, 42.0], [22.5, 42.0], [22.6, 42.0], [22.7, 42.0], [22.8, 42.0], [22.9, 43.0], [23.0, 43.0], [23.1, 43.0], [23.2, 43.0], [23.3, 43.0], [23.4, 43.0], [23.5, 43.0], [23.6, 43.0], [23.7, 43.0], [23.8, 43.0], [23.9, 43.0], [24.0, 43.0], [24.1, 43.0], [24.2, 43.0], [24.3, 43.0], [24.4, 43.0], [24.5, 43.0], [24.6, 43.0], [24.7, 43.0], [24.8, 43.0], [24.9, 43.0], [25.0, 43.0], [25.1, 43.0], [25.2, 43.0], [25.3, 43.0], [25.4, 43.0], [25.5, 43.0], [25.6, 43.0], [25.7, 43.0], [25.8, 43.0], [25.9, 43.0], [26.0, 43.0], [26.1, 43.0], [26.2, 43.0], [26.3, 43.0], [26.4, 43.0], [26.5, 43.0], [26.6, 43.0], [26.7, 43.0], [26.8, 43.0], [26.9, 43.0], [27.0, 43.0], [27.1, 43.0], [27.2, 43.0], [27.3, 43.0], [27.4, 43.0], [27.5, 43.0], [27.6, 43.0], [27.7, 43.0], [27.8, 43.0], [27.9, 43.0], [28.0, 43.0], [28.1, 43.0], [28.2, 43.0], [28.3, 43.0], [28.4, 43.0], [28.5, 43.0], [28.6, 44.0], [28.7, 44.0], [28.8, 44.0], [28.9, 44.0], [29.0, 44.0], [29.1, 44.0], [29.2, 44.0], [29.3, 44.0], [29.4, 44.0], [29.5, 44.0], [29.6, 44.0], [29.7, 44.0], [29.8, 44.0], [29.9, 44.0], [30.0, 44.0], [30.1, 44.0], [30.2, 44.0], [30.3, 44.0], [30.4, 44.0], [30.5, 44.0], [30.6, 44.0], [30.7, 44.0], [30.8, 44.0], [30.9, 44.0], [31.0, 44.0], [31.1, 44.0], [31.2, 44.0], [31.3, 44.0], [31.4, 44.0], [31.5, 44.0], [31.6, 44.0], [31.7, 44.0], [31.8, 44.0], [31.9, 44.0], [32.0, 44.0], [32.1, 44.0], [32.2, 44.0], [32.3, 44.0], [32.4, 44.0], [32.5, 44.0], [32.6, 44.0], [32.7, 44.0], [32.8, 44.0], [32.9, 44.0], [33.0, 44.0], [33.1, 44.0], [33.2, 44.0], [33.3, 44.0], [33.4, 44.0], [33.5, 44.0], [33.6, 44.0], [33.7, 44.0], [33.8, 44.0], [33.9, 44.0], [34.0, 44.0], [34.1, 44.0], [34.2, 44.0], [34.3, 44.0], [34.4, 44.0], [34.5, 44.0], [34.6, 44.0], [34.7, 44.0], [34.8, 44.0], [34.9, 44.0], [35.0, 44.0], [35.1, 44.0], [35.2, 44.0], [35.3, 45.0], [35.4, 45.0], [35.5, 45.0], [35.6, 45.0], [35.7, 45.0], [35.8, 45.0], [35.9, 45.0], [36.0, 45.0], [36.1, 45.0], [36.2, 45.0], [36.3, 45.0], [36.4, 45.0], [36.5, 45.0], [36.6, 45.0], [36.7, 45.0], [36.8, 45.0], [36.9, 45.0], [37.0, 45.0], [37.1, 45.0], [37.2, 45.0], [37.3, 45.0], [37.4, 45.0], [37.5, 45.0], [37.6, 45.0], [37.7, 45.0], [37.8, 45.0], [37.9, 45.0], [38.0, 45.0], [38.1, 45.0], [38.2, 45.0], [38.3, 45.0], [38.4, 45.0], [38.5, 45.0], [38.6, 45.0], [38.7, 45.0], [38.8, 45.0], [38.9, 45.0], [39.0, 45.0], [39.1, 45.0], [39.2, 45.0], [39.3, 45.0], [39.4, 45.0], [39.5, 45.0], [39.6, 45.0], [39.7, 45.0], [39.8, 45.0], [39.9, 45.0], [40.0, 45.0], [40.1, 45.0], [40.2, 45.0], [40.3, 45.0], [40.4, 45.0], [40.5, 45.0], [40.6, 45.0], [40.7, 45.0], [40.8, 45.0], [40.9, 45.0], [41.0, 45.0], [41.1, 46.0], [41.2, 46.0], [41.3, 46.0], [41.4, 46.0], [41.5, 46.0], [41.6, 46.0], [41.7, 46.0], [41.8, 46.0], [41.9, 46.0], [42.0, 46.0], [42.1, 46.0], [42.2, 46.0], [42.3, 46.0], [42.4, 46.0], [42.5, 46.0], [42.6, 46.0], [42.7, 46.0], [42.8, 46.0], [42.9, 46.0], [43.0, 46.0], [43.1, 46.0], [43.2, 46.0], [43.3, 46.0], [43.4, 46.0], [43.5, 46.0], [43.6, 46.0], [43.7, 46.0], [43.8, 46.0], [43.9, 46.0], [44.0, 46.0], [44.1, 46.0], [44.2, 46.0], [44.3, 46.0], [44.4, 46.0], [44.5, 46.0], [44.6, 46.0], [44.7, 46.0], [44.8, 46.0], [44.9, 46.0], [45.0, 46.0], [45.1, 46.0], [45.2, 46.0], [45.3, 47.0], [45.4, 47.0], [45.5, 47.0], [45.6, 47.0], [45.7, 47.0], [45.8, 47.0], [45.9, 47.0], [46.0, 47.0], [46.1, 47.0], [46.2, 47.0], [46.3, 47.0], [46.4, 47.0], [46.5, 47.0], [46.6, 47.0], [46.7, 47.0], [46.8, 47.0], [46.9, 47.0], [47.0, 47.0], [47.1, 47.0], [47.2, 47.0], [47.3, 47.0], [47.4, 47.0], [47.5, 47.0], [47.6, 47.0], [47.7, 47.0], [47.8, 47.0], [47.9, 47.0], [48.0, 47.0], [48.1, 47.0], [48.2, 47.0], [48.3, 47.0], [48.4, 47.0], [48.5, 47.0], [48.6, 47.0], [48.7, 47.0], [48.8, 47.0], [48.9, 48.0], [49.0, 48.0], [49.1, 48.0], [49.2, 48.0], [49.3, 48.0], [49.4, 48.0], [49.5, 48.0], [49.6, 48.0], [49.7, 48.0], [49.8, 48.0], [49.9, 48.0], [50.0, 48.0], [50.1, 48.0], [50.2, 48.0], [50.3, 48.0], [50.4, 48.0], [50.5, 48.0], [50.6, 48.0], [50.7, 48.0], [50.8, 48.0], [50.9, 48.0], [51.0, 48.0], [51.1, 48.0], [51.2, 48.0], [51.3, 48.0], [51.4, 48.0], [51.5, 48.0], [51.6, 48.0], [51.7, 48.0], [51.8, 48.0], [51.9, 48.0], [52.0, 48.0], [52.1, 48.0], [52.2, 48.0], [52.3, 48.0], [52.4, 48.0], [52.5, 48.0], [52.6, 48.0], [52.7, 48.0], [52.8, 48.0], [52.9, 48.0], [53.0, 48.0], [53.1, 48.0], [53.2, 48.0], [53.3, 49.0], [53.4, 49.0], [53.5, 49.0], [53.6, 49.0], [53.7, 49.0], [53.8, 49.0], [53.9, 49.0], [54.0, 49.0], [54.1, 49.0], [54.2, 49.0], [54.3, 49.0], [54.4, 49.0], [54.5, 49.0], [54.6, 49.0], [54.7, 49.0], [54.8, 49.0], [54.9, 49.0], [55.0, 49.0], [55.1, 49.0], [55.2, 49.0], [55.3, 49.0], [55.4, 49.0], [55.5, 49.0], [55.6, 49.0], [55.7, 49.0], [55.8, 49.0], [55.9, 49.0], [56.0, 49.0], [56.1, 49.0], [56.2, 49.0], [56.3, 49.0], [56.4, 49.0], [56.5, 49.0], [56.6, 49.0], [56.7, 49.0], [56.8, 49.0], [56.9, 49.0], [57.0, 49.0], [57.1, 49.0], [57.2, 49.0], [57.3, 49.0], [57.4, 49.0], [57.5, 49.0], [57.6, 49.0], [57.7, 49.0], [57.8, 49.0], [57.9, 49.0], [58.0, 49.0], [58.1, 49.0], [58.2, 49.0], [58.3, 49.0], [58.4, 49.0], [58.5, 49.0], [58.6, 49.0], [58.7, 50.0], [58.8, 50.0], [58.9, 50.0], [59.0, 50.0], [59.1, 50.0], [59.2, 50.0], [59.3, 50.0], [59.4, 50.0], [59.5, 50.0], [59.6, 50.0], [59.7, 50.0], [59.8, 50.0], [59.9, 50.0], [60.0, 50.0], [60.1, 50.0], [60.2, 50.0], [60.3, 50.0], [60.4, 50.0], [60.5, 50.0], [60.6, 50.0], [60.7, 50.0], [60.8, 50.0], [60.9, 50.0], [61.0, 50.0], [61.1, 50.0], [61.2, 50.0], [61.3, 50.0], [61.4, 50.0], [61.5, 50.0], [61.6, 50.0], [61.7, 50.0], [61.8, 50.0], [61.9, 50.0], [62.0, 50.0], [62.1, 50.0], [62.2, 50.0], [62.3, 50.0], [62.4, 50.0], [62.5, 50.0], [62.6, 50.0], [62.7, 50.0], [62.8, 50.0], [62.9, 50.0], [63.0, 50.0], [63.1, 50.0], [63.2, 50.0], [63.3, 50.0], [63.4, 50.0], [63.5, 50.0], [63.6, 50.0], [63.7, 50.0], [63.8, 50.0], [63.9, 50.0], [64.0, 50.0], [64.1, 50.0], [64.2, 50.0], [64.3, 50.0], [64.4, 50.0], [64.5, 50.0], [64.6, 50.0], [64.7, 50.0], [64.8, 50.0], [64.9, 51.0], [65.0, 51.0], [65.1, 51.0], [65.2, 51.0], [65.3, 51.0], [65.4, 51.0], [65.5, 51.0], [65.6, 51.0], [65.7, 51.0], [65.8, 51.0], [65.9, 51.0], [66.0, 51.0], [66.1, 51.0], [66.2, 51.0], [66.3, 51.0], [66.4, 51.0], [66.5, 51.0], [66.6, 51.0], [66.7, 51.0], [66.8, 51.0], [66.9, 51.0], [67.0, 51.0], [67.1, 51.0], [67.2, 51.0], [67.3, 51.0], [67.4, 51.0], [67.5, 51.0], [67.6, 51.0], [67.7, 51.0], [67.8, 51.0], [67.9, 51.0], [68.0, 51.0], [68.1, 51.0], [68.2, 51.0], [68.3, 51.0], [68.4, 51.0], [68.5, 51.0], [68.6, 51.0], [68.7, 51.0], [68.8, 51.0], [68.9, 51.0], [69.0, 51.0], [69.1, 51.0], [69.2, 51.0], [69.3, 51.0], [69.4, 51.0], [69.5, 51.0], [69.6, 51.0], [69.7, 51.0], [69.8, 51.0], [69.9, 51.0], [70.0, 51.0], [70.1, 51.0], [70.2, 51.0], [70.3, 51.0], [70.4, 51.0], [70.5, 51.0], [70.6, 51.0], [70.7, 52.0], [70.8, 52.0], [70.9, 52.0], [71.0, 52.0], [71.1, 52.0], [71.2, 52.0], [71.3, 52.0], [71.4, 52.0], [71.5, 52.0], [71.6, 52.0], [71.7, 52.0], [71.8, 52.0], [71.9, 52.0], [72.0, 52.0], [72.1, 52.0], [72.2, 52.0], [72.3, 52.0], [72.4, 52.0], [72.5, 52.0], [72.6, 52.0], [72.7, 52.0], [72.8, 52.0], [72.9, 52.0], [73.0, 52.0], [73.1, 52.0], [73.2, 52.0], [73.3, 52.0], [73.4, 52.0], [73.5, 52.0], [73.6, 52.0], [73.7, 52.0], [73.8, 52.0], [73.9, 52.0], [74.0, 52.0], [74.1, 52.0], [74.2, 52.0], [74.3, 52.0], [74.4, 52.0], [74.5, 52.0], [74.6, 52.0], [74.7, 52.0], [74.8, 52.0], [74.9, 52.0], [75.0, 52.0], [75.1, 52.0], [75.2, 53.0], [75.3, 53.0], [75.4, 53.0], [75.5, 53.0], [75.6, 53.0], [75.7, 53.0], [75.8, 53.0], [75.9, 53.0], [76.0, 53.0], [76.1, 53.0], [76.2, 53.0], [76.3, 53.0], [76.4, 53.0], [76.5, 53.0], [76.6, 53.0], [76.7, 53.0], [76.8, 53.0], [76.9, 53.0], [77.0, 53.0], [77.1, 53.0], [77.2, 53.0], [77.3, 53.0], [77.4, 53.0], [77.5, 53.0], [77.6, 53.0], [77.7, 53.0], [77.8, 53.0], [77.9, 53.0], [78.0, 53.0], [78.1, 53.0], [78.2, 53.0], [78.3, 53.0], [78.4, 53.0], [78.5, 53.0], [78.6, 53.0], [78.7, 53.0], [78.8, 53.0], [78.9, 53.0], [79.0, 53.0], [79.1, 53.0], [79.2, 54.0], [79.3, 54.0], [79.4, 54.0], [79.5, 54.0], [79.6, 54.0], [79.7, 54.0], [79.8, 54.0], [79.9, 54.0], [80.0, 54.0], [80.1, 54.0], [80.2, 54.0], [80.3, 54.0], [80.4, 54.0], [80.5, 54.0], [80.6, 54.0], [80.7, 54.0], [80.8, 54.0], [80.9, 54.0], [81.0, 54.0], [81.1, 54.0], [81.2, 54.0], [81.3, 54.0], [81.4, 54.0], [81.5, 54.0], [81.6, 54.0], [81.7, 54.0], [81.8, 54.0], [81.9, 54.0], [82.0, 54.0], [82.1, 54.0], [82.2, 55.0], [82.3, 55.0], [82.4, 55.0], [82.5, 55.0], [82.6, 55.0], [82.7, 55.0], [82.8, 55.0], [82.9, 55.0], [83.0, 55.0], [83.1, 55.0], [83.2, 55.0], [83.3, 55.0], [83.4, 55.0], [83.5, 55.0], [83.6, 55.0], [83.7, 55.0], [83.8, 55.0], [83.9, 55.0], [84.0, 55.0], [84.1, 55.0], [84.2, 55.0], [84.3, 56.0], [84.4, 56.0], [84.5, 56.0], [84.6, 56.0], [84.7, 56.0], [84.8, 56.0], [84.9, 56.0], [85.0, 56.0], [85.1, 56.0], [85.2, 56.0], [85.3, 56.0], [85.4, 56.0], [85.5, 56.0], [85.6, 56.0], [85.7, 56.0], [85.8, 57.0], [85.9, 57.0], [86.0, 57.0], [86.1, 57.0], [86.2, 57.0], [86.3, 57.0], [86.4, 57.0], [86.5, 57.0], [86.6, 57.0], [86.7, 57.0], [86.8, 57.0], [86.9, 57.0], [87.0, 57.0], [87.1, 58.0], [87.2, 58.0], [87.3, 58.0], [87.4, 58.0], [87.5, 58.0], [87.6, 58.0], [87.7, 58.0], [87.8, 58.0], [87.9, 58.0], [88.0, 58.0], [88.1, 58.0], [88.2, 59.0], [88.3, 59.0], [88.4, 59.0], [88.5, 59.0], [88.6, 59.0], [88.7, 59.0], [88.8, 59.0], [88.9, 60.0], [89.0, 60.0], [89.1, 60.0], [89.2, 60.0], [89.3, 60.0], [89.4, 61.0], [89.5, 61.0], [89.6, 61.0], [89.7, 61.0], [89.8, 61.0], [89.9, 61.0], [90.0, 61.0], [90.1, 62.0], [90.2, 62.0], [90.3, 62.0], [90.4, 62.0], [90.5, 62.0], [90.6, 62.0], [90.7, 63.0], [90.8, 63.0], [90.9, 63.0], [91.0, 63.0], [91.1, 63.0], [91.2, 64.0], [91.3, 64.0], [91.4, 64.0], [91.5, 64.0], [91.6, 65.0], [91.7, 65.0], [91.8, 65.0], [91.9, 65.0], [92.0, 66.0], [92.1, 66.0], [92.2, 66.0], [92.3, 66.0], [92.4, 67.0], [92.5, 67.0], [92.6, 67.0], [92.7, 67.0], [92.8, 68.0], [92.9, 68.0], [93.0, 68.0], [93.1, 69.0], [93.2, 69.0], [93.3, 69.0], [93.4, 70.0], [93.5, 70.0], [93.6, 71.0], [93.7, 71.0], [93.8, 71.0], [93.9, 72.0], [94.0, 72.0], [94.1, 73.0], [94.2, 73.0], [94.3, 74.0], [94.4, 74.0], [94.5, 75.0], [94.6, 75.0], [94.7, 76.0], [94.8, 76.0], [94.9, 76.0], [95.0, 77.0], [95.1, 77.0], [95.2, 78.0], [95.3, 78.0], [95.4, 79.0], [95.5, 79.0], [95.6, 80.0], [95.7, 81.0], [95.8, 82.0], [95.9, 83.0], [96.0, 83.0], [96.1, 85.0], [96.2, 86.0], [96.3, 87.0], [96.4, 88.0], [96.5, 89.0], [96.6, 91.0], [96.7, 92.0], [96.8, 94.0], [96.9, 96.0], [97.0, 98.0], [97.1, 100.0], [97.2, 102.0], [97.3, 106.0], [97.4, 110.0], [97.5, 116.0], [97.6, 122.0], [97.7, 127.0], [97.8, 137.0], [97.9, 151.0], [98.0, 204.0], [98.1, 1559.0], [98.2, 2514.0], [98.3, 4173.0], [98.4, 4401.0], [98.5, 4588.0], [98.6, 4822.0], [98.7, 5453.0], [98.8, 6121.0], [98.9, 6544.0], [99.0, 6723.0], [99.1, 6859.0], [99.2, 7002.0], [99.3, 7228.0], [99.4, 7461.0], [99.5, 8801.0], [99.6, 9098.0], [99.7, 9443.0], [99.8, 11240.0], [99.9, 11956.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 15532.0, "series": [{"data": [[100.0, 6.0], [200.0, 42.0], [300.0, 67.0], [400.0, 150.0], [500.0, 259.0], [600.0, 350.0], [700.0, 440.0], [800.0, 518.0], [900.0, 560.0], [1000.0, 554.0], [1100.0, 612.0], [1200.0, 610.0], [1300.0, 597.0], [1400.0, 610.0], [1500.0, 579.0], [1600.0, 566.0], [1700.0, 558.0], [1800.0, 517.0], [1900.0, 526.0], [2000.0, 471.0], [2100.0, 477.0], [2200.0, 398.0], [2300.0, 429.0], [2400.0, 361.0], [2500.0, 397.0], [2600.0, 372.0], [2700.0, 328.0], [2800.0, 307.0], [2900.0, 251.0], [3000.0, 274.0], [3100.0, 258.0], [3200.0, 227.0], [3300.0, 205.0], [3400.0, 230.0], [3500.0, 192.0], [3600.0, 196.0], [3700.0, 187.0], [3800.0, 158.0], [3900.0, 143.0], [4000.0, 152.0], [4200.0, 113.0], [4100.0, 145.0], [4300.0, 117.0], [4600.0, 119.0], [4400.0, 85.0], [4500.0, 90.0], [4800.0, 78.0], [4700.0, 92.0], [5000.0, 75.0], [5100.0, 70.0], [4900.0, 73.0], [5300.0, 68.0], [5200.0, 66.0], [5500.0, 51.0], [5600.0, 40.0], [5400.0, 67.0], [5700.0, 35.0], [5800.0, 35.0], [6100.0, 32.0], [5900.0, 27.0], [6000.0, 28.0], [6200.0, 29.0], [6300.0, 18.0], [6600.0, 24.0], [6400.0, 29.0], [6500.0, 29.0], [6700.0, 15.0], [6900.0, 17.0], [6800.0, 11.0], [7100.0, 15.0], [7000.0, 13.0], [7400.0, 10.0], [7200.0, 14.0], [7300.0, 7.0], [7600.0, 10.0], [7500.0, 7.0], [7700.0, 7.0], [7900.0, 8.0], [7800.0, 8.0], [8000.0, 6.0], [8100.0, 7.0], [8200.0, 7.0], [8600.0, 4.0], [8400.0, 5.0], [8500.0, 10.0], [8300.0, 4.0], [8700.0, 2.0], [9200.0, 5.0], [8800.0, 6.0], [8900.0, 6.0], [9000.0, 3.0], [9700.0, 2.0], [9600.0, 2.0], [9500.0, 1.0], [9400.0, 1.0], [10100.0, 3.0], [10200.0, 1.0], [9900.0, 1.0], [10500.0, 1.0], [10600.0, 2.0], [10400.0, 3.0], [10300.0, 1.0], [10800.0, 1.0], [11000.0, 1.0], [12200.0, 1.0], [12400.0, 1.0], [12500.0, 1.0], [13700.0, 1.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 15532.0], [700.0, 1.0], [1000.0, 5.0], [1100.0, 1.0], [1500.0, 1.0], [1700.0, 1.0], [1900.0, 2.0], [2000.0, 2.0], [2300.0, 5.0], [2200.0, 1.0], [2400.0, 4.0], [2500.0, 2.0], [2700.0, 1.0], [2900.0, 1.0], [3300.0, 1.0], [3500.0, 1.0], [3700.0, 3.0], [3800.0, 2.0], [3900.0, 1.0], [4000.0, 2.0], [4200.0, 7.0], [4300.0, 7.0], [4100.0, 4.0], [4500.0, 9.0], [4400.0, 9.0], [4600.0, 6.0], [4700.0, 6.0], [4800.0, 6.0], [4900.0, 3.0], [5000.0, 4.0], [5200.0, 4.0], [5300.0, 1.0], [5600.0, 3.0], [5500.0, 5.0], [5400.0, 1.0], [5700.0, 2.0], [5800.0, 2.0], [6000.0, 3.0], [6100.0, 3.0], [6300.0, 3.0], [6200.0, 2.0], [6500.0, 9.0], [6400.0, 3.0], [6600.0, 8.0], [6900.0, 9.0], [6700.0, 17.0], [6800.0, 10.0], [7000.0, 8.0], [7100.0, 7.0], [7200.0, 10.0], [7300.0, 5.0], [7400.0, 4.0], [7600.0, 1.0], [7500.0, 2.0], [7800.0, 4.0], [7700.0, 1.0], [8500.0, 3.0], [8600.0, 2.0], [8200.0, 1.0], [9000.0, 7.0], [9100.0, 4.0], [9200.0, 4.0], [8800.0, 7.0], [8900.0, 3.0], [9600.0, 4.0], [9400.0, 5.0], [9300.0, 6.0], [9700.0, 3.0], [9500.0, 1.0], [10000.0, 1.0], [10200.0, 1.0], [9900.0, 1.0], [11000.0, 1.0], [11200.0, 1.0], [11400.0, 2.0], [11300.0, 2.0], [11500.0, 5.0], [11700.0, 2.0], [11600.0, 3.0], [12200.0, 2.0], [11900.0, 3.0], [12400.0, 3.0], [12300.0, 3.0], [13400.0, 1.0], [13600.0, 1.0], [13900.0, 2.0], [14700.0, 1.0], [14500.0, 1.0], [100.0, 147.0], [200.0, 6.0], [300.0, 2.0], [400.0, 1.0], [500.0, 1.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 14700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 72.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 15952.0, "series": [{"data": [[0.0, 15952.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 5125.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 10851.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 72.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 9.993506493506498, "minX": 1.74715134E12, "maxY": 32.0, "series": [{"data": [[1.74715164E12, 32.0], [1.7471523E12, 32.0], [1.74715134E12, 31.944444444444443], [1.7471526E12, 26.910585141354364], [1.74715194E12, 32.0], [1.74715224E12, 32.0], [1.74715188E12, 32.0], [1.74715254E12, 32.0], [1.74715158E12, 32.0], [1.74715152E12, 32.0], [1.74715218E12, 32.0], [1.74715248E12, 32.0], [1.74715182E12, 32.0], [1.74715212E12, 32.0], [1.74715176E12, 32.0], [1.74715242E12, 32.0], [1.74715146E12, 32.0], [1.7471514E12, 32.0], [1.74715206E12, 32.0], [1.74715236E12, 32.0], [1.747152E12, 32.0], [1.74715266E12, 9.993506493506498], [1.7471517E12, 32.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74715266E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 29.0, "minX": 1.0, "maxY": 2370.2727272727275, "series": [{"data": [[32.0, 2364.9827552420256], [2.0, 368.0], [3.0, 570.6153846153846], [4.0, 990.0], [5.0, 1063.0], [6.0, 399.25000000000006], [7.0, 647.3333333333334], [8.0, 652.6], [9.0, 679.483870967742], [10.0, 877.5], [11.0, 1021.7999999999998], [12.0, 979.3999999999999], [13.0, 1226.7142857142858], [14.0, 902.7037037037037], [15.0, 1510.0], [16.0, 1607.6842105263158], [1.0, 720.4], [17.0, 1531.173913043478], [18.0, 1983.3846153846155], [19.0, 1581.0800000000004], [21.0, 1482.9195402298856], [22.0, 2252.6666666666665], [23.0, 1760.5], [24.0, 1872.3873873873868], [25.0, 1881.6296296296296], [26.0, 2370.2727272727275], [27.0, 1897.3571428571427], [28.0, 1960.935483870968], [29.0, 2353.213872832369], [30.0, 1240.0], [31.0, 1430.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[31.54668750000004, 2336.507999999992]], "isOverall": false, "label": "Create CSR-Aggregated", "isController": false}, {"data": [[32.0, 186.55528704852614], [2.0, 30.0], [3.0, 29.769230769230766], [4.0, 29.0], [5.0, 33.5], [6.0, 31.125], [7.0, 32.833333333333336], [8.0, 44.4], [9.0, 35.16129032258064], [10.0, 39.285714285714285], [11.0, 41.23076923076923], [12.0, 41.875], [13.0, 40.66666666666667], [14.0, 53.629629629629626], [15.0, 53.0], [16.0, 56.588235294117645], [1.0, 31.8], [17.0, 47.869565217391305], [18.0, 51.400000000000006], [19.0, 48.82608695652174], [20.0, 48.5], [21.0, 50.534883720930225], [22.0, 69.66666666666667], [23.0, 53.25], [24.0, 50.209090909090904], [25.0, 47.48148148148149], [26.0, 50.5], [27.0, 45.84615384615385], [28.0, 61.90625000000001], [29.0, 53.19186046511626], [30.0, 51.0], [31.0, 50.666666666666664]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}, {"data": [[31.545687500000014, 180.6484999999992]], "isOverall": false, "label": "HTTP Request - enroll-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 32.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 326.5833333333333, "minX": 1.74715134E12, "maxY": 131055.25, "series": [{"data": [[1.74715164E12, 104609.08333333333], [1.7471523E12, 131055.25], [1.74715134E12, 2297.866666666667], [1.7471526E12, 112056.36666666667], [1.74715194E12, 129289.4], [1.74715224E12, 122093.33333333333], [1.74715188E12, 116517.21666666666], [1.74715254E12, 114434.43333333333], [1.74715158E12, 107806.18333333333], [1.74715152E12, 120893.46666666666], [1.74715218E12, 113719.16666666667], [1.74715248E12, 126385.01666666666], [1.74715182E12, 110437.83333333333], [1.74715212E12, 103684.26666666666], [1.74715176E12, 108416.28333333334], [1.74715242E12, 114412.36666666667], [1.74715146E12, 118516.76666666666], [1.7471514E12, 29003.783333333333], [1.74715206E12, 112204.13333333333], [1.74715236E12, 112245.83333333333], [1.747152E12, 108121.76666666666], [1.74715266E12, 22680.616666666665], [1.7471517E12, 106731.95]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74715164E12, 21079.033333333333], [1.7471523E12, 26422.833333333332], [1.74715134E12, 326.5833333333333], [1.7471526E12, 22592.783333333333], [1.74715194E12, 26067.433333333334], [1.74715224E12, 24612.116666666665], [1.74715188E12, 23483.583333333332], [1.74715254E12, 23068.15], [1.74715158E12, 21731.5], [1.74715152E12, 24374.583333333332], [1.74715218E12, 22919.466666666667], [1.74715248E12, 25472.7], [1.74715182E12, 22267.3], [1.74715212E12, 20901.833333333332], [1.74715176E12, 21850.166666666668], [1.74715242E12, 23067.55], [1.74715146E12, 24344.766666666666], [1.7471514E12, 7303.6], [1.74715206E12, 22622.7], [1.74715236E12, 22622.3], [1.747152E12, 21790.833333333332], [1.74715266E12, 4571.866666666667], [1.7471517E12, 21522.983333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74715266E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 41.428571428571445, "minX": 1.74715134E12, "maxY": 7211.24796747968, "series": [{"data": [[1.74715164E12, 2615.8539325842676], [1.7471523E12, 2116.587176602923], [1.74715134E12, 1177.1860465116279], [1.7471526E12, 2134.172368421051], [1.74715194E12, 2126.8848346636305], [1.74715224E12, 2287.1254523522343], [1.74715188E12, 2393.3573232323192], [1.74715254E12, 2396.8223938223946], [1.74715158E12, 2592.881147540985], [1.74715152E12, 2271.9463414634133], [1.74715218E12, 2433.5834411384203], [1.74715248E12, 2165.1990686845156], [1.74715182E12, 2519.9799732977326], [1.74715212E12, 2663.9886363636365], [1.74715176E12, 2558.6295793758472], [1.74715242E12, 2461.5270618556674], [1.74715146E12, 2005.6451204055775], [1.7471514E12, 665.682926829268], [1.74715206E12, 2459.8883048620246], [1.74715236E12, 2443.138925294888], [1.747152E12, 2561.5469387755084], [1.74715266E12, 879.7727272727275], [1.7471517E12, 2609.8008298755176]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74715164E12, 51.8098591549296], [1.7471523E12, 45.40561797752802], [1.74715134E12, 1051.1818181818182], [1.7471526E12, 51.0473061760841], [1.74715194E12, 47.64578587699323], [1.74715224E12, 48.74306393244876], [1.74715188E12, 48.761061946902686], [1.74715254E12, 48.79021879021877], [1.74715158E12, 51.30737704918031], [1.74715152E12, 48.406820950060876], [1.74715218E12, 51.45984455958552], [1.74715248E12, 46.660839160839174], [1.74715182E12, 50.837333333333326], [1.74715212E12, 48.51420454545458], [1.74715176E12, 51.58152173913047], [1.74715242E12, 48.95366795366799], [1.74715146E12, 446.106097560975], [1.7471514E12, 7211.24796747968], [1.74715206E12, 51.49343832020988], [1.74715236E12, 49.24934383202095], [1.747152E12, 52.054495912806544], [1.74715266E12, 41.428571428571445], [1.7471517E12, 51.8303448275862]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74715266E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74715134E12, "maxY": 7211.219512195122, "series": [{"data": [[1.74715164E12, 0.0], [1.7471523E12, 0.0], [1.74715134E12, 0.0], [1.7471526E12, 0.0], [1.74715194E12, 0.0], [1.74715224E12, 0.0], [1.74715188E12, 0.0], [1.74715254E12, 0.0], [1.74715158E12, 0.0], [1.74715152E12, 0.0], [1.74715218E12, 0.0], [1.74715248E12, 0.0], [1.74715182E12, 0.0], [1.74715212E12, 0.0], [1.74715176E12, 0.0], [1.74715242E12, 0.0], [1.74715146E12, 0.0], [1.7471514E12, 0.0], [1.74715206E12, 0.0], [1.74715236E12, 0.0], [1.747152E12, 0.0], [1.74715266E12, 0.0], [1.7471517E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74715164E12, 51.80281690140845], [1.7471523E12, 45.403370786516845], [1.74715134E12, 1051.1818181818182], [1.7471526E12, 51.03810775295661], [1.74715194E12, 47.641230068337066], [1.74715224E12, 48.73220747889025], [1.74715188E12, 48.75474083438685], [1.74715254E12, 48.78378378378376], [1.74715158E12, 51.29234972677598], [1.74715152E12, 48.390986601705265], [1.74715218E12, 51.45466321243521], [1.74715248E12, 46.64801864801868], [1.74715182E12, 50.8146666666667], [1.74715212E12, 48.50852272727278], [1.74715176E12, 51.57065217391305], [1.74715242E12, 48.94980694980696], [1.74715146E12, 446.0865853658534], [1.7471514E12, 7211.219512195122], [1.74715206E12, 51.48687664041996], [1.74715236E12, 49.244094488189], [1.747152E12, 52.04768392370574], [1.74715266E12, 41.41558441558444], [1.7471517E12, 51.81379310344823]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74715266E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74715134E12, "maxY": 699.1818181818181, "series": [{"data": [[1.74715164E12, 0.0], [1.7471523E12, 0.0], [1.74715134E12, 0.0], [1.7471526E12, 0.0], [1.74715194E12, 0.0], [1.74715224E12, 0.0], [1.74715188E12, 0.0], [1.74715254E12, 0.0], [1.74715158E12, 0.0], [1.74715152E12, 0.0], [1.74715218E12, 0.0], [1.74715248E12, 0.0], [1.74715182E12, 0.0], [1.74715212E12, 0.0], [1.74715176E12, 0.0], [1.74715242E12, 0.0], [1.74715146E12, 0.0], [1.7471514E12, 0.0], [1.74715206E12, 0.0], [1.74715236E12, 0.0], [1.747152E12, 0.0], [1.74715266E12, 0.0], [1.7471517E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74715164E12, 0.1830985915492959], [1.7471523E12, 0.11460674157303348], [1.74715134E12, 699.1818181818181], [1.7471526E12, 0.12746386333771373], [1.74715194E12, 0.12528473804100246], [1.74715224E12, 0.10615199034981909], [1.74715188E12, 0.13653603034133988], [1.74715254E12, 0.11711711711711711], [1.74715158E12, 0.20355191256830643], [1.74715152E12, 0.13641900121802644], [1.74715218E12, 0.12694300518134696], [1.74715248E12, 0.10372960372960395], [1.74715182E12, 0.1480000000000001], [1.74715212E12, 0.1420454545454544], [1.74715176E12, 0.1983695652173911], [1.74715242E12, 0.13770913770913767], [1.74715146E12, 0.27560975609756067], [1.7471514E12, 48.36178861788621], [1.74715206E12, 0.16929133858267756], [1.74715236E12, 0.17454068241469836], [1.747152E12, 0.14168937329700262], [1.74715266E12, 0.0], [1.7471517E12, 0.1655172413793105]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74715266E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 27.0, "minX": 1.74715134E12, "maxY": 14584.0, "series": [{"data": [[1.74715164E12, 10583.0], [1.7471523E12, 9275.0], [1.74715134E12, 3215.0], [1.7471526E12, 13711.0], [1.74715194E12, 8580.0], [1.74715224E12, 8076.0], [1.74715188E12, 9098.0], [1.74715254E12, 9405.0], [1.74715158E12, 8694.0], [1.74715152E12, 9203.0], [1.74715218E12, 12242.0], [1.74715248E12, 10196.0], [1.74715182E12, 10625.0], [1.74715212E12, 12403.0], [1.74715176E12, 10889.0], [1.74715242E12, 10421.0], [1.74715146E12, 9330.0], [1.7471514E12, 14584.0], [1.74715206E12, 9282.0], [1.74715236E12, 10340.0], [1.747152E12, 11069.0], [1.74715266E12, 5142.0], [1.7471517E12, 10662.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.74715164E12, 3728.1000000000004], [1.7471523E12, 2922.0], [1.74715134E12, 1954.5], [1.7471526E12, 3002.0], [1.74715194E12, 3002.8], [1.74715224E12, 3180.7000000000007], [1.74715188E12, 3509.6000000000013], [1.74715254E12, 3414.5], [1.74715158E12, 3690.0], [1.74715152E12, 3217.0], [1.74715218E12, 3448.2000000000007], [1.74715248E12, 2998.8], [1.74715182E12, 3629.0], [1.74715212E12, 3838.1000000000004], [1.74715176E12, 3684.0], [1.74715242E12, 3529.600000000002], [1.74715146E12, 3075.5], [1.7471514E12, 9474.0], [1.74715206E12, 3518.800000000002], [1.74715236E12, 3568.4000000000015], [1.747152E12, 3656.0], [1.74715266E12, 1248.8000000000009], [1.7471517E12, 3788.7000000000025]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.74715164E12, 6844.299999999998], [1.7471523E12, 5322.800000000001], [1.74715134E12, 3215.0], [1.7471526E12, 5880.079999999999], [1.74715194E12, 5197.200000000003], [1.74715224E12, 5978.810000000003], [1.74715188E12, 6426.64], [1.74715254E12, 6681.5], [1.74715158E12, 6975.699999999994], [1.74715152E12, 6108.679999999986], [1.74715218E12, 6181.7], [1.74715248E12, 5812.82], [1.74715182E12, 6827.0], [1.74715212E12, 6759.200000000002], [1.74715176E12, 7703.74], [1.74715242E12, 6631.540000000002], [1.74715146E12, 6887.21], [1.7471514E12, 13624.999999999993], [1.74715206E12, 6716.559999999999], [1.74715236E12, 6441.460000000002], [1.747152E12, 6951.199999999997], [1.74715266E12, 2920.060000000009], [1.7471517E12, 6864.549999999999]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.74715164E12, 4657.65], [1.7471523E12, 3901.0], [1.74715134E12, 2555.0], [1.7471526E12, 3768.0999999999985], [1.74715194E12, 3704.2], [1.74715224E12, 4193.599999999999], [1.74715188E12, 4282.599999999999], [1.74715254E12, 4358.0], [1.74715158E12, 4867.25], [1.74715152E12, 4100.999999999998], [1.74715218E12, 4376.599999999991], [1.74715248E12, 3945.5999999999985], [1.74715182E12, 4566.0], [1.74715212E12, 4923.15], [1.74715176E12, 4677.9], [1.74715242E12, 4573.6], [1.74715146E12, 4407.899999999996], [1.7471514E12, 11547.599999999997], [1.74715206E12, 4539.399999999998], [1.74715236E12, 4407.6], [1.747152E12, 4957.0], [1.74715266E12, 1755.0500000000009], [1.7471517E12, 4818.249999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.74715164E12, 33.0], [1.7471523E12, 36.0], [1.74715134E12, 180.0], [1.7471526E12, 34.0], [1.74715194E12, 36.0], [1.74715224E12, 36.0], [1.74715188E12, 36.0], [1.74715254E12, 34.0], [1.74715158E12, 33.0], [1.74715152E12, 34.0], [1.74715218E12, 36.0], [1.74715248E12, 36.0], [1.74715182E12, 36.0], [1.74715212E12, 34.0], [1.74715176E12, 36.0], [1.74715242E12, 36.0], [1.74715146E12, 33.0], [1.7471514E12, 156.0], [1.74715206E12, 36.0], [1.74715236E12, 36.0], [1.747152E12, 35.0], [1.74715266E12, 27.0], [1.7471517E12, 37.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.74715164E12, 491.0], [1.7471523E12, 141.0], [1.74715134E12, 1067.5], [1.7471526E12, 177.0], [1.74715194E12, 164.0], [1.74715224E12, 309.5], [1.74715188E12, 467.0], [1.74715254E12, 226.0], [1.74715158E12, 244.5], [1.74715152E12, 126.0], [1.74715218E12, 459.0], [1.74715248E12, 374.0], [1.74715182E12, 154.0], [1.74715212E12, 263.5], [1.74715176E12, 442.0], [1.74715242E12, 153.0], [1.74715146E12, 596.5], [1.7471514E12, 1047.0], [1.74715206E12, 151.0], [1.74715236E12, 400.0], [1.747152E12, 391.0], [1.74715266E12, 117.0], [1.7471517E12, 126.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74715266E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 92.5, "minX": 1.0, "maxY": 8687.0, "series": [{"data": [[2.0, 972.0], [33.0, 168.5], [32.0, 244.5], [34.0, 257.5], [35.0, 100.5], [37.0, 465.0], [36.0, 107.5], [39.0, 127.0], [38.0, 425.5], [41.0, 400.0], [40.0, 328.0], [42.0, 105.0], [43.0, 136.5], [44.0, 1118.0], [47.0, 122.0], [3.0, 870.5], [4.0, 834.0], [5.0, 755.0], [6.0, 625.0], [7.0, 858.5], [8.0, 602.0], [9.0, 993.0], [10.0, 2089.0], [11.0, 798.0], [12.0, 737.0], [13.0, 684.0], [14.0, 302.5], [15.0, 1379.0], [16.0, 764.0], [1.0, 975.0], [17.0, 726.0], [18.0, 467.5], [19.0, 474.0], [20.0, 685.0], [21.0, 556.0], [22.0, 636.0], [23.0, 556.0], [24.0, 521.5], [25.0, 117.0], [26.0, 229.5], [27.0, 416.0], [28.0, 146.0], [29.0, 114.0], [30.0, 92.5], [31.0, 456.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[9.0, 6547.0], [10.0, 8687.0], [11.0, 4132.5], [44.0, 6646.5], [12.0, 5499.5], [13.0, 6697.0], [14.0, 4531.5], [15.0, 6323.5], [1.0, 4177.0], [20.0, 5560.0], [21.0, 4255.0], [22.0, 4622.0], [23.0, 4429.0], [6.0, 4943.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 47.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 8687.0, "series": [{"data": [[2.0, 0.0], [33.0, 36.0], [32.0, 18.0], [34.0, 18.0], [35.0, 36.5], [37.0, 0.0], [36.0, 37.0], [39.0, 37.0], [38.0, 0.0], [41.0, 0.0], [40.0, 18.5], [42.0, 37.5], [43.0, 38.0], [44.0, 44.0], [47.0, 38.0], [3.0, 0.0], [4.0, 0.0], [5.0, 0.0], [6.0, 0.0], [7.0, 0.0], [8.0, 0.0], [9.0, 0.0], [10.0, 49.0], [11.0, 0.0], [12.0, 0.0], [13.0, 0.0], [14.0, 0.0], [15.0, 43.0], [16.0, 0.0], [1.0, 0.0], [17.0, 0.0], [18.0, 0.0], [19.0, 0.0], [20.0, 0.0], [21.0, 38.0], [22.0, 34.0], [23.0, 35.0], [24.0, 0.0], [25.0, 36.5], [26.0, 0.0], [27.0, 0.0], [28.0, 29.0], [29.0, 37.0], [30.0, 37.0], [31.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[9.0, 6547.0], [10.0, 8687.0], [11.0, 4132.5], [44.0, 6646.5], [12.0, 5499.5], [13.0, 6697.0], [14.0, 4531.5], [15.0, 6323.5], [1.0, 4177.0], [20.0, 5560.0], [21.0, 4255.0], [22.0, 4622.0], [23.0, 4429.0], [6.0, 4943.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 47.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.4333333333333333, "minX": 1.74715134E12, "maxY": 29.65, "series": [{"data": [[1.74715164E12, 23.7], [1.7471523E12, 29.65], [1.74715134E12, 1.4333333333333333], [1.7471526E12, 25.083333333333332], [1.74715194E12, 29.25], [1.74715224E12, 27.633333333333333], [1.74715188E12, 26.383333333333333], [1.74715254E12, 25.9], [1.74715158E12, 24.4], [1.74715152E12, 27.35], [1.74715218E12, 25.75], [1.74715248E12, 28.616666666666667], [1.74715182E12, 24.983333333333334], [1.74715212E12, 23.466666666666665], [1.74715176E12, 24.55], [1.74715242E12, 25.883333333333333], [1.74715146E12, 26.816666666666666], [1.7471514E12, 8.2], [1.74715206E12, 25.383333333333333], [1.74715236E12, 25.416666666666668], [1.747152E12, 24.483333333333334], [1.74715266E12, 4.866666666666666], [1.7471517E12, 24.133333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74715266E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.74715134E12, "maxY": 14.833333333333334, "series": [{"data": [[1.74715164E12, 11.866666666666667], [1.7471523E12, 14.816666666666666], [1.74715134E12, 0.7166666666666667], [1.7471526E12, 12.666666666666666], [1.74715194E12, 14.616666666666667], [1.74715224E12, 13.816666666666666], [1.74715188E12, 13.2], [1.74715254E12, 12.95], [1.74715158E12, 12.2], [1.74715152E12, 13.666666666666666], [1.74715218E12, 12.883333333333333], [1.74715248E12, 14.316666666666666], [1.74715182E12, 12.483333333333333], [1.74715212E12, 11.733333333333333], [1.74715176E12, 12.283333333333333], [1.74715242E12, 12.933333333333334], [1.74715146E12, 13.15], [1.7471514E12, 4.1], [1.74715206E12, 12.683333333333334], [1.74715236E12, 12.716666666666667], [1.747152E12, 12.25], [1.74715266E12, 2.566666666666667], [1.7471517E12, 12.05]], "isOverall": false, "label": "0", "isController": false}, {"data": [[1.74715164E12, 11.833333333333334], [1.7471523E12, 14.833333333333334], [1.74715134E12, 0.18333333333333332], [1.7471526E12, 12.683333333333334], [1.74715194E12, 14.633333333333333], [1.74715224E12, 13.816666666666666], [1.74715188E12, 13.183333333333334], [1.74715254E12, 12.95], [1.74715158E12, 12.2], [1.74715152E12, 13.683333333333334], [1.74715218E12, 12.866666666666667], [1.74715248E12, 14.3], [1.74715182E12, 12.5], [1.74715212E12, 11.733333333333333], [1.74715176E12, 12.266666666666667], [1.74715242E12, 12.95], [1.74715146E12, 13.45], [1.7471514E12, 3.1166666666666667], [1.74715206E12, 12.7], [1.74715236E12, 12.7], [1.747152E12, 12.233333333333333], [1.74715266E12, 2.566666666666667], [1.7471517E12, 12.083333333333334]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.74715146E12, 0.21666666666666667], [1.7471514E12, 0.9833333333333333]], "isOverall": false, "label": "400", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74715266E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.74715134E12, "maxY": 14.833333333333334, "series": [{"data": [[1.74715164E12, 11.833333333333334], [1.7471523E12, 14.833333333333334], [1.74715134E12, 0.18333333333333332], [1.7471526E12, 12.683333333333334], [1.74715194E12, 14.633333333333333], [1.74715224E12, 13.816666666666666], [1.74715188E12, 13.183333333333334], [1.74715254E12, 12.95], [1.74715158E12, 12.2], [1.74715152E12, 13.683333333333334], [1.74715218E12, 12.866666666666667], [1.74715248E12, 14.3], [1.74715182E12, 12.5], [1.74715212E12, 11.733333333333333], [1.74715176E12, 12.266666666666667], [1.74715242E12, 12.95], [1.74715146E12, 13.45], [1.7471514E12, 3.1166666666666667], [1.74715206E12, 12.7], [1.74715236E12, 12.7], [1.747152E12, 12.233333333333333], [1.74715266E12, 2.566666666666667], [1.7471517E12, 12.083333333333334]], "isOverall": false, "label": "HTTP Request - enroll-success", "isController": false}, {"data": [[1.74715146E12, 0.21666666666666667], [1.7471514E12, 0.9833333333333333]], "isOverall": false, "label": "HTTP Request - enroll-failure", "isController": false}, {"data": [[1.74715164E12, 11.866666666666667], [1.7471523E12, 14.816666666666666], [1.74715134E12, 0.7166666666666667], [1.7471526E12, 12.666666666666666], [1.74715194E12, 14.616666666666667], [1.74715224E12, 13.816666666666666], [1.74715188E12, 13.2], [1.74715254E12, 12.95], [1.74715158E12, 12.2], [1.74715152E12, 13.666666666666666], [1.74715218E12, 12.883333333333333], [1.74715248E12, 14.316666666666666], [1.74715182E12, 12.483333333333333], [1.74715212E12, 11.733333333333333], [1.74715176E12, 12.283333333333333], [1.74715242E12, 12.933333333333334], [1.74715146E12, 13.15], [1.7471514E12, 4.1], [1.74715206E12, 12.683333333333334], [1.74715236E12, 12.716666666666667], [1.747152E12, 12.25], [1.74715266E12, 2.566666666666667], [1.7471517E12, 12.05]], "isOverall": false, "label": "Create CSR-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74715266E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.21666666666666667, "minX": 1.74715134E12, "maxY": 29.65, "series": [{"data": [[1.74715164E12, 23.7], [1.7471523E12, 29.65], [1.74715134E12, 0.9], [1.7471526E12, 25.35], [1.74715194E12, 29.25], [1.74715224E12, 27.633333333333333], [1.74715188E12, 26.383333333333333], [1.74715254E12, 25.9], [1.74715158E12, 24.4], [1.74715152E12, 27.35], [1.74715218E12, 25.75], [1.74715248E12, 28.616666666666667], [1.74715182E12, 24.983333333333334], [1.74715212E12, 23.466666666666665], [1.74715176E12, 24.55], [1.74715242E12, 25.883333333333333], [1.74715146E12, 26.6], [1.7471514E12, 7.216666666666667], [1.74715206E12, 25.383333333333333], [1.74715236E12, 25.416666666666668], [1.747152E12, 24.483333333333334], [1.74715266E12, 5.133333333333334], [1.7471517E12, 24.133333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.74715146E12, 0.21666666666666667], [1.7471514E12, 0.9833333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74715266E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

