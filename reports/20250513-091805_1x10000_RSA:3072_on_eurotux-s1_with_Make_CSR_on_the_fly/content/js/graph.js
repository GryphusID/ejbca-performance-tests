/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 26.0, "minX": 0.0, "maxY": 2061.0, "series": [{"data": [[0.0, 114.0], [0.1, 122.0], [0.2, 125.0], [0.3, 127.0], [0.4, 128.0], [0.5, 132.0], [0.6, 134.0], [0.7, 136.0], [0.8, 139.0], [0.9, 140.0], [1.0, 141.0], [1.1, 142.0], [1.2, 144.0], [1.3, 145.0], [1.4, 146.0], [1.5, 147.0], [1.6, 147.0], [1.7, 148.0], [1.8, 149.0], [1.9, 150.0], [2.0, 151.0], [2.1, 151.0], [2.2, 152.0], [2.3, 153.0], [2.4, 154.0], [2.5, 155.0], [2.6, 155.0], [2.7, 156.0], [2.8, 157.0], [2.9, 158.0], [3.0, 159.0], [3.1, 160.0], [3.2, 160.0], [3.3, 162.0], [3.4, 162.0], [3.5, 163.0], [3.6, 164.0], [3.7, 165.0], [3.8, 165.0], [3.9, 166.0], [4.0, 167.0], [4.1, 168.0], [4.2, 169.0], [4.3, 169.0], [4.4, 169.0], [4.5, 170.0], [4.6, 171.0], [4.7, 172.0], [4.8, 173.0], [4.9, 174.0], [5.0, 174.0], [5.1, 175.0], [5.2, 176.0], [5.3, 177.0], [5.4, 177.0], [5.5, 178.0], [5.6, 178.0], [5.7, 179.0], [5.8, 180.0], [5.9, 181.0], [6.0, 182.0], [6.1, 182.0], [6.2, 182.0], [6.3, 183.0], [6.4, 183.0], [6.5, 184.0], [6.6, 184.0], [6.7, 185.0], [6.8, 186.0], [6.9, 186.0], [7.0, 187.0], [7.1, 188.0], [7.2, 189.0], [7.3, 189.0], [7.4, 189.0], [7.5, 190.0], [7.6, 191.0], [7.7, 191.0], [7.8, 192.0], [7.9, 192.0], [8.0, 193.0], [8.1, 194.0], [8.2, 195.0], [8.3, 196.0], [8.4, 196.0], [8.5, 197.0], [8.6, 197.0], [8.7, 198.0], [8.8, 199.0], [8.9, 199.0], [9.0, 200.0], [9.1, 200.0], [9.2, 201.0], [9.3, 201.0], [9.4, 201.0], [9.5, 202.0], [9.6, 203.0], [9.7, 203.0], [9.8, 204.0], [9.9, 204.0], [10.0, 205.0], [10.1, 206.0], [10.2, 206.0], [10.3, 207.0], [10.4, 207.0], [10.5, 208.0], [10.6, 208.0], [10.7, 209.0], [10.8, 209.0], [10.9, 210.0], [11.0, 211.0], [11.1, 211.0], [11.2, 211.0], [11.3, 212.0], [11.4, 213.0], [11.5, 213.0], [11.6, 214.0], [11.7, 214.0], [11.8, 214.0], [11.9, 215.0], [12.0, 216.0], [12.1, 217.0], [12.2, 217.0], [12.3, 217.0], [12.4, 218.0], [12.5, 218.0], [12.6, 219.0], [12.7, 220.0], [12.8, 220.0], [12.9, 220.0], [13.0, 221.0], [13.1, 221.0], [13.2, 222.0], [13.3, 222.0], [13.4, 223.0], [13.5, 223.0], [13.6, 224.0], [13.7, 224.0], [13.8, 225.0], [13.9, 225.0], [14.0, 226.0], [14.1, 226.0], [14.2, 227.0], [14.3, 227.0], [14.4, 228.0], [14.5, 229.0], [14.6, 229.0], [14.7, 230.0], [14.8, 231.0], [14.9, 231.0], [15.0, 232.0], [15.1, 232.0], [15.2, 233.0], [15.3, 233.0], [15.4, 234.0], [15.5, 235.0], [15.6, 235.0], [15.7, 236.0], [15.8, 236.0], [15.9, 237.0], [16.0, 237.0], [16.1, 238.0], [16.2, 239.0], [16.3, 239.0], [16.4, 239.0], [16.5, 240.0], [16.6, 240.0], [16.7, 241.0], [16.8, 242.0], [16.9, 242.0], [17.0, 242.0], [17.1, 243.0], [17.2, 243.0], [17.3, 244.0], [17.4, 244.0], [17.5, 245.0], [17.6, 245.0], [17.7, 246.0], [17.8, 246.0], [17.9, 247.0], [18.0, 248.0], [18.1, 248.0], [18.2, 249.0], [18.3, 249.0], [18.4, 249.0], [18.5, 250.0], [18.6, 250.0], [18.7, 251.0], [18.8, 252.0], [18.9, 252.0], [19.0, 253.0], [19.1, 253.0], [19.2, 254.0], [19.3, 254.0], [19.4, 254.0], [19.5, 255.0], [19.6, 256.0], [19.7, 256.0], [19.8, 256.0], [19.9, 257.0], [20.0, 257.0], [20.1, 258.0], [20.2, 258.0], [20.3, 258.0], [20.4, 259.0], [20.5, 259.0], [20.6, 260.0], [20.7, 260.0], [20.8, 261.0], [20.9, 261.0], [21.0, 262.0], [21.1, 262.0], [21.2, 262.0], [21.3, 263.0], [21.4, 263.0], [21.5, 264.0], [21.6, 265.0], [21.7, 265.0], [21.8, 265.0], [21.9, 266.0], [22.0, 266.0], [22.1, 267.0], [22.2, 267.0], [22.3, 268.0], [22.4, 268.0], [22.5, 268.0], [22.6, 269.0], [22.7, 269.0], [22.8, 270.0], [22.9, 271.0], [23.0, 271.0], [23.1, 272.0], [23.2, 272.0], [23.3, 273.0], [23.4, 273.0], [23.5, 274.0], [23.6, 275.0], [23.7, 275.0], [23.8, 275.0], [23.9, 276.0], [24.0, 276.0], [24.1, 277.0], [24.2, 277.0], [24.3, 278.0], [24.4, 278.0], [24.5, 279.0], [24.6, 279.0], [24.7, 280.0], [24.8, 280.0], [24.9, 280.0], [25.0, 281.0], [25.1, 282.0], [25.2, 282.0], [25.3, 283.0], [25.4, 283.0], [25.5, 283.0], [25.6, 284.0], [25.7, 284.0], [25.8, 285.0], [25.9, 285.0], [26.0, 286.0], [26.1, 286.0], [26.2, 287.0], [26.3, 287.0], [26.4, 288.0], [26.5, 289.0], [26.6, 289.0], [26.7, 289.0], [26.8, 290.0], [26.9, 290.0], [27.0, 291.0], [27.1, 291.0], [27.2, 292.0], [27.3, 292.0], [27.4, 293.0], [27.5, 293.0], [27.6, 294.0], [27.7, 294.0], [27.8, 294.0], [27.9, 294.0], [28.0, 295.0], [28.1, 295.0], [28.2, 296.0], [28.3, 296.0], [28.4, 296.0], [28.5, 297.0], [28.6, 297.0], [28.7, 298.0], [28.8, 298.0], [28.9, 299.0], [29.0, 299.0], [29.1, 300.0], [29.2, 301.0], [29.3, 301.0], [29.4, 302.0], [29.5, 302.0], [29.6, 303.0], [29.7, 303.0], [29.8, 304.0], [29.9, 304.0], [30.0, 305.0], [30.1, 306.0], [30.2, 306.0], [30.3, 307.0], [30.4, 307.0], [30.5, 307.0], [30.6, 308.0], [30.7, 309.0], [30.8, 309.0], [30.9, 310.0], [31.0, 311.0], [31.1, 311.0], [31.2, 311.0], [31.3, 312.0], [31.4, 312.0], [31.5, 313.0], [31.6, 313.0], [31.7, 314.0], [31.8, 314.0], [31.9, 315.0], [32.0, 315.0], [32.1, 316.0], [32.2, 316.0], [32.3, 316.0], [32.4, 317.0], [32.5, 317.0], [32.6, 318.0], [32.7, 319.0], [32.8, 319.0], [32.9, 319.0], [33.0, 320.0], [33.1, 320.0], [33.2, 321.0], [33.3, 321.0], [33.4, 321.0], [33.5, 322.0], [33.6, 323.0], [33.7, 323.0], [33.8, 323.0], [33.9, 324.0], [34.0, 325.0], [34.1, 325.0], [34.2, 326.0], [34.3, 326.0], [34.4, 327.0], [34.5, 327.0], [34.6, 328.0], [34.7, 328.0], [34.8, 328.0], [34.9, 329.0], [35.0, 329.0], [35.1, 330.0], [35.2, 330.0], [35.3, 330.0], [35.4, 331.0], [35.5, 331.0], [35.6, 332.0], [35.7, 332.0], [35.8, 333.0], [35.9, 333.0], [36.0, 333.0], [36.1, 334.0], [36.2, 334.0], [36.3, 335.0], [36.4, 335.0], [36.5, 336.0], [36.6, 336.0], [36.7, 337.0], [36.8, 337.0], [36.9, 338.0], [37.0, 338.0], [37.1, 339.0], [37.2, 339.0], [37.3, 340.0], [37.4, 340.0], [37.5, 341.0], [37.6, 341.0], [37.7, 342.0], [37.8, 342.0], [37.9, 343.0], [38.0, 343.0], [38.1, 344.0], [38.2, 344.0], [38.3, 344.0], [38.4, 345.0], [38.5, 345.0], [38.6, 346.0], [38.7, 346.0], [38.8, 347.0], [38.9, 347.0], [39.0, 347.0], [39.1, 348.0], [39.2, 349.0], [39.3, 349.0], [39.4, 350.0], [39.5, 350.0], [39.6, 350.0], [39.7, 351.0], [39.8, 351.0], [39.9, 352.0], [40.0, 353.0], [40.1, 353.0], [40.2, 353.0], [40.3, 354.0], [40.4, 355.0], [40.5, 355.0], [40.6, 356.0], [40.7, 356.0], [40.8, 357.0], [40.9, 357.0], [41.0, 358.0], [41.1, 358.0], [41.2, 359.0], [41.3, 359.0], [41.4, 360.0], [41.5, 360.0], [41.6, 361.0], [41.7, 361.0], [41.8, 362.0], [41.9, 362.0], [42.0, 363.0], [42.1, 363.0], [42.2, 364.0], [42.3, 365.0], [42.4, 365.0], [42.5, 365.0], [42.6, 366.0], [42.7, 366.0], [42.8, 367.0], [42.9, 367.0], [43.0, 368.0], [43.1, 368.0], [43.2, 369.0], [43.3, 369.0], [43.4, 370.0], [43.5, 370.0], [43.6, 371.0], [43.7, 371.0], [43.8, 372.0], [43.9, 373.0], [44.0, 373.0], [44.1, 373.0], [44.2, 374.0], [44.3, 375.0], [44.4, 375.0], [44.5, 376.0], [44.6, 376.0], [44.7, 377.0], [44.8, 378.0], [44.9, 378.0], [45.0, 379.0], [45.1, 379.0], [45.2, 380.0], [45.3, 380.0], [45.4, 381.0], [45.5, 381.0], [45.6, 382.0], [45.7, 382.0], [45.8, 382.0], [45.9, 383.0], [46.0, 383.0], [46.1, 384.0], [46.2, 384.0], [46.3, 385.0], [46.4, 385.0], [46.5, 386.0], [46.6, 386.0], [46.7, 387.0], [46.8, 387.0], [46.9, 387.0], [47.0, 388.0], [47.1, 389.0], [47.2, 389.0], [47.3, 389.0], [47.4, 390.0], [47.5, 390.0], [47.6, 391.0], [47.7, 392.0], [47.8, 392.0], [47.9, 393.0], [48.0, 393.0], [48.1, 393.0], [48.2, 394.0], [48.3, 395.0], [48.4, 395.0], [48.5, 396.0], [48.6, 396.0], [48.7, 397.0], [48.8, 398.0], [48.9, 398.0], [49.0, 398.0], [49.1, 399.0], [49.2, 399.0], [49.3, 400.0], [49.4, 400.0], [49.5, 401.0], [49.6, 402.0], [49.7, 402.0], [49.8, 403.0], [49.9, 403.0], [50.0, 404.0], [50.1, 405.0], [50.2, 405.0], [50.3, 406.0], [50.4, 407.0], [50.5, 407.0], [50.6, 408.0], [50.7, 408.0], [50.8, 409.0], [50.9, 409.0], [51.0, 409.0], [51.1, 410.0], [51.2, 411.0], [51.3, 412.0], [51.4, 413.0], [51.5, 413.0], [51.6, 414.0], [51.7, 415.0], [51.8, 415.0], [51.9, 416.0], [52.0, 417.0], [52.1, 417.0], [52.2, 418.0], [52.3, 418.0], [52.4, 419.0], [52.5, 419.0], [52.6, 420.0], [52.7, 420.0], [52.8, 421.0], [52.9, 421.0], [53.0, 422.0], [53.1, 422.0], [53.2, 423.0], [53.3, 424.0], [53.4, 424.0], [53.5, 425.0], [53.6, 425.0], [53.7, 426.0], [53.8, 427.0], [53.9, 427.0], [54.0, 428.0], [54.1, 428.0], [54.2, 429.0], [54.3, 429.0], [54.4, 430.0], [54.5, 431.0], [54.6, 431.0], [54.7, 432.0], [54.8, 433.0], [54.9, 434.0], [55.0, 434.0], [55.1, 435.0], [55.2, 435.0], [55.3, 436.0], [55.4, 437.0], [55.5, 437.0], [55.6, 438.0], [55.7, 439.0], [55.8, 439.0], [55.9, 440.0], [56.0, 440.0], [56.1, 441.0], [56.2, 441.0], [56.3, 442.0], [56.4, 442.0], [56.5, 443.0], [56.6, 443.0], [56.7, 444.0], [56.8, 444.0], [56.9, 445.0], [57.0, 445.0], [57.1, 446.0], [57.2, 447.0], [57.3, 448.0], [57.4, 448.0], [57.5, 449.0], [57.6, 450.0], [57.7, 450.0], [57.8, 451.0], [57.9, 452.0], [58.0, 452.0], [58.1, 453.0], [58.2, 454.0], [58.3, 454.0], [58.4, 455.0], [58.5, 456.0], [58.6, 456.0], [58.7, 457.0], [58.8, 458.0], [58.9, 458.0], [59.0, 459.0], [59.1, 460.0], [59.2, 460.0], [59.3, 460.0], [59.4, 461.0], [59.5, 462.0], [59.6, 463.0], [59.7, 463.0], [59.8, 464.0], [59.9, 464.0], [60.0, 465.0], [60.1, 466.0], [60.2, 466.0], [60.3, 467.0], [60.4, 468.0], [60.5, 468.0], [60.6, 469.0], [60.7, 469.0], [60.8, 470.0], [60.9, 470.0], [61.0, 471.0], [61.1, 471.0], [61.2, 472.0], [61.3, 472.0], [61.4, 473.0], [61.5, 473.0], [61.6, 474.0], [61.7, 475.0], [61.8, 476.0], [61.9, 477.0], [62.0, 478.0], [62.1, 478.0], [62.2, 479.0], [62.3, 479.0], [62.4, 480.0], [62.5, 481.0], [62.6, 481.0], [62.7, 482.0], [62.8, 482.0], [62.9, 483.0], [63.0, 483.0], [63.1, 484.0], [63.2, 485.0], [63.3, 486.0], [63.4, 486.0], [63.5, 487.0], [63.6, 488.0], [63.7, 489.0], [63.8, 489.0], [63.9, 490.0], [64.0, 490.0], [64.1, 491.0], [64.2, 492.0], [64.3, 492.0], [64.4, 493.0], [64.5, 494.0], [64.6, 495.0], [64.7, 496.0], [64.8, 496.0], [64.9, 497.0], [65.0, 498.0], [65.1, 499.0], [65.2, 499.0], [65.3, 500.0], [65.4, 501.0], [65.5, 502.0], [65.6, 502.0], [65.7, 503.0], [65.8, 503.0], [65.9, 504.0], [66.0, 504.0], [66.1, 506.0], [66.2, 507.0], [66.3, 508.0], [66.4, 508.0], [66.5, 510.0], [66.6, 510.0], [66.7, 511.0], [66.8, 512.0], [66.9, 512.0], [67.0, 514.0], [67.1, 514.0], [67.2, 515.0], [67.3, 515.0], [67.4, 516.0], [67.5, 517.0], [67.6, 517.0], [67.7, 518.0], [67.8, 519.0], [67.9, 520.0], [68.0, 521.0], [68.1, 521.0], [68.2, 522.0], [68.3, 523.0], [68.4, 524.0], [68.5, 524.0], [68.6, 525.0], [68.7, 525.0], [68.8, 526.0], [68.9, 526.0], [69.0, 527.0], [69.1, 528.0], [69.2, 528.0], [69.3, 529.0], [69.4, 529.0], [69.5, 531.0], [69.6, 532.0], [69.7, 532.0], [69.8, 532.0], [69.9, 533.0], [70.0, 534.0], [70.1, 534.0], [70.2, 535.0], [70.3, 535.0], [70.4, 536.0], [70.5, 538.0], [70.6, 539.0], [70.7, 539.0], [70.8, 540.0], [70.9, 541.0], [71.0, 541.0], [71.1, 542.0], [71.2, 543.0], [71.3, 544.0], [71.4, 545.0], [71.5, 546.0], [71.6, 546.0], [71.7, 547.0], [71.8, 548.0], [71.9, 549.0], [72.0, 550.0], [72.1, 551.0], [72.2, 551.0], [72.3, 552.0], [72.4, 553.0], [72.5, 554.0], [72.6, 555.0], [72.7, 556.0], [72.8, 556.0], [72.9, 558.0], [73.0, 559.0], [73.1, 559.0], [73.2, 560.0], [73.3, 562.0], [73.4, 562.0], [73.5, 563.0], [73.6, 564.0], [73.7, 564.0], [73.8, 566.0], [73.9, 567.0], [74.0, 568.0], [74.1, 569.0], [74.2, 569.0], [74.3, 569.0], [74.4, 571.0], [74.5, 572.0], [74.6, 573.0], [74.7, 574.0], [74.8, 574.0], [74.9, 575.0], [75.0, 577.0], [75.1, 577.0], [75.2, 578.0], [75.3, 578.0], [75.4, 579.0], [75.5, 581.0], [75.6, 581.0], [75.7, 582.0], [75.8, 583.0], [75.9, 584.0], [76.0, 585.0], [76.1, 586.0], [76.2, 587.0], [76.3, 588.0], [76.4, 589.0], [76.5, 589.0], [76.6, 590.0], [76.7, 591.0], [76.8, 592.0], [76.9, 593.0], [77.0, 594.0], [77.1, 595.0], [77.2, 597.0], [77.3, 598.0], [77.4, 599.0], [77.5, 600.0], [77.6, 601.0], [77.7, 602.0], [77.8, 603.0], [77.9, 605.0], [78.0, 606.0], [78.1, 607.0], [78.2, 608.0], [78.3, 609.0], [78.4, 609.0], [78.5, 610.0], [78.6, 611.0], [78.7, 612.0], [78.8, 613.0], [78.9, 614.0], [79.0, 615.0], [79.1, 616.0], [79.2, 617.0], [79.3, 618.0], [79.4, 619.0], [79.5, 621.0], [79.6, 622.0], [79.7, 623.0], [79.8, 623.0], [79.9, 624.0], [80.0, 625.0], [80.1, 626.0], [80.2, 627.0], [80.3, 629.0], [80.4, 630.0], [80.5, 630.0], [80.6, 632.0], [80.7, 634.0], [80.8, 635.0], [80.9, 636.0], [81.0, 637.0], [81.1, 638.0], [81.2, 639.0], [81.3, 640.0], [81.4, 641.0], [81.5, 642.0], [81.6, 643.0], [81.7, 644.0], [81.8, 645.0], [81.9, 647.0], [82.0, 648.0], [82.1, 649.0], [82.2, 650.0], [82.3, 652.0], [82.4, 652.0], [82.5, 654.0], [82.6, 655.0], [82.7, 656.0], [82.8, 657.0], [82.9, 659.0], [83.0, 661.0], [83.1, 662.0], [83.2, 664.0], [83.3, 665.0], [83.4, 666.0], [83.5, 667.0], [83.6, 669.0], [83.7, 671.0], [83.8, 673.0], [83.9, 674.0], [84.0, 674.0], [84.1, 675.0], [84.2, 676.0], [84.3, 679.0], [84.4, 680.0], [84.5, 681.0], [84.6, 683.0], [84.7, 685.0], [84.8, 687.0], [84.9, 688.0], [85.0, 689.0], [85.1, 690.0], [85.2, 692.0], [85.3, 693.0], [85.4, 696.0], [85.5, 697.0], [85.6, 698.0], [85.7, 699.0], [85.8, 701.0], [85.9, 703.0], [86.0, 705.0], [86.1, 706.0], [86.2, 707.0], [86.3, 709.0], [86.4, 710.0], [86.5, 712.0], [86.6, 713.0], [86.7, 715.0], [86.8, 717.0], [86.9, 719.0], [87.0, 721.0], [87.1, 723.0], [87.2, 725.0], [87.3, 726.0], [87.4, 727.0], [87.5, 729.0], [87.6, 731.0], [87.7, 733.0], [87.8, 736.0], [87.9, 738.0], [88.0, 738.0], [88.1, 741.0], [88.2, 743.0], [88.3, 744.0], [88.4, 746.0], [88.5, 749.0], [88.6, 750.0], [88.7, 752.0], [88.8, 755.0], [88.9, 757.0], [89.0, 759.0], [89.1, 761.0], [89.2, 764.0], [89.3, 766.0], [89.4, 768.0], [89.5, 771.0], [89.6, 773.0], [89.7, 775.0], [89.8, 776.0], [89.9, 778.0], [90.0, 779.0], [90.1, 783.0], [90.2, 786.0], [90.3, 788.0], [90.4, 790.0], [90.5, 792.0], [90.6, 795.0], [90.7, 796.0], [90.8, 798.0], [90.9, 800.0], [91.0, 802.0], [91.1, 805.0], [91.2, 807.0], [91.3, 808.0], [91.4, 812.0], [91.5, 815.0], [91.6, 818.0], [91.7, 821.0], [91.8, 823.0], [91.9, 826.0], [92.0, 831.0], [92.1, 835.0], [92.2, 836.0], [92.3, 841.0], [92.4, 843.0], [92.5, 847.0], [92.6, 852.0], [92.7, 856.0], [92.8, 859.0], [92.9, 862.0], [93.0, 865.0], [93.1, 869.0], [93.2, 872.0], [93.3, 875.0], [93.4, 877.0], [93.5, 881.0], [93.6, 884.0], [93.7, 887.0], [93.8, 890.0], [93.9, 892.0], [94.0, 897.0], [94.1, 900.0], [94.2, 902.0], [94.3, 906.0], [94.4, 910.0], [94.5, 912.0], [94.6, 915.0], [94.7, 919.0], [94.8, 922.0], [94.9, 926.0], [95.0, 929.0], [95.1, 933.0], [95.2, 939.0], [95.3, 941.0], [95.4, 947.0], [95.5, 953.0], [95.6, 957.0], [95.7, 961.0], [95.8, 964.0], [95.9, 968.0], [96.0, 975.0], [96.1, 983.0], [96.2, 991.0], [96.3, 995.0], [96.4, 1001.0], [96.5, 1011.0], [96.6, 1017.0], [96.7, 1023.0], [96.8, 1028.0], [96.9, 1031.0], [97.0, 1038.0], [97.1, 1045.0], [97.2, 1056.0], [97.3, 1062.0], [97.4, 1067.0], [97.5, 1072.0], [97.6, 1081.0], [97.7, 1089.0], [97.8, 1101.0], [97.9, 1112.0], [98.0, 1123.0], [98.1, 1131.0], [98.2, 1142.0], [98.3, 1155.0], [98.4, 1171.0], [98.5, 1186.0], [98.6, 1194.0], [98.7, 1203.0], [98.8, 1215.0], [98.9, 1233.0], [99.0, 1256.0], [99.1, 1274.0], [99.2, 1297.0], [99.3, 1315.0], [99.4, 1353.0], [99.5, 1397.0], [99.6, 1445.0], [99.7, 1489.0], [99.8, 1550.0], [99.9, 1631.0], [100.0, 2061.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 26.0], [0.1, 27.0], [0.2, 27.0], [0.3, 27.0], [0.4, 28.0], [0.5, 28.0], [0.6, 28.0], [0.7, 28.0], [0.8, 28.0], [0.9, 28.0], [1.0, 28.0], [1.1, 28.0], [1.2, 28.0], [1.3, 29.0], [1.4, 29.0], [1.5, 29.0], [1.6, 29.0], [1.7, 29.0], [1.8, 29.0], [1.9, 29.0], [2.0, 29.0], [2.1, 29.0], [2.2, 29.0], [2.3, 29.0], [2.4, 29.0], [2.5, 29.0], [2.6, 29.0], [2.7, 29.0], [2.8, 29.0], [2.9, 29.0], [3.0, 29.0], [3.1, 29.0], [3.2, 29.0], [3.3, 29.0], [3.4, 29.0], [3.5, 29.0], [3.6, 29.0], [3.7, 29.0], [3.8, 29.0], [3.9, 29.0], [4.0, 29.0], [4.1, 29.0], [4.2, 29.0], [4.3, 30.0], [4.4, 30.0], [4.5, 30.0], [4.6, 30.0], [4.7, 30.0], [4.8, 30.0], [4.9, 30.0], [5.0, 30.0], [5.1, 30.0], [5.2, 30.0], [5.3, 30.0], [5.4, 30.0], [5.5, 30.0], [5.6, 30.0], [5.7, 30.0], [5.8, 30.0], [5.9, 30.0], [6.0, 30.0], [6.1, 30.0], [6.2, 30.0], [6.3, 30.0], [6.4, 30.0], [6.5, 30.0], [6.6, 30.0], [6.7, 30.0], [6.8, 30.0], [6.9, 30.0], [7.0, 30.0], [7.1, 30.0], [7.2, 30.0], [7.3, 30.0], [7.4, 30.0], [7.5, 30.0], [7.6, 30.0], [7.7, 30.0], [7.8, 30.0], [7.9, 30.0], [8.0, 30.0], [8.1, 30.0], [8.2, 30.0], [8.3, 30.0], [8.4, 30.0], [8.5, 30.0], [8.6, 30.0], [8.7, 30.0], [8.8, 30.0], [8.9, 30.0], [9.0, 30.0], [9.1, 30.0], [9.2, 30.0], [9.3, 30.0], [9.4, 30.0], [9.5, 30.0], [9.6, 30.0], [9.7, 30.0], [9.8, 30.0], [9.9, 30.0], [10.0, 30.0], [10.1, 30.0], [10.2, 30.0], [10.3, 30.0], [10.4, 30.0], [10.5, 30.0], [10.6, 30.0], [10.7, 30.0], [10.8, 30.0], [10.9, 30.0], [11.0, 30.0], [11.1, 30.0], [11.2, 30.0], [11.3, 30.0], [11.4, 30.0], [11.5, 30.0], [11.6, 30.0], [11.7, 30.0], [11.8, 30.0], [11.9, 31.0], [12.0, 31.0], [12.1, 31.0], [12.2, 31.0], [12.3, 31.0], [12.4, 31.0], [12.5, 31.0], [12.6, 31.0], [12.7, 31.0], [12.8, 31.0], [12.9, 31.0], [13.0, 31.0], [13.1, 31.0], [13.2, 31.0], [13.3, 31.0], [13.4, 31.0], [13.5, 31.0], [13.6, 31.0], [13.7, 31.0], [13.8, 31.0], [13.9, 31.0], [14.0, 31.0], [14.1, 31.0], [14.2, 31.0], [14.3, 31.0], [14.4, 31.0], [14.5, 31.0], [14.6, 31.0], [14.7, 31.0], [14.8, 31.0], [14.9, 31.0], [15.0, 31.0], [15.1, 31.0], [15.2, 31.0], [15.3, 31.0], [15.4, 31.0], [15.5, 31.0], [15.6, 31.0], [15.7, 31.0], [15.8, 31.0], [15.9, 31.0], [16.0, 31.0], [16.1, 31.0], [16.2, 31.0], [16.3, 31.0], [16.4, 31.0], [16.5, 31.0], [16.6, 31.0], [16.7, 31.0], [16.8, 31.0], [16.9, 31.0], [17.0, 31.0], [17.1, 31.0], [17.2, 31.0], [17.3, 31.0], [17.4, 31.0], [17.5, 31.0], [17.6, 31.0], [17.7, 31.0], [17.8, 31.0], [17.9, 31.0], [18.0, 31.0], [18.1, 31.0], [18.2, 31.0], [18.3, 31.0], [18.4, 31.0], [18.5, 31.0], [18.6, 31.0], [18.7, 31.0], [18.8, 31.0], [18.9, 31.0], [19.0, 31.0], [19.1, 31.0], [19.2, 31.0], [19.3, 31.0], [19.4, 31.0], [19.5, 31.0], [19.6, 31.0], [19.7, 31.0], [19.8, 31.0], [19.9, 31.0], [20.0, 31.0], [20.1, 31.0], [20.2, 31.0], [20.3, 31.0], [20.4, 31.0], [20.5, 31.0], [20.6, 31.0], [20.7, 31.0], [20.8, 31.0], [20.9, 31.0], [21.0, 31.0], [21.1, 31.0], [21.2, 31.0], [21.3, 31.0], [21.4, 31.0], [21.5, 31.0], [21.6, 31.0], [21.7, 31.0], [21.8, 31.0], [21.9, 31.0], [22.0, 31.0], [22.1, 31.0], [22.2, 31.0], [22.3, 31.0], [22.4, 31.0], [22.5, 31.0], [22.6, 31.0], [22.7, 31.0], [22.8, 31.0], [22.9, 31.0], [23.0, 31.0], [23.1, 31.0], [23.2, 31.0], [23.3, 31.0], [23.4, 31.0], [23.5, 31.0], [23.6, 31.0], [23.7, 31.0], [23.8, 31.0], [23.9, 31.0], [24.0, 31.0], [24.1, 31.0], [24.2, 31.0], [24.3, 31.0], [24.4, 31.0], [24.5, 31.0], [24.6, 31.0], [24.7, 31.0], [24.8, 31.0], [24.9, 31.0], [25.0, 31.0], [25.1, 31.0], [25.2, 31.0], [25.3, 31.0], [25.4, 31.0], [25.5, 31.0], [25.6, 31.0], [25.7, 31.0], [25.8, 31.0], [25.9, 31.0], [26.0, 31.0], [26.1, 31.0], [26.2, 31.0], [26.3, 31.0], [26.4, 31.0], [26.5, 31.0], [26.6, 31.0], [26.7, 31.0], [26.8, 31.0], [26.9, 31.0], [27.0, 31.0], [27.1, 31.0], [27.2, 31.0], [27.3, 32.0], [27.4, 32.0], [27.5, 32.0], [27.6, 32.0], [27.7, 32.0], [27.8, 32.0], [27.9, 32.0], [28.0, 32.0], [28.1, 32.0], [28.2, 32.0], [28.3, 32.0], [28.4, 32.0], [28.5, 32.0], [28.6, 32.0], [28.7, 32.0], [28.8, 32.0], [28.9, 32.0], [29.0, 32.0], [29.1, 32.0], [29.2, 32.0], [29.3, 32.0], [29.4, 32.0], [29.5, 32.0], [29.6, 32.0], [29.7, 32.0], [29.8, 32.0], [29.9, 32.0], [30.0, 32.0], [30.1, 32.0], [30.2, 32.0], [30.3, 32.0], [30.4, 32.0], [30.5, 32.0], [30.6, 32.0], [30.7, 32.0], [30.8, 32.0], [30.9, 32.0], [31.0, 32.0], [31.1, 32.0], [31.2, 32.0], [31.3, 32.0], [31.4, 32.0], [31.5, 32.0], [31.6, 32.0], [31.7, 32.0], [31.8, 32.0], [31.9, 32.0], [32.0, 32.0], [32.1, 32.0], [32.2, 32.0], [32.3, 32.0], [32.4, 32.0], [32.5, 32.0], [32.6, 32.0], [32.7, 32.0], [32.8, 32.0], [32.9, 32.0], [33.0, 32.0], [33.1, 32.0], [33.2, 32.0], [33.3, 32.0], [33.4, 32.0], [33.5, 32.0], [33.6, 32.0], [33.7, 32.0], [33.8, 32.0], [33.9, 32.0], [34.0, 32.0], [34.1, 32.0], [34.2, 32.0], [34.3, 32.0], [34.4, 32.0], [34.5, 32.0], [34.6, 32.0], [34.7, 32.0], [34.8, 32.0], [34.9, 32.0], [35.0, 32.0], [35.1, 32.0], [35.2, 32.0], [35.3, 32.0], [35.4, 32.0], [35.5, 32.0], [35.6, 32.0], [35.7, 32.0], [35.8, 32.0], [35.9, 32.0], [36.0, 32.0], [36.1, 32.0], [36.2, 32.0], [36.3, 32.0], [36.4, 32.0], [36.5, 32.0], [36.6, 32.0], [36.7, 32.0], [36.8, 32.0], [36.9, 32.0], [37.0, 32.0], [37.1, 32.0], [37.2, 32.0], [37.3, 32.0], [37.4, 32.0], [37.5, 32.0], [37.6, 32.0], [37.7, 32.0], [37.8, 32.0], [37.9, 32.0], [38.0, 32.0], [38.1, 32.0], [38.2, 32.0], [38.3, 32.0], [38.4, 32.0], [38.5, 32.0], [38.6, 32.0], [38.7, 32.0], [38.8, 32.0], [38.9, 32.0], [39.0, 32.0], [39.1, 32.0], [39.2, 32.0], [39.3, 32.0], [39.4, 32.0], [39.5, 32.0], [39.6, 32.0], [39.7, 32.0], [39.8, 32.0], [39.9, 32.0], [40.0, 32.0], [40.1, 32.0], [40.2, 32.0], [40.3, 32.0], [40.4, 32.0], [40.5, 32.0], [40.6, 32.0], [40.7, 32.0], [40.8, 32.0], [40.9, 32.0], [41.0, 32.0], [41.1, 32.0], [41.2, 32.0], [41.3, 32.0], [41.4, 32.0], [41.5, 32.0], [41.6, 32.0], [41.7, 32.0], [41.8, 32.0], [41.9, 32.0], [42.0, 32.0], [42.1, 32.0], [42.2, 32.0], [42.3, 32.0], [42.4, 32.0], [42.5, 32.0], [42.6, 32.0], [42.7, 32.0], [42.8, 32.0], [42.9, 32.0], [43.0, 32.0], [43.1, 32.0], [43.2, 32.0], [43.3, 32.0], [43.4, 32.0], [43.5, 32.0], [43.6, 32.0], [43.7, 32.0], [43.8, 32.0], [43.9, 32.0], [44.0, 32.0], [44.1, 32.0], [44.2, 32.0], [44.3, 32.0], [44.4, 32.0], [44.5, 32.0], [44.6, 32.0], [44.7, 32.0], [44.8, 32.0], [44.9, 32.0], [45.0, 32.0], [45.1, 32.0], [45.2, 32.0], [45.3, 32.0], [45.4, 32.0], [45.5, 32.0], [45.6, 32.0], [45.7, 32.0], [45.8, 32.0], [45.9, 32.0], [46.0, 32.0], [46.1, 32.0], [46.2, 32.0], [46.3, 32.0], [46.4, 32.0], [46.5, 32.0], [46.6, 32.0], [46.7, 32.0], [46.8, 32.0], [46.9, 32.0], [47.0, 32.0], [47.1, 32.0], [47.2, 32.0], [47.3, 32.0], [47.4, 33.0], [47.5, 33.0], [47.6, 33.0], [47.7, 33.0], [47.8, 33.0], [47.9, 33.0], [48.0, 33.0], [48.1, 33.0], [48.2, 33.0], [48.3, 33.0], [48.4, 33.0], [48.5, 33.0], [48.6, 33.0], [48.7, 33.0], [48.8, 33.0], [48.9, 33.0], [49.0, 33.0], [49.1, 33.0], [49.2, 33.0], [49.3, 33.0], [49.4, 33.0], [49.5, 33.0], [49.6, 33.0], [49.7, 33.0], [49.8, 33.0], [49.9, 33.0], [50.0, 33.0], [50.1, 33.0], [50.2, 33.0], [50.3, 33.0], [50.4, 33.0], [50.5, 33.0], [50.6, 33.0], [50.7, 33.0], [50.8, 33.0], [50.9, 33.0], [51.0, 33.0], [51.1, 33.0], [51.2, 33.0], [51.3, 33.0], [51.4, 33.0], [51.5, 33.0], [51.6, 33.0], [51.7, 33.0], [51.8, 33.0], [51.9, 33.0], [52.0, 33.0], [52.1, 33.0], [52.2, 33.0], [52.3, 33.0], [52.4, 33.0], [52.5, 33.0], [52.6, 33.0], [52.7, 33.0], [52.8, 33.0], [52.9, 33.0], [53.0, 33.0], [53.1, 33.0], [53.2, 33.0], [53.3, 33.0], [53.4, 33.0], [53.5, 33.0], [53.6, 33.0], [53.7, 33.0], [53.8, 33.0], [53.9, 33.0], [54.0, 33.0], [54.1, 33.0], [54.2, 33.0], [54.3, 33.0], [54.4, 33.0], [54.5, 33.0], [54.6, 33.0], [54.7, 33.0], [54.8, 33.0], [54.9, 33.0], [55.0, 33.0], [55.1, 33.0], [55.2, 33.0], [55.3, 33.0], [55.4, 33.0], [55.5, 33.0], [55.6, 33.0], [55.7, 33.0], [55.8, 33.0], [55.9, 33.0], [56.0, 33.0], [56.1, 33.0], [56.2, 33.0], [56.3, 33.0], [56.4, 33.0], [56.5, 33.0], [56.6, 33.0], [56.7, 33.0], [56.8, 33.0], [56.9, 33.0], [57.0, 33.0], [57.1, 33.0], [57.2, 33.0], [57.3, 33.0], [57.4, 33.0], [57.5, 33.0], [57.6, 33.0], [57.7, 33.0], [57.8, 33.0], [57.9, 33.0], [58.0, 33.0], [58.1, 33.0], [58.2, 33.0], [58.3, 33.0], [58.4, 33.0], [58.5, 33.0], [58.6, 33.0], [58.7, 33.0], [58.8, 33.0], [58.9, 33.0], [59.0, 33.0], [59.1, 33.0], [59.2, 33.0], [59.3, 33.0], [59.4, 33.0], [59.5, 33.0], [59.6, 33.0], [59.7, 33.0], [59.8, 33.0], [59.9, 33.0], [60.0, 33.0], [60.1, 33.0], [60.2, 33.0], [60.3, 33.0], [60.4, 33.0], [60.5, 33.0], [60.6, 33.0], [60.7, 33.0], [60.8, 33.0], [60.9, 33.0], [61.0, 33.0], [61.1, 33.0], [61.2, 33.0], [61.3, 33.0], [61.4, 33.0], [61.5, 33.0], [61.6, 33.0], [61.7, 33.0], [61.8, 33.0], [61.9, 33.0], [62.0, 33.0], [62.1, 33.0], [62.2, 33.0], [62.3, 33.0], [62.4, 33.0], [62.5, 33.0], [62.6, 33.0], [62.7, 33.0], [62.8, 33.0], [62.9, 33.0], [63.0, 33.0], [63.1, 33.0], [63.2, 33.0], [63.3, 33.0], [63.4, 33.0], [63.5, 33.0], [63.6, 33.0], [63.7, 33.0], [63.8, 33.0], [63.9, 33.0], [64.0, 33.0], [64.1, 33.0], [64.2, 33.0], [64.3, 33.0], [64.4, 33.0], [64.5, 33.0], [64.6, 33.0], [64.7, 33.0], [64.8, 33.0], [64.9, 33.0], [65.0, 33.0], [65.1, 33.0], [65.2, 33.0], [65.3, 33.0], [65.4, 33.0], [65.5, 33.0], [65.6, 33.0], [65.7, 33.0], [65.8, 33.0], [65.9, 33.0], [66.0, 33.0], [66.1, 33.0], [66.2, 33.0], [66.3, 33.0], [66.4, 33.0], [66.5, 33.0], [66.6, 33.0], [66.7, 33.0], [66.8, 33.0], [66.9, 33.0], [67.0, 33.0], [67.1, 33.0], [67.2, 33.0], [67.3, 33.0], [67.4, 33.0], [67.5, 33.0], [67.6, 33.0], [67.7, 33.0], [67.8, 33.0], [67.9, 33.0], [68.0, 34.0], [68.1, 34.0], [68.2, 34.0], [68.3, 34.0], [68.4, 34.0], [68.5, 34.0], [68.6, 34.0], [68.7, 34.0], [68.8, 34.0], [68.9, 34.0], [69.0, 34.0], [69.1, 34.0], [69.2, 34.0], [69.3, 34.0], [69.4, 34.0], [69.5, 34.0], [69.6, 34.0], [69.7, 34.0], [69.8, 34.0], [69.9, 34.0], [70.0, 34.0], [70.1, 34.0], [70.2, 34.0], [70.3, 34.0], [70.4, 34.0], [70.5, 34.0], [70.6, 34.0], [70.7, 34.0], [70.8, 34.0], [70.9, 34.0], [71.0, 34.0], [71.1, 34.0], [71.2, 34.0], [71.3, 34.0], [71.4, 34.0], [71.5, 34.0], [71.6, 34.0], [71.7, 34.0], [71.8, 34.0], [71.9, 34.0], [72.0, 34.0], [72.1, 34.0], [72.2, 34.0], [72.3, 34.0], [72.4, 34.0], [72.5, 34.0], [72.6, 34.0], [72.7, 34.0], [72.8, 34.0], [72.9, 34.0], [73.0, 34.0], [73.1, 34.0], [73.2, 34.0], [73.3, 34.0], [73.4, 34.0], [73.5, 34.0], [73.6, 34.0], [73.7, 34.0], [73.8, 34.0], [73.9, 34.0], [74.0, 34.0], [74.1, 34.0], [74.2, 34.0], [74.3, 34.0], [74.4, 34.0], [74.5, 34.0], [74.6, 34.0], [74.7, 34.0], [74.8, 34.0], [74.9, 34.0], [75.0, 34.0], [75.1, 34.0], [75.2, 34.0], [75.3, 34.0], [75.4, 34.0], [75.5, 34.0], [75.6, 34.0], [75.7, 34.0], [75.8, 34.0], [75.9, 34.0], [76.0, 34.0], [76.1, 34.0], [76.2, 34.0], [76.3, 34.0], [76.4, 34.0], [76.5, 34.0], [76.6, 34.0], [76.7, 34.0], [76.8, 34.0], [76.9, 34.0], [77.0, 34.0], [77.1, 34.0], [77.2, 34.0], [77.3, 34.0], [77.4, 34.0], [77.5, 34.0], [77.6, 34.0], [77.7, 34.0], [77.8, 34.0], [77.9, 34.0], [78.0, 34.0], [78.1, 34.0], [78.2, 34.0], [78.3, 34.0], [78.4, 34.0], [78.5, 34.0], [78.6, 34.0], [78.7, 34.0], [78.8, 34.0], [78.9, 34.0], [79.0, 34.0], [79.1, 34.0], [79.2, 34.0], [79.3, 34.0], [79.4, 34.0], [79.5, 34.0], [79.6, 34.0], [79.7, 34.0], [79.8, 34.0], [79.9, 34.0], [80.0, 34.0], [80.1, 34.0], [80.2, 34.0], [80.3, 34.0], [80.4, 34.0], [80.5, 34.0], [80.6, 34.0], [80.7, 34.0], [80.8, 34.0], [80.9, 34.0], [81.0, 34.0], [81.1, 34.0], [81.2, 34.0], [81.3, 34.0], [81.4, 34.0], [81.5, 34.0], [81.6, 34.0], [81.7, 34.0], [81.8, 34.0], [81.9, 34.0], [82.0, 34.0], [82.1, 34.0], [82.2, 34.0], [82.3, 34.0], [82.4, 34.0], [82.5, 34.0], [82.6, 34.0], [82.7, 34.0], [82.8, 34.0], [82.9, 34.0], [83.0, 34.0], [83.1, 34.0], [83.2, 34.0], [83.3, 34.0], [83.4, 35.0], [83.5, 35.0], [83.6, 35.0], [83.7, 35.0], [83.8, 35.0], [83.9, 35.0], [84.0, 35.0], [84.1, 35.0], [84.2, 35.0], [84.3, 35.0], [84.4, 35.0], [84.5, 35.0], [84.6, 35.0], [84.7, 35.0], [84.8, 35.0], [84.9, 35.0], [85.0, 35.0], [85.1, 35.0], [85.2, 35.0], [85.3, 35.0], [85.4, 35.0], [85.5, 35.0], [85.6, 35.0], [85.7, 35.0], [85.8, 35.0], [85.9, 35.0], [86.0, 35.0], [86.1, 35.0], [86.2, 35.0], [86.3, 35.0], [86.4, 35.0], [86.5, 35.0], [86.6, 35.0], [86.7, 35.0], [86.8, 35.0], [86.9, 35.0], [87.0, 35.0], [87.1, 35.0], [87.2, 35.0], [87.3, 35.0], [87.4, 35.0], [87.5, 35.0], [87.6, 35.0], [87.7, 35.0], [87.8, 35.0], [87.9, 35.0], [88.0, 35.0], [88.1, 35.0], [88.2, 35.0], [88.3, 35.0], [88.4, 35.0], [88.5, 35.0], [88.6, 35.0], [88.7, 35.0], [88.8, 35.0], [88.9, 35.0], [89.0, 35.0], [89.1, 35.0], [89.2, 35.0], [89.3, 35.0], [89.4, 35.0], [89.5, 35.0], [89.6, 35.0], [89.7, 35.0], [89.8, 35.0], [89.9, 35.0], [90.0, 35.0], [90.1, 35.0], [90.2, 35.0], [90.3, 35.0], [90.4, 35.0], [90.5, 35.0], [90.6, 35.0], [90.7, 35.0], [90.8, 35.0], [90.9, 35.0], [91.0, 35.0], [91.1, 35.0], [91.2, 35.0], [91.3, 35.0], [91.4, 35.0], [91.5, 35.0], [91.6, 35.0], [91.7, 35.0], [91.8, 35.0], [91.9, 35.0], [92.0, 35.0], [92.1, 35.0], [92.2, 35.0], [92.3, 35.0], [92.4, 35.0], [92.5, 36.0], [92.6, 36.0], [92.7, 36.0], [92.8, 36.0], [92.9, 36.0], [93.0, 36.0], [93.1, 36.0], [93.2, 36.0], [93.3, 36.0], [93.4, 36.0], [93.5, 36.0], [93.6, 36.0], [93.7, 36.0], [93.8, 36.0], [93.9, 36.0], [94.0, 36.0], [94.1, 36.0], [94.2, 36.0], [94.3, 36.0], [94.4, 36.0], [94.5, 36.0], [94.6, 36.0], [94.7, 36.0], [94.8, 36.0], [94.9, 36.0], [95.0, 36.0], [95.1, 36.0], [95.2, 36.0], [95.3, 36.0], [95.4, 36.0], [95.5, 36.0], [95.6, 36.0], [95.7, 36.0], [95.8, 36.0], [95.9, 36.0], [96.0, 36.0], [96.1, 36.0], [96.2, 36.0], [96.3, 36.0], [96.4, 36.0], [96.5, 36.0], [96.6, 36.0], [96.7, 36.0], [96.8, 37.0], [96.9, 37.0], [97.0, 37.0], [97.1, 37.0], [97.2, 37.0], [97.3, 37.0], [97.4, 37.0], [97.5, 37.0], [97.6, 37.0], [97.7, 37.0], [97.8, 37.0], [97.9, 37.0], [98.0, 37.0], [98.1, 37.0], [98.2, 37.0], [98.3, 37.0], [98.4, 37.0], [98.5, 37.0], [98.6, 38.0], [98.7, 38.0], [98.8, 38.0], [98.9, 38.0], [99.0, 38.0], [99.1, 38.0], [99.2, 38.0], [99.3, 38.0], [99.4, 39.0], [99.5, 39.0], [99.6, 40.0], [99.7, 40.0], [99.8, 41.0], [99.9, 43.0], [100.0, 233.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 9998.0, "series": [{"data": [[600.0, 822.0], [700.0, 515.0], [800.0, 323.0], [200.0, 2006.0], [900.0, 225.0], [1000.0, 144.0], [1100.0, 87.0], [300.0, 2021.0], [1200.0, 56.0], [1300.0, 29.0], [1400.0, 21.0], [1500.0, 16.0], [400.0, 1602.0], [100.0, 896.0], [1600.0, 5.0], [1700.0, 3.0], [1800.0, 3.0], [1900.0, 1.0], [500.0, 1224.0], [2000.0, 1.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 9998.0], [200.0, 1.0], [100.0, 1.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 29.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 16534.0, "series": [{"data": [[0.0, 16534.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 3437.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 29.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.74712428E12, "maxY": 1.0, "series": [{"data": [[1.747125E12, 1.0], [1.74712662E12, 1.0], [1.74712884E12, 1.0], [1.7471256E12, 1.0], [1.74712722E12, 1.0], [1.7471244E12, 1.0], [1.74712542E12, 1.0], [1.74712764E12, 1.0], [1.74712602E12, 1.0], [1.74712824E12, 1.0], [1.74712902E12, 1.0], [1.74712518E12, 1.0], [1.7471274E12, 1.0], [1.747128E12, 1.0], [1.74712578E12, 1.0], [1.74712458E12, 1.0], [1.7471262E12, 1.0], [1.74712782E12, 1.0], [1.7471268E12, 1.0], [1.74712842E12, 1.0], [1.74712434E12, 1.0], [1.74712596E12, 1.0], [1.74712758E12, 1.0], [1.74712656E12, 1.0], [1.74712818E12, 1.0], [1.74712476E12, 1.0], [1.74712896E12, 1.0], [1.74712638E12, 1.0], [1.7471286E12, 1.0], [1.74712536E12, 1.0], [1.74712698E12, 1.0], [1.7471292E12, 1.0], [1.74712614E12, 1.0], [1.74712836E12, 1.0], [1.74712512E12, 1.0], [1.74712452E12, 1.0], [1.74712674E12, 1.0], [1.74712878E12, 1.0], [1.74712494E12, 1.0], [1.74712716E12, 1.0], [1.74712554E12, 1.0], [1.74712776E12, 1.0], [1.74712854E12, 1.0], [1.74712692E12, 1.0], [1.7471247E12, 1.0], [1.7471253E12, 1.0], [1.74712752E12, 1.0], [1.74712572E12, 1.0], [1.74712734E12, 1.0], [1.74712632E12, 1.0], [1.74712794E12, 1.0], [1.74712548E12, 1.0], [1.7471271E12, 1.0], [1.74712608E12, 1.0], [1.7471277E12, 1.0], [1.7471259E12, 1.0], [1.74712812E12, 1.0], [1.74712914E12, 1.0], [1.74712488E12, 1.0], [1.74712428E12, 1.0], [1.7471265E12, 1.0], [1.74712872E12, 1.0], [1.74712464E12, 1.0], [1.74712566E12, 1.0], [1.74712788E12, 1.0], [1.74712908E12, 1.0], [1.74712626E12, 1.0], [1.74712848E12, 1.0], [1.74712668E12, 1.0], [1.7471283E12, 1.0], [1.74712446E12, 1.0], [1.7471289E12, 1.0], [1.74712506E12, 1.0], [1.74712728E12, 1.0], [1.74712644E12, 1.0], [1.74712806E12, 1.0], [1.74712866E12, 1.0], [1.74712482E12, 1.0], [1.74712704E12, 1.0], [1.74712524E12, 1.0], [1.74712686E12, 1.0], [1.74712584E12, 1.0], [1.74712746E12, 1.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7471292E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 32.73549999999987, "minX": 1.0, "maxY": 458.4879000000006, "series": [{"data": [[1.0, 458.4879000000006]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.0, 458.4879000000006]], "isOverall": false, "label": "Create CSR-Aggregated", "isController": false}, {"data": [[1.0, 32.73549999999987]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}, {"data": [[1.0, 32.73549999999987]], "isOverall": false, "label": "HTTP Request - enroll-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 414.6333333333333, "minX": 1.74712428E12, "maxY": 20142.666666666668, "series": [{"data": [[1.747125E12, 18544.85], [1.74712662E12, 17977.283333333333], [1.74712884E12, 19133.516666666666], [1.7471256E12, 17808.966666666667], [1.74712722E12, 17367.333333333332], [1.7471244E12, 17956.083333333332], [1.74712542E12, 18103.25], [1.74712764E12, 17072.9], [1.74712602E12, 16925.883333333335], [1.74712824E12, 18397.616666666665], [1.74712902E12, 17367.366666666665], [1.74712518E12, 18250.55], [1.7471274E12, 16631.433333333334], [1.747128E12, 17241.366666666665], [1.74712578E12, 18082.2], [1.74712458E12, 17809.0], [1.7471262E12, 18082.133333333335], [1.74712782E12, 17808.933333333334], [1.7471268E12, 17051.85], [1.74712842E12, 17367.416666666668], [1.74712434E12, 17661.816666666666], [1.74712596E12, 16778.616666666665], [1.74712758E12, 17661.683333333334], [1.74712656E12, 17514.55], [1.74712818E12, 18103.366666666665], [1.74712476E12, 19133.55], [1.74712896E12, 18103.25], [1.74712638E12, 17220.183333333334], [1.7471286E12, 17809.016666666666], [1.74712536E12, 16925.833333333332], [1.74712698E12, 17514.616666666665], [1.7471292E12, 2060.5], [1.74712614E12, 17388.533333333333], [1.74712836E12, 18250.466666666667], [1.74712512E12, 16042.833333333334], [1.74712452E12, 19280.733333333334], [1.74712674E12, 19007.55], [1.74712878E12, 17367.4], [1.74712494E12, 18692.033333333333], [1.74712716E12, 17367.316666666666], [1.74712554E12, 17956.066666666666], [1.74712776E12, 17367.35], [1.74712854E12, 17808.916666666668], [1.74712692E12, 18544.833333333332], [1.7471247E12, 17514.55], [1.7471253E12, 17956.066666666666], [1.74712752E12, 18103.266666666666], [1.74712572E12, 19154.683333333334], [1.74712734E12, 18250.416666666668], [1.74712632E12, 19133.533333333333], [1.74712794E12, 19575.05], [1.74712548E12, 17661.766666666666], [1.7471271E12, 18986.366666666665], [1.74712608E12, 17514.5], [1.7471277E12, 18691.983333333334], [1.7471259E12, 18397.516666666666], [1.74712812E12, 17220.2], [1.74712914E12, 18544.833333333332], [1.74712488E12, 17661.783333333333], [1.74712428E12, 15306.9], [1.7471265E12, 16042.75], [1.74712872E12, 17072.95], [1.74712464E12, 17956.15], [1.74712566E12, 17367.4], [1.74712788E12, 18986.4], [1.74712908E12, 17514.616666666665], [1.74712626E12, 17514.566666666666], [1.74712848E12, 17661.766666666666], [1.74712668E12, 20142.666666666668], [1.7471283E12, 17367.416666666668], [1.74712446E12, 19133.5], [1.7471289E12, 18544.783333333333], [1.74712506E12, 16631.5], [1.74712728E12, 17661.65], [1.74712644E12, 18986.316666666666], [1.74712806E12, 17787.7], [1.74712866E12, 18250.45], [1.74712482E12, 17514.583333333332], [1.74712704E12, 18986.366666666665], [1.74712524E12, 18544.866666666665], [1.74712686E12, 17661.783333333333], [1.74712584E12, 19722.266666666666], [1.74712746E12, 18544.833333333332]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.747125E12, 3731.7], [1.74712662E12, 3613.233333333333], [1.74712884E12, 3850.1666666666665], [1.7471256E12, 3583.616666666667], [1.74712722E12, 3494.766666666667], [1.7471244E12, 3613.233333333333], [1.74712542E12, 3642.85], [1.74712764E12, 3435.5333333333333], [1.74712602E12, 3405.9166666666665], [1.74712824E12, 3702.0833333333335], [1.74712902E12, 3494.766666666667], [1.74712518E12, 3672.4666666666667], [1.7471274E12, 3346.6833333333334], [1.747128E12, 3465.15], [1.74712578E12, 3642.85], [1.74712458E12, 3583.616666666667], [1.7471262E12, 3642.85], [1.74712782E12, 3583.616666666667], [1.7471268E12, 3435.5333333333333], [1.74712842E12, 3494.766666666667], [1.74712434E12, 3554.0], [1.74712596E12, 3376.3], [1.74712758E12, 3554.0], [1.74712656E12, 3524.383333333333], [1.74712818E12, 3642.85], [1.74712476E12, 3850.1666666666665], [1.74712896E12, 3642.85], [1.74712638E12, 3465.15], [1.7471286E12, 3583.616666666667], [1.74712536E12, 3405.9166666666665], [1.74712698E12, 3524.383333333333], [1.7471292E12, 414.6333333333333], [1.74712614E12, 3494.766666666667], [1.74712836E12, 3672.4666666666667], [1.74712512E12, 3228.2166666666667], [1.74712452E12, 3879.7833333333333], [1.74712674E12, 3820.55], [1.74712878E12, 3494.766666666667], [1.74712494E12, 3761.3166666666666], [1.74712716E12, 3494.766666666667], [1.74712554E12, 3613.233333333333], [1.74712776E12, 3494.766666666667], [1.74712854E12, 3583.616666666667], [1.74712692E12, 3731.7], [1.7471247E12, 3524.383333333333], [1.7471253E12, 3613.233333333333], [1.74712752E12, 3642.85], [1.74712572E12, 3850.1666666666665], [1.74712734E12, 3672.4666666666667], [1.74712632E12, 3850.1666666666665], [1.74712794E12, 3939.016666666667], [1.74712548E12, 3554.0], [1.7471271E12, 3820.55], [1.74712608E12, 3524.383333333333], [1.7471277E12, 3761.3166666666666], [1.7471259E12, 3702.0833333333335], [1.74712812E12, 3465.15], [1.74712914E12, 3731.7], [1.74712488E12, 3554.0], [1.74712428E12, 3080.133333333333], [1.7471265E12, 3228.2166666666667], [1.74712872E12, 3435.5333333333333], [1.74712464E12, 3613.233333333333], [1.74712566E12, 3494.766666666667], [1.74712788E12, 3820.55], [1.74712908E12, 3524.383333333333], [1.74712626E12, 3524.383333333333], [1.74712848E12, 3554.0], [1.74712668E12, 4057.483333333333], [1.7471283E12, 3494.766666666667], [1.74712446E12, 3850.1666666666665], [1.7471289E12, 3731.7], [1.74712506E12, 3346.6833333333334], [1.74712728E12, 3554.0], [1.74712644E12, 3820.55], [1.74712806E12, 3583.616666666667], [1.74712866E12, 3672.4666666666667], [1.74712482E12, 3524.383333333333], [1.74712704E12, 3820.55], [1.74712524E12, 3731.7], [1.74712686E12, 3554.0], [1.74712584E12, 3968.633333333333], [1.74712746E12, 3731.7]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7471292E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 30.684615384615388, "minX": 1.74712428E12, "maxY": 520.5229357798169, "series": [{"data": [[1.747125E12, 444.73015873015856], [1.74712662E12, 453.73983739837394], [1.74712884E12, 427.6538461538464], [1.7471256E12, 463.5785123966942], [1.74712722E12, 472.22033898305085], [1.7471244E12, 456.1639344262295], [1.74712542E12, 452.82926829268297], [1.74712764E12, 485.1896551724139], [1.74712602E12, 484.11304347826086], [1.74712824E12, 443.8320000000001], [1.74712902E12, 472.54237288135613], [1.74712518E12, 451.3951612903226], [1.7471274E12, 501.6725663716814], [1.747128E12, 477.58474576271175], [1.74712578E12, 458.2540983606559], [1.74712458E12, 461.92561983471074], [1.7471262E12, 460.0819672131146], [1.74712782E12, 459.85123966942143], [1.7471268E12, 487.617391304348], [1.74712842E12, 475.71186440677985], [1.74712434E12, 464.9083333333334], [1.74712596E12, 495.6052631578948], [1.74712758E12, 467.52500000000015], [1.74712656E12, 472.781512605042], [1.74712818E12, 456.40650406504056], [1.74712476E12, 428.72307692307686], [1.74712896E12, 459.69105691056905], [1.74712638E12, 481.05128205128193], [1.7471286E12, 462.8925619834712], [1.74712536E12, 487.82608695652186], [1.74712698E12, 470.96638655462203], [1.7471292E12, 466.07142857142856], [1.74712614E12, 473.16806722689046], [1.74712836E12, 455.6129032258063], [1.74712512E12, 520.5229357798169], [1.74712452E12, 424.9694656488549], [1.74712674E12, 430.4461538461539], [1.74712878E12, 476.38983050847474], [1.74712494E12, 435.2755905511809], [1.74712716E12, 477.2288135593221], [1.74712554E12, 454.7049180327868], [1.74712776E12, 476.0677966101696], [1.74712854E12, 462.66115702479345], [1.74712692E12, 442.9523809523809], [1.7471247E12, 469.4201680672269], [1.7471253E12, 458.94262295081967], [1.74712752E12, 455.88617886178866], [1.74712572E12, 428.7251908396946], [1.74712734E12, 448.33870967741933], [1.74712632E12, 431.1], [1.74712794E12, 416.9097744360904], [1.74712548E12, 469.85833333333346], [1.7471271E12, 431.55813953488394], [1.74712608E12, 475.91596638655454], [1.7471277E12, 437.1889763779531], [1.7471259E12, 447.43200000000024], [1.74712812E12, 478.9914529914529], [1.74712914E12, 444.00793650793673], [1.74712488E12, 470.17500000000007], [1.74712428E12, 467.50961538461536], [1.7471265E12, 517.4036697247706], [1.74712872E12, 483.29310344827593], [1.74712464E12, 458.3688524590164], [1.74712566E12, 476.7372881355933], [1.74712788E12, 431.38759689922483], [1.74712908E12, 469.1512605042014], [1.74712626E12, 471.4957983193276], [1.74712848E12, 463.6916666666668], [1.74712668E12, 403.9485294117647], [1.7471283E12, 472.84745762711884], [1.74712446E12, 426.3769230769231], [1.7471289E12, 438.71428571428584], [1.74712506E12, 495.7345132743362], [1.74712728E12, 468.20833333333337], [1.74712644E12, 432.04651162790697], [1.74712806E12, 463.30833333333334], [1.74712866E12, 449.16935483870975], [1.74712482E12, 465.4033613445377], [1.74712704E12, 427.3023255813954], [1.74712524E12, 443.37301587301585], [1.74712686E12, 466.7000000000002], [1.74712584E12, 413.231343283582], [1.74712746E12, 438.1349206349206]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.747125E12, 33.72222222222222], [1.74712662E12, 34.36065573770492], [1.74712884E12, 32.469230769230776], [1.7471256E12, 33.25619834710743], [1.74712722E12, 32.44067796610171], [1.7471244E12, 33.5], [1.74712542E12, 32.59349593495936], [1.74712764E12, 33.094827586206904], [1.74712602E12, 32.51304347826087], [1.74712824E12, 32.99200000000001], [1.74712902E12, 34.08474576271187], [1.74712518E12, 32.725806451612875], [1.7471274E12, 33.71681415929205], [1.747128E12, 33.48717948717948], [1.74712578E12, 32.666666666666686], [1.74712458E12, 32.44628099173554], [1.7471262E12, 30.94308943089431], [1.74712782E12, 33.64462809917357], [1.7471268E12, 32.93103448275861], [1.74712842E12, 32.72881355932205], [1.74712434E12, 34.34166666666667], [1.74712596E12, 32.64035087719298], [1.74712758E12, 31.90000000000001], [1.74712656E12, 32.260504201680654], [1.74712818E12, 32.71544715447155], [1.74712476E12, 32.153846153846175], [1.74712896E12, 32.53658536585366], [1.74712638E12, 31.059829059829056], [1.7471286E12, 32.884297520661164], [1.74712536E12, 32.547826086956526], [1.74712698E12, 33.79831932773109], [1.7471292E12, 33.357142857142854], [1.74712614E12, 31.11864406779662], [1.74712836E12, 32.798387096774206], [1.74712512E12, 31.752293577981654], [1.74712452E12, 33.0534351145038], [1.74712674E12, 33.66666666666666], [1.74712878E12, 32.77118644067796], [1.74712494E12, 33.3543307086614], [1.74712716E12, 33.652542372881335], [1.74712554E12, 32.27049180327867], [1.74712776E12, 34.15254237288135], [1.74712854E12, 33.63636363636363], [1.74712692E12, 31.333333333333353], [1.7471247E12, 32.386554621848724], [1.7471253E12, 32.09016393442623], [1.74712752E12, 33.30894308943091], [1.74712572E12, 30.76153846153848], [1.74712734E12, 32.935483870967744], [1.74712632E12, 30.684615384615388], [1.74712794E12, 32.6315789473684], [1.74712548E12, 31.508333333333336], [1.7471271E12, 33.40310077519381], [1.74712608E12, 31.285714285714285], [1.7471277E12, 32.76377952755906], [1.7471259E12, 32.160000000000004], [1.74712812E12, 32.8974358974359], [1.74712914E12, 33.05555555555556], [1.74712488E12, 32.36666666666665], [1.74712428E12, 37.22115384615386], [1.7471265E12, 31.85321100917431], [1.74712872E12, 33.42241379310347], [1.74712464E12, 32.491803278688515], [1.74712566E12, 31.288135593220343], [1.74712788E12, 33.48062015503877], [1.74712908E12, 33.252100840336134], [1.74712626E12, 30.7142857142857], [1.74712848E12, 32.60000000000001], [1.74712668E12, 33.44525547445256], [1.7471283E12, 32.788135593220325], [1.74712446E12, 32.76153846153845], [1.7471289E12, 33.39682539682539], [1.74712506E12, 33.30973451327433], [1.74712728E12, 32.10833333333331], [1.74712644E12, 30.93023255813954], [1.74712806E12, 33.04958677685952], [1.74712866E12, 33.30645161290321], [1.74712482E12, 32.74789915966387], [1.74712704E12, 33.80620155038755], [1.74712524E12, 32.45238095238095], [1.74712686E12, 32.79999999999999], [1.74712584E12, 31.298507462686555], [1.74712746E12, 33.49206349206351]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7471292E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74712428E12, "maxY": 37.18269230769229, "series": [{"data": [[1.747125E12, 0.0], [1.74712662E12, 0.0], [1.74712884E12, 0.0], [1.7471256E12, 0.0], [1.74712722E12, 0.0], [1.7471244E12, 0.0], [1.74712542E12, 0.0], [1.74712764E12, 0.0], [1.74712602E12, 0.0], [1.74712824E12, 0.0], [1.74712902E12, 0.0], [1.74712518E12, 0.0], [1.7471274E12, 0.0], [1.747128E12, 0.0], [1.74712578E12, 0.0], [1.74712458E12, 0.0], [1.7471262E12, 0.0], [1.74712782E12, 0.0], [1.7471268E12, 0.0], [1.74712842E12, 0.0], [1.74712434E12, 0.0], [1.74712596E12, 0.0], [1.74712758E12, 0.0], [1.74712656E12, 0.0], [1.74712818E12, 0.0], [1.74712476E12, 0.0], [1.74712896E12, 0.0], [1.74712638E12, 0.0], [1.7471286E12, 0.0], [1.74712536E12, 0.0], [1.74712698E12, 0.0], [1.7471292E12, 0.0], [1.74712614E12, 0.0], [1.74712836E12, 0.0], [1.74712512E12, 0.0], [1.74712452E12, 0.0], [1.74712674E12, 0.0], [1.74712878E12, 0.0], [1.74712494E12, 0.0], [1.74712716E12, 0.0], [1.74712554E12, 0.0], [1.74712776E12, 0.0], [1.74712854E12, 0.0], [1.74712692E12, 0.0], [1.7471247E12, 0.0], [1.7471253E12, 0.0], [1.74712752E12, 0.0], [1.74712572E12, 0.0], [1.74712734E12, 0.0], [1.74712632E12, 0.0], [1.74712794E12, 0.0], [1.74712548E12, 0.0], [1.7471271E12, 0.0], [1.74712608E12, 0.0], [1.7471277E12, 0.0], [1.7471259E12, 0.0], [1.74712812E12, 0.0], [1.74712914E12, 0.0], [1.74712488E12, 0.0], [1.74712428E12, 0.0], [1.7471265E12, 0.0], [1.74712872E12, 0.0], [1.74712464E12, 0.0], [1.74712566E12, 0.0], [1.74712788E12, 0.0], [1.74712908E12, 0.0], [1.74712626E12, 0.0], [1.74712848E12, 0.0], [1.74712668E12, 0.0], [1.7471283E12, 0.0], [1.74712446E12, 0.0], [1.7471289E12, 0.0], [1.74712506E12, 0.0], [1.74712728E12, 0.0], [1.74712644E12, 0.0], [1.74712806E12, 0.0], [1.74712866E12, 0.0], [1.74712482E12, 0.0], [1.74712704E12, 0.0], [1.74712524E12, 0.0], [1.74712686E12, 0.0], [1.74712584E12, 0.0], [1.74712746E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.747125E12, 33.71428571428571], [1.74712662E12, 34.36065573770492], [1.74712884E12, 32.44615384615385], [1.7471256E12, 33.25619834710743], [1.74712722E12, 32.44067796610171], [1.7471244E12, 33.48360655737704], [1.74712542E12, 32.58536585365852], [1.74712764E12, 33.094827586206904], [1.74712602E12, 32.51304347826087], [1.74712824E12, 32.97600000000001], [1.74712902E12, 34.08474576271187], [1.74712518E12, 32.725806451612875], [1.7471274E12, 33.69026548672567], [1.747128E12, 33.470085470085465], [1.74712578E12, 32.65853658536584], [1.74712458E12, 32.429752066115704], [1.7471262E12, 30.934959349593495], [1.74712782E12, 33.619834710743824], [1.7471268E12, 32.92241379310345], [1.74712842E12, 32.72881355932205], [1.74712434E12, 34.30833333333332], [1.74712596E12, 32.6315789473684], [1.74712758E12, 31.90000000000001], [1.74712656E12, 32.243697478991585], [1.74712818E12, 32.71544715447155], [1.74712476E12, 32.138461538461556], [1.74712896E12, 32.53658536585366], [1.74712638E12, 31.042735042735046], [1.7471286E12, 32.884297520661164], [1.74712536E12, 32.547826086956526], [1.74712698E12, 33.79831932773109], [1.7471292E12, 33.357142857142854], [1.74712614E12, 31.110169491525436], [1.74712836E12, 32.790322580645146], [1.74712512E12, 31.743119266055043], [1.74712452E12, 33.02290076335877], [1.74712674E12, 33.658914728682156], [1.74712878E12, 32.75423728813559], [1.74712494E12, 33.33070866141731], [1.74712716E12, 33.644067796610166], [1.74712554E12, 32.254098360655746], [1.74712776E12, 34.14406779661017], [1.74712854E12, 33.63636363636363], [1.74712692E12, 31.333333333333353], [1.7471247E12, 32.36974789915969], [1.7471253E12, 32.09016393442623], [1.74712752E12, 33.30894308943091], [1.74712572E12, 30.74615384615384], [1.74712734E12, 32.927419354838705], [1.74712632E12, 30.646153846153858], [1.74712794E12, 32.6315789473684], [1.74712548E12, 31.5], [1.7471271E12, 33.39534883720932], [1.74712608E12, 31.27731092436976], [1.7471277E12, 32.75590551181104], [1.7471259E12, 32.143999999999984], [1.74712812E12, 32.88034188034191], [1.74712914E12, 33.04761904761906], [1.74712488E12, 32.34166666666668], [1.74712428E12, 37.18269230769229], [1.7471265E12, 31.85321100917431], [1.74712872E12, 33.41379310344828], [1.74712464E12, 32.47540983606555], [1.74712566E12, 31.271186440677962], [1.74712788E12, 33.47286821705427], [1.74712908E12, 33.23529411764706], [1.74712626E12, 30.7142857142857], [1.74712848E12, 32.58333333333333], [1.74712668E12, 33.44525547445256], [1.7471283E12, 32.77966101694914], [1.74712446E12, 32.74615384615387], [1.7471289E12, 33.39682539682539], [1.74712506E12, 33.274336283185846], [1.74712728E12, 32.09166666666665], [1.74712644E12, 30.93023255813954], [1.74712806E12, 33.04132231404958], [1.74712866E12, 33.30645161290321], [1.74712482E12, 32.71428571428569], [1.74712704E12, 33.80620155038755], [1.74712524E12, 32.45238095238095], [1.74712686E12, 32.77500000000001], [1.74712584E12, 31.291044776119385], [1.74712746E12, 33.48412698412699]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7471292E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74712428E12, "maxY": 1.6634615384615385, "series": [{"data": [[1.747125E12, 0.0], [1.74712662E12, 0.0], [1.74712884E12, 0.0], [1.7471256E12, 0.0], [1.74712722E12, 0.0], [1.7471244E12, 0.0], [1.74712542E12, 0.0], [1.74712764E12, 0.0], [1.74712602E12, 0.0], [1.74712824E12, 0.0], [1.74712902E12, 0.0], [1.74712518E12, 0.0], [1.7471274E12, 0.0], [1.747128E12, 0.0], [1.74712578E12, 0.0], [1.74712458E12, 0.0], [1.7471262E12, 0.0], [1.74712782E12, 0.0], [1.7471268E12, 0.0], [1.74712842E12, 0.0], [1.74712434E12, 0.0], [1.74712596E12, 0.0], [1.74712758E12, 0.0], [1.74712656E12, 0.0], [1.74712818E12, 0.0], [1.74712476E12, 0.0], [1.74712896E12, 0.0], [1.74712638E12, 0.0], [1.7471286E12, 0.0], [1.74712536E12, 0.0], [1.74712698E12, 0.0], [1.7471292E12, 0.0], [1.74712614E12, 0.0], [1.74712836E12, 0.0], [1.74712512E12, 0.0], [1.74712452E12, 0.0], [1.74712674E12, 0.0], [1.74712878E12, 0.0], [1.74712494E12, 0.0], [1.74712716E12, 0.0], [1.74712554E12, 0.0], [1.74712776E12, 0.0], [1.74712854E12, 0.0], [1.74712692E12, 0.0], [1.7471247E12, 0.0], [1.7471253E12, 0.0], [1.74712752E12, 0.0], [1.74712572E12, 0.0], [1.74712734E12, 0.0], [1.74712632E12, 0.0], [1.74712794E12, 0.0], [1.74712548E12, 0.0], [1.7471271E12, 0.0], [1.74712608E12, 0.0], [1.7471277E12, 0.0], [1.7471259E12, 0.0], [1.74712812E12, 0.0], [1.74712914E12, 0.0], [1.74712488E12, 0.0], [1.74712428E12, 0.0], [1.7471265E12, 0.0], [1.74712872E12, 0.0], [1.74712464E12, 0.0], [1.74712566E12, 0.0], [1.74712788E12, 0.0], [1.74712908E12, 0.0], [1.74712626E12, 0.0], [1.74712848E12, 0.0], [1.74712668E12, 0.0], [1.7471283E12, 0.0], [1.74712446E12, 0.0], [1.7471289E12, 0.0], [1.74712506E12, 0.0], [1.74712728E12, 0.0], [1.74712644E12, 0.0], [1.74712806E12, 0.0], [1.74712866E12, 0.0], [1.74712482E12, 0.0], [1.74712704E12, 0.0], [1.74712524E12, 0.0], [1.74712686E12, 0.0], [1.74712584E12, 0.0], [1.74712746E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.747125E12, 0.03174603174603176], [1.74712662E12, 0.03278688524590165], [1.74712884E12, 0.02307692307692308], [1.7471256E12, 0.03305785123966943], [1.74712722E12, 0.025423728813559324], [1.7471244E12, 0.049180327868852486], [1.74712542E12, 0.03252032520325204], [1.74712764E12, 0.03448275862068966], [1.74712602E12, 0.026086956521739146], [1.74712824E12, 0.024], [1.74712902E12, 0.02542372881355933], [1.74712518E12, 0.024193548387096787], [1.7471274E12, 0.026548672566371685], [1.747128E12, 0.025641025641025644], [1.74712578E12, 0.02439024390243904], [1.74712458E12, 0.03305785123966943], [1.7471262E12, 0.024390243902439025], [1.74712782E12, 0.024793388429752074], [1.7471268E12, 0.03448275862068966], [1.74712842E12, 0.025423728813559324], [1.74712434E12, 0.05833333333333332], [1.74712596E12, 0.026315789473684226], [1.74712758E12, 0.025], [1.74712656E12, 0.025210084033613446], [1.74712818E12, 0.024390243902439025], [1.74712476E12, 0.03076923076923078], [1.74712896E12, 0.024390243902439032], [1.74712638E12, 0.025641025641025644], [1.7471286E12, 0.024793388429752074], [1.74712536E12, 0.026086956521739146], [1.74712698E12, 0.025210084033613446], [1.7471292E12, 0.0], [1.74712614E12, 0.025423728813559324], [1.74712836E12, 0.02419354838709678], [1.74712512E12, 0.0458715596330275], [1.74712452E12, 0.03816793893129769], [1.74712674E12, 0.03100775193798451], [1.74712878E12, 0.03389830508474577], [1.74712494E12, 0.023622047244094502], [1.74712716E12, 0.03389830508474577], [1.74712554E12, 0.024590163934426243], [1.74712776E12, 0.025423728813559324], [1.74712854E12, 0.024793388429752067], [1.74712692E12, 0.02380952380952381], [1.7471247E12, 0.033613445378151266], [1.7471253E12, 0.024590163934426243], [1.74712752E12, 0.024390243902439025], [1.74712572E12, 0.023076923076923092], [1.74712734E12, 0.024193548387096774], [1.74712632E12, 0.03076923076923078], [1.74712794E12, 0.02255639097744362], [1.74712548E12, 0.025000000000000015], [1.7471271E12, 0.023255813953488375], [1.74712608E12, 0.02521008403361346], [1.7471277E12, 0.02362204724409449], [1.7471259E12, 0.024], [1.74712812E12, 0.02564102564102565], [1.74712914E12, 0.02380952380952382], [1.74712488E12, 0.03333333333333334], [1.74712428E12, 1.6634615384615385], [1.7471265E12, 0.03669724770642202], [1.74712872E12, 0.025862068965517244], [1.74712464E12, 0.03278688524590165], [1.74712566E12, 0.025423728813559338], [1.74712788E12, 0.023255813953488375], [1.74712908E12, 0.025210084033613446], [1.74712626E12, 0.025210084033613446], [1.74712848E12, 0.025], [1.74712668E12, 0.029197080291970812], [1.7471283E12, 0.016949152542372885], [1.74712446E12, 0.046153846153846184], [1.7471289E12, 0.02380952380952381], [1.74712506E12, 0.03539823008849558], [1.74712728E12, 0.025], [1.74712644E12, 0.023255813953488375], [1.74712806E12, 0.03305785123966943], [1.74712866E12, 0.024193548387096774], [1.74712482E12, 0.033613445378151266], [1.74712704E12, 0.023255813953488375], [1.74712524E12, 0.023809523809523822], [1.74712686E12, 0.03333333333333334], [1.74712584E12, 0.02985074626865673], [1.74712746E12, 0.02380952380952381]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7471292E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 26.0, "minX": 1.74712428E12, "maxY": 2061.0, "series": [{"data": [[1.747125E12, 1077.0], [1.74712662E12, 1620.0], [1.74712884E12, 1343.0], [1.7471256E12, 1252.0], [1.74712722E12, 1131.0], [1.7471244E12, 1193.0], [1.74712542E12, 1123.0], [1.74712764E12, 1452.0], [1.74712602E12, 1101.0], [1.74712824E12, 1210.0], [1.74712902E12, 1706.0], [1.74712518E12, 1304.0], [1.7471274E12, 1403.0], [1.747128E12, 1084.0], [1.74712578E12, 1489.0], [1.74712458E12, 1514.0], [1.7471262E12, 1855.0], [1.74712782E12, 1532.0], [1.7471268E12, 1954.0], [1.74712842E12, 1581.0], [1.74712434E12, 1288.0], [1.74712596E12, 1525.0], [1.74712758E12, 1208.0], [1.74712656E12, 1508.0], [1.74712818E12, 1179.0], [1.74712476E12, 1216.0], [1.74712896E12, 1245.0], [1.74712638E12, 1412.0], [1.7471286E12, 1450.0], [1.74712536E12, 1344.0], [1.74712698E12, 1452.0], [1.7471292E12, 1095.0], [1.74712614E12, 1422.0], [1.74712836E12, 1521.0], [1.74712512E12, 1608.0], [1.74712452E12, 1744.0], [1.74712674E12, 1326.0], [1.74712878E12, 1246.0], [1.74712494E12, 1424.0], [1.74712716E12, 1861.0], [1.74712554E12, 1562.0], [1.74712776E12, 1307.0], [1.74712854E12, 1299.0], [1.74712692E12, 1445.0], [1.7471247E12, 1227.0], [1.7471253E12, 1486.0], [1.74712752E12, 1378.0], [1.74712572E12, 1661.0], [1.74712734E12, 1722.0], [1.74712632E12, 1427.0], [1.74712794E12, 1260.0], [1.74712548E12, 1086.0], [1.7471271E12, 1186.0], [1.74712608E12, 1317.0], [1.7471277E12, 1211.0], [1.7471259E12, 1067.0], [1.74712812E12, 1353.0], [1.74712914E12, 1260.0], [1.74712488E12, 1390.0], [1.74712428E12, 1197.0], [1.7471265E12, 1294.0], [1.74712872E12, 1397.0], [1.74712464E12, 1631.0], [1.74712566E12, 2061.0], [1.74712788E12, 1279.0], [1.74712908E12, 1328.0], [1.74712626E12, 1468.0], [1.74712848E12, 1461.0], [1.74712668E12, 1062.0], [1.7471283E12, 1561.0], [1.74712446E12, 1227.0], [1.7471289E12, 1182.0], [1.74712506E12, 1434.0], [1.74712728E12, 1591.0], [1.74712644E12, 1215.0], [1.74712806E12, 1210.0], [1.74712866E12, 1215.0], [1.74712482E12, 1393.0], [1.74712704E12, 1214.0], [1.74712524E12, 1297.0], [1.74712686E12, 1270.0], [1.74712584E12, 937.0], [1.74712746E12, 1244.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.747125E12, 597.3000000000003], [1.74712662E12, 612.4], [1.74712884E12, 566.2], [1.7471256E12, 634.8000000000001], [1.74712722E12, 684.5], [1.7471244E12, 608.5], [1.74712542E12, 615.8000000000001], [1.74712764E12, 682.1000000000004], [1.74712602E12, 634.5], [1.74712824E12, 578.0], [1.74712902E12, 673.3], [1.74712518E12, 630.0], [1.7471274E12, 694.2], [1.747128E12, 665.0000000000001], [1.74712578E12, 628.2], [1.74712458E12, 631.1000000000003], [1.7471262E12, 614.6], [1.74712782E12, 623.5000000000001], [1.7471268E12, 638.0000000000001], [1.74712842E12, 669.6], [1.74712434E12, 649.8], [1.74712596E12, 638.1999999999999], [1.74712758E12, 675.5], [1.74712656E12, 644.9], [1.74712818E12, 599.5000000000002], [1.74712476E12, 618.9000000000001], [1.74712896E12, 634.0], [1.74712638E12, 638.5], [1.7471286E12, 639.0], [1.74712536E12, 673.7000000000002], [1.74712698E12, 623.3], [1.7471292E12, 662.1000000000003], [1.74712614E12, 685.2], [1.74712836E12, 648.3], [1.74712512E12, 712.8], [1.74712452E12, 574.3000000000002], [1.74712674E12, 597.0], [1.74712878E12, 661.0], [1.74712494E12, 567.5], [1.74712716E12, 632.5000000000002], [1.74712554E12, 627.0], [1.74712776E12, 666.4000000000002], [1.74712854E12, 621.9000000000001], [1.74712692E12, 623.4000000000001], [1.7471247E12, 691.8], [1.7471253E12, 633.5], [1.74712752E12, 646.6000000000003], [1.74712572E12, 574.2000000000002], [1.74712734E12, 611.0], [1.74712632E12, 603.5], [1.74712794E12, 568.8000000000002], [1.74712548E12, 658.9], [1.7471271E12, 581.8], [1.74712608E12, 627.2], [1.7471277E12, 594.0], [1.7471259E12, 607.4000000000001], [1.74712812E12, 661.5], [1.74712914E12, 629.7000000000002], [1.74712488E12, 706.2], [1.74712428E12, 666.5], [1.7471265E12, 694.3], [1.74712872E12, 689.0000000000007], [1.74712464E12, 639.0], [1.74712566E12, 633.2], [1.74712788E12, 598.3], [1.74712908E12, 624.3], [1.74712626E12, 637.6999999999999], [1.74712848E12, 653.4000000000001], [1.74712668E12, 540.0], [1.7471283E12, 637.5], [1.74712446E12, 599.2], [1.7471289E12, 589.7000000000002], [1.74712506E12, 619.6], [1.74712728E12, 609.8], [1.74712644E12, 587.4999999999999], [1.74712806E12, 635.0000000000002], [1.74712866E12, 668.3999999999999], [1.74712482E12, 643.4999999999999], [1.74712704E12, 590.3999999999999], [1.74712524E12, 610.1], [1.74712686E12, 662.0000000000002], [1.74712584E12, 578.5999999999999], [1.74712746E12, 585.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.747125E12, 1026.57], [1.74712662E12, 1172.5199999999982], [1.74712884E12, 1154.789999999999], [1.7471256E12, 1159.11], [1.74712722E12, 1099.8999999999999], [1.7471244E12, 1178.7500000000002], [1.74712542E12, 1073.8700000000001], [1.74712764E12, 1398.0799999999986], [1.74712602E12, 1068.37], [1.74712824E12, 1109.020000000001], [1.74712902E12, 1449.4199999999971], [1.74712518E12, 1283.8299999999997], [1.7471274E12, 1322.8799999999994], [1.747128E12, 1063.2399999999998], [1.74712578E12, 1061.4599999999996], [1.74712458E12, 1381.0699999999983], [1.7471262E12, 1691.1799999999976], [1.74712782E12, 1272.2799999999986], [1.7471268E12, 1484.8800000000006], [1.74712842E12, 1296.3899999999994], [1.74712434E12, 1070.2500000000002], [1.74712596E12, 1409.3100000000013], [1.74712758E12, 1056.0100000000002], [1.74712656E12, 1117.1499999999999], [1.74712818E12, 1050.63], [1.74712476E12, 1036.7699999999995], [1.74712896E12, 1233.95], [1.74712638E12, 1115.2000000000003], [1.7471286E12, 1202.6899999999998], [1.74712536E12, 1191.52], [1.74712698E12, 1255.4599999999987], [1.7471292E12, 1095.0], [1.74712614E12, 1196.1000000000013], [1.74712836E12, 1068.06], [1.74712512E12, 1233.7700000000002], [1.74712452E12, 1160.550000000003], [1.74712674E12, 1157.199999999994], [1.74712878E12, 1219.2399999999998], [1.74712494E12, 1262.0], [1.74712716E12, 1579.1599999999999], [1.74712554E12, 1407.700000000002], [1.74712776E12, 1109.1699999999996], [1.74712854E12, 1176.7699999999995], [1.74712692E12, 1159.5199999999998], [1.7471247E12, 1123.0699999999988], [1.7471253E12, 1359.8000000000002], [1.74712752E12, 1185.47], [1.74712572E12, 1261.8999999999996], [1.74712734E12, 1237.8099999999988], [1.74712632E12, 1129.3599999999997], [1.74712794E12, 934.0099999999968], [1.74712548E12, 1020.2300000000004], [1.7471271E12, 1127.64], [1.74712608E12, 1167.699999999999], [1.7471277E12, 1060.699999999997], [1.7471259E12, 1062.49], [1.74712812E12, 1169.7000000000003], [1.74712914E12, 1010.87], [1.74712488E12, 1082.3400000000001], [1.74712428E12, 1028.3299999999995], [1.7471265E12, 1265.44], [1.74712872E12, 1269.4199999999985], [1.74712464E12, 1442.300000000001], [1.74712566E12, 1437.2299999999982], [1.74712788E12, 1091.4700000000041], [1.74712908E12, 1244.7399999999996], [1.74712626E12, 1210.6699999999978], [1.74712848E12, 1124.9300000000007], [1.74712668E12, 1026.78], [1.7471283E12, 926.0799999999999], [1.74712446E12, 953.5799999999997], [1.7471289E12, 1157.46], [1.74712506E12, 1311.3299999999997], [1.74712728E12, 1451.1900000000007], [1.74712644E12, 1161.400000000001], [1.74712806E12, 1182.8399999999992], [1.74712866E12, 1105.51], [1.74712482E12, 1255.9899999999961], [1.74712704E12, 1037.3200000000013], [1.74712524E12, 1099.6399999999999], [1.74712686E12, 1161.6100000000004], [1.74712584E12, 898.6500000000001], [1.74712746E12, 1154.11]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.747125E12, 721.3], [1.74712662E12, 746.0999999999999], [1.74712884E12, 670.8], [1.7471256E12, 848.4999999999995], [1.74712722E12, 827.4999999999998], [1.7471244E12, 867.5], [1.74712542E12, 770.9499999999999], [1.74712764E12, 824.3999999999999], [1.74712602E12, 806.8999999999995], [1.74712824E12, 707.0], [1.74712902E12, 781.2499999999997], [1.74712518E12, 750.7499999999999], [1.7471274E12, 928.65], [1.747128E12, 876.9999999999999], [1.74712578E12, 754.3999999999999], [1.74712458E12, 738.0], [1.7471262E12, 802.5999999999996], [1.74712782E12, 872.5499999999998], [1.7471268E12, 788.9999999999994], [1.74712842E12, 790.5999999999999], [1.74712434E12, 810.9], [1.74712596E12, 900.3999999999995], [1.74712758E12, 771.1499999999999], [1.74712656E12, 774.7999999999994], [1.74712818E12, 734.4999999999998], [1.74712476E12, 781.5499999999997], [1.74712896E12, 751.3], [1.74712638E12, 825.0], [1.7471286E12, 832.5999999999999], [1.74712536E12, 839.4499999999994], [1.74712698E12, 817.0999999999999], [1.7471292E12, 965.3999999999992], [1.74712614E12, 852.4], [1.74712836E12, 757.6999999999998], [1.74712512E12, 931.7999999999997], [1.74712452E12, 774.9999999999999], [1.74712674E12, 783.0], [1.74712878E12, 833.15], [1.74712494E12, 694.0], [1.74712716E12, 866.1999999999994], [1.74712554E12, 764.75], [1.74712776E12, 864.0999999999997], [1.74712854E12, 802.5999999999999], [1.74712692E12, 801.5999999999999], [1.7471247E12, 790.0], [1.7471253E12, 851.5], [1.74712752E12, 829.6499999999995], [1.74712572E12, 735.9999999999998], [1.74712734E12, 858.0999999999999], [1.74712632E12, 753.5999999999997], [1.74712794E12, 688.65], [1.74712548E12, 797.0499999999997], [1.7471271E12, 691.4499999999991], [1.74712608E12, 723.0499999999993], [1.7471277E12, 791.5], [1.7471259E12, 731.3499999999999], [1.74712812E12, 809.0], [1.74712914E12, 783.2499999999999], [1.74712488E12, 823.1999999999998], [1.74712428E12, 757.7499999999999], [1.7471265E12, 965.3], [1.74712872E12, 855.4499999999999], [1.74712464E12, 780.5], [1.74712566E12, 816.199999999998], [1.74712788E12, 750.7499999999998], [1.74712908E12, 880.0999999999999], [1.74712626E12, 792.15], [1.74712848E12, 787.3499999999999], [1.74712668E12, 646.3000000000002], [1.7471283E12, 724.6999999999996], [1.74712446E12, 794.8499999999997], [1.7471289E12, 725.75], [1.74712506E12, 788.0499999999992], [1.74712728E12, 739.4499999999998], [1.74712644E12, 687.05], [1.74712806E12, 787.2999999999992], [1.74712866E12, 810.1499999999997], [1.74712482E12, 775.8999999999994], [1.74712704E12, 746.0], [1.74712524E12, 784.8499999999999], [1.74712686E12, 854.8999999999995], [1.74712584E12, 732.9499999999988], [1.74712746E12, 754.15]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.747125E12, 28.0], [1.74712662E12, 31.0], [1.74712884E12, 28.0], [1.7471256E12, 29.0], [1.74712722E12, 28.0], [1.7471244E12, 28.0], [1.74712542E12, 29.0], [1.74712764E12, 27.0], [1.74712602E12, 29.0], [1.74712824E12, 29.0], [1.74712902E12, 29.0], [1.74712518E12, 27.0], [1.7471274E12, 30.0], [1.747128E12, 28.0], [1.74712578E12, 30.0], [1.74712458E12, 27.0], [1.7471262E12, 26.0], [1.74712782E12, 30.0], [1.7471268E12, 30.0], [1.74712842E12, 29.0], [1.74712434E12, 30.0], [1.74712596E12, 30.0], [1.74712758E12, 28.0], [1.74712656E12, 26.0], [1.74712818E12, 28.0], [1.74712476E12, 29.0], [1.74712896E12, 28.0], [1.74712638E12, 27.0], [1.7471286E12, 29.0], [1.74712536E12, 28.0], [1.74712698E12, 29.0], [1.7471292E12, 30.0], [1.74712614E12, 27.0], [1.74712836E12, 28.0], [1.74712512E12, 28.0], [1.74712452E12, 29.0], [1.74712674E12, 29.0], [1.74712878E12, 30.0], [1.74712494E12, 29.0], [1.74712716E12, 29.0], [1.74712554E12, 28.0], [1.74712776E12, 30.0], [1.74712854E12, 30.0], [1.74712692E12, 27.0], [1.7471247E12, 28.0], [1.7471253E12, 28.0], [1.74712752E12, 28.0], [1.74712572E12, 28.0], [1.74712734E12, 29.0], [1.74712632E12, 26.0], [1.74712794E12, 28.0], [1.74712548E12, 28.0], [1.7471271E12, 29.0], [1.74712608E12, 27.0], [1.7471277E12, 27.0], [1.7471259E12, 29.0], [1.74712812E12, 29.0], [1.74712914E12, 29.0], [1.74712488E12, 28.0], [1.74712428E12, 30.0], [1.7471265E12, 27.0], [1.74712872E12, 31.0], [1.74712464E12, 29.0], [1.74712566E12, 27.0], [1.74712788E12, 30.0], [1.74712908E12, 30.0], [1.74712626E12, 27.0], [1.74712848E12, 28.0], [1.74712668E12, 30.0], [1.7471283E12, 27.0], [1.74712446E12, 28.0], [1.7471289E12, 30.0], [1.74712506E12, 29.0], [1.74712728E12, 28.0], [1.74712644E12, 27.0], [1.74712806E12, 29.0], [1.74712866E12, 29.0], [1.74712482E12, 28.0], [1.74712704E12, 30.0], [1.74712524E12, 28.0], [1.74712686E12, 29.0], [1.74712584E12, 27.0], [1.74712746E12, 30.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.747125E12, 85.0], [1.74712662E12, 118.0], [1.74712884E12, 82.0], [1.7471256E12, 107.0], [1.74712722E12, 91.0], [1.7471244E12, 95.0], [1.74712542E12, 81.0], [1.74712764E12, 82.5], [1.74712602E12, 86.0], [1.74712824E12, 92.0], [1.74712902E12, 89.5], [1.74712518E12, 76.5], [1.7471274E12, 82.0], [1.747128E12, 128.0], [1.74712578E12, 38.0], [1.74712458E12, 91.0], [1.7471262E12, 37.0], [1.74712782E12, 87.5], [1.7471268E12, 40.0], [1.74712842E12, 101.0], [1.74712434E12, 81.0], [1.74712596E12, 86.0], [1.74712758E12, 91.5], [1.74712656E12, 81.0], [1.74712818E12, 114.5], [1.74712476E12, 83.0], [1.74712896E12, 82.0], [1.74712638E12, 88.0], [1.7471286E12, 93.5], [1.74712536E12, 89.5], [1.74712698E12, 84.5], [1.7471292E12, 112.5], [1.74712614E12, 153.0], [1.74712836E12, 81.0], [1.74712512E12, 98.0], [1.74712452E12, 87.5], [1.74712674E12, 119.0], [1.74712878E12, 90.5], [1.74712494E12, 87.0], [1.74712716E12, 85.5], [1.74712554E12, 78.0], [1.74712776E12, 94.5], [1.74712854E12, 95.0], [1.74712692E12, 77.5], [1.7471247E12, 96.5], [1.7471253E12, 79.0], [1.74712752E12, 80.5], [1.74712572E12, 131.0], [1.74712734E12, 82.5], [1.74712632E12, 79.5], [1.74712794E12, 92.0], [1.74712548E12, 85.0], [1.7471271E12, 83.0], [1.74712608E12, 90.0], [1.7471277E12, 83.5], [1.7471259E12, 87.5], [1.74712812E12, 81.5], [1.74712914E12, 80.5], [1.74712488E12, 91.0], [1.74712428E12, 157.5], [1.7471265E12, 86.0], [1.74712872E12, 89.5], [1.74712464E12, 101.0], [1.74712566E12, 98.0], [1.74712788E12, 84.5], [1.74712908E12, 96.0], [1.74712626E12, 82.0], [1.74712848E12, 91.5], [1.74712668E12, 40.0], [1.7471283E12, 86.0], [1.74712446E12, 91.5], [1.7471289E12, 80.5], [1.74712506E12, 99.5], [1.74712728E12, 86.5], [1.74712644E12, 86.5], [1.74712806E12, 47.0], [1.74712866E12, 82.5], [1.74712482E12, 92.0], [1.74712704E12, 93.5], [1.74712524E12, 79.0], [1.74712686E12, 88.5], [1.74712584E12, 78.5], [1.74712746E12, 83.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7471292E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 36.5, "minX": 1.0, "maxY": 160.0, "series": [{"data": [[2.0, 160.0], [4.0, 79.0], [8.0, 78.5], [1.0, 36.5], [9.0, 125.0], [5.0, 41.0], [10.0, 90.0], [6.0, 81.5], [3.0, 86.0], [7.0, 131.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 10.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 30.0, "series": [{"data": [[2.0, 14.0], [4.0, 13.0], [8.0, 13.5], [1.0, 30.0], [9.0, 0.0], [5.0, 28.0], [10.0, 15.5], [6.0, 13.0], [3.0, 28.5], [7.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 10.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.45, "minX": 1.74712428E12, "maxY": 4.55, "series": [{"data": [[1.747125E12, 4.2], [1.74712662E12, 4.083333333333333], [1.74712884E12, 4.333333333333333], [1.7471256E12, 4.033333333333333], [1.74712722E12, 3.933333333333333], [1.7471244E12, 4.066666666666666], [1.74712542E12, 4.1], [1.74712764E12, 3.8666666666666667], [1.74712602E12, 3.8333333333333335], [1.74712824E12, 4.166666666666667], [1.74712902E12, 3.933333333333333], [1.74712518E12, 4.133333333333334], [1.7471274E12, 3.7666666666666666], [1.747128E12, 3.9166666666666665], [1.74712578E12, 4.083333333333333], [1.74712458E12, 4.033333333333333], [1.7471262E12, 4.083333333333333], [1.74712782E12, 4.033333333333333], [1.7471268E12, 3.85], [1.74712842E12, 3.933333333333333], [1.74712434E12, 4.0], [1.74712596E12, 3.8], [1.74712758E12, 4.0], [1.74712656E12, 3.966666666666667], [1.74712818E12, 4.1], [1.74712476E12, 4.333333333333333], [1.74712896E12, 4.1], [1.74712638E12, 3.9], [1.7471286E12, 4.033333333333333], [1.74712536E12, 3.8333333333333335], [1.74712698E12, 3.966666666666667], [1.7471292E12, 0.45], [1.74712614E12, 3.95], [1.74712836E12, 4.133333333333334], [1.74712512E12, 3.6333333333333333], [1.74712452E12, 4.366666666666666], [1.74712674E12, 4.316666666666666], [1.74712878E12, 3.933333333333333], [1.74712494E12, 4.233333333333333], [1.74712716E12, 3.933333333333333], [1.74712554E12, 4.066666666666666], [1.74712776E12, 3.933333333333333], [1.74712854E12, 4.033333333333333], [1.74712692E12, 4.2], [1.7471247E12, 3.966666666666667], [1.7471253E12, 4.066666666666666], [1.74712752E12, 4.1], [1.74712572E12, 4.35], [1.74712734E12, 4.133333333333334], [1.74712632E12, 4.333333333333333], [1.74712794E12, 4.433333333333334], [1.74712548E12, 4.0], [1.7471271E12, 4.3], [1.74712608E12, 3.966666666666667], [1.7471277E12, 4.233333333333333], [1.7471259E12, 4.166666666666667], [1.74712812E12, 3.9], [1.74712914E12, 4.2], [1.74712488E12, 4.0], [1.74712428E12, 3.4833333333333334], [1.7471265E12, 3.6333333333333333], [1.74712872E12, 3.8666666666666667], [1.74712464E12, 4.066666666666666], [1.74712566E12, 3.933333333333333], [1.74712788E12, 4.3], [1.74712908E12, 3.966666666666667], [1.74712626E12, 3.966666666666667], [1.74712848E12, 4.0], [1.74712668E12, 4.55], [1.7471283E12, 3.933333333333333], [1.74712446E12, 4.333333333333333], [1.7471289E12, 4.2], [1.74712506E12, 3.7666666666666666], [1.74712728E12, 4.0], [1.74712644E12, 4.3], [1.74712806E12, 4.016666666666667], [1.74712866E12, 4.133333333333334], [1.74712482E12, 3.966666666666667], [1.74712704E12, 4.3], [1.74712524E12, 4.2], [1.74712686E12, 4.0], [1.74712584E12, 4.466666666666667], [1.74712746E12, 4.2]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7471292E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.74712428E12, "maxY": 2.283333333333333, "series": [{"data": [[1.747125E12, 2.1], [1.74712662E12, 2.05], [1.74712884E12, 2.1666666666666665], [1.7471256E12, 2.0166666666666666], [1.74712722E12, 1.9666666666666666], [1.7471244E12, 2.033333333333333], [1.74712542E12, 2.05], [1.74712764E12, 1.9333333333333333], [1.74712602E12, 1.9166666666666667], [1.74712824E12, 2.0833333333333335], [1.74712902E12, 1.9666666666666666], [1.74712518E12, 2.066666666666667], [1.7471274E12, 1.8833333333333333], [1.747128E12, 1.9666666666666666], [1.74712578E12, 2.033333333333333], [1.74712458E12, 2.0166666666666666], [1.7471262E12, 2.033333333333333], [1.74712782E12, 2.0166666666666666], [1.7471268E12, 1.9166666666666667], [1.74712842E12, 1.9666666666666666], [1.74712434E12, 2.0], [1.74712596E12, 1.9], [1.74712758E12, 2.0], [1.74712656E12, 1.9833333333333334], [1.74712818E12, 2.05], [1.74712476E12, 2.1666666666666665], [1.74712896E12, 2.05], [1.74712638E12, 1.95], [1.7471286E12, 2.0166666666666666], [1.74712536E12, 1.9166666666666667], [1.74712698E12, 1.9833333333333334], [1.7471292E12, 0.23333333333333334], [1.74712614E12, 1.9833333333333334], [1.74712836E12, 2.066666666666667], [1.74712512E12, 1.8166666666666667], [1.74712452E12, 2.183333333333333], [1.74712674E12, 2.1666666666666665], [1.74712878E12, 1.9666666666666666], [1.74712494E12, 2.1166666666666667], [1.74712716E12, 1.9666666666666666], [1.74712554E12, 2.033333333333333], [1.74712776E12, 1.9666666666666666], [1.74712854E12, 2.0166666666666666], [1.74712692E12, 2.1], [1.7471247E12, 1.9833333333333334], [1.7471253E12, 2.033333333333333], [1.74712752E12, 2.05], [1.74712572E12, 2.183333333333333], [1.74712734E12, 2.066666666666667], [1.74712632E12, 2.1666666666666665], [1.74712794E12, 2.216666666666667], [1.74712548E12, 2.0], [1.7471271E12, 2.15], [1.74712608E12, 1.9833333333333334], [1.7471277E12, 2.1166666666666667], [1.7471259E12, 2.0833333333333335], [1.74712812E12, 1.95], [1.74712914E12, 2.1], [1.74712488E12, 2.0], [1.74712428E12, 1.7333333333333334], [1.7471265E12, 1.8166666666666667], [1.74712872E12, 1.9333333333333333], [1.74712464E12, 2.033333333333333], [1.74712566E12, 1.9666666666666666], [1.74712788E12, 2.15], [1.74712908E12, 1.9833333333333334], [1.74712626E12, 1.9833333333333334], [1.74712848E12, 2.0], [1.74712668E12, 2.2666666666666666], [1.7471283E12, 1.9666666666666666], [1.74712446E12, 2.1666666666666665], [1.7471289E12, 2.1], [1.74712506E12, 1.8833333333333333], [1.74712728E12, 2.0], [1.74712644E12, 2.15], [1.74712806E12, 2.0], [1.74712866E12, 2.066666666666667], [1.74712482E12, 1.9833333333333334], [1.74712704E12, 2.15], [1.74712524E12, 2.1], [1.74712686E12, 2.0], [1.74712584E12, 2.2333333333333334], [1.74712746E12, 2.1]], "isOverall": false, "label": "0", "isController": false}, {"data": [[1.747125E12, 2.1], [1.74712662E12, 2.033333333333333], [1.74712884E12, 2.1666666666666665], [1.7471256E12, 2.0166666666666666], [1.74712722E12, 1.9666666666666666], [1.7471244E12, 2.033333333333333], [1.74712542E12, 2.05], [1.74712764E12, 1.9333333333333333], [1.74712602E12, 1.9166666666666667], [1.74712824E12, 2.0833333333333335], [1.74712902E12, 1.9666666666666666], [1.74712518E12, 2.066666666666667], [1.7471274E12, 1.8833333333333333], [1.747128E12, 1.95], [1.74712578E12, 2.05], [1.74712458E12, 2.0166666666666666], [1.7471262E12, 2.05], [1.74712782E12, 2.0166666666666666], [1.7471268E12, 1.9333333333333333], [1.74712842E12, 1.9666666666666666], [1.74712434E12, 2.0], [1.74712596E12, 1.9], [1.74712758E12, 2.0], [1.74712656E12, 1.9833333333333334], [1.74712818E12, 2.05], [1.74712476E12, 2.1666666666666665], [1.74712896E12, 2.05], [1.74712638E12, 1.95], [1.7471286E12, 2.0166666666666666], [1.74712536E12, 1.9166666666666667], [1.74712698E12, 1.9833333333333334], [1.7471292E12, 0.23333333333333334], [1.74712614E12, 1.9666666666666666], [1.74712836E12, 2.066666666666667], [1.74712512E12, 1.8166666666666667], [1.74712452E12, 2.183333333333333], [1.74712674E12, 2.15], [1.74712878E12, 1.9666666666666666], [1.74712494E12, 2.1166666666666667], [1.74712716E12, 1.9666666666666666], [1.74712554E12, 2.033333333333333], [1.74712776E12, 1.9666666666666666], [1.74712854E12, 2.0166666666666666], [1.74712692E12, 2.1], [1.7471247E12, 1.9833333333333334], [1.7471253E12, 2.033333333333333], [1.74712752E12, 2.05], [1.74712572E12, 2.1666666666666665], [1.74712734E12, 2.066666666666667], [1.74712632E12, 2.1666666666666665], [1.74712794E12, 2.216666666666667], [1.74712548E12, 2.0], [1.7471271E12, 2.15], [1.74712608E12, 1.9833333333333334], [1.7471277E12, 2.1166666666666667], [1.7471259E12, 2.0833333333333335], [1.74712812E12, 1.95], [1.74712914E12, 2.1], [1.74712488E12, 2.0], [1.74712428E12, 1.7333333333333334], [1.7471265E12, 1.8166666666666667], [1.74712872E12, 1.9333333333333333], [1.74712464E12, 2.033333333333333], [1.74712566E12, 1.9666666666666666], [1.74712788E12, 2.15], [1.74712908E12, 1.9833333333333334], [1.74712626E12, 1.9833333333333334], [1.74712848E12, 2.0], [1.74712668E12, 2.283333333333333], [1.7471283E12, 1.9666666666666666], [1.74712446E12, 2.1666666666666665], [1.7471289E12, 2.1], [1.74712506E12, 1.8833333333333333], [1.74712728E12, 2.0], [1.74712644E12, 2.15], [1.74712806E12, 2.0166666666666666], [1.74712866E12, 2.066666666666667], [1.74712482E12, 1.9833333333333334], [1.74712704E12, 2.15], [1.74712524E12, 2.1], [1.74712686E12, 2.0], [1.74712584E12, 2.2333333333333334], [1.74712746E12, 2.1]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7471292E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.74712428E12, "maxY": 2.283333333333333, "series": [{"data": [[1.747125E12, 2.1], [1.74712662E12, 2.033333333333333], [1.74712884E12, 2.1666666666666665], [1.7471256E12, 2.0166666666666666], [1.74712722E12, 1.9666666666666666], [1.7471244E12, 2.033333333333333], [1.74712542E12, 2.05], [1.74712764E12, 1.9333333333333333], [1.74712602E12, 1.9166666666666667], [1.74712824E12, 2.0833333333333335], [1.74712902E12, 1.9666666666666666], [1.74712518E12, 2.066666666666667], [1.7471274E12, 1.8833333333333333], [1.747128E12, 1.95], [1.74712578E12, 2.05], [1.74712458E12, 2.0166666666666666], [1.7471262E12, 2.05], [1.74712782E12, 2.0166666666666666], [1.7471268E12, 1.9333333333333333], [1.74712842E12, 1.9666666666666666], [1.74712434E12, 2.0], [1.74712596E12, 1.9], [1.74712758E12, 2.0], [1.74712656E12, 1.9833333333333334], [1.74712818E12, 2.05], [1.74712476E12, 2.1666666666666665], [1.74712896E12, 2.05], [1.74712638E12, 1.95], [1.7471286E12, 2.0166666666666666], [1.74712536E12, 1.9166666666666667], [1.74712698E12, 1.9833333333333334], [1.7471292E12, 0.23333333333333334], [1.74712614E12, 1.9666666666666666], [1.74712836E12, 2.066666666666667], [1.74712512E12, 1.8166666666666667], [1.74712452E12, 2.183333333333333], [1.74712674E12, 2.15], [1.74712878E12, 1.9666666666666666], [1.74712494E12, 2.1166666666666667], [1.74712716E12, 1.9666666666666666], [1.74712554E12, 2.033333333333333], [1.74712776E12, 1.9666666666666666], [1.74712854E12, 2.0166666666666666], [1.74712692E12, 2.1], [1.7471247E12, 1.9833333333333334], [1.7471253E12, 2.033333333333333], [1.74712752E12, 2.05], [1.74712572E12, 2.1666666666666665], [1.74712734E12, 2.066666666666667], [1.74712632E12, 2.1666666666666665], [1.74712794E12, 2.216666666666667], [1.74712548E12, 2.0], [1.7471271E12, 2.15], [1.74712608E12, 1.9833333333333334], [1.7471277E12, 2.1166666666666667], [1.7471259E12, 2.0833333333333335], [1.74712812E12, 1.95], [1.74712914E12, 2.1], [1.74712488E12, 2.0], [1.74712428E12, 1.7333333333333334], [1.7471265E12, 1.8166666666666667], [1.74712872E12, 1.9333333333333333], [1.74712464E12, 2.033333333333333], [1.74712566E12, 1.9666666666666666], [1.74712788E12, 2.15], [1.74712908E12, 1.9833333333333334], [1.74712626E12, 1.9833333333333334], [1.74712848E12, 2.0], [1.74712668E12, 2.283333333333333], [1.7471283E12, 1.9666666666666666], [1.74712446E12, 2.1666666666666665], [1.7471289E12, 2.1], [1.74712506E12, 1.8833333333333333], [1.74712728E12, 2.0], [1.74712644E12, 2.15], [1.74712806E12, 2.0166666666666666], [1.74712866E12, 2.066666666666667], [1.74712482E12, 1.9833333333333334], [1.74712704E12, 2.15], [1.74712524E12, 2.1], [1.74712686E12, 2.0], [1.74712584E12, 2.2333333333333334], [1.74712746E12, 2.1]], "isOverall": false, "label": "HTTP Request - enroll-success", "isController": false}, {"data": [[1.747125E12, 2.1], [1.74712662E12, 2.05], [1.74712884E12, 2.1666666666666665], [1.7471256E12, 2.0166666666666666], [1.74712722E12, 1.9666666666666666], [1.7471244E12, 2.033333333333333], [1.74712542E12, 2.05], [1.74712764E12, 1.9333333333333333], [1.74712602E12, 1.9166666666666667], [1.74712824E12, 2.0833333333333335], [1.74712902E12, 1.9666666666666666], [1.74712518E12, 2.066666666666667], [1.7471274E12, 1.8833333333333333], [1.747128E12, 1.9666666666666666], [1.74712578E12, 2.033333333333333], [1.74712458E12, 2.0166666666666666], [1.7471262E12, 2.033333333333333], [1.74712782E12, 2.0166666666666666], [1.7471268E12, 1.9166666666666667], [1.74712842E12, 1.9666666666666666], [1.74712434E12, 2.0], [1.74712596E12, 1.9], [1.74712758E12, 2.0], [1.74712656E12, 1.9833333333333334], [1.74712818E12, 2.05], [1.74712476E12, 2.1666666666666665], [1.74712896E12, 2.05], [1.74712638E12, 1.95], [1.7471286E12, 2.0166666666666666], [1.74712536E12, 1.9166666666666667], [1.74712698E12, 1.9833333333333334], [1.7471292E12, 0.23333333333333334], [1.74712614E12, 1.9833333333333334], [1.74712836E12, 2.066666666666667], [1.74712512E12, 1.8166666666666667], [1.74712452E12, 2.183333333333333], [1.74712674E12, 2.1666666666666665], [1.74712878E12, 1.9666666666666666], [1.74712494E12, 2.1166666666666667], [1.74712716E12, 1.9666666666666666], [1.74712554E12, 2.033333333333333], [1.74712776E12, 1.9666666666666666], [1.74712854E12, 2.0166666666666666], [1.74712692E12, 2.1], [1.7471247E12, 1.9833333333333334], [1.7471253E12, 2.033333333333333], [1.74712752E12, 2.05], [1.74712572E12, 2.183333333333333], [1.74712734E12, 2.066666666666667], [1.74712632E12, 2.1666666666666665], [1.74712794E12, 2.216666666666667], [1.74712548E12, 2.0], [1.7471271E12, 2.15], [1.74712608E12, 1.9833333333333334], [1.7471277E12, 2.1166666666666667], [1.7471259E12, 2.0833333333333335], [1.74712812E12, 1.95], [1.74712914E12, 2.1], [1.74712488E12, 2.0], [1.74712428E12, 1.7333333333333334], [1.7471265E12, 1.8166666666666667], [1.74712872E12, 1.9333333333333333], [1.74712464E12, 2.033333333333333], [1.74712566E12, 1.9666666666666666], [1.74712788E12, 2.15], [1.74712908E12, 1.9833333333333334], [1.74712626E12, 1.9833333333333334], [1.74712848E12, 2.0], [1.74712668E12, 2.2666666666666666], [1.7471283E12, 1.9666666666666666], [1.74712446E12, 2.1666666666666665], [1.7471289E12, 2.1], [1.74712506E12, 1.8833333333333333], [1.74712728E12, 2.0], [1.74712644E12, 2.15], [1.74712806E12, 2.0], [1.74712866E12, 2.066666666666667], [1.74712482E12, 1.9833333333333334], [1.74712704E12, 2.15], [1.74712524E12, 2.1], [1.74712686E12, 2.0], [1.74712584E12, 2.2333333333333334], [1.74712746E12, 2.1]], "isOverall": false, "label": "Create CSR-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7471292E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.4666666666666667, "minX": 1.74712428E12, "maxY": 4.55, "series": [{"data": [[1.747125E12, 4.2], [1.74712662E12, 4.083333333333333], [1.74712884E12, 4.333333333333333], [1.7471256E12, 4.033333333333333], [1.74712722E12, 3.933333333333333], [1.7471244E12, 4.066666666666666], [1.74712542E12, 4.1], [1.74712764E12, 3.8666666666666667], [1.74712602E12, 3.8333333333333335], [1.74712824E12, 4.166666666666667], [1.74712902E12, 3.933333333333333], [1.74712518E12, 4.133333333333334], [1.7471274E12, 3.7666666666666666], [1.747128E12, 3.9166666666666665], [1.74712578E12, 4.083333333333333], [1.74712458E12, 4.033333333333333], [1.7471262E12, 4.083333333333333], [1.74712782E12, 4.033333333333333], [1.7471268E12, 3.85], [1.74712842E12, 3.933333333333333], [1.74712434E12, 4.0], [1.74712596E12, 3.8], [1.74712758E12, 4.0], [1.74712656E12, 3.966666666666667], [1.74712818E12, 4.1], [1.74712476E12, 4.333333333333333], [1.74712896E12, 4.1], [1.74712638E12, 3.9], [1.7471286E12, 4.033333333333333], [1.74712536E12, 3.8333333333333335], [1.74712698E12, 3.966666666666667], [1.7471292E12, 0.4666666666666667], [1.74712614E12, 3.95], [1.74712836E12, 4.133333333333334], [1.74712512E12, 3.6333333333333333], [1.74712452E12, 4.366666666666666], [1.74712674E12, 4.316666666666666], [1.74712878E12, 3.933333333333333], [1.74712494E12, 4.233333333333333], [1.74712716E12, 3.933333333333333], [1.74712554E12, 4.066666666666666], [1.74712776E12, 3.933333333333333], [1.74712854E12, 4.033333333333333], [1.74712692E12, 4.2], [1.7471247E12, 3.966666666666667], [1.7471253E12, 4.066666666666666], [1.74712752E12, 4.1], [1.74712572E12, 4.35], [1.74712734E12, 4.133333333333334], [1.74712632E12, 4.333333333333333], [1.74712794E12, 4.433333333333334], [1.74712548E12, 4.0], [1.7471271E12, 4.3], [1.74712608E12, 3.966666666666667], [1.7471277E12, 4.233333333333333], [1.7471259E12, 4.166666666666667], [1.74712812E12, 3.9], [1.74712914E12, 4.2], [1.74712488E12, 4.0], [1.74712428E12, 3.466666666666667], [1.7471265E12, 3.6333333333333333], [1.74712872E12, 3.8666666666666667], [1.74712464E12, 4.066666666666666], [1.74712566E12, 3.933333333333333], [1.74712788E12, 4.3], [1.74712908E12, 3.966666666666667], [1.74712626E12, 3.966666666666667], [1.74712848E12, 4.0], [1.74712668E12, 4.55], [1.7471283E12, 3.933333333333333], [1.74712446E12, 4.333333333333333], [1.7471289E12, 4.2], [1.74712506E12, 3.7666666666666666], [1.74712728E12, 4.0], [1.74712644E12, 4.3], [1.74712806E12, 4.016666666666667], [1.74712866E12, 4.133333333333334], [1.74712482E12, 3.966666666666667], [1.74712704E12, 4.3], [1.74712524E12, 4.2], [1.74712686E12, 4.0], [1.74712584E12, 4.466666666666667], [1.74712746E12, 4.2]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7471292E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

