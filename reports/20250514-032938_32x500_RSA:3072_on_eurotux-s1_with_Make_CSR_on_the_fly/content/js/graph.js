/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 26.0, "minX": 0.0, "maxY": 14498.0, "series": [{"data": [[0.0, 149.0], [0.1, 239.0], [0.2, 299.0], [0.3, 373.0], [0.4, 394.0], [0.5, 406.0], [0.6, 426.0], [0.7, 446.0], [0.8, 464.0], [0.9, 475.0], [1.0, 483.0], [1.1, 495.0], [1.2, 502.0], [1.3, 515.0], [1.4, 521.0], [1.5, 527.0], [1.6, 534.0], [1.7, 543.0], [1.8, 552.0], [1.9, 559.0], [2.0, 565.0], [2.1, 572.0], [2.2, 577.0], [2.3, 585.0], [2.4, 594.0], [2.5, 600.0], [2.6, 605.0], [2.7, 610.0], [2.8, 613.0], [2.9, 617.0], [3.0, 621.0], [3.1, 626.0], [3.2, 631.0], [3.3, 635.0], [3.4, 639.0], [3.5, 642.0], [3.6, 646.0], [3.7, 651.0], [3.8, 654.0], [3.9, 658.0], [4.0, 662.0], [4.1, 666.0], [4.2, 670.0], [4.3, 675.0], [4.4, 679.0], [4.5, 683.0], [4.6, 687.0], [4.7, 689.0], [4.8, 692.0], [4.9, 696.0], [5.0, 701.0], [5.1, 705.0], [5.2, 709.0], [5.3, 714.0], [5.4, 719.0], [5.5, 722.0], [5.6, 727.0], [5.7, 729.0], [5.8, 733.0], [5.9, 735.0], [6.0, 740.0], [6.1, 744.0], [6.2, 750.0], [6.3, 753.0], [6.4, 758.0], [6.5, 761.0], [6.6, 765.0], [6.7, 770.0], [6.8, 772.0], [6.9, 776.0], [7.0, 779.0], [7.1, 784.0], [7.2, 789.0], [7.3, 793.0], [7.4, 798.0], [7.5, 800.0], [7.6, 804.0], [7.7, 808.0], [7.8, 811.0], [7.9, 815.0], [8.0, 818.0], [8.1, 821.0], [8.2, 825.0], [8.3, 829.0], [8.4, 831.0], [8.5, 834.0], [8.6, 838.0], [8.7, 842.0], [8.8, 845.0], [8.9, 848.0], [9.0, 851.0], [9.1, 854.0], [9.2, 857.0], [9.3, 860.0], [9.4, 862.0], [9.5, 865.0], [9.6, 869.0], [9.7, 870.0], [9.8, 874.0], [9.9, 878.0], [10.0, 882.0], [10.1, 885.0], [10.2, 889.0], [10.3, 891.0], [10.4, 893.0], [10.5, 895.0], [10.6, 899.0], [10.7, 902.0], [10.8, 904.0], [10.9, 908.0], [11.0, 911.0], [11.1, 913.0], [11.2, 918.0], [11.3, 921.0], [11.4, 924.0], [11.5, 928.0], [11.6, 933.0], [11.7, 937.0], [11.8, 939.0], [11.9, 944.0], [12.0, 946.0], [12.1, 951.0], [12.2, 954.0], [12.3, 957.0], [12.4, 960.0], [12.5, 963.0], [12.6, 967.0], [12.7, 971.0], [12.8, 974.0], [12.9, 976.0], [13.0, 981.0], [13.1, 982.0], [13.2, 985.0], [13.3, 988.0], [13.4, 990.0], [13.5, 993.0], [13.6, 996.0], [13.7, 999.0], [13.8, 1001.0], [13.9, 1004.0], [14.0, 1007.0], [14.1, 1009.0], [14.2, 1012.0], [14.3, 1015.0], [14.4, 1018.0], [14.5, 1021.0], [14.6, 1023.0], [14.7, 1026.0], [14.8, 1029.0], [14.9, 1032.0], [15.0, 1035.0], [15.1, 1037.0], [15.2, 1040.0], [15.3, 1042.0], [15.4, 1044.0], [15.5, 1047.0], [15.6, 1049.0], [15.7, 1051.0], [15.8, 1053.0], [15.9, 1058.0], [16.0, 1061.0], [16.1, 1064.0], [16.2, 1067.0], [16.3, 1069.0], [16.4, 1072.0], [16.5, 1074.0], [16.6, 1078.0], [16.7, 1081.0], [16.8, 1084.0], [16.9, 1087.0], [17.0, 1089.0], [17.1, 1093.0], [17.2, 1095.0], [17.3, 1099.0], [17.4, 1101.0], [17.5, 1104.0], [17.6, 1107.0], [17.7, 1110.0], [17.8, 1113.0], [17.9, 1115.0], [18.0, 1118.0], [18.1, 1121.0], [18.2, 1123.0], [18.3, 1126.0], [18.4, 1127.0], [18.5, 1130.0], [18.6, 1132.0], [18.7, 1135.0], [18.8, 1137.0], [18.9, 1141.0], [19.0, 1142.0], [19.1, 1146.0], [19.2, 1149.0], [19.3, 1151.0], [19.4, 1154.0], [19.5, 1157.0], [19.6, 1160.0], [19.7, 1163.0], [19.8, 1166.0], [19.9, 1167.0], [20.0, 1169.0], [20.1, 1172.0], [20.2, 1175.0], [20.3, 1178.0], [20.4, 1181.0], [20.5, 1185.0], [20.6, 1187.0], [20.7, 1190.0], [20.8, 1193.0], [20.9, 1196.0], [21.0, 1198.0], [21.1, 1201.0], [21.2, 1203.0], [21.3, 1207.0], [21.4, 1209.0], [21.5, 1211.0], [21.6, 1212.0], [21.7, 1215.0], [21.8, 1219.0], [21.9, 1221.0], [22.0, 1225.0], [22.1, 1228.0], [22.2, 1231.0], [22.3, 1233.0], [22.4, 1234.0], [22.5, 1236.0], [22.6, 1240.0], [22.7, 1243.0], [22.8, 1246.0], [22.9, 1249.0], [23.0, 1251.0], [23.1, 1254.0], [23.2, 1258.0], [23.3, 1260.0], [23.4, 1263.0], [23.5, 1266.0], [23.6, 1267.0], [23.7, 1269.0], [23.8, 1272.0], [23.9, 1274.0], [24.0, 1277.0], [24.1, 1279.0], [24.2, 1283.0], [24.3, 1284.0], [24.4, 1288.0], [24.5, 1289.0], [24.6, 1292.0], [24.7, 1295.0], [24.8, 1297.0], [24.9, 1300.0], [25.0, 1303.0], [25.1, 1305.0], [25.2, 1308.0], [25.3, 1309.0], [25.4, 1312.0], [25.5, 1315.0], [25.6, 1317.0], [25.7, 1319.0], [25.8, 1323.0], [25.9, 1325.0], [26.0, 1328.0], [26.1, 1331.0], [26.2, 1334.0], [26.3, 1337.0], [26.4, 1339.0], [26.5, 1341.0], [26.6, 1345.0], [26.7, 1347.0], [26.8, 1350.0], [26.9, 1352.0], [27.0, 1354.0], [27.1, 1356.0], [27.2, 1358.0], [27.3, 1360.0], [27.4, 1361.0], [27.5, 1363.0], [27.6, 1366.0], [27.7, 1368.0], [27.8, 1370.0], [27.9, 1372.0], [28.0, 1374.0], [28.1, 1376.0], [28.2, 1378.0], [28.3, 1380.0], [28.4, 1382.0], [28.5, 1385.0], [28.6, 1387.0], [28.7, 1390.0], [28.8, 1393.0], [28.9, 1395.0], [29.0, 1397.0], [29.1, 1400.0], [29.2, 1402.0], [29.3, 1405.0], [29.4, 1407.0], [29.5, 1409.0], [29.6, 1411.0], [29.7, 1415.0], [29.8, 1418.0], [29.9, 1420.0], [30.0, 1424.0], [30.1, 1427.0], [30.2, 1430.0], [30.3, 1431.0], [30.4, 1435.0], [30.5, 1437.0], [30.6, 1440.0], [30.7, 1442.0], [30.8, 1445.0], [30.9, 1448.0], [31.0, 1452.0], [31.1, 1454.0], [31.2, 1457.0], [31.3, 1459.0], [31.4, 1462.0], [31.5, 1465.0], [31.6, 1468.0], [31.7, 1471.0], [31.8, 1474.0], [31.9, 1476.0], [32.0, 1478.0], [32.1, 1481.0], [32.2, 1483.0], [32.3, 1485.0], [32.4, 1487.0], [32.5, 1491.0], [32.6, 1494.0], [32.7, 1496.0], [32.8, 1499.0], [32.9, 1503.0], [33.0, 1506.0], [33.1, 1509.0], [33.2, 1513.0], [33.3, 1515.0], [33.4, 1518.0], [33.5, 1520.0], [33.6, 1525.0], [33.7, 1528.0], [33.8, 1530.0], [33.9, 1532.0], [34.0, 1534.0], [34.1, 1536.0], [34.2, 1539.0], [34.3, 1542.0], [34.4, 1545.0], [34.5, 1547.0], [34.6, 1550.0], [34.7, 1552.0], [34.8, 1555.0], [34.9, 1557.0], [35.0, 1560.0], [35.1, 1563.0], [35.2, 1566.0], [35.3, 1568.0], [35.4, 1571.0], [35.5, 1573.0], [35.6, 1576.0], [35.7, 1580.0], [35.8, 1583.0], [35.9, 1585.0], [36.0, 1588.0], [36.1, 1590.0], [36.2, 1593.0], [36.3, 1595.0], [36.4, 1598.0], [36.5, 1601.0], [36.6, 1604.0], [36.7, 1607.0], [36.8, 1610.0], [36.9, 1612.0], [37.0, 1615.0], [37.1, 1618.0], [37.2, 1620.0], [37.3, 1622.0], [37.4, 1623.0], [37.5, 1626.0], [37.6, 1627.0], [37.7, 1629.0], [37.8, 1632.0], [37.9, 1635.0], [38.0, 1638.0], [38.1, 1640.0], [38.2, 1642.0], [38.3, 1646.0], [38.4, 1649.0], [38.5, 1651.0], [38.6, 1655.0], [38.7, 1657.0], [38.8, 1659.0], [38.9, 1661.0], [39.0, 1664.0], [39.1, 1665.0], [39.2, 1669.0], [39.3, 1672.0], [39.4, 1674.0], [39.5, 1676.0], [39.6, 1679.0], [39.7, 1682.0], [39.8, 1686.0], [39.9, 1688.0], [40.0, 1692.0], [40.1, 1694.0], [40.2, 1696.0], [40.3, 1700.0], [40.4, 1702.0], [40.5, 1704.0], [40.6, 1707.0], [40.7, 1711.0], [40.8, 1713.0], [40.9, 1716.0], [41.0, 1718.0], [41.1, 1720.0], [41.2, 1723.0], [41.3, 1726.0], [41.4, 1728.0], [41.5, 1731.0], [41.6, 1735.0], [41.7, 1736.0], [41.8, 1739.0], [41.9, 1743.0], [42.0, 1746.0], [42.1, 1748.0], [42.2, 1750.0], [42.3, 1753.0], [42.4, 1755.0], [42.5, 1758.0], [42.6, 1762.0], [42.7, 1764.0], [42.8, 1766.0], [42.9, 1768.0], [43.0, 1771.0], [43.1, 1774.0], [43.2, 1778.0], [43.3, 1781.0], [43.4, 1784.0], [43.5, 1786.0], [43.6, 1789.0], [43.7, 1792.0], [43.8, 1794.0], [43.9, 1798.0], [44.0, 1802.0], [44.1, 1805.0], [44.2, 1807.0], [44.3, 1811.0], [44.4, 1814.0], [44.5, 1817.0], [44.6, 1819.0], [44.7, 1822.0], [44.8, 1824.0], [44.9, 1827.0], [45.0, 1830.0], [45.1, 1832.0], [45.2, 1835.0], [45.3, 1838.0], [45.4, 1841.0], [45.5, 1845.0], [45.6, 1848.0], [45.7, 1850.0], [45.8, 1852.0], [45.9, 1856.0], [46.0, 1859.0], [46.1, 1863.0], [46.2, 1865.0], [46.3, 1868.0], [46.4, 1870.0], [46.5, 1873.0], [46.6, 1876.0], [46.7, 1879.0], [46.8, 1883.0], [46.9, 1886.0], [47.0, 1889.0], [47.1, 1893.0], [47.2, 1895.0], [47.3, 1897.0], [47.4, 1898.0], [47.5, 1900.0], [47.6, 1902.0], [47.7, 1905.0], [47.8, 1910.0], [47.9, 1914.0], [48.0, 1919.0], [48.1, 1922.0], [48.2, 1925.0], [48.3, 1929.0], [48.4, 1933.0], [48.5, 1935.0], [48.6, 1939.0], [48.7, 1942.0], [48.8, 1946.0], [48.9, 1949.0], [49.0, 1952.0], [49.1, 1955.0], [49.2, 1959.0], [49.3, 1962.0], [49.4, 1965.0], [49.5, 1968.0], [49.6, 1971.0], [49.7, 1973.0], [49.8, 1977.0], [49.9, 1979.0], [50.0, 1983.0], [50.1, 1985.0], [50.2, 1989.0], [50.3, 1992.0], [50.4, 1996.0], [50.5, 2001.0], [50.6, 2004.0], [50.7, 2007.0], [50.8, 2011.0], [50.9, 2014.0], [51.0, 2017.0], [51.1, 2020.0], [51.2, 2024.0], [51.3, 2027.0], [51.4, 2030.0], [51.5, 2032.0], [51.6, 2036.0], [51.7, 2039.0], [51.8, 2042.0], [51.9, 2044.0], [52.0, 2048.0], [52.1, 2051.0], [52.2, 2054.0], [52.3, 2056.0], [52.4, 2059.0], [52.5, 2063.0], [52.6, 2066.0], [52.7, 2069.0], [52.8, 2073.0], [52.9, 2076.0], [53.0, 2078.0], [53.1, 2081.0], [53.2, 2084.0], [53.3, 2085.0], [53.4, 2089.0], [53.5, 2091.0], [53.6, 2095.0], [53.7, 2098.0], [53.8, 2101.0], [53.9, 2105.0], [54.0, 2109.0], [54.1, 2113.0], [54.2, 2117.0], [54.3, 2121.0], [54.4, 2123.0], [54.5, 2127.0], [54.6, 2131.0], [54.7, 2134.0], [54.8, 2138.0], [54.9, 2141.0], [55.0, 2144.0], [55.1, 2148.0], [55.2, 2152.0], [55.3, 2157.0], [55.4, 2161.0], [55.5, 2163.0], [55.6, 2167.0], [55.7, 2170.0], [55.8, 2173.0], [55.9, 2175.0], [56.0, 2180.0], [56.1, 2184.0], [56.2, 2187.0], [56.3, 2190.0], [56.4, 2192.0], [56.5, 2196.0], [56.6, 2201.0], [56.7, 2204.0], [56.8, 2210.0], [56.9, 2212.0], [57.0, 2215.0], [57.1, 2219.0], [57.2, 2222.0], [57.3, 2224.0], [57.4, 2228.0], [57.5, 2230.0], [57.6, 2234.0], [57.7, 2236.0], [57.8, 2239.0], [57.9, 2242.0], [58.0, 2246.0], [58.1, 2249.0], [58.2, 2254.0], [58.3, 2257.0], [58.4, 2262.0], [58.5, 2265.0], [58.6, 2268.0], [58.7, 2273.0], [58.8, 2278.0], [58.9, 2283.0], [59.0, 2288.0], [59.1, 2291.0], [59.2, 2296.0], [59.3, 2298.0], [59.4, 2302.0], [59.5, 2305.0], [59.6, 2308.0], [59.7, 2311.0], [59.8, 2314.0], [59.9, 2318.0], [60.0, 2320.0], [60.1, 2323.0], [60.2, 2326.0], [60.3, 2329.0], [60.4, 2333.0], [60.5, 2336.0], [60.6, 2339.0], [60.7, 2342.0], [60.8, 2346.0], [60.9, 2350.0], [61.0, 2354.0], [61.1, 2357.0], [61.2, 2360.0], [61.3, 2366.0], [61.4, 2368.0], [61.5, 2373.0], [61.6, 2376.0], [61.7, 2379.0], [61.8, 2382.0], [61.9, 2390.0], [62.0, 2394.0], [62.1, 2397.0], [62.2, 2400.0], [62.3, 2404.0], [62.4, 2409.0], [62.5, 2413.0], [62.6, 2418.0], [62.7, 2422.0], [62.8, 2426.0], [62.9, 2430.0], [63.0, 2432.0], [63.1, 2436.0], [63.2, 2441.0], [63.3, 2444.0], [63.4, 2447.0], [63.5, 2451.0], [63.6, 2454.0], [63.7, 2457.0], [63.8, 2461.0], [63.9, 2465.0], [64.0, 2469.0], [64.1, 2474.0], [64.2, 2478.0], [64.3, 2481.0], [64.4, 2484.0], [64.5, 2487.0], [64.6, 2491.0], [64.7, 2497.0], [64.8, 2503.0], [64.9, 2509.0], [65.0, 2511.0], [65.1, 2516.0], [65.2, 2520.0], [65.3, 2524.0], [65.4, 2530.0], [65.5, 2534.0], [65.6, 2536.0], [65.7, 2540.0], [65.8, 2544.0], [65.9, 2547.0], [66.0, 2551.0], [66.1, 2556.0], [66.2, 2561.0], [66.3, 2565.0], [66.4, 2568.0], [66.5, 2572.0], [66.6, 2578.0], [66.7, 2584.0], [66.8, 2589.0], [66.9, 2592.0], [67.0, 2596.0], [67.1, 2603.0], [67.2, 2607.0], [67.3, 2613.0], [67.4, 2618.0], [67.5, 2624.0], [67.6, 2627.0], [67.7, 2631.0], [67.8, 2635.0], [67.9, 2639.0], [68.0, 2643.0], [68.1, 2648.0], [68.2, 2653.0], [68.3, 2658.0], [68.4, 2664.0], [68.5, 2668.0], [68.6, 2674.0], [68.7, 2678.0], [68.8, 2682.0], [68.9, 2685.0], [69.0, 2689.0], [69.1, 2695.0], [69.2, 2699.0], [69.3, 2703.0], [69.4, 2707.0], [69.5, 2711.0], [69.6, 2715.0], [69.7, 2719.0], [69.8, 2724.0], [69.9, 2727.0], [70.0, 2731.0], [70.1, 2735.0], [70.2, 2740.0], [70.3, 2748.0], [70.4, 2754.0], [70.5, 2758.0], [70.6, 2766.0], [70.7, 2771.0], [70.8, 2776.0], [70.9, 2779.0], [71.0, 2786.0], [71.1, 2789.0], [71.2, 2792.0], [71.3, 2797.0], [71.4, 2802.0], [71.5, 2806.0], [71.6, 2812.0], [71.7, 2818.0], [71.8, 2822.0], [71.9, 2828.0], [72.0, 2832.0], [72.1, 2836.0], [72.2, 2842.0], [72.3, 2851.0], [72.4, 2856.0], [72.5, 2860.0], [72.6, 2866.0], [72.7, 2871.0], [72.8, 2876.0], [72.9, 2882.0], [73.0, 2890.0], [73.1, 2895.0], [73.2, 2901.0], [73.3, 2907.0], [73.4, 2912.0], [73.5, 2918.0], [73.6, 2922.0], [73.7, 2926.0], [73.8, 2932.0], [73.9, 2937.0], [74.0, 2941.0], [74.1, 2946.0], [74.2, 2951.0], [74.3, 2957.0], [74.4, 2964.0], [74.5, 2970.0], [74.6, 2974.0], [74.7, 2978.0], [74.8, 2984.0], [74.9, 2988.0], [75.0, 2995.0], [75.1, 2999.0], [75.2, 3004.0], [75.3, 3013.0], [75.4, 3018.0], [75.5, 3023.0], [75.6, 3030.0], [75.7, 3037.0], [75.8, 3044.0], [75.9, 3047.0], [76.0, 3052.0], [76.1, 3057.0], [76.2, 3065.0], [76.3, 3072.0], [76.4, 3076.0], [76.5, 3083.0], [76.6, 3087.0], [76.7, 3090.0], [76.8, 3096.0], [76.9, 3103.0], [77.0, 3110.0], [77.1, 3117.0], [77.2, 3121.0], [77.3, 3128.0], [77.4, 3134.0], [77.5, 3143.0], [77.6, 3147.0], [77.7, 3151.0], [77.8, 3160.0], [77.9, 3168.0], [78.0, 3175.0], [78.1, 3180.0], [78.2, 3189.0], [78.3, 3193.0], [78.4, 3198.0], [78.5, 3205.0], [78.6, 3211.0], [78.7, 3217.0], [78.8, 3223.0], [78.9, 3227.0], [79.0, 3234.0], [79.1, 3241.0], [79.2, 3246.0], [79.3, 3255.0], [79.4, 3261.0], [79.5, 3266.0], [79.6, 3276.0], [79.7, 3282.0], [79.8, 3290.0], [79.9, 3293.0], [80.0, 3299.0], [80.1, 3304.0], [80.2, 3312.0], [80.3, 3318.0], [80.4, 3323.0], [80.5, 3330.0], [80.6, 3337.0], [80.7, 3346.0], [80.8, 3355.0], [80.9, 3360.0], [81.0, 3363.0], [81.1, 3371.0], [81.2, 3378.0], [81.3, 3385.0], [81.4, 3391.0], [81.5, 3399.0], [81.6, 3406.0], [81.7, 3413.0], [81.8, 3418.0], [81.9, 3425.0], [82.0, 3431.0], [82.1, 3440.0], [82.2, 3449.0], [82.3, 3458.0], [82.4, 3465.0], [82.5, 3476.0], [82.6, 3484.0], [82.7, 3492.0], [82.8, 3499.0], [82.9, 3505.0], [83.0, 3512.0], [83.1, 3519.0], [83.2, 3525.0], [83.3, 3531.0], [83.4, 3538.0], [83.5, 3544.0], [83.6, 3552.0], [83.7, 3559.0], [83.8, 3566.0], [83.9, 3572.0], [84.0, 3578.0], [84.1, 3584.0], [84.2, 3594.0], [84.3, 3601.0], [84.4, 3606.0], [84.5, 3616.0], [84.6, 3621.0], [84.7, 3629.0], [84.8, 3636.0], [84.9, 3639.0], [85.0, 3645.0], [85.1, 3654.0], [85.2, 3665.0], [85.3, 3675.0], [85.4, 3682.0], [85.5, 3691.0], [85.6, 3699.0], [85.7, 3708.0], [85.8, 3714.0], [85.9, 3721.0], [86.0, 3733.0], [86.1, 3738.0], [86.2, 3746.0], [86.3, 3751.0], [86.4, 3760.0], [86.5, 3769.0], [86.6, 3776.0], [86.7, 3784.0], [86.8, 3798.0], [86.9, 3805.0], [87.0, 3818.0], [87.1, 3827.0], [87.2, 3833.0], [87.3, 3845.0], [87.4, 3856.0], [87.5, 3871.0], [87.6, 3881.0], [87.7, 3894.0], [87.8, 3903.0], [87.9, 3914.0], [88.0, 3922.0], [88.1, 3933.0], [88.2, 3943.0], [88.3, 3957.0], [88.4, 3971.0], [88.5, 3980.0], [88.6, 3997.0], [88.7, 4001.0], [88.8, 4014.0], [88.9, 4021.0], [89.0, 4037.0], [89.1, 4046.0], [89.2, 4057.0], [89.3, 4065.0], [89.4, 4078.0], [89.5, 4093.0], [89.6, 4103.0], [89.7, 4115.0], [89.8, 4129.0], [89.9, 4142.0], [90.0, 4150.0], [90.1, 4162.0], [90.2, 4178.0], [90.3, 4191.0], [90.4, 4202.0], [90.5, 4219.0], [90.6, 4229.0], [90.7, 4249.0], [90.8, 4258.0], [90.9, 4281.0], [91.0, 4292.0], [91.1, 4307.0], [91.2, 4321.0], [91.3, 4340.0], [91.4, 4357.0], [91.5, 4371.0], [91.6, 4383.0], [91.7, 4397.0], [91.8, 4419.0], [91.9, 4436.0], [92.0, 4455.0], [92.1, 4473.0], [92.2, 4493.0], [92.3, 4508.0], [92.4, 4519.0], [92.5, 4535.0], [92.6, 4559.0], [92.7, 4578.0], [92.8, 4599.0], [92.9, 4622.0], [93.0, 4636.0], [93.1, 4655.0], [93.2, 4676.0], [93.3, 4691.0], [93.4, 4708.0], [93.5, 4729.0], [93.6, 4738.0], [93.7, 4763.0], [93.8, 4783.0], [93.9, 4800.0], [94.0, 4823.0], [94.1, 4848.0], [94.2, 4870.0], [94.3, 4884.0], [94.4, 4909.0], [94.5, 4926.0], [94.6, 4947.0], [94.7, 4985.0], [94.8, 5005.0], [94.9, 5034.0], [95.0, 5062.0], [95.1, 5086.0], [95.2, 5112.0], [95.3, 5135.0], [95.4, 5164.0], [95.5, 5182.0], [95.6, 5207.0], [95.7, 5229.0], [95.8, 5269.0], [95.9, 5296.0], [96.0, 5319.0], [96.1, 5365.0], [96.2, 5399.0], [96.3, 5412.0], [96.4, 5443.0], [96.5, 5474.0], [96.6, 5518.0], [96.7, 5567.0], [96.8, 5618.0], [96.9, 5660.0], [97.0, 5698.0], [97.1, 5750.0], [97.2, 5786.0], [97.3, 5820.0], [97.4, 5849.0], [97.5, 5892.0], [97.6, 5967.0], [97.7, 6015.0], [97.8, 6059.0], [97.9, 6124.0], [98.0, 6236.0], [98.1, 6334.0], [98.2, 6383.0], [98.3, 6469.0], [98.4, 6570.0], [98.5, 6653.0], [98.6, 6710.0], [98.7, 6835.0], [98.8, 6928.0], [98.9, 7013.0], [99.0, 7179.0], [99.1, 7350.0], [99.2, 7536.0], [99.3, 7776.0], [99.4, 7938.0], [99.5, 8201.0], [99.6, 8613.0], [99.7, 9031.0], [99.8, 9516.0], [99.9, 10559.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 26.0], [0.1, 28.0], [0.2, 29.0], [0.3, 29.0], [0.4, 31.0], [0.5, 32.0], [0.6, 34.0], [0.7, 35.0], [0.8, 35.0], [0.9, 36.0], [1.0, 36.0], [1.1, 36.0], [1.2, 36.0], [1.3, 36.0], [1.4, 37.0], [1.5, 37.0], [1.6, 37.0], [1.7, 37.0], [1.8, 37.0], [1.9, 37.0], [2.0, 37.0], [2.1, 37.0], [2.2, 37.0], [2.3, 37.0], [2.4, 37.0], [2.5, 38.0], [2.6, 38.0], [2.7, 38.0], [2.8, 38.0], [2.9, 38.0], [3.0, 38.0], [3.1, 38.0], [3.2, 38.0], [3.3, 38.0], [3.4, 38.0], [3.5, 38.0], [3.6, 38.0], [3.7, 38.0], [3.8, 38.0], [3.9, 38.0], [4.0, 38.0], [4.1, 38.0], [4.2, 38.0], [4.3, 38.0], [4.4, 38.0], [4.5, 38.0], [4.6, 38.0], [4.7, 38.0], [4.8, 38.0], [4.9, 39.0], [5.0, 39.0], [5.1, 39.0], [5.2, 39.0], [5.3, 39.0], [5.4, 39.0], [5.5, 39.0], [5.6, 39.0], [5.7, 39.0], [5.8, 39.0], [5.9, 39.0], [6.0, 39.0], [6.1, 39.0], [6.2, 39.0], [6.3, 39.0], [6.4, 39.0], [6.5, 39.0], [6.6, 39.0], [6.7, 39.0], [6.8, 39.0], [6.9, 39.0], [7.0, 39.0], [7.1, 39.0], [7.2, 39.0], [7.3, 39.0], [7.4, 39.0], [7.5, 39.0], [7.6, 39.0], [7.7, 39.0], [7.8, 39.0], [7.9, 39.0], [8.0, 39.0], [8.1, 39.0], [8.2, 39.0], [8.3, 40.0], [8.4, 40.0], [8.5, 40.0], [8.6, 40.0], [8.7, 40.0], [8.8, 40.0], [8.9, 40.0], [9.0, 40.0], [9.1, 40.0], [9.2, 40.0], [9.3, 40.0], [9.4, 40.0], [9.5, 40.0], [9.6, 40.0], [9.7, 40.0], [9.8, 40.0], [9.9, 40.0], [10.0, 40.0], [10.1, 40.0], [10.2, 40.0], [10.3, 40.0], [10.4, 40.0], [10.5, 40.0], [10.6, 40.0], [10.7, 40.0], [10.8, 40.0], [10.9, 40.0], [11.0, 40.0], [11.1, 40.0], [11.2, 40.0], [11.3, 40.0], [11.4, 40.0], [11.5, 40.0], [11.6, 40.0], [11.7, 40.0], [11.8, 40.0], [11.9, 40.0], [12.0, 40.0], [12.1, 40.0], [12.2, 40.0], [12.3, 40.0], [12.4, 40.0], [12.5, 40.0], [12.6, 40.0], [12.7, 40.0], [12.8, 41.0], [12.9, 41.0], [13.0, 41.0], [13.1, 41.0], [13.2, 41.0], [13.3, 41.0], [13.4, 41.0], [13.5, 41.0], [13.6, 41.0], [13.7, 41.0], [13.8, 41.0], [13.9, 41.0], [14.0, 41.0], [14.1, 41.0], [14.2, 41.0], [14.3, 41.0], [14.4, 41.0], [14.5, 41.0], [14.6, 41.0], [14.7, 41.0], [14.8, 41.0], [14.9, 41.0], [15.0, 41.0], [15.1, 41.0], [15.2, 41.0], [15.3, 41.0], [15.4, 41.0], [15.5, 41.0], [15.6, 41.0], [15.7, 41.0], [15.8, 41.0], [15.9, 41.0], [16.0, 41.0], [16.1, 41.0], [16.2, 41.0], [16.3, 41.0], [16.4, 41.0], [16.5, 41.0], [16.6, 41.0], [16.7, 41.0], [16.8, 41.0], [16.9, 41.0], [17.0, 41.0], [17.1, 41.0], [17.2, 41.0], [17.3, 41.0], [17.4, 41.0], [17.5, 41.0], [17.6, 41.0], [17.7, 41.0], [17.8, 41.0], [17.9, 41.0], [18.0, 41.0], [18.1, 42.0], [18.2, 42.0], [18.3, 42.0], [18.4, 42.0], [18.5, 42.0], [18.6, 42.0], [18.7, 42.0], [18.8, 42.0], [18.9, 42.0], [19.0, 42.0], [19.1, 42.0], [19.2, 42.0], [19.3, 42.0], [19.4, 42.0], [19.5, 42.0], [19.6, 42.0], [19.7, 42.0], [19.8, 42.0], [19.9, 42.0], [20.0, 42.0], [20.1, 42.0], [20.2, 42.0], [20.3, 42.0], [20.4, 42.0], [20.5, 42.0], [20.6, 42.0], [20.7, 42.0], [20.8, 42.0], [20.9, 42.0], [21.0, 42.0], [21.1, 42.0], [21.2, 42.0], [21.3, 42.0], [21.4, 42.0], [21.5, 42.0], [21.6, 42.0], [21.7, 42.0], [21.8, 42.0], [21.9, 42.0], [22.0, 42.0], [22.1, 42.0], [22.2, 42.0], [22.3, 42.0], [22.4, 42.0], [22.5, 42.0], [22.6, 42.0], [22.7, 42.0], [22.8, 42.0], [22.9, 42.0], [23.0, 42.0], [23.1, 42.0], [23.2, 42.0], [23.3, 42.0], [23.4, 42.0], [23.5, 42.0], [23.6, 42.0], [23.7, 42.0], [23.8, 42.0], [23.9, 42.0], [24.0, 42.0], [24.1, 42.0], [24.2, 42.0], [24.3, 42.0], [24.4, 42.0], [24.5, 42.0], [24.6, 43.0], [24.7, 43.0], [24.8, 43.0], [24.9, 43.0], [25.0, 43.0], [25.1, 43.0], [25.2, 43.0], [25.3, 43.0], [25.4, 43.0], [25.5, 43.0], [25.6, 43.0], [25.7, 43.0], [25.8, 43.0], [25.9, 43.0], [26.0, 43.0], [26.1, 43.0], [26.2, 43.0], [26.3, 43.0], [26.4, 43.0], [26.5, 43.0], [26.6, 43.0], [26.7, 43.0], [26.8, 43.0], [26.9, 43.0], [27.0, 43.0], [27.1, 43.0], [27.2, 43.0], [27.3, 43.0], [27.4, 43.0], [27.5, 43.0], [27.6, 43.0], [27.7, 43.0], [27.8, 43.0], [27.9, 43.0], [28.0, 43.0], [28.1, 43.0], [28.2, 43.0], [28.3, 43.0], [28.4, 43.0], [28.5, 43.0], [28.6, 43.0], [28.7, 43.0], [28.8, 43.0], [28.9, 43.0], [29.0, 43.0], [29.1, 43.0], [29.2, 43.0], [29.3, 43.0], [29.4, 43.0], [29.5, 43.0], [29.6, 43.0], [29.7, 43.0], [29.8, 43.0], [29.9, 43.0], [30.0, 43.0], [30.1, 43.0], [30.2, 43.0], [30.3, 43.0], [30.4, 43.0], [30.5, 43.0], [30.6, 43.0], [30.7, 43.0], [30.8, 43.0], [30.9, 43.0], [31.0, 43.0], [31.1, 43.0], [31.2, 43.0], [31.3, 43.0], [31.4, 43.0], [31.5, 43.0], [31.6, 43.0], [31.7, 43.0], [31.8, 44.0], [31.9, 44.0], [32.0, 44.0], [32.1, 44.0], [32.2, 44.0], [32.3, 44.0], [32.4, 44.0], [32.5, 44.0], [32.6, 44.0], [32.7, 44.0], [32.8, 44.0], [32.9, 44.0], [33.0, 44.0], [33.1, 44.0], [33.2, 44.0], [33.3, 44.0], [33.4, 44.0], [33.5, 44.0], [33.6, 44.0], [33.7, 44.0], [33.8, 44.0], [33.9, 44.0], [34.0, 44.0], [34.1, 44.0], [34.2, 44.0], [34.3, 44.0], [34.4, 44.0], [34.5, 44.0], [34.6, 44.0], [34.7, 44.0], [34.8, 44.0], [34.9, 44.0], [35.0, 44.0], [35.1, 44.0], [35.2, 44.0], [35.3, 44.0], [35.4, 44.0], [35.5, 44.0], [35.6, 44.0], [35.7, 44.0], [35.8, 44.0], [35.9, 44.0], [36.0, 44.0], [36.1, 44.0], [36.2, 44.0], [36.3, 44.0], [36.4, 44.0], [36.5, 44.0], [36.6, 44.0], [36.7, 44.0], [36.8, 44.0], [36.9, 44.0], [37.0, 44.0], [37.1, 44.0], [37.2, 44.0], [37.3, 44.0], [37.4, 44.0], [37.5, 44.0], [37.6, 44.0], [37.7, 44.0], [37.8, 44.0], [37.9, 44.0], [38.0, 44.0], [38.1, 44.0], [38.2, 44.0], [38.3, 44.0], [38.4, 44.0], [38.5, 44.0], [38.6, 44.0], [38.7, 44.0], [38.8, 44.0], [38.9, 44.0], [39.0, 44.0], [39.1, 44.0], [39.2, 44.0], [39.3, 44.0], [39.4, 44.0], [39.5, 44.0], [39.6, 44.0], [39.7, 44.0], [39.8, 44.0], [39.9, 44.0], [40.0, 44.0], [40.1, 44.0], [40.2, 44.0], [40.3, 44.0], [40.4, 44.0], [40.5, 44.0], [40.6, 44.0], [40.7, 44.0], [40.8, 44.0], [40.9, 44.0], [41.0, 44.0], [41.1, 44.0], [41.2, 45.0], [41.3, 45.0], [41.4, 45.0], [41.5, 45.0], [41.6, 45.0], [41.7, 45.0], [41.8, 45.0], [41.9, 45.0], [42.0, 45.0], [42.1, 45.0], [42.2, 45.0], [42.3, 45.0], [42.4, 45.0], [42.5, 45.0], [42.6, 45.0], [42.7, 45.0], [42.8, 45.0], [42.9, 45.0], [43.0, 45.0], [43.1, 45.0], [43.2, 45.0], [43.3, 45.0], [43.4, 45.0], [43.5, 45.0], [43.6, 45.0], [43.7, 45.0], [43.8, 45.0], [43.9, 45.0], [44.0, 45.0], [44.1, 45.0], [44.2, 45.0], [44.3, 45.0], [44.4, 45.0], [44.5, 45.0], [44.6, 45.0], [44.7, 45.0], [44.8, 45.0], [44.9, 45.0], [45.0, 45.0], [45.1, 45.0], [45.2, 45.0], [45.3, 45.0], [45.4, 45.0], [45.5, 45.0], [45.6, 45.0], [45.7, 45.0], [45.8, 45.0], [45.9, 45.0], [46.0, 45.0], [46.1, 45.0], [46.2, 45.0], [46.3, 45.0], [46.4, 45.0], [46.5, 45.0], [46.6, 45.0], [46.7, 45.0], [46.8, 45.0], [46.9, 45.0], [47.0, 45.0], [47.1, 45.0], [47.2, 45.0], [47.3, 45.0], [47.4, 45.0], [47.5, 45.0], [47.6, 45.0], [47.7, 45.0], [47.8, 45.0], [47.9, 45.0], [48.0, 45.0], [48.1, 45.0], [48.2, 45.0], [48.3, 45.0], [48.4, 45.0], [48.5, 45.0], [48.6, 45.0], [48.7, 45.0], [48.8, 45.0], [48.9, 45.0], [49.0, 45.0], [49.1, 45.0], [49.2, 45.0], [49.3, 45.0], [49.4, 45.0], [49.5, 45.0], [49.6, 46.0], [49.7, 46.0], [49.8, 46.0], [49.9, 46.0], [50.0, 46.0], [50.1, 46.0], [50.2, 46.0], [50.3, 46.0], [50.4, 46.0], [50.5, 46.0], [50.6, 46.0], [50.7, 46.0], [50.8, 46.0], [50.9, 46.0], [51.0, 46.0], [51.1, 46.0], [51.2, 46.0], [51.3, 46.0], [51.4, 46.0], [51.5, 46.0], [51.6, 46.0], [51.7, 46.0], [51.8, 46.0], [51.9, 46.0], [52.0, 46.0], [52.1, 46.0], [52.2, 46.0], [52.3, 46.0], [52.4, 46.0], [52.5, 46.0], [52.6, 46.0], [52.7, 46.0], [52.8, 46.0], [52.9, 46.0], [53.0, 46.0], [53.1, 46.0], [53.2, 46.0], [53.3, 46.0], [53.4, 46.0], [53.5, 46.0], [53.6, 46.0], [53.7, 46.0], [53.8, 46.0], [53.9, 46.0], [54.0, 46.0], [54.1, 46.0], [54.2, 46.0], [54.3, 46.0], [54.4, 46.0], [54.5, 46.0], [54.6, 46.0], [54.7, 46.0], [54.8, 46.0], [54.9, 47.0], [55.0, 47.0], [55.1, 47.0], [55.2, 47.0], [55.3, 47.0], [55.4, 47.0], [55.5, 47.0], [55.6, 47.0], [55.7, 47.0], [55.8, 47.0], [55.9, 47.0], [56.0, 47.0], [56.1, 47.0], [56.2, 47.0], [56.3, 47.0], [56.4, 47.0], [56.5, 47.0], [56.6, 47.0], [56.7, 47.0], [56.8, 47.0], [56.9, 47.0], [57.0, 47.0], [57.1, 47.0], [57.2, 47.0], [57.3, 47.0], [57.4, 47.0], [57.5, 47.0], [57.6, 47.0], [57.7, 47.0], [57.8, 47.0], [57.9, 47.0], [58.0, 47.0], [58.1, 47.0], [58.2, 47.0], [58.3, 47.0], [58.4, 47.0], [58.5, 47.0], [58.6, 47.0], [58.7, 47.0], [58.8, 47.0], [58.9, 47.0], [59.0, 47.0], [59.1, 47.0], [59.2, 48.0], [59.3, 48.0], [59.4, 48.0], [59.5, 48.0], [59.6, 48.0], [59.7, 48.0], [59.8, 48.0], [59.9, 48.0], [60.0, 48.0], [60.1, 48.0], [60.2, 48.0], [60.3, 48.0], [60.4, 48.0], [60.5, 48.0], [60.6, 48.0], [60.7, 48.0], [60.8, 48.0], [60.9, 48.0], [61.0, 48.0], [61.1, 48.0], [61.2, 48.0], [61.3, 48.0], [61.4, 48.0], [61.5, 48.0], [61.6, 48.0], [61.7, 48.0], [61.8, 48.0], [61.9, 48.0], [62.0, 48.0], [62.1, 48.0], [62.2, 48.0], [62.3, 48.0], [62.4, 48.0], [62.5, 48.0], [62.6, 48.0], [62.7, 48.0], [62.8, 48.0], [62.9, 48.0], [63.0, 48.0], [63.1, 48.0], [63.2, 48.0], [63.3, 48.0], [63.4, 49.0], [63.5, 49.0], [63.6, 49.0], [63.7, 49.0], [63.8, 49.0], [63.9, 49.0], [64.0, 49.0], [64.1, 49.0], [64.2, 49.0], [64.3, 49.0], [64.4, 49.0], [64.5, 49.0], [64.6, 49.0], [64.7, 49.0], [64.8, 49.0], [64.9, 49.0], [65.0, 49.0], [65.1, 49.0], [65.2, 49.0], [65.3, 49.0], [65.4, 49.0], [65.5, 49.0], [65.6, 49.0], [65.7, 49.0], [65.8, 49.0], [65.9, 49.0], [66.0, 49.0], [66.1, 49.0], [66.2, 49.0], [66.3, 49.0], [66.4, 49.0], [66.5, 49.0], [66.6, 49.0], [66.7, 49.0], [66.8, 49.0], [66.9, 49.0], [67.0, 49.0], [67.1, 49.0], [67.2, 49.0], [67.3, 49.0], [67.4, 49.0], [67.5, 49.0], [67.6, 49.0], [67.7, 49.0], [67.8, 49.0], [67.9, 49.0], [68.0, 49.0], [68.1, 49.0], [68.2, 49.0], [68.3, 49.0], [68.4, 49.0], [68.5, 49.0], [68.6, 50.0], [68.7, 50.0], [68.8, 50.0], [68.9, 50.0], [69.0, 50.0], [69.1, 50.0], [69.2, 50.0], [69.3, 50.0], [69.4, 50.0], [69.5, 50.0], [69.6, 50.0], [69.7, 50.0], [69.8, 50.0], [69.9, 50.0], [70.0, 50.0], [70.1, 50.0], [70.2, 50.0], [70.3, 50.0], [70.4, 50.0], [70.5, 50.0], [70.6, 50.0], [70.7, 50.0], [70.8, 50.0], [70.9, 50.0], [71.0, 50.0], [71.1, 50.0], [71.2, 50.0], [71.3, 50.0], [71.4, 50.0], [71.5, 50.0], [71.6, 50.0], [71.7, 50.0], [71.8, 50.0], [71.9, 50.0], [72.0, 50.0], [72.1, 50.0], [72.2, 50.0], [72.3, 50.0], [72.4, 50.0], [72.5, 50.0], [72.6, 50.0], [72.7, 50.0], [72.8, 50.0], [72.9, 50.0], [73.0, 50.0], [73.1, 50.0], [73.2, 50.0], [73.3, 50.0], [73.4, 50.0], [73.5, 50.0], [73.6, 50.0], [73.7, 50.0], [73.8, 51.0], [73.9, 51.0], [74.0, 51.0], [74.1, 51.0], [74.2, 51.0], [74.3, 51.0], [74.4, 51.0], [74.5, 51.0], [74.6, 51.0], [74.7, 51.0], [74.8, 51.0], [74.9, 51.0], [75.0, 51.0], [75.1, 51.0], [75.2, 51.0], [75.3, 51.0], [75.4, 51.0], [75.5, 51.0], [75.6, 51.0], [75.7, 51.0], [75.8, 51.0], [75.9, 51.0], [76.0, 51.0], [76.1, 51.0], [76.2, 51.0], [76.3, 51.0], [76.4, 51.0], [76.5, 51.0], [76.6, 51.0], [76.7, 51.0], [76.8, 51.0], [76.9, 51.0], [77.0, 51.0], [77.1, 51.0], [77.2, 51.0], [77.3, 51.0], [77.4, 51.0], [77.5, 51.0], [77.6, 51.0], [77.7, 51.0], [77.8, 52.0], [77.9, 52.0], [78.0, 52.0], [78.1, 52.0], [78.2, 52.0], [78.3, 52.0], [78.4, 52.0], [78.5, 52.0], [78.6, 52.0], [78.7, 52.0], [78.8, 52.0], [78.9, 52.0], [79.0, 52.0], [79.1, 52.0], [79.2, 52.0], [79.3, 52.0], [79.4, 52.0], [79.5, 52.0], [79.6, 52.0], [79.7, 52.0], [79.8, 52.0], [79.9, 52.0], [80.0, 52.0], [80.1, 52.0], [80.2, 52.0], [80.3, 52.0], [80.4, 52.0], [80.5, 52.0], [80.6, 52.0], [80.7, 52.0], [80.8, 52.0], [80.9, 52.0], [81.0, 52.0], [81.1, 52.0], [81.2, 53.0], [81.3, 53.0], [81.4, 53.0], [81.5, 53.0], [81.6, 53.0], [81.7, 53.0], [81.8, 53.0], [81.9, 53.0], [82.0, 53.0], [82.1, 53.0], [82.2, 53.0], [82.3, 53.0], [82.4, 53.0], [82.5, 53.0], [82.6, 53.0], [82.7, 53.0], [82.8, 53.0], [82.9, 53.0], [83.0, 53.0], [83.1, 53.0], [83.2, 53.0], [83.3, 53.0], [83.4, 53.0], [83.5, 53.0], [83.6, 53.0], [83.7, 53.0], [83.8, 53.0], [83.9, 53.0], [84.0, 54.0], [84.1, 54.0], [84.2, 54.0], [84.3, 54.0], [84.4, 54.0], [84.5, 54.0], [84.6, 54.0], [84.7, 54.0], [84.8, 54.0], [84.9, 54.0], [85.0, 54.0], [85.1, 54.0], [85.2, 54.0], [85.3, 54.0], [85.4, 54.0], [85.5, 54.0], [85.6, 54.0], [85.7, 54.0], [85.8, 54.0], [85.9, 54.0], [86.0, 54.0], [86.1, 54.0], [86.2, 54.0], [86.3, 54.0], [86.4, 55.0], [86.5, 55.0], [86.6, 55.0], [86.7, 55.0], [86.8, 55.0], [86.9, 55.0], [87.0, 55.0], [87.1, 55.0], [87.2, 55.0], [87.3, 55.0], [87.4, 55.0], [87.5, 55.0], [87.6, 55.0], [87.7, 55.0], [87.8, 55.0], [87.9, 56.0], [88.0, 56.0], [88.1, 56.0], [88.2, 56.0], [88.3, 56.0], [88.4, 56.0], [88.5, 56.0], [88.6, 56.0], [88.7, 56.0], [88.8, 56.0], [88.9, 57.0], [89.0, 57.0], [89.1, 57.0], [89.2, 57.0], [89.3, 57.0], [89.4, 57.0], [89.5, 57.0], [89.6, 57.0], [89.7, 57.0], [89.8, 57.0], [89.9, 58.0], [90.0, 58.0], [90.1, 58.0], [90.2, 58.0], [90.3, 58.0], [90.4, 58.0], [90.5, 58.0], [90.6, 58.0], [90.7, 58.0], [90.8, 59.0], [90.9, 59.0], [91.0, 59.0], [91.1, 59.0], [91.2, 59.0], [91.3, 60.0], [91.4, 60.0], [91.5, 60.0], [91.6, 60.0], [91.7, 60.0], [91.8, 60.0], [91.9, 60.0], [92.0, 61.0], [92.1, 61.0], [92.2, 61.0], [92.3, 61.0], [92.4, 61.0], [92.5, 62.0], [92.6, 62.0], [92.7, 62.0], [92.8, 62.0], [92.9, 63.0], [93.0, 63.0], [93.1, 63.0], [93.2, 63.0], [93.3, 63.0], [93.4, 64.0], [93.5, 64.0], [93.6, 64.0], [93.7, 64.0], [93.8, 65.0], [93.9, 65.0], [94.0, 65.0], [94.1, 65.0], [94.2, 66.0], [94.3, 66.0], [94.4, 67.0], [94.5, 67.0], [94.6, 67.0], [94.7, 67.0], [94.8, 68.0], [94.9, 68.0], [95.0, 68.0], [95.1, 69.0], [95.2, 69.0], [95.3, 70.0], [95.4, 70.0], [95.5, 70.0], [95.6, 71.0], [95.7, 71.0], [95.8, 72.0], [95.9, 72.0], [96.0, 72.0], [96.1, 73.0], [96.2, 73.0], [96.3, 74.0], [96.4, 74.0], [96.5, 74.0], [96.6, 75.0], [96.7, 75.0], [96.8, 76.0], [96.9, 77.0], [97.0, 77.0], [97.1, 78.0], [97.2, 78.0], [97.3, 79.0], [97.4, 79.0], [97.5, 80.0], [97.6, 81.0], [97.7, 82.0], [97.8, 83.0], [97.9, 84.0], [98.0, 85.0], [98.1, 86.0], [98.2, 87.0], [98.3, 89.0], [98.4, 91.0], [98.5, 92.0], [98.6, 94.0], [98.7, 96.0], [98.8, 98.0], [98.9, 102.0], [99.0, 104.0], [99.1, 107.0], [99.2, 111.0], [99.3, 118.0], [99.4, 122.0], [99.5, 129.0], [99.6, 140.0], [99.7, 163.0], [99.8, 676.0], [99.9, 1373.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 15817.0, "series": [{"data": [[100.0, 9.0], [200.0, 23.0], [300.0, 34.0], [400.0, 121.0], [500.0, 211.0], [600.0, 398.0], [700.0, 394.0], [800.0, 512.0], [900.0, 495.0], [1000.0, 576.0], [1100.0, 598.0], [1200.0, 612.0], [1300.0, 669.0], [1400.0, 596.0], [1500.0, 585.0], [1600.0, 615.0], [1700.0, 586.0], [1800.0, 559.0], [1900.0, 485.0], [2000.0, 522.0], [2100.0, 450.0], [2200.0, 445.0], [2300.0, 454.0], [2400.0, 409.0], [2500.0, 373.0], [2600.0, 344.0], [2800.0, 290.0], [2700.0, 343.0], [2900.0, 310.0], [3000.0, 276.0], [3100.0, 254.0], [3200.0, 254.0], [3300.0, 240.0], [3400.0, 207.0], [3500.0, 235.0], [3700.0, 194.0], [3600.0, 213.0], [3800.0, 151.0], [3900.0, 146.0], [4000.0, 145.0], [4100.0, 130.0], [4200.0, 108.0], [4300.0, 104.0], [4400.0, 83.0], [4600.0, 87.0], [4500.0, 91.0], [4700.0, 87.0], [4800.0, 75.0], [4900.0, 66.0], [5000.0, 59.0], [5100.0, 71.0], [5300.0, 46.0], [5200.0, 54.0], [5400.0, 56.0], [5500.0, 33.0], [5600.0, 38.0], [5800.0, 45.0], [5700.0, 38.0], [5900.0, 23.0], [6000.0, 32.0], [6100.0, 16.0], [6300.0, 21.0], [6200.0, 18.0], [6500.0, 18.0], [6400.0, 20.0], [6600.0, 22.0], [6700.0, 14.0], [6900.0, 16.0], [6800.0, 16.0], [7000.0, 12.0], [7100.0, 11.0], [7400.0, 9.0], [7200.0, 11.0], [7300.0, 7.0], [7500.0, 8.0], [7600.0, 8.0], [7800.0, 11.0], [7700.0, 4.0], [7900.0, 4.0], [8000.0, 7.0], [8100.0, 8.0], [8300.0, 3.0], [8700.0, 4.0], [8600.0, 9.0], [8400.0, 5.0], [8500.0, 5.0], [8200.0, 1.0], [9200.0, 5.0], [8800.0, 3.0], [9000.0, 3.0], [9100.0, 2.0], [8900.0, 1.0], [9700.0, 1.0], [9400.0, 4.0], [9500.0, 3.0], [9300.0, 3.0], [9600.0, 1.0], [10000.0, 2.0], [9800.0, 2.0], [10100.0, 1.0], [10200.0, 2.0], [10600.0, 1.0], [10300.0, 2.0], [10500.0, 2.0], [10400.0, 1.0], [10900.0, 3.0], [10800.0, 1.0], [11100.0, 1.0], [11300.0, 3.0], [11600.0, 1.0], [12000.0, 2.0], [12900.0, 1.0], [13500.0, 1.0], [14400.0, 1.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[2100.0, 2.0], [0.0, 15817.0], [2400.0, 1.0], [600.0, 2.0], [2500.0, 2.0], [700.0, 2.0], [800.0, 2.0], [200.0, 3.0], [900.0, 5.0], [1000.0, 3.0], [1100.0, 2.0], [300.0, 3.0], [1300.0, 2.0], [1500.0, 2.0], [1600.0, 1.0], [100.0, 144.0], [1700.0, 2.0], [1900.0, 3.0], [2000.0, 2.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 14400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5079.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 16156.0, "series": [{"data": [[0.0, 16156.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 5079.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 10765.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 18.100819672131134, "minX": 1.74718974E12, "maxY": 32.0, "series": [{"data": [[1.74719058E12, 32.0], [1.74719088E12, 31.21619766643789], [1.74718992E12, 32.0], [1.74719094E12, 18.100819672131134], [1.74718998E12, 32.0], [1.74719028E12, 32.0], [1.74719034E12, 32.0], [1.74719064E12, 32.0], [1.7471907E12, 32.0], [1.74718974E12, 31.96527777777777], [1.74719004E12, 32.0], [1.7471901E12, 32.0], [1.7471904E12, 32.0], [1.74719046E12, 32.0], [1.7471898E12, 32.0], [1.74719076E12, 32.0], [1.74719082E12, 32.0], [1.74718986E12, 32.0], [1.74719016E12, 32.0], [1.74719022E12, 32.0], [1.74719052E12, 32.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74719094E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 28.363636363636363, "minX": 1.0, "maxY": 2492.153846153847, "series": [{"data": [[32.0, 2351.9131650795607], [2.0, 768.75], [3.0, 431.0909090909091], [4.0, 451.5882352941177], [5.0, 498.8571428571429], [6.0, 608.2], [7.0, 590.6666666666666], [8.0, 653.8124999999999], [9.0, 698.1111111111111], [10.0, 813.4615384615385], [11.0, 918.7272727272727], [12.0, 758.7272727272727], [14.0, 1033.2083333333333], [15.0, 1519.0], [16.0, 1445.0], [1.0, 375.0909090909091], [17.0, 1589.857142857143], [18.0, 1503.857142857143], [19.0, 1537.423076923077], [20.0, 1508.717948717949], [21.0, 1601.6000000000001], [22.0, 1833.5806451612905], [23.0, 1857.432432432432], [24.0, 1815.4499999999996], [25.0, 2023.5416666666663], [26.0, 2399.1481481481483], [27.0, 2492.153846153847], [28.0, 2198.0], [29.0, 2433.925925925925], [30.0, 2313.921348314607], [31.0, 2464.2226890756306]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[31.43362499999997, 2321.6769374999803]], "isOverall": false, "label": "Create CSR-Aggregated", "isController": false}, {"data": [[32.0, 51.60769691723838], [2.0, 29.5], [3.0, 28.363636363636363], [4.0, 30.11764705882353], [5.0, 33.99999999999999], [6.0, 35.2], [7.0, 32.714285714285715], [8.0, 33.73333333333332], [9.0, 37.6], [10.0, 35.833333333333336], [11.0, 41.217391304347814], [12.0, 39.49999999999999], [13.0, 44.0], [14.0, 47.49999999999999], [15.0, 53.5], [16.0, 47.641025641025635], [1.0, 30.090909090909093], [17.0, 44.666666666666664], [18.0, 51.52380952380953], [19.0, 46.88461538461539], [20.0, 52.53846153846154], [21.0, 63.63636363636365], [22.0, 50.90163934426231], [23.0, 49.226666666666674], [24.0, 55.94594594594595], [25.0, 46.14583333333334], [26.0, 49.34482758620689], [27.0, 52.433962264150935], [28.0, 44.4], [29.0, 49.11111111111111], [30.0, 50.022471910112365], [31.0, 49.95397489539752]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}, {"data": [[31.43393749999999, 51.36731250000026]], "isOverall": false, "label": "HTTP Request - enroll-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 32.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 8550.7, "minX": 1.74718974E12, "maxY": 134316.68333333332, "series": [{"data": [[1.74719058E12, 129729.71666666666], [1.74719088E12, 107449.3], [1.74718992E12, 104588.41666666667], [1.74719094E12, 89840.05], [1.74718998E12, 109403.11666666667], [1.74719028E12, 120030.53333333334], [1.74719034E12, 102798.98333333334], [1.74719064E12, 130636.13333333333], [1.7471907E12, 119780.43333333333], [1.74718974E12, 42416.26666666667], [1.74719004E12, 129034.73333333334], [1.7471901E12, 128846.1], [1.7471904E12, 106480.08333333333], [1.74719046E12, 106943.73333333334], [1.7471898E12, 134316.68333333332], [1.74719076E12, 108942.03333333334], [1.74719082E12, 101980.45], [1.74718986E12, 108102.16666666667], [1.74719016E12, 125774.6], [1.74719022E12, 131517.56666666668], [1.74719052E12, 117821.8]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74719058E12, 26155.583333333332], [1.74719088E12, 21672.966666666667], [1.74718992E12, 21079.333333333332], [1.74719094E12, 18110.766666666666], [1.74718998E12, 22056.683333333334], [1.74719028E12, 24195.983333333334], [1.74719034E12, 20722.233333333334], [1.74719064E12, 26334.583333333332], [1.7471907E12, 24138.05], [1.74718974E12, 8550.7], [1.74719004E12, 26006.5], [1.7471901E12, 25977.283333333333], [1.7471904E12, 21463.65], [1.74719046E12, 21553.3], [1.7471898E12, 27076.0], [1.74719076E12, 21969.033333333333], [1.74719082E12, 20545.333333333332], [1.74718986E12, 21791.933333333334], [1.74719016E12, 25354.233333333334], [1.74719022E12, 26511.383333333335], [1.74719052E12, 23751.133333333335]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74719094E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 45.208286674132125, "minX": 1.74718974E12, "maxY": 2724.125179856116, "series": [{"data": [[1.74719058E12, 2113.3545454545447], [1.74719088E12, 2531.140302613482], [1.74718992E12, 2681.898734177216], [1.74719094E12, 1511.9049180327881], [1.74718998E12, 2531.9959568733125], [1.74719028E12, 2297.077300613495], [1.74719034E12, 2700.7707736389684], [1.74719064E12, 2124.4069898534412], [1.7471907E12, 2305.623312883438], [1.74718974E12, 1883.8576388888878], [1.74719004E12, 2154.413911060433], [1.7471901E12, 2142.5858123569797], [1.7471904E12, 2581.3042876901804], [1.74719046E12, 2623.8858321870725], [1.7471898E12, 2065.6754385964914], [1.74719076E12, 2534.0189701896993], [1.74719082E12, 2724.125179856116], [1.74718986E12, 2513.258855585829], [1.74719016E12, 2206.476580796253], [1.74719022E12, 2104.103023516239], [1.74719052E12, 2355.853750000003]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74719058E12, 46.54710556186149], [1.74719088E12, 50.27534246575341], [1.74718992E12, 51.85070422535208], [1.74719094E12, 46.29836065573768], [1.74718998E12, 50.3176312247645], [1.74719028E12, 46.09325153374235], [1.74719034E12, 51.2363896848137], [1.74719064E12, 47.35400225479144], [1.7471907E12, 46.61623616236162], [1.74718974E12, 213.77430555555526], [1.74719004E12, 46.18949771689499], [1.7471901E12, 46.06400000000006], [1.7471904E12, 51.12448132780081], [1.74719046E12, 50.640495867768585], [1.7471898E12, 47.27412280701748], [1.74719076E12, 51.95810810810811], [1.74719082E12, 50.48554913294796], [1.74718986E12, 50.88283378746594], [1.74719016E12, 46.775175644028096], [1.74719022E12, 45.208286674132125], [1.74719052E12, 47.83500000000002]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74719094E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74718974E12, "maxY": 213.74652777777774, "series": [{"data": [[1.74719058E12, 0.0], [1.74719088E12, 0.0], [1.74718992E12, 0.0], [1.74719094E12, 0.0], [1.74718998E12, 0.0], [1.74719028E12, 0.0], [1.74719034E12, 0.0], [1.74719064E12, 0.0], [1.7471907E12, 0.0], [1.74718974E12, 0.0], [1.74719004E12, 0.0], [1.7471901E12, 0.0], [1.7471904E12, 0.0], [1.74719046E12, 0.0], [1.7471898E12, 0.0], [1.74719076E12, 0.0], [1.74719082E12, 0.0], [1.74718986E12, 0.0], [1.74719016E12, 0.0], [1.74719022E12, 0.0], [1.74719052E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74719058E12, 46.54370034052216], [1.74719088E12, 50.26986301369864], [1.74718992E12, 51.83943661971828], [1.74719094E12, 46.29508196721318], [1.74718998E12, 50.30955585464327], [1.74719028E12, 46.06871165644171], [1.74719034E12, 51.230659025787965], [1.74719064E12, 47.343855693348345], [1.7471907E12, 46.61254612546122], [1.74718974E12, 213.74652777777774], [1.74719004E12, 46.18150684931503], [1.7471901E12, 46.05257142857141], [1.7471904E12, 51.11479944674966], [1.74719046E12, 50.63223140495866], [1.7471898E12, 47.254385964912245], [1.74719076E12, 51.94594594594593], [1.74719082E12, 50.48121387283238], [1.74718986E12, 50.87329700272476], [1.74719016E12, 46.7669789227166], [1.74719022E12, 45.20268756998873], [1.74719052E12, 47.82625000000001]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74719094E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74718974E12, "maxY": 48.61458333333335, "series": [{"data": [[1.74719058E12, 0.0], [1.74719088E12, 0.0], [1.74718992E12, 0.0], [1.74719094E12, 0.0], [1.74718998E12, 0.0], [1.74719028E12, 0.0], [1.74719034E12, 0.0], [1.74719064E12, 0.0], [1.7471907E12, 0.0], [1.74718974E12, 0.0], [1.74719004E12, 0.0], [1.7471901E12, 0.0], [1.7471904E12, 0.0], [1.74719046E12, 0.0], [1.7471898E12, 0.0], [1.74719076E12, 0.0], [1.74719082E12, 0.0], [1.74718986E12, 0.0], [1.74719016E12, 0.0], [1.74719022E12, 0.0], [1.74719052E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74719058E12, 0.10896708286038603], [1.74719088E12, 0.11780821917808235], [1.74718992E12, 0.1830985915492958], [1.74719094E12, 0.1311475409836065], [1.74718998E12, 0.18977119784656793], [1.74719028E12, 0.14478527607361966], [1.74719034E12, 0.18624641833810893], [1.74719064E12, 0.09357384441939118], [1.7471907E12, 0.13284132841328433], [1.74718974E12, 48.61458333333335], [1.74719004E12, 0.13013698630136986], [1.7471901E12, 0.1817142857142858], [1.7471904E12, 0.1632088520055325], [1.74719046E12, 0.15289256198347118], [1.7471898E12, 0.21600877192982454], [1.74719076E12, 0.13378378378378383], [1.74719082E12, 0.14884393063583815], [1.74718986E12, 0.22752043596730245], [1.74719016E12, 0.13817330210772838], [1.74719022E12, 0.10750279955207163], [1.74719052E12, 0.11125000000000002]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74719094E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 26.0, "minX": 1.74718974E12, "maxY": 14498.0, "series": [{"data": [[1.74719058E12, 8139.0], [1.74719088E12, 8185.0], [1.74718992E12, 12011.0], [1.74719094E12, 9389.0], [1.74718998E12, 11397.0], [1.74719028E12, 9331.0], [1.74719034E12, 11614.0], [1.74719064E12, 9307.0], [1.7471907E12, 9819.0], [1.74718974E12, 6510.0], [1.74719004E12, 8745.0], [1.7471901E12, 9116.0], [1.7471904E12, 11398.0], [1.74719046E12, 12091.0], [1.7471898E12, 9255.0], [1.74719076E12, 9516.0], [1.74719082E12, 14498.0], [1.74718986E12, 13574.0], [1.74719016E12, 10484.0], [1.74719022E12, 7499.0], [1.74719052E12, 10543.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.74719058E12, 2960.6], [1.74719088E12, 3595.400000000001], [1.74718992E12, 3833.6], [1.74719094E12, 2054.9], [1.74718998E12, 3548.600000000001], [1.74719028E12, 3201.9], [1.74719034E12, 3713.6], [1.74719064E12, 2994.0], [1.7471907E12, 3280.9000000000015], [1.74718974E12, 2643.0], [1.74719004E12, 3146.8], [1.7471901E12, 3024.0], [1.7471904E12, 3665.1999999999994], [1.74719046E12, 3784.4000000000015], [1.7471898E12, 2937.0], [1.74719076E12, 3679.100000000004], [1.74719082E12, 3883.000000000001], [1.74718986E12, 3603.1000000000013], [1.74719016E12, 3097.1000000000013], [1.74719022E12, 2970.6], [1.74719052E12, 3361.3000000000006]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.74719058E12, 5387.639999999997], [1.74719088E12, 6697.100000000022], [1.74718992E12, 7025.82], [1.74719094E12, 5080.869999999994], [1.74718998E12, 6887.2200000000375], [1.74719028E12, 5900.340000000005], [1.74719034E12, 7430.449999999997], [1.74719064E12, 5275.5], [1.7471907E12, 6211.060000000003], [1.74718974E12, 4294.650000000005], [1.74719004E12, 5357.1600000000035], [1.7471901E12, 5412.5], [1.7471904E12, 6792.859999999999], [1.74719046E12, 7272.420000000005], [1.7471898E12, 5101.25], [1.74719076E12, 6725.960000000003], [1.74719082E12, 8041.959999999988], [1.74718986E12, 7746.849999999977], [1.74719016E12, 6026.690000000021], [1.74719022E12, 5208.819999999998], [1.74719052E12, 6196.090000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.74719058E12, 3710.899999999996], [1.74719088E12, 4628.999999999995], [1.74718992E12, 4933.9999999999945], [1.74719094E12, 2884.55], [1.74718998E12, 4481.100000000001], [1.74719028E12, 4121.199999999997], [1.74719034E12, 4818.649999999999], [1.74719064E12, 3734.25], [1.7471907E12, 4021.2], [1.74718974E12, 3304.5499999999997], [1.74719004E12, 3769.7], [1.7471901E12, 3816.0], [1.7471904E12, 4551.249999999994], [1.74719046E12, 4701.7], [1.7471898E12, 3625.75], [1.74719076E12, 4706.849999999997], [1.74719082E12, 4912.199999999999], [1.74718986E12, 4862.55], [1.74719016E12, 3739.1], [1.74719022E12, 3742.899999999999], [1.74719052E12, 4321.649999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.74719058E12, 36.0], [1.74719088E12, 36.0], [1.74718992E12, 36.0], [1.74719094E12, 26.0], [1.74718998E12, 33.0], [1.74719028E12, 32.0], [1.74719034E12, 32.0], [1.74719064E12, 35.0], [1.7471907E12, 35.0], [1.74718974E12, 37.0], [1.74719004E12, 37.0], [1.7471901E12, 36.0], [1.7471904E12, 32.0], [1.74719046E12, 36.0], [1.7471898E12, 35.0], [1.74719076E12, 35.0], [1.74719082E12, 35.0], [1.74718986E12, 37.0], [1.74719016E12, 36.0], [1.74719022E12, 36.0], [1.74719052E12, 35.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.74719058E12, 163.0], [1.74719088E12, 122.0], [1.74718992E12, 406.0], [1.74719094E12, 135.5], [1.74718998E12, 155.0], [1.74719028E12, 319.5], [1.74719034E12, 272.5], [1.74719064E12, 275.0], [1.7471907E12, 342.0], [1.74718974E12, 846.5], [1.74719004E12, 334.0], [1.7471901E12, 118.0], [1.7471904E12, 266.5], [1.74719046E12, 401.0], [1.7471898E12, 272.0], [1.74719076E12, 149.0], [1.74719082E12, 415.0], [1.74718986E12, 208.5], [1.74719016E12, 299.0], [1.74719022E12, 250.5], [1.74719052E12, 249.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74719094E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 31.5, "minX": 2.0, "maxY": 918.0, "series": [{"data": [[33.0, 595.0], [32.0, 129.5], [2.0, 249.5], [34.0, 420.0], [35.0, 525.0], [36.0, 478.0], [37.0, 114.0], [39.0, 155.0], [38.0, 104.0], [41.0, 528.0], [40.0, 521.5], [42.0, 584.0], [43.0, 601.0], [44.0, 306.5], [47.0, 382.0], [3.0, 386.0], [4.0, 355.5], [6.0, 31.5], [10.0, 727.0], [11.0, 48.0], [12.0, 230.0], [13.0, 918.0], [14.0, 65.5], [15.0, 760.0], [16.0, 364.5], [17.0, 71.0], [18.0, 329.5], [19.0, 80.0], [20.0, 212.5], [21.0, 418.0], [22.0, 508.0], [23.0, 87.0], [24.0, 107.5], [25.0, 415.0], [26.0, 449.0], [27.0, 95.0], [28.0, 475.5], [29.0, 130.0], [30.0, 392.0], [31.0, 100.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 47.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 2.0, "maxY": 39.0, "series": [{"data": [[33.0, 37.0], [32.0, 32.0], [2.0, 17.0], [34.0, 0.0], [35.0, 0.0], [36.0, 0.0], [37.0, 38.0], [39.0, 35.0], [38.0, 37.5], [41.0, 0.0], [40.0, 0.0], [42.0, 0.0], [43.0, 0.0], [44.0, 18.0], [47.0, 19.0], [3.0, 0.0], [4.0, 0.0], [6.0, 28.0], [10.0, 23.0], [11.0, 39.0], [12.0, 0.0], [13.0, 0.0], [14.0, 36.5], [15.0, 0.0], [16.0, 0.0], [17.0, 35.0], [18.0, 0.0], [19.0, 38.0], [20.0, 0.0], [21.0, 0.0], [22.0, 0.0], [23.0, 32.0], [24.0, 32.0], [25.0, 0.0], [26.0, 0.0], [27.0, 36.0], [28.0, 0.0], [29.0, 36.0], [30.0, 0.0], [31.0, 36.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 47.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 10.133333333333333, "minX": 1.74718974E12, "maxY": 30.4, "series": [{"data": [[1.74719058E12, 29.35], [1.74719088E12, 24.2], [1.74718992E12, 23.683333333333334], [1.74719094E12, 19.883333333333333], [1.74718998E12, 24.75], [1.74719028E12, 27.166666666666668], [1.74719034E12, 23.266666666666666], [1.74719064E12, 29.566666666666666], [1.7471907E12, 27.133333333333333], [1.74718974E12, 10.133333333333333], [1.74719004E12, 29.216666666666665], [1.7471901E12, 29.15], [1.7471904E12, 24.1], [1.74719046E12, 24.216666666666665], [1.7471898E12, 30.4], [1.74719076E12, 24.633333333333333], [1.74719082E12, 23.116666666666667], [1.74718986E12, 24.466666666666665], [1.74719016E12, 28.466666666666665], [1.74719022E12, 29.766666666666666], [1.74719052E12, 26.666666666666668]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74719094E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 4.8, "minX": 1.74718974E12, "maxY": 15.2, "series": [{"data": [[1.74719058E12, 14.666666666666666], [1.74719088E12, 12.116666666666667], [1.74718992E12, 11.85], [1.74719094E12, 10.166666666666666], [1.74718998E12, 12.366666666666667], [1.74719028E12, 13.583333333333334], [1.74719034E12, 11.633333333333333], [1.74719064E12, 14.783333333333333], [1.7471907E12, 13.583333333333334], [1.74718974E12, 4.8], [1.74719004E12, 14.616666666666667], [1.7471901E12, 14.566666666666666], [1.7471904E12, 12.05], [1.74719046E12, 12.116666666666667], [1.7471898E12, 15.2], [1.74719076E12, 12.3], [1.74719082E12, 11.583333333333334], [1.74718986E12, 12.233333333333333], [1.74719016E12, 14.233333333333333], [1.74719022E12, 14.883333333333333], [1.74719052E12, 13.333333333333334]], "isOverall": false, "label": "0", "isController": false}, {"data": [[1.74719058E12, 14.683333333333334], [1.74719088E12, 12.166666666666666], [1.74718992E12, 11.833333333333334], [1.74719094E12, 10.166666666666666], [1.74718998E12, 12.383333333333333], [1.74719028E12, 13.583333333333334], [1.74719034E12, 11.633333333333333], [1.74719064E12, 14.783333333333333], [1.7471907E12, 13.55], [1.74718974E12, 4.8], [1.74719004E12, 14.6], [1.7471901E12, 14.583333333333334], [1.7471904E12, 12.05], [1.74719046E12, 12.1], [1.7471898E12, 15.2], [1.74719076E12, 12.333333333333334], [1.74719082E12, 11.533333333333333], [1.74718986E12, 12.233333333333333], [1.74719016E12, 14.233333333333333], [1.74719022E12, 14.883333333333333], [1.74719052E12, 13.333333333333334]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74719094E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 4.8, "minX": 1.74718974E12, "maxY": 15.2, "series": [{"data": [[1.74719058E12, 14.683333333333334], [1.74719088E12, 12.166666666666666], [1.74718992E12, 11.833333333333334], [1.74719094E12, 10.166666666666666], [1.74718998E12, 12.383333333333333], [1.74719028E12, 13.583333333333334], [1.74719034E12, 11.633333333333333], [1.74719064E12, 14.783333333333333], [1.7471907E12, 13.55], [1.74718974E12, 4.8], [1.74719004E12, 14.6], [1.7471901E12, 14.583333333333334], [1.7471904E12, 12.05], [1.74719046E12, 12.1], [1.7471898E12, 15.2], [1.74719076E12, 12.333333333333334], [1.74719082E12, 11.533333333333333], [1.74718986E12, 12.233333333333333], [1.74719016E12, 14.233333333333333], [1.74719022E12, 14.883333333333333], [1.74719052E12, 13.333333333333334]], "isOverall": false, "label": "HTTP Request - enroll-success", "isController": false}, {"data": [[1.74719058E12, 14.666666666666666], [1.74719088E12, 12.116666666666667], [1.74718992E12, 11.85], [1.74719094E12, 10.166666666666666], [1.74718998E12, 12.366666666666667], [1.74719028E12, 13.583333333333334], [1.74719034E12, 11.633333333333333], [1.74719064E12, 14.783333333333333], [1.7471907E12, 13.583333333333334], [1.74718974E12, 4.8], [1.74719004E12, 14.616666666666667], [1.7471901E12, 14.566666666666666], [1.7471904E12, 12.05], [1.74719046E12, 12.116666666666667], [1.7471898E12, 15.2], [1.74719076E12, 12.3], [1.74719082E12, 11.583333333333334], [1.74718986E12, 12.233333333333333], [1.74719016E12, 14.233333333333333], [1.74719022E12, 14.883333333333333], [1.74719052E12, 13.333333333333334]], "isOverall": false, "label": "Create CSR-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74719094E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 9.6, "minX": 1.74718974E12, "maxY": 30.4, "series": [{"data": [[1.74719058E12, 29.35], [1.74719088E12, 24.283333333333335], [1.74718992E12, 23.683333333333334], [1.74719094E12, 20.333333333333332], [1.74718998E12, 24.75], [1.74719028E12, 27.166666666666668], [1.74719034E12, 23.266666666666666], [1.74719064E12, 29.566666666666666], [1.7471907E12, 27.133333333333333], [1.74718974E12, 9.6], [1.74719004E12, 29.216666666666665], [1.7471901E12, 29.15], [1.7471904E12, 24.1], [1.74719046E12, 24.216666666666665], [1.7471898E12, 30.4], [1.74719076E12, 24.633333333333333], [1.74719082E12, 23.116666666666667], [1.74718986E12, 24.466666666666665], [1.74719016E12, 28.466666666666665], [1.74719022E12, 29.766666666666666], [1.74719052E12, 26.666666666666668]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74719094E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

