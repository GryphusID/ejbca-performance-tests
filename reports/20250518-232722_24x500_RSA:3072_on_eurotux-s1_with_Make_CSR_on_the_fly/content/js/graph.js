/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 27.0, "minX": 0.0, "maxY": 9312.0, "series": [{"data": [[0.0, 183.0], [0.1, 272.0], [0.2, 342.0], [0.3, 362.0], [0.4, 379.0], [0.5, 395.0], [0.6, 404.0], [0.7, 416.0], [0.8, 423.0], [0.9, 435.0], [1.0, 443.0], [1.1, 451.0], [1.2, 455.0], [1.3, 458.0], [1.4, 462.0], [1.5, 467.0], [1.6, 472.0], [1.7, 477.0], [1.8, 482.0], [1.9, 489.0], [2.0, 492.0], [2.1, 495.0], [2.2, 498.0], [2.3, 503.0], [2.4, 506.0], [2.5, 511.0], [2.6, 515.0], [2.7, 521.0], [2.8, 524.0], [2.9, 527.0], [3.0, 531.0], [3.1, 536.0], [3.2, 540.0], [3.3, 544.0], [3.4, 547.0], [3.5, 550.0], [3.6, 554.0], [3.7, 556.0], [3.8, 559.0], [3.9, 561.0], [4.0, 564.0], [4.1, 567.0], [4.2, 570.0], [4.3, 572.0], [4.4, 576.0], [4.5, 580.0], [4.6, 584.0], [4.7, 586.0], [4.8, 591.0], [4.9, 594.0], [5.0, 598.0], [5.1, 601.0], [5.2, 604.0], [5.3, 606.0], [5.4, 609.0], [5.5, 614.0], [5.6, 616.0], [5.7, 619.0], [5.8, 620.0], [5.9, 623.0], [6.0, 626.0], [6.1, 628.0], [6.2, 631.0], [6.3, 633.0], [6.4, 637.0], [6.5, 640.0], [6.6, 642.0], [6.7, 644.0], [6.8, 646.0], [6.9, 649.0], [7.0, 652.0], [7.1, 654.0], [7.2, 655.0], [7.3, 660.0], [7.4, 663.0], [7.5, 666.0], [7.6, 668.0], [7.7, 671.0], [7.8, 673.0], [7.9, 675.0], [8.0, 677.0], [8.1, 679.0], [8.2, 681.0], [8.3, 683.0], [8.4, 685.0], [8.5, 688.0], [8.6, 690.0], [8.7, 692.0], [8.8, 695.0], [8.9, 696.0], [9.0, 698.0], [9.1, 700.0], [9.2, 702.0], [9.3, 704.0], [9.4, 707.0], [9.5, 710.0], [9.6, 712.0], [9.7, 714.0], [9.8, 715.0], [9.9, 716.0], [10.0, 718.0], [10.1, 720.0], [10.2, 722.0], [10.3, 723.0], [10.4, 726.0], [10.5, 727.0], [10.6, 728.0], [10.7, 730.0], [10.8, 733.0], [10.9, 735.0], [11.0, 737.0], [11.1, 739.0], [11.2, 741.0], [11.3, 743.0], [11.4, 745.0], [11.5, 747.0], [11.6, 748.0], [11.7, 750.0], [11.8, 751.0], [11.9, 754.0], [12.0, 756.0], [12.1, 758.0], [12.2, 760.0], [12.3, 762.0], [12.4, 764.0], [12.5, 765.0], [12.6, 768.0], [12.7, 770.0], [12.8, 771.0], [12.9, 772.0], [13.0, 774.0], [13.1, 776.0], [13.2, 776.0], [13.3, 778.0], [13.4, 780.0], [13.5, 781.0], [13.6, 783.0], [13.7, 784.0], [13.8, 786.0], [13.9, 788.0], [14.0, 789.0], [14.1, 792.0], [14.2, 794.0], [14.3, 795.0], [14.4, 798.0], [14.5, 799.0], [14.6, 801.0], [14.7, 802.0], [14.8, 804.0], [14.9, 805.0], [15.0, 806.0], [15.1, 809.0], [15.2, 811.0], [15.3, 813.0], [15.4, 814.0], [15.5, 816.0], [15.6, 818.0], [15.7, 820.0], [15.8, 821.0], [15.9, 823.0], [16.0, 825.0], [16.1, 827.0], [16.2, 828.0], [16.3, 830.0], [16.4, 832.0], [16.5, 834.0], [16.6, 836.0], [16.7, 838.0], [16.8, 839.0], [16.9, 841.0], [17.0, 842.0], [17.1, 843.0], [17.2, 845.0], [17.3, 846.0], [17.4, 848.0], [17.5, 851.0], [17.6, 853.0], [17.7, 855.0], [17.8, 856.0], [17.9, 857.0], [18.0, 859.0], [18.1, 861.0], [18.2, 863.0], [18.3, 865.0], [18.4, 866.0], [18.5, 868.0], [18.6, 869.0], [18.7, 871.0], [18.8, 873.0], [18.9, 875.0], [19.0, 877.0], [19.1, 878.0], [19.2, 880.0], [19.3, 882.0], [19.4, 884.0], [19.5, 886.0], [19.6, 887.0], [19.7, 889.0], [19.8, 890.0], [19.9, 891.0], [20.0, 893.0], [20.1, 895.0], [20.2, 896.0], [20.3, 898.0], [20.4, 899.0], [20.5, 901.0], [20.6, 902.0], [20.7, 903.0], [20.8, 905.0], [20.9, 907.0], [21.0, 909.0], [21.1, 911.0], [21.2, 912.0], [21.3, 914.0], [21.4, 916.0], [21.5, 917.0], [21.6, 919.0], [21.7, 920.0], [21.8, 922.0], [21.9, 924.0], [22.0, 926.0], [22.1, 927.0], [22.2, 929.0], [22.3, 930.0], [22.4, 932.0], [22.5, 933.0], [22.6, 935.0], [22.7, 936.0], [22.8, 938.0], [22.9, 940.0], [23.0, 941.0], [23.1, 942.0], [23.2, 944.0], [23.3, 945.0], [23.4, 947.0], [23.5, 949.0], [23.6, 950.0], [23.7, 952.0], [23.8, 954.0], [23.9, 956.0], [24.0, 958.0], [24.1, 960.0], [24.2, 960.0], [24.3, 962.0], [24.4, 965.0], [24.5, 967.0], [24.6, 968.0], [24.7, 970.0], [24.8, 973.0], [24.9, 974.0], [25.0, 977.0], [25.1, 978.0], [25.2, 979.0], [25.3, 980.0], [25.4, 982.0], [25.5, 983.0], [25.6, 985.0], [25.7, 987.0], [25.8, 989.0], [25.9, 991.0], [26.0, 993.0], [26.1, 994.0], [26.2, 995.0], [26.3, 997.0], [26.4, 998.0], [26.5, 1000.0], [26.6, 1002.0], [26.7, 1004.0], [26.8, 1005.0], [26.9, 1007.0], [27.0, 1009.0], [27.1, 1012.0], [27.2, 1013.0], [27.3, 1015.0], [27.4, 1016.0], [27.5, 1018.0], [27.6, 1020.0], [27.7, 1021.0], [27.8, 1024.0], [27.9, 1026.0], [28.0, 1029.0], [28.1, 1030.0], [28.2, 1031.0], [28.3, 1033.0], [28.4, 1034.0], [28.5, 1036.0], [28.6, 1038.0], [28.7, 1039.0], [28.8, 1040.0], [28.9, 1041.0], [29.0, 1043.0], [29.1, 1044.0], [29.2, 1046.0], [29.3, 1048.0], [29.4, 1050.0], [29.5, 1051.0], [29.6, 1052.0], [29.7, 1053.0], [29.8, 1055.0], [29.9, 1056.0], [30.0, 1057.0], [30.1, 1059.0], [30.2, 1060.0], [30.3, 1062.0], [30.4, 1063.0], [30.5, 1065.0], [30.6, 1068.0], [30.7, 1070.0], [30.8, 1071.0], [30.9, 1075.0], [31.0, 1076.0], [31.1, 1079.0], [31.2, 1080.0], [31.3, 1082.0], [31.4, 1084.0], [31.5, 1087.0], [31.6, 1088.0], [31.7, 1089.0], [31.8, 1091.0], [31.9, 1093.0], [32.0, 1095.0], [32.1, 1096.0], [32.2, 1099.0], [32.3, 1101.0], [32.4, 1102.0], [32.5, 1103.0], [32.6, 1104.0], [32.7, 1107.0], [32.8, 1108.0], [32.9, 1109.0], [33.0, 1111.0], [33.1, 1113.0], [33.2, 1114.0], [33.3, 1117.0], [33.4, 1119.0], [33.5, 1121.0], [33.6, 1123.0], [33.7, 1125.0], [33.8, 1128.0], [33.9, 1129.0], [34.0, 1131.0], [34.1, 1133.0], [34.2, 1136.0], [34.3, 1137.0], [34.4, 1138.0], [34.5, 1140.0], [34.6, 1142.0], [34.7, 1144.0], [34.8, 1145.0], [34.9, 1147.0], [35.0, 1148.0], [35.1, 1150.0], [35.2, 1151.0], [35.3, 1152.0], [35.4, 1153.0], [35.5, 1154.0], [35.6, 1157.0], [35.7, 1158.0], [35.8, 1161.0], [35.9, 1163.0], [36.0, 1165.0], [36.1, 1166.0], [36.2, 1168.0], [36.3, 1169.0], [36.4, 1171.0], [36.5, 1173.0], [36.6, 1174.0], [36.7, 1176.0], [36.8, 1178.0], [36.9, 1179.0], [37.0, 1180.0], [37.1, 1182.0], [37.2, 1183.0], [37.3, 1185.0], [37.4, 1187.0], [37.5, 1190.0], [37.6, 1192.0], [37.7, 1193.0], [37.8, 1195.0], [37.9, 1197.0], [38.0, 1198.0], [38.1, 1200.0], [38.2, 1202.0], [38.3, 1203.0], [38.4, 1204.0], [38.5, 1206.0], [38.6, 1208.0], [38.7, 1210.0], [38.8, 1211.0], [38.9, 1213.0], [39.0, 1215.0], [39.1, 1218.0], [39.2, 1219.0], [39.3, 1221.0], [39.4, 1222.0], [39.5, 1223.0], [39.6, 1226.0], [39.7, 1228.0], [39.8, 1230.0], [39.9, 1232.0], [40.0, 1234.0], [40.1, 1236.0], [40.2, 1239.0], [40.3, 1240.0], [40.4, 1241.0], [40.5, 1243.0], [40.6, 1245.0], [40.7, 1246.0], [40.8, 1249.0], [40.9, 1251.0], [41.0, 1252.0], [41.1, 1254.0], [41.2, 1256.0], [41.3, 1258.0], [41.4, 1260.0], [41.5, 1262.0], [41.6, 1264.0], [41.7, 1265.0], [41.8, 1267.0], [41.9, 1268.0], [42.0, 1270.0], [42.1, 1272.0], [42.2, 1275.0], [42.3, 1277.0], [42.4, 1279.0], [42.5, 1281.0], [42.6, 1284.0], [42.7, 1285.0], [42.8, 1286.0], [42.9, 1288.0], [43.0, 1290.0], [43.1, 1293.0], [43.2, 1295.0], [43.3, 1296.0], [43.4, 1298.0], [43.5, 1299.0], [43.6, 1301.0], [43.7, 1303.0], [43.8, 1305.0], [43.9, 1307.0], [44.0, 1309.0], [44.1, 1310.0], [44.2, 1313.0], [44.3, 1316.0], [44.4, 1318.0], [44.5, 1320.0], [44.6, 1322.0], [44.7, 1323.0], [44.8, 1325.0], [44.9, 1327.0], [45.0, 1328.0], [45.1, 1330.0], [45.2, 1333.0], [45.3, 1335.0], [45.4, 1337.0], [45.5, 1339.0], [45.6, 1341.0], [45.7, 1343.0], [45.8, 1346.0], [45.9, 1349.0], [46.0, 1351.0], [46.1, 1353.0], [46.2, 1355.0], [46.3, 1357.0], [46.4, 1358.0], [46.5, 1360.0], [46.6, 1362.0], [46.7, 1363.0], [46.8, 1365.0], [46.9, 1367.0], [47.0, 1368.0], [47.1, 1369.0], [47.2, 1372.0], [47.3, 1374.0], [47.4, 1376.0], [47.5, 1378.0], [47.6, 1380.0], [47.7, 1381.0], [47.8, 1383.0], [47.9, 1385.0], [48.0, 1386.0], [48.1, 1388.0], [48.2, 1392.0], [48.3, 1394.0], [48.4, 1396.0], [48.5, 1398.0], [48.6, 1399.0], [48.7, 1401.0], [48.8, 1404.0], [48.9, 1406.0], [49.0, 1408.0], [49.1, 1410.0], [49.2, 1413.0], [49.3, 1414.0], [49.4, 1415.0], [49.5, 1416.0], [49.6, 1418.0], [49.7, 1421.0], [49.8, 1423.0], [49.9, 1425.0], [50.0, 1427.0], [50.1, 1431.0], [50.2, 1432.0], [50.3, 1433.0], [50.4, 1435.0], [50.5, 1438.0], [50.6, 1439.0], [50.7, 1442.0], [50.8, 1444.0], [50.9, 1446.0], [51.0, 1448.0], [51.1, 1450.0], [51.2, 1452.0], [51.3, 1454.0], [51.4, 1456.0], [51.5, 1458.0], [51.6, 1458.0], [51.7, 1461.0], [51.8, 1463.0], [51.9, 1464.0], [52.0, 1466.0], [52.1, 1469.0], [52.2, 1471.0], [52.3, 1473.0], [52.4, 1474.0], [52.5, 1477.0], [52.6, 1479.0], [52.7, 1482.0], [52.8, 1483.0], [52.9, 1485.0], [53.0, 1487.0], [53.1, 1489.0], [53.2, 1491.0], [53.3, 1493.0], [53.4, 1496.0], [53.5, 1497.0], [53.6, 1500.0], [53.7, 1503.0], [53.8, 1504.0], [53.9, 1507.0], [54.0, 1508.0], [54.1, 1511.0], [54.2, 1513.0], [54.3, 1515.0], [54.4, 1517.0], [54.5, 1519.0], [54.6, 1521.0], [54.7, 1523.0], [54.8, 1525.0], [54.9, 1527.0], [55.0, 1529.0], [55.1, 1532.0], [55.2, 1533.0], [55.3, 1537.0], [55.4, 1538.0], [55.5, 1541.0], [55.6, 1543.0], [55.7, 1545.0], [55.8, 1547.0], [55.9, 1549.0], [56.0, 1552.0], [56.1, 1554.0], [56.2, 1556.0], [56.3, 1559.0], [56.4, 1562.0], [56.5, 1564.0], [56.6, 1566.0], [56.7, 1568.0], [56.8, 1569.0], [56.9, 1572.0], [57.0, 1574.0], [57.1, 1576.0], [57.2, 1579.0], [57.3, 1582.0], [57.4, 1585.0], [57.5, 1587.0], [57.6, 1590.0], [57.7, 1591.0], [57.8, 1593.0], [57.9, 1595.0], [58.0, 1598.0], [58.1, 1601.0], [58.2, 1603.0], [58.3, 1606.0], [58.4, 1607.0], [58.5, 1608.0], [58.6, 1611.0], [58.7, 1613.0], [58.8, 1615.0], [58.9, 1617.0], [59.0, 1620.0], [59.1, 1623.0], [59.2, 1625.0], [59.3, 1628.0], [59.4, 1631.0], [59.5, 1632.0], [59.6, 1635.0], [59.7, 1637.0], [59.8, 1639.0], [59.9, 1641.0], [60.0, 1643.0], [60.1, 1645.0], [60.2, 1647.0], [60.3, 1650.0], [60.4, 1653.0], [60.5, 1656.0], [60.6, 1659.0], [60.7, 1662.0], [60.8, 1665.0], [60.9, 1666.0], [61.0, 1669.0], [61.1, 1671.0], [61.2, 1675.0], [61.3, 1677.0], [61.4, 1679.0], [61.5, 1681.0], [61.6, 1685.0], [61.7, 1687.0], [61.8, 1688.0], [61.9, 1692.0], [62.0, 1694.0], [62.1, 1697.0], [62.2, 1699.0], [62.3, 1700.0], [62.4, 1703.0], [62.5, 1707.0], [62.6, 1710.0], [62.7, 1713.0], [62.8, 1715.0], [62.9, 1717.0], [63.0, 1721.0], [63.1, 1723.0], [63.2, 1725.0], [63.3, 1729.0], [63.4, 1731.0], [63.5, 1734.0], [63.6, 1737.0], [63.7, 1738.0], [63.8, 1741.0], [63.9, 1744.0], [64.0, 1747.0], [64.1, 1749.0], [64.2, 1751.0], [64.3, 1752.0], [64.4, 1754.0], [64.5, 1757.0], [64.6, 1759.0], [64.7, 1762.0], [64.8, 1764.0], [64.9, 1767.0], [65.0, 1769.0], [65.1, 1773.0], [65.2, 1775.0], [65.3, 1778.0], [65.4, 1781.0], [65.5, 1783.0], [65.6, 1785.0], [65.7, 1788.0], [65.8, 1791.0], [65.9, 1793.0], [66.0, 1796.0], [66.1, 1797.0], [66.2, 1800.0], [66.3, 1803.0], [66.4, 1805.0], [66.5, 1807.0], [66.6, 1809.0], [66.7, 1811.0], [66.8, 1814.0], [66.9, 1817.0], [67.0, 1822.0], [67.1, 1824.0], [67.2, 1827.0], [67.3, 1830.0], [67.4, 1832.0], [67.5, 1836.0], [67.6, 1839.0], [67.7, 1841.0], [67.8, 1844.0], [67.9, 1847.0], [68.0, 1850.0], [68.1, 1853.0], [68.2, 1856.0], [68.3, 1860.0], [68.4, 1864.0], [68.5, 1868.0], [68.6, 1870.0], [68.7, 1872.0], [68.8, 1874.0], [68.9, 1876.0], [69.0, 1880.0], [69.1, 1883.0], [69.2, 1885.0], [69.3, 1886.0], [69.4, 1891.0], [69.5, 1894.0], [69.6, 1897.0], [69.7, 1900.0], [69.8, 1905.0], [69.9, 1908.0], [70.0, 1911.0], [70.1, 1915.0], [70.2, 1919.0], [70.3, 1923.0], [70.4, 1927.0], [70.5, 1929.0], [70.6, 1932.0], [70.7, 1935.0], [70.8, 1938.0], [70.9, 1941.0], [71.0, 1944.0], [71.1, 1948.0], [71.2, 1952.0], [71.3, 1955.0], [71.4, 1958.0], [71.5, 1961.0], [71.6, 1964.0], [71.7, 1966.0], [71.8, 1971.0], [71.9, 1973.0], [72.0, 1977.0], [72.1, 1980.0], [72.2, 1983.0], [72.3, 1989.0], [72.4, 1992.0], [72.5, 1995.0], [72.6, 1998.0], [72.7, 2002.0], [72.8, 2005.0], [72.9, 2008.0], [73.0, 2010.0], [73.1, 2012.0], [73.2, 2016.0], [73.3, 2020.0], [73.4, 2025.0], [73.5, 2029.0], [73.6, 2032.0], [73.7, 2034.0], [73.8, 2038.0], [73.9, 2040.0], [74.0, 2043.0], [74.1, 2045.0], [74.2, 2049.0], [74.3, 2054.0], [74.4, 2056.0], [74.5, 2059.0], [74.6, 2062.0], [74.7, 2064.0], [74.8, 2067.0], [74.9, 2071.0], [75.0, 2074.0], [75.1, 2079.0], [75.2, 2082.0], [75.3, 2085.0], [75.4, 2089.0], [75.5, 2092.0], [75.6, 2095.0], [75.7, 2098.0], [75.8, 2101.0], [75.9, 2103.0], [76.0, 2107.0], [76.1, 2109.0], [76.2, 2113.0], [76.3, 2115.0], [76.4, 2119.0], [76.5, 2123.0], [76.6, 2128.0], [76.7, 2132.0], [76.8, 2136.0], [76.9, 2142.0], [77.0, 2146.0], [77.1, 2150.0], [77.2, 2156.0], [77.3, 2160.0], [77.4, 2162.0], [77.5, 2168.0], [77.6, 2171.0], [77.7, 2174.0], [77.8, 2177.0], [77.9, 2181.0], [78.0, 2185.0], [78.1, 2187.0], [78.2, 2190.0], [78.3, 2192.0], [78.4, 2198.0], [78.5, 2205.0], [78.6, 2211.0], [78.7, 2213.0], [78.8, 2216.0], [78.9, 2219.0], [79.0, 2223.0], [79.1, 2227.0], [79.2, 2230.0], [79.3, 2232.0], [79.4, 2237.0], [79.5, 2239.0], [79.6, 2242.0], [79.7, 2245.0], [79.8, 2251.0], [79.9, 2254.0], [80.0, 2260.0], [80.1, 2263.0], [80.2, 2267.0], [80.3, 2270.0], [80.4, 2274.0], [80.5, 2278.0], [80.6, 2282.0], [80.7, 2286.0], [80.8, 2290.0], [80.9, 2293.0], [81.0, 2298.0], [81.1, 2302.0], [81.2, 2307.0], [81.3, 2311.0], [81.4, 2315.0], [81.5, 2318.0], [81.6, 2324.0], [81.7, 2329.0], [81.8, 2335.0], [81.9, 2340.0], [82.0, 2344.0], [82.1, 2348.0], [82.2, 2352.0], [82.3, 2358.0], [82.4, 2363.0], [82.5, 2370.0], [82.6, 2375.0], [82.7, 2381.0], [82.8, 2384.0], [82.9, 2387.0], [83.0, 2393.0], [83.1, 2399.0], [83.2, 2407.0], [83.3, 2411.0], [83.4, 2415.0], [83.5, 2419.0], [83.6, 2423.0], [83.7, 2428.0], [83.8, 2432.0], [83.9, 2438.0], [84.0, 2446.0], [84.1, 2452.0], [84.2, 2459.0], [84.3, 2462.0], [84.4, 2465.0], [84.5, 2469.0], [84.6, 2473.0], [84.7, 2479.0], [84.8, 2485.0], [84.9, 2488.0], [85.0, 2494.0], [85.1, 2500.0], [85.2, 2504.0], [85.3, 2510.0], [85.4, 2516.0], [85.5, 2521.0], [85.6, 2527.0], [85.7, 2531.0], [85.8, 2537.0], [85.9, 2543.0], [86.0, 2550.0], [86.1, 2558.0], [86.2, 2563.0], [86.3, 2571.0], [86.4, 2576.0], [86.5, 2582.0], [86.6, 2589.0], [86.7, 2595.0], [86.8, 2600.0], [86.9, 2606.0], [87.0, 2611.0], [87.1, 2616.0], [87.2, 2622.0], [87.3, 2628.0], [87.4, 2634.0], [87.5, 2638.0], [87.6, 2643.0], [87.7, 2648.0], [87.8, 2656.0], [87.9, 2662.0], [88.0, 2670.0], [88.1, 2678.0], [88.2, 2685.0], [88.3, 2690.0], [88.4, 2696.0], [88.5, 2703.0], [88.6, 2711.0], [88.7, 2718.0], [88.8, 2728.0], [88.9, 2735.0], [89.0, 2742.0], [89.1, 2748.0], [89.2, 2754.0], [89.3, 2758.0], [89.4, 2769.0], [89.5, 2778.0], [89.6, 2787.0], [89.7, 2793.0], [89.8, 2801.0], [89.9, 2810.0], [90.0, 2819.0], [90.1, 2829.0], [90.2, 2840.0], [90.3, 2843.0], [90.4, 2851.0], [90.5, 2854.0], [90.6, 2864.0], [90.7, 2872.0], [90.8, 2891.0], [90.9, 2903.0], [91.0, 2913.0], [91.1, 2922.0], [91.2, 2934.0], [91.3, 2939.0], [91.4, 2949.0], [91.5, 2967.0], [91.6, 2980.0], [91.7, 2989.0], [91.8, 2996.0], [91.9, 3009.0], [92.0, 3022.0], [92.1, 3033.0], [92.2, 3043.0], [92.3, 3062.0], [92.4, 3073.0], [92.5, 3090.0], [92.6, 3097.0], [92.7, 3110.0], [92.8, 3120.0], [92.9, 3130.0], [93.0, 3143.0], [93.1, 3155.0], [93.2, 3165.0], [93.3, 3181.0], [93.4, 3192.0], [93.5, 3203.0], [93.6, 3218.0], [93.7, 3231.0], [93.8, 3245.0], [93.9, 3261.0], [94.0, 3276.0], [94.1, 3289.0], [94.2, 3304.0], [94.3, 3315.0], [94.4, 3339.0], [94.5, 3360.0], [94.6, 3379.0], [94.7, 3390.0], [94.8, 3409.0], [94.9, 3424.0], [95.0, 3441.0], [95.1, 3465.0], [95.2, 3490.0], [95.3, 3510.0], [95.4, 3522.0], [95.5, 3550.0], [95.6, 3563.0], [95.7, 3572.0], [95.8, 3589.0], [95.9, 3614.0], [96.0, 3636.0], [96.1, 3661.0], [96.2, 3676.0], [96.3, 3706.0], [96.4, 3726.0], [96.5, 3748.0], [96.6, 3787.0], [96.7, 3819.0], [96.8, 3828.0], [96.9, 3846.0], [97.0, 3873.0], [97.1, 3907.0], [97.2, 3953.0], [97.3, 3985.0], [97.4, 4026.0], [97.5, 4070.0], [97.6, 4089.0], [97.7, 4121.0], [97.8, 4155.0], [97.9, 4204.0], [98.0, 4243.0], [98.1, 4271.0], [98.2, 4316.0], [98.3, 4369.0], [98.4, 4416.0], [98.5, 4464.0], [98.6, 4536.0], [98.7, 4613.0], [98.8, 4673.0], [98.9, 4719.0], [99.0, 4774.0], [99.1, 4834.0], [99.2, 4885.0], [99.3, 5005.0], [99.4, 5138.0], [99.5, 5249.0], [99.6, 5424.0], [99.7, 5729.0], [99.8, 6051.0], [99.9, 6867.0], [100.0, 9312.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 27.0], [0.1, 30.0], [0.2, 34.0], [0.3, 35.0], [0.4, 36.0], [0.5, 36.0], [0.6, 36.0], [0.7, 36.0], [0.8, 36.0], [0.9, 36.0], [1.0, 36.0], [1.1, 36.0], [1.2, 36.0], [1.3, 37.0], [1.4, 37.0], [1.5, 37.0], [1.6, 37.0], [1.7, 37.0], [1.8, 37.0], [1.9, 37.0], [2.0, 37.0], [2.1, 37.0], [2.2, 37.0], [2.3, 37.0], [2.4, 37.0], [2.5, 37.0], [2.6, 37.0], [2.7, 37.0], [2.8, 37.0], [2.9, 37.0], [3.0, 37.0], [3.1, 37.0], [3.2, 37.0], [3.3, 37.0], [3.4, 37.0], [3.5, 37.0], [3.6, 37.0], [3.7, 38.0], [3.8, 38.0], [3.9, 38.0], [4.0, 38.0], [4.1, 38.0], [4.2, 38.0], [4.3, 38.0], [4.4, 38.0], [4.5, 38.0], [4.6, 38.0], [4.7, 38.0], [4.8, 38.0], [4.9, 38.0], [5.0, 38.0], [5.1, 38.0], [5.2, 38.0], [5.3, 38.0], [5.4, 38.0], [5.5, 38.0], [5.6, 38.0], [5.7, 38.0], [5.8, 38.0], [5.9, 38.0], [6.0, 38.0], [6.1, 38.0], [6.2, 38.0], [6.3, 38.0], [6.4, 38.0], [6.5, 38.0], [6.6, 38.0], [6.7, 38.0], [6.8, 38.0], [6.9, 38.0], [7.0, 38.0], [7.1, 38.0], [7.2, 38.0], [7.3, 38.0], [7.4, 38.0], [7.5, 38.0], [7.6, 38.0], [7.7, 38.0], [7.8, 39.0], [7.9, 39.0], [8.0, 39.0], [8.1, 39.0], [8.2, 39.0], [8.3, 39.0], [8.4, 39.0], [8.5, 39.0], [8.6, 39.0], [8.7, 39.0], [8.8, 39.0], [8.9, 39.0], [9.0, 39.0], [9.1, 39.0], [9.2, 39.0], [9.3, 39.0], [9.4, 39.0], [9.5, 39.0], [9.6, 39.0], [9.7, 39.0], [9.8, 39.0], [9.9, 39.0], [10.0, 39.0], [10.1, 39.0], [10.2, 39.0], [10.3, 39.0], [10.4, 39.0], [10.5, 39.0], [10.6, 39.0], [10.7, 39.0], [10.8, 39.0], [10.9, 39.0], [11.0, 39.0], [11.1, 39.0], [11.2, 39.0], [11.3, 39.0], [11.4, 39.0], [11.5, 39.0], [11.6, 39.0], [11.7, 39.0], [11.8, 39.0], [11.9, 39.0], [12.0, 39.0], [12.1, 39.0], [12.2, 39.0], [12.3, 39.0], [12.4, 39.0], [12.5, 39.0], [12.6, 39.0], [12.7, 39.0], [12.8, 39.0], [12.9, 39.0], [13.0, 39.0], [13.1, 39.0], [13.2, 39.0], [13.3, 40.0], [13.4, 40.0], [13.5, 40.0], [13.6, 40.0], [13.7, 40.0], [13.8, 40.0], [13.9, 40.0], [14.0, 40.0], [14.1, 40.0], [14.2, 40.0], [14.3, 40.0], [14.4, 40.0], [14.5, 40.0], [14.6, 40.0], [14.7, 40.0], [14.8, 40.0], [14.9, 40.0], [15.0, 40.0], [15.1, 40.0], [15.2, 40.0], [15.3, 40.0], [15.4, 40.0], [15.5, 40.0], [15.6, 40.0], [15.7, 40.0], [15.8, 40.0], [15.9, 40.0], [16.0, 40.0], [16.1, 40.0], [16.2, 40.0], [16.3, 40.0], [16.4, 40.0], [16.5, 40.0], [16.6, 40.0], [16.7, 40.0], [16.8, 40.0], [16.9, 40.0], [17.0, 40.0], [17.1, 40.0], [17.2, 40.0], [17.3, 40.0], [17.4, 40.0], [17.5, 40.0], [17.6, 40.0], [17.7, 40.0], [17.8, 40.0], [17.9, 40.0], [18.0, 40.0], [18.1, 40.0], [18.2, 40.0], [18.3, 40.0], [18.4, 40.0], [18.5, 40.0], [18.6, 40.0], [18.7, 40.0], [18.8, 40.0], [18.9, 40.0], [19.0, 40.0], [19.1, 40.0], [19.2, 40.0], [19.3, 40.0], [19.4, 40.0], [19.5, 40.0], [19.6, 40.0], [19.7, 40.0], [19.8, 40.0], [19.9, 40.0], [20.0, 40.0], [20.1, 40.0], [20.2, 40.0], [20.3, 41.0], [20.4, 41.0], [20.5, 41.0], [20.6, 41.0], [20.7, 41.0], [20.8, 41.0], [20.9, 41.0], [21.0, 41.0], [21.1, 41.0], [21.2, 41.0], [21.3, 41.0], [21.4, 41.0], [21.5, 41.0], [21.6, 41.0], [21.7, 41.0], [21.8, 41.0], [21.9, 41.0], [22.0, 41.0], [22.1, 41.0], [22.2, 41.0], [22.3, 41.0], [22.4, 41.0], [22.5, 41.0], [22.6, 41.0], [22.7, 41.0], [22.8, 41.0], [22.9, 41.0], [23.0, 41.0], [23.1, 41.0], [23.2, 41.0], [23.3, 41.0], [23.4, 41.0], [23.5, 41.0], [23.6, 41.0], [23.7, 41.0], [23.8, 41.0], [23.9, 41.0], [24.0, 41.0], [24.1, 41.0], [24.2, 41.0], [24.3, 41.0], [24.4, 41.0], [24.5, 41.0], [24.6, 41.0], [24.7, 41.0], [24.8, 41.0], [24.9, 41.0], [25.0, 41.0], [25.1, 41.0], [25.2, 41.0], [25.3, 41.0], [25.4, 41.0], [25.5, 41.0], [25.6, 41.0], [25.7, 41.0], [25.8, 41.0], [25.9, 41.0], [26.0, 41.0], [26.1, 41.0], [26.2, 41.0], [26.3, 41.0], [26.4, 41.0], [26.5, 41.0], [26.6, 41.0], [26.7, 41.0], [26.8, 41.0], [26.9, 41.0], [27.0, 41.0], [27.1, 41.0], [27.2, 41.0], [27.3, 41.0], [27.4, 41.0], [27.5, 41.0], [27.6, 41.0], [27.7, 41.0], [27.8, 41.0], [27.9, 41.0], [28.0, 41.0], [28.1, 41.0], [28.2, 41.0], [28.3, 41.0], [28.4, 41.0], [28.5, 41.0], [28.6, 41.0], [28.7, 41.0], [28.8, 41.0], [28.9, 41.0], [29.0, 41.0], [29.1, 41.0], [29.2, 41.0], [29.3, 41.0], [29.4, 41.0], [29.5, 41.0], [29.6, 41.0], [29.7, 41.0], [29.8, 41.0], [29.9, 41.0], [30.0, 42.0], [30.1, 42.0], [30.2, 42.0], [30.3, 42.0], [30.4, 42.0], [30.5, 42.0], [30.6, 42.0], [30.7, 42.0], [30.8, 42.0], [30.9, 42.0], [31.0, 42.0], [31.1, 42.0], [31.2, 42.0], [31.3, 42.0], [31.4, 42.0], [31.5, 42.0], [31.6, 42.0], [31.7, 42.0], [31.8, 42.0], [31.9, 42.0], [32.0, 42.0], [32.1, 42.0], [32.2, 42.0], [32.3, 42.0], [32.4, 42.0], [32.5, 42.0], [32.6, 42.0], [32.7, 42.0], [32.8, 42.0], [32.9, 42.0], [33.0, 42.0], [33.1, 42.0], [33.2, 42.0], [33.3, 42.0], [33.4, 42.0], [33.5, 42.0], [33.6, 42.0], [33.7, 42.0], [33.8, 42.0], [33.9, 42.0], [34.0, 42.0], [34.1, 42.0], [34.2, 42.0], [34.3, 42.0], [34.4, 42.0], [34.5, 42.0], [34.6, 42.0], [34.7, 42.0], [34.8, 42.0], [34.9, 42.0], [35.0, 42.0], [35.1, 42.0], [35.2, 42.0], [35.3, 42.0], [35.4, 42.0], [35.5, 42.0], [35.6, 42.0], [35.7, 42.0], [35.8, 42.0], [35.9, 42.0], [36.0, 42.0], [36.1, 42.0], [36.2, 42.0], [36.3, 42.0], [36.4, 42.0], [36.5, 42.0], [36.6, 42.0], [36.7, 42.0], [36.8, 42.0], [36.9, 42.0], [37.0, 42.0], [37.1, 42.0], [37.2, 42.0], [37.3, 42.0], [37.4, 42.0], [37.5, 42.0], [37.6, 42.0], [37.7, 42.0], [37.8, 42.0], [37.9, 42.0], [38.0, 42.0], [38.1, 42.0], [38.2, 42.0], [38.3, 42.0], [38.4, 42.0], [38.5, 42.0], [38.6, 42.0], [38.7, 42.0], [38.8, 42.0], [38.9, 42.0], [39.0, 42.0], [39.1, 42.0], [39.2, 42.0], [39.3, 42.0], [39.4, 42.0], [39.5, 42.0], [39.6, 42.0], [39.7, 42.0], [39.8, 42.0], [39.9, 42.0], [40.0, 43.0], [40.1, 43.0], [40.2, 43.0], [40.3, 43.0], [40.4, 43.0], [40.5, 43.0], [40.6, 43.0], [40.7, 43.0], [40.8, 43.0], [40.9, 43.0], [41.0, 43.0], [41.1, 43.0], [41.2, 43.0], [41.3, 43.0], [41.4, 43.0], [41.5, 43.0], [41.6, 43.0], [41.7, 43.0], [41.8, 43.0], [41.9, 43.0], [42.0, 43.0], [42.1, 43.0], [42.2, 43.0], [42.3, 43.0], [42.4, 43.0], [42.5, 43.0], [42.6, 43.0], [42.7, 43.0], [42.8, 43.0], [42.9, 43.0], [43.0, 43.0], [43.1, 43.0], [43.2, 43.0], [43.3, 43.0], [43.4, 43.0], [43.5, 43.0], [43.6, 43.0], [43.7, 43.0], [43.8, 43.0], [43.9, 43.0], [44.0, 43.0], [44.1, 43.0], [44.2, 43.0], [44.3, 43.0], [44.4, 43.0], [44.5, 43.0], [44.6, 43.0], [44.7, 43.0], [44.8, 43.0], [44.9, 43.0], [45.0, 43.0], [45.1, 43.0], [45.2, 43.0], [45.3, 43.0], [45.4, 43.0], [45.5, 43.0], [45.6, 43.0], [45.7, 43.0], [45.8, 43.0], [45.9, 43.0], [46.0, 43.0], [46.1, 43.0], [46.2, 43.0], [46.3, 43.0], [46.4, 43.0], [46.5, 43.0], [46.6, 43.0], [46.7, 43.0], [46.8, 43.0], [46.9, 43.0], [47.0, 43.0], [47.1, 43.0], [47.2, 43.0], [47.3, 43.0], [47.4, 43.0], [47.5, 43.0], [47.6, 43.0], [47.7, 43.0], [47.8, 43.0], [47.9, 43.0], [48.0, 43.0], [48.1, 43.0], [48.2, 43.0], [48.3, 43.0], [48.4, 43.0], [48.5, 43.0], [48.6, 43.0], [48.7, 43.0], [48.8, 43.0], [48.9, 43.0], [49.0, 43.0], [49.1, 43.0], [49.2, 43.0], [49.3, 43.0], [49.4, 43.0], [49.5, 43.0], [49.6, 43.0], [49.7, 43.0], [49.8, 43.0], [49.9, 43.0], [50.0, 43.0], [50.1, 43.0], [50.2, 43.0], [50.3, 43.0], [50.4, 43.0], [50.5, 43.0], [50.6, 43.0], [50.7, 43.0], [50.8, 43.0], [50.9, 43.0], [51.0, 43.0], [51.1, 43.0], [51.2, 43.0], [51.3, 44.0], [51.4, 44.0], [51.5, 44.0], [51.6, 44.0], [51.7, 44.0], [51.8, 44.0], [51.9, 44.0], [52.0, 44.0], [52.1, 44.0], [52.2, 44.0], [52.3, 44.0], [52.4, 44.0], [52.5, 44.0], [52.6, 44.0], [52.7, 44.0], [52.8, 44.0], [52.9, 44.0], [53.0, 44.0], [53.1, 44.0], [53.2, 44.0], [53.3, 44.0], [53.4, 44.0], [53.5, 44.0], [53.6, 44.0], [53.7, 44.0], [53.8, 44.0], [53.9, 44.0], [54.0, 44.0], [54.1, 44.0], [54.2, 44.0], [54.3, 44.0], [54.4, 44.0], [54.5, 44.0], [54.6, 44.0], [54.7, 44.0], [54.8, 44.0], [54.9, 44.0], [55.0, 44.0], [55.1, 44.0], [55.2, 44.0], [55.3, 44.0], [55.4, 44.0], [55.5, 44.0], [55.6, 44.0], [55.7, 44.0], [55.8, 44.0], [55.9, 44.0], [56.0, 44.0], [56.1, 44.0], [56.2, 44.0], [56.3, 44.0], [56.4, 44.0], [56.5, 44.0], [56.6, 44.0], [56.7, 44.0], [56.8, 44.0], [56.9, 44.0], [57.0, 44.0], [57.1, 44.0], [57.2, 44.0], [57.3, 44.0], [57.4, 44.0], [57.5, 44.0], [57.6, 44.0], [57.7, 44.0], [57.8, 44.0], [57.9, 44.0], [58.0, 44.0], [58.1, 44.0], [58.2, 44.0], [58.3, 44.0], [58.4, 44.0], [58.5, 44.0], [58.6, 44.0], [58.7, 44.0], [58.8, 44.0], [58.9, 44.0], [59.0, 44.0], [59.1, 44.0], [59.2, 44.0], [59.3, 44.0], [59.4, 44.0], [59.5, 44.0], [59.6, 44.0], [59.7, 44.0], [59.8, 44.0], [59.9, 44.0], [60.0, 44.0], [60.1, 44.0], [60.2, 44.0], [60.3, 44.0], [60.4, 44.0], [60.5, 44.0], [60.6, 44.0], [60.7, 44.0], [60.8, 44.0], [60.9, 44.0], [61.0, 44.0], [61.1, 44.0], [61.2, 44.0], [61.3, 44.0], [61.4, 44.0], [61.5, 44.0], [61.6, 44.0], [61.7, 44.0], [61.8, 44.0], [61.9, 44.0], [62.0, 44.0], [62.1, 44.0], [62.2, 45.0], [62.3, 45.0], [62.4, 45.0], [62.5, 45.0], [62.6, 45.0], [62.7, 45.0], [62.8, 45.0], [62.9, 45.0], [63.0, 45.0], [63.1, 45.0], [63.2, 45.0], [63.3, 45.0], [63.4, 45.0], [63.5, 45.0], [63.6, 45.0], [63.7, 45.0], [63.8, 45.0], [63.9, 45.0], [64.0, 45.0], [64.1, 45.0], [64.2, 45.0], [64.3, 45.0], [64.4, 45.0], [64.5, 45.0], [64.6, 45.0], [64.7, 45.0], [64.8, 45.0], [64.9, 45.0], [65.0, 45.0], [65.1, 45.0], [65.2, 45.0], [65.3, 45.0], [65.4, 45.0], [65.5, 45.0], [65.6, 45.0], [65.7, 45.0], [65.8, 45.0], [65.9, 45.0], [66.0, 45.0], [66.1, 45.0], [66.2, 45.0], [66.3, 45.0], [66.4, 45.0], [66.5, 45.0], [66.6, 45.0], [66.7, 45.0], [66.8, 45.0], [66.9, 45.0], [67.0, 45.0], [67.1, 45.0], [67.2, 45.0], [67.3, 45.0], [67.4, 45.0], [67.5, 45.0], [67.6, 45.0], [67.7, 45.0], [67.8, 45.0], [67.9, 45.0], [68.0, 45.0], [68.1, 45.0], [68.2, 45.0], [68.3, 45.0], [68.4, 45.0], [68.5, 45.0], [68.6, 45.0], [68.7, 46.0], [68.8, 46.0], [68.9, 46.0], [69.0, 46.0], [69.1, 46.0], [69.2, 46.0], [69.3, 46.0], [69.4, 46.0], [69.5, 46.0], [69.6, 46.0], [69.7, 46.0], [69.8, 46.0], [69.9, 46.0], [70.0, 46.0], [70.1, 46.0], [70.2, 46.0], [70.3, 46.0], [70.4, 46.0], [70.5, 46.0], [70.6, 46.0], [70.7, 46.0], [70.8, 46.0], [70.9, 46.0], [71.0, 46.0], [71.1, 46.0], [71.2, 46.0], [71.3, 46.0], [71.4, 46.0], [71.5, 46.0], [71.6, 46.0], [71.7, 46.0], [71.8, 46.0], [71.9, 46.0], [72.0, 46.0], [72.1, 46.0], [72.2, 46.0], [72.3, 46.0], [72.4, 46.0], [72.5, 46.0], [72.6, 46.0], [72.7, 47.0], [72.8, 47.0], [72.9, 47.0], [73.0, 47.0], [73.1, 47.0], [73.2, 47.0], [73.3, 47.0], [73.4, 47.0], [73.5, 47.0], [73.6, 47.0], [73.7, 47.0], [73.8, 47.0], [73.9, 47.0], [74.0, 47.0], [74.1, 47.0], [74.2, 47.0], [74.3, 47.0], [74.4, 47.0], [74.5, 47.0], [74.6, 47.0], [74.7, 47.0], [74.8, 47.0], [74.9, 47.0], [75.0, 47.0], [75.1, 47.0], [75.2, 47.0], [75.3, 47.0], [75.4, 47.0], [75.5, 47.0], [75.6, 47.0], [75.7, 47.0], [75.8, 48.0], [75.9, 48.0], [76.0, 48.0], [76.1, 48.0], [76.2, 48.0], [76.3, 48.0], [76.4, 48.0], [76.5, 48.0], [76.6, 48.0], [76.7, 48.0], [76.8, 48.0], [76.9, 48.0], [77.0, 48.0], [77.1, 48.0], [77.2, 48.0], [77.3, 48.0], [77.4, 48.0], [77.5, 48.0], [77.6, 48.0], [77.7, 48.0], [77.8, 48.0], [77.9, 48.0], [78.0, 48.0], [78.1, 48.0], [78.2, 48.0], [78.3, 48.0], [78.4, 48.0], [78.5, 48.0], [78.6, 49.0], [78.7, 49.0], [78.8, 49.0], [78.9, 49.0], [79.0, 49.0], [79.1, 49.0], [79.2, 49.0], [79.3, 49.0], [79.4, 49.0], [79.5, 49.0], [79.6, 49.0], [79.7, 49.0], [79.8, 49.0], [79.9, 49.0], [80.0, 49.0], [80.1, 49.0], [80.2, 49.0], [80.3, 49.0], [80.4, 49.0], [80.5, 49.0], [80.6, 49.0], [80.7, 49.0], [80.8, 49.0], [80.9, 49.0], [81.0, 50.0], [81.1, 50.0], [81.2, 50.0], [81.3, 50.0], [81.4, 50.0], [81.5, 50.0], [81.6, 50.0], [81.7, 50.0], [81.8, 50.0], [81.9, 50.0], [82.0, 50.0], [82.1, 50.0], [82.2, 50.0], [82.3, 50.0], [82.4, 50.0], [82.5, 50.0], [82.6, 50.0], [82.7, 50.0], [82.8, 50.0], [82.9, 50.0], [83.0, 50.0], [83.1, 50.0], [83.2, 50.0], [83.3, 50.0], [83.4, 50.0], [83.5, 51.0], [83.6, 51.0], [83.7, 51.0], [83.8, 51.0], [83.9, 51.0], [84.0, 51.0], [84.1, 51.0], [84.2, 51.0], [84.3, 51.0], [84.4, 51.0], [84.5, 51.0], [84.6, 51.0], [84.7, 51.0], [84.8, 51.0], [84.9, 51.0], [85.0, 51.0], [85.1, 51.0], [85.2, 51.0], [85.3, 51.0], [85.4, 51.0], [85.5, 52.0], [85.6, 52.0], [85.7, 52.0], [85.8, 52.0], [85.9, 52.0], [86.0, 52.0], [86.1, 52.0], [86.2, 52.0], [86.3, 52.0], [86.4, 52.0], [86.5, 52.0], [86.6, 52.0], [86.7, 52.0], [86.8, 52.0], [86.9, 52.0], [87.0, 53.0], [87.1, 53.0], [87.2, 53.0], [87.3, 53.0], [87.4, 53.0], [87.5, 53.0], [87.6, 53.0], [87.7, 53.0], [87.8, 53.0], [87.9, 53.0], [88.0, 53.0], [88.1, 53.0], [88.2, 53.0], [88.3, 53.0], [88.4, 54.0], [88.5, 54.0], [88.6, 54.0], [88.7, 54.0], [88.8, 54.0], [88.9, 54.0], [89.0, 54.0], [89.1, 54.0], [89.2, 54.0], [89.3, 54.0], [89.4, 54.0], [89.5, 55.0], [89.6, 55.0], [89.7, 55.0], [89.8, 55.0], [89.9, 55.0], [90.0, 55.0], [90.1, 55.0], [90.2, 55.0], [90.3, 56.0], [90.4, 56.0], [90.5, 56.0], [90.6, 56.0], [90.7, 56.0], [90.8, 56.0], [90.9, 57.0], [91.0, 57.0], [91.1, 57.0], [91.2, 57.0], [91.3, 57.0], [91.4, 57.0], [91.5, 58.0], [91.6, 58.0], [91.7, 58.0], [91.8, 58.0], [91.9, 58.0], [92.0, 58.0], [92.1, 59.0], [92.2, 59.0], [92.3, 59.0], [92.4, 59.0], [92.5, 60.0], [92.6, 60.0], [92.7, 60.0], [92.8, 60.0], [92.9, 60.0], [93.0, 61.0], [93.1, 61.0], [93.2, 61.0], [93.3, 61.0], [93.4, 62.0], [93.5, 62.0], [93.6, 62.0], [93.7, 63.0], [93.8, 63.0], [93.9, 63.0], [94.0, 63.0], [94.1, 64.0], [94.2, 64.0], [94.3, 64.0], [94.4, 64.0], [94.5, 65.0], [94.6, 65.0], [94.7, 66.0], [94.8, 66.0], [94.9, 66.0], [95.0, 67.0], [95.1, 67.0], [95.2, 68.0], [95.3, 68.0], [95.4, 68.0], [95.5, 69.0], [95.6, 69.0], [95.7, 70.0], [95.8, 70.0], [95.9, 70.0], [96.0, 71.0], [96.1, 72.0], [96.2, 72.0], [96.3, 73.0], [96.4, 73.0], [96.5, 74.0], [96.6, 75.0], [96.7, 76.0], [96.8, 77.0], [96.9, 78.0], [97.0, 79.0], [97.1, 79.0], [97.2, 81.0], [97.3, 82.0], [97.4, 83.0], [97.5, 85.0], [97.6, 86.0], [97.7, 87.0], [97.8, 88.0], [97.9, 90.0], [98.0, 91.0], [98.1, 93.0], [98.2, 94.0], [98.3, 97.0], [98.4, 100.0], [98.5, 101.0], [98.6, 104.0], [98.7, 107.0], [98.8, 109.0], [98.9, 112.0], [99.0, 114.0], [99.1, 118.0], [99.2, 121.0], [99.3, 125.0], [99.4, 134.0], [99.5, 140.0], [99.6, 150.0], [99.7, 167.0], [99.8, 199.0], [99.9, 870.0], [100.0, 1623.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 11807.0, "series": [{"data": [[600.0, 481.0], [700.0, 653.0], [800.0, 709.0], [900.0, 729.0], [1000.0, 690.0], [1100.0, 700.0], [1200.0, 653.0], [1300.0, 611.0], [1400.0, 597.0], [1500.0, 534.0], [1600.0, 506.0], [1700.0, 473.0], [1800.0, 419.0], [1900.0, 353.0], [2000.0, 371.0], [2100.0, 327.0], [2200.0, 309.0], [2300.0, 253.0], [2400.0, 235.0], [2500.0, 205.0], [2600.0, 198.0], [2700.0, 158.0], [2800.0, 132.0], [2900.0, 114.0], [3000.0, 95.0], [3100.0, 104.0], [3200.0, 83.0], [3300.0, 69.0], [3400.0, 60.0], [3500.0, 76.0], [3700.0, 43.0], [3600.0, 48.0], [3800.0, 55.0], [3900.0, 31.0], [4000.0, 32.0], [4200.0, 36.0], [4300.0, 23.0], [4100.0, 32.0], [4600.0, 21.0], [4400.0, 23.0], [4500.0, 15.0], [4800.0, 23.0], [4700.0, 21.0], [5100.0, 9.0], [5000.0, 11.0], [4900.0, 8.0], [5200.0, 10.0], [5300.0, 4.0], [5400.0, 8.0], [5500.0, 2.0], [5600.0, 3.0], [5800.0, 5.0], [5700.0, 5.0], [6100.0, 5.0], [6000.0, 2.0], [5900.0, 2.0], [6200.0, 1.0], [6300.0, 2.0], [6400.0, 1.0], [6600.0, 1.0], [6900.0, 4.0], [6800.0, 2.0], [6700.0, 1.0], [7100.0, 2.0], [7400.0, 2.0], [7200.0, 1.0], [7800.0, 1.0], [9300.0, 1.0], [100.0, 2.0], [200.0, 18.0], [300.0, 43.0], [400.0, 203.0], [500.0, 341.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 11807.0], [600.0, 2.0], [700.0, 2.0], [800.0, 1.0], [200.0, 4.0], [900.0, 4.0], [1000.0, 2.0], [300.0, 2.0], [1300.0, 4.0], [1500.0, 1.0], [1600.0, 1.0], [400.0, 1.0], [100.0, 169.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 9300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5568.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 12253.0, "series": [{"data": [[0.0, 12253.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 6179.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5568.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 18.17152961980548, "minX": 1.74760722E12, "maxY": 24.0, "series": [{"data": [[1.747608E12, 23.913693901035675], [1.7476077E12, 24.0], [1.7476074E12, 24.0], [1.74760806E12, 18.17152961980548], [1.74760776E12, 24.0], [1.74760746E12, 24.0], [1.74760782E12, 24.0], [1.74760752E12, 24.0], [1.74760722E12, 23.959624413145523], [1.74760788E12, 24.0], [1.74760758E12, 24.0], [1.74760728E12, 24.0], [1.74760794E12, 24.0], [1.74760764E12, 24.0], [1.74760734E12, 24.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74760806E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 27.0, "minX": 1.0, "maxY": 1994.0, "series": [{"data": [[8.0, 426.875], [2.0, 369.5], [9.0, 869.7692307692307], [10.0, 1994.0], [11.0, 846.9333333333333], [12.0, 771.2142857142858], [3.0, 295.0], [13.0, 1061.6666666666667], [14.0, 1026.818181818182], [15.0, 1141.9999999999995], [16.0, 1006.558139534884], [4.0, 592.0], [1.0, 238.5], [17.0, 1201.1612903225807], [18.0, 1155.3181818181815], [19.0, 1242.9864864864862], [20.0, 1287.1730769230767], [5.0, 678.75], [21.0, 1277.5370370370367], [22.0, 1543.1834862385322], [23.0, 1582.5248226950355], [24.0, 1662.178615465913], [6.0, 612.5], [7.0, 506.7142857142857]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[23.71625000000004, 1641.6329999999984]], "isOverall": false, "label": "Create CSR-Aggregated", "isController": false}, {"data": [[8.0, 36.111111111111114], [2.0, 27.0], [9.0, 34.916666666666664], [10.0, 36.666666666666664], [11.0, 37.68750000000001], [12.0, 46.14285714285714], [3.0, 29.0], [13.0, 37.0], [14.0, 41.63636363636363], [15.0, 48.77777777777777], [16.0, 47.093023255813954], [4.0, 33.0], [1.0, 30.75], [17.0, 44.931034482758626], [18.0, 41.61904761904762], [19.0, 44.60273972602741], [20.0, 44.57692307692306], [5.0, 34.333333333333336], [21.0, 54.53571428571429], [22.0, 46.03773584905662], [23.0, 42.74825174825175], [24.0, 48.375506251100504], [6.0, 38.0], [7.0, 35.142857142857146]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}, {"data": [[23.71833333333335, 48.17099999999993]], "isOverall": false, "label": "HTTP Request - enroll-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 24.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 15789.166666666666, "minX": 1.74760722E12, "maxY": 131927.08333333334, "series": [{"data": [[1.747608E12, 127973.86666666667], [1.7476077E12, 125025.16666666667], [1.7476074E12, 109187.91666666667], [1.74760806E12, 83330.78333333334], [1.74760776E12, 126961.8], [1.74760746E12, 108343.56666666667], [1.74760782E12, 127678.23333333334], [1.74760752E12, 114130.45], [1.74760722E12, 78365.66666666667], [1.74760788E12, 128099.0], [1.74760758E12, 128415.4], [1.74760728E12, 131927.08333333334], [1.74760794E12, 125491.06666666667], [1.74760764E12, 123680.45], [1.74760734E12, 128564.31666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.747608E12, 25791.883333333335], [1.7476077E12, 25195.85], [1.7476074E12, 21993.05], [1.74760806E12, 16798.633333333335], [1.74760776E12, 25582.466666666667], [1.74760746E12, 21843.366666666665], [1.74760782E12, 25731.65], [1.74760752E12, 23001.716666666667], [1.74760722E12, 15789.166666666666], [1.74760788E12, 25820.9], [1.74760758E12, 25880.733333333334], [1.74760728E12, 26591.933333333334], [1.74760794E12, 25287.0], [1.74760764E12, 24930.0], [1.74760734E12, 25911.65]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74760806E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 44.7685512367491, "minX": 1.74760722E12, "maxY": 1907.975476839238, "series": [{"data": [[1.747608E12, 1617.522439585729], [1.7476077E12, 1655.459363957598], [1.7476074E12, 1876.7674731182788], [1.74760806E12, 1239.762831858406], [1.74760776E12, 1620.0869061413675], [1.74760746E12, 1907.975476839238], [1.74760782E12, 1622.441753171858], [1.74760752E12, 1813.5754838709695], [1.74760722E12, 1500.2101313320832], [1.74760788E12, 1607.5972382048321], [1.74760758E12, 1609.7431192660563], [1.74760728E12, 1560.9162011173196], [1.74760794E12, 1631.0410316529892], [1.74760764E12, 1664.3802145411194], [1.74760734E12, 1598.9839633447873]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.747608E12, 44.8446490218642], [1.7476077E12, 46.50176678445233], [1.7476074E12, 49.31578947368421], [1.74760806E12, 44.7685512367491], [1.74760776E12, 46.23201856148491], [1.74760746E12, 48.740489130434725], [1.74760782E12, 45.37139561707038], [1.74760752E12, 48.496774193548376], [1.74760722E12, 83.92481203007526], [1.74760788E12, 45.612643678160914], [1.74760758E12, 46.46444954128435], [1.74760728E12, 46.63392857142859], [1.74760794E12, 45.52230046948352], [1.74760764E12, 47.65595238095238], [1.74760734E12, 45.38946162657501]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74760806E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74760722E12, "maxY": 83.88909774436092, "series": [{"data": [[1.747608E12, 0.0], [1.7476077E12, 0.0], [1.7476074E12, 0.0], [1.74760806E12, 0.0], [1.74760776E12, 0.0], [1.74760746E12, 0.0], [1.74760782E12, 0.0], [1.74760752E12, 0.0], [1.74760722E12, 0.0], [1.74760788E12, 0.0], [1.74760758E12, 0.0], [1.74760728E12, 0.0], [1.74760794E12, 0.0], [1.74760764E12, 0.0], [1.74760734E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.747608E12, 44.83889528193323], [1.7476077E12, 46.49116607773854], [1.7476074E12, 49.30364372469628], [1.74760806E12, 44.761484098939924], [1.74760776E12, 46.22969837587003], [1.74760746E12, 48.72418478260868], [1.74760782E12, 45.36678200692042], [1.74760752E12, 48.48516129032259], [1.74760722E12, 83.88909774436092], [1.74760788E12, 45.60574712643675], [1.74760758E12, 46.45986238532109], [1.74760728E12, 46.61272321428568], [1.74760794E12, 45.51877934272298], [1.74760764E12, 47.6464285714285], [1.74760734E12, 45.378006872852175]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74760806E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74760722E12, "maxY": 21.359022556390986, "series": [{"data": [[1.747608E12, 0.0], [1.7476077E12, 0.0], [1.7476074E12, 0.0], [1.74760806E12, 0.0], [1.74760776E12, 0.0], [1.74760746E12, 0.0], [1.74760782E12, 0.0], [1.74760752E12, 0.0], [1.74760722E12, 0.0], [1.74760788E12, 0.0], [1.74760758E12, 0.0], [1.74760728E12, 0.0], [1.74760794E12, 0.0], [1.74760764E12, 0.0], [1.74760734E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.747608E12, 0.09551208285385507], [1.7476077E12, 0.11071849234393408], [1.7476074E12, 0.16734143049932523], [1.74760806E12, 0.01943462897526501], [1.74760776E12, 0.09048723897911828], [1.74760746E12, 0.14673913043478254], [1.74760782E12, 0.08881199538638983], [1.74760752E12, 0.14967741935483878], [1.74760722E12, 21.359022556390986], [1.74760788E12, 0.08505747126436786], [1.74760758E12, 0.08600917431192659], [1.74760728E12, 0.15178571428571422], [1.74760794E12, 0.0880281690140845], [1.74760764E12, 0.09166666666666659], [1.74760734E12, 0.1305841924398625]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74760806E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 27.0, "minX": 1.74760722E12, "maxY": 9312.0, "series": [{"data": [[1.747608E12, 4999.0], [1.7476077E12, 6867.0], [1.7476074E12, 7807.0], [1.74760806E12, 4912.0], [1.74760776E12, 7441.0], [1.74760746E12, 7429.0], [1.74760782E12, 5791.0], [1.74760752E12, 9312.0], [1.74760722E12, 6255.0], [1.74760788E12, 7212.0], [1.74760758E12, 6149.0], [1.74760728E12, 5238.0], [1.74760794E12, 7137.0], [1.74760764E12, 7128.0], [1.74760734E12, 6915.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.747608E12, 2214.0], [1.7476077E12, 2316.2000000000003], [1.7476074E12, 2604.0000000000023], [1.74760806E12, 1768.6000000000008], [1.74760776E12, 2220.8], [1.74760746E12, 2629.8], [1.74760782E12, 2250.0], [1.74760752E12, 2503.6000000000004], [1.74760722E12, 2098.0], [1.74760788E12, 2195.0], [1.74760758E12, 2234.0], [1.74760728E12, 2129.999999999999], [1.74760794E12, 2213.6000000000004], [1.74760764E12, 2261.0], [1.74760734E12, 2187.3]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.747608E12, 3874.6099999999997], [1.7476077E12, 4639.07], [1.7476074E12, 4861.080000000002], [1.74760806E12, 3210.600000000006], [1.74760776E12, 4020.8], [1.74760746E12, 5201.61], [1.74760782E12, 3867.8000000000047], [1.74760752E12, 4777.4400000000005], [1.74760722E12, 3745.559999999997], [1.74760788E12, 4061.3999999999987], [1.74760758E12, 3932.599999999996], [1.74760728E12, 4089.399999999998], [1.74760794E12, 4412.580000000004], [1.74760764E12, 4219.000000000001], [1.74760734E12, 3951.4299999999994]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.747608E12, 2711.2], [1.7476077E12, 2992.5499999999993], [1.7476074E12, 3259.2000000000003], [1.74760806E12, 2221.399999999998], [1.74760776E12, 2703.0], [1.74760746E12, 3459.5000000000023], [1.74760782E12, 2682.75], [1.74760752E12, 3231.9999999999964], [1.74760722E12, 2524.399999999999], [1.74760788E12, 2756.0], [1.74760758E12, 2830.75], [1.74760728E12, 2624.3999999999996], [1.74760794E12, 2817.7999999999956], [1.74760764E12, 2853.0], [1.74760734E12, 2734.95]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.747608E12, 36.0], [1.7476077E12, 35.0], [1.7476074E12, 35.0], [1.74760806E12, 27.0], [1.74760776E12, 36.0], [1.74760746E12, 35.0], [1.74760782E12, 36.0], [1.74760752E12, 34.0], [1.74760722E12, 36.0], [1.74760788E12, 36.0], [1.74760758E12, 35.0], [1.74760728E12, 36.0], [1.74760794E12, 36.0], [1.74760764E12, 36.0], [1.74760734E12, 35.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.747608E12, 248.5], [1.7476077E12, 269.5], [1.7476074E12, 391.0], [1.74760806E12, 123.0], [1.74760776E12, 356.0], [1.74760746E12, 110.5], [1.74760782E12, 262.0], [1.74760752E12, 249.0], [1.74760722E12, 476.0], [1.74760788E12, 153.0], [1.74760758E12, 263.5], [1.74760728E12, 194.0], [1.74760794E12, 404.0], [1.74760764E12, 187.0], [1.74760734E12, 227.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74760806E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 50.5, "minX": 2.0, "maxY": 1192.0, "series": [{"data": [[33.0, 139.5], [32.0, 411.0], [2.0, 138.5], [34.0, 176.0], [35.0, 261.0], [36.0, 282.0], [37.0, 403.0], [39.0, 124.0], [38.0, 144.5], [40.0, 462.0], [41.0, 142.0], [42.0, 100.0], [43.0, 339.5], [44.0, 370.0], [46.0, 302.0], [49.0, 355.0], [5.0, 346.0], [10.0, 406.0], [11.0, 1192.0], [12.0, 700.5], [13.0, 1055.0], [14.0, 263.5], [15.0, 50.5], [16.0, 685.0], [17.0, 567.0], [18.0, 255.0], [19.0, 737.5], [20.0, 412.5], [21.0, 106.5], [22.0, 75.0], [23.0, 336.0], [24.0, 152.0], [25.0, 100.0], [26.0, 295.0], [27.0, 230.0], [28.0, 100.5], [29.0, 116.0], [30.0, 461.0], [31.0, 157.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 49.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 2.0, "maxY": 40.0, "series": [{"data": [[33.0, 36.5], [32.0, 0.0], [2.0, 14.5], [34.0, 29.5], [35.0, 18.0], [36.0, 18.0], [37.0, 0.0], [39.0, 36.5], [38.0, 36.0], [40.0, 0.0], [41.0, 40.0], [42.0, 39.0], [43.0, 19.5], [44.0, 17.5], [46.0, 19.0], [49.0, 0.0], [5.0, 0.0], [10.0, 0.0], [11.0, 0.0], [12.0, 23.5], [13.0, 0.0], [14.0, 18.0], [15.0, 39.0], [16.0, 0.0], [17.0, 0.0], [18.0, 18.0], [19.0, 0.0], [20.0, 0.0], [21.0, 32.0], [22.0, 28.5], [23.0, 14.0], [24.0, 35.0], [25.0, 35.0], [26.0, 17.5], [27.0, 18.0], [28.0, 36.0], [29.0, 35.0], [30.0, 0.0], [31.0, 36.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 49.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 18.15, "minX": 1.74760722E12, "maxY": 29.85, "series": [{"data": [[1.747608E12, 28.95], [1.7476077E12, 28.3], [1.7476074E12, 24.75], [1.74760806E12, 18.466666666666665], [1.74760776E12, 28.75], [1.74760746E12, 24.5], [1.74760782E12, 28.9], [1.74760752E12, 25.833333333333332], [1.74760722E12, 18.15], [1.74760788E12, 28.983333333333334], [1.74760758E12, 29.066666666666666], [1.74760728E12, 29.85], [1.74760794E12, 28.416666666666668], [1.74760764E12, 27.983333333333334], [1.74760734E12, 29.1]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74760806E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 8.866666666666667, "minX": 1.74760722E12, "maxY": 14.933333333333334, "series": [{"data": [[1.747608E12, 14.483333333333333], [1.7476077E12, 14.15], [1.7476074E12, 12.4], [1.74760806E12, 9.416666666666666], [1.74760776E12, 14.383333333333333], [1.74760746E12, 12.233333333333333], [1.74760782E12, 14.45], [1.74760752E12, 12.916666666666666], [1.74760722E12, 8.883333333333333], [1.74760788E12, 14.483333333333333], [1.74760758E12, 14.533333333333333], [1.74760728E12, 14.916666666666666], [1.74760794E12, 14.216666666666667], [1.74760764E12, 13.983333333333333], [1.74760734E12, 14.55]], "isOverall": false, "label": "0", "isController": false}, {"data": [[1.747608E12, 14.483333333333333], [1.7476077E12, 14.15], [1.7476074E12, 12.35], [1.74760806E12, 9.433333333333334], [1.74760776E12, 14.366666666666667], [1.74760746E12, 12.266666666666667], [1.74760782E12, 14.45], [1.74760752E12, 12.916666666666666], [1.74760722E12, 8.866666666666667], [1.74760788E12, 14.5], [1.74760758E12, 14.533333333333333], [1.74760728E12, 14.933333333333334], [1.74760794E12, 14.2], [1.74760764E12, 14.0], [1.74760734E12, 14.55]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74760806E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 8.866666666666667, "minX": 1.74760722E12, "maxY": 14.933333333333334, "series": [{"data": [[1.747608E12, 14.483333333333333], [1.7476077E12, 14.15], [1.7476074E12, 12.35], [1.74760806E12, 9.433333333333334], [1.74760776E12, 14.366666666666667], [1.74760746E12, 12.266666666666667], [1.74760782E12, 14.45], [1.74760752E12, 12.916666666666666], [1.74760722E12, 8.866666666666667], [1.74760788E12, 14.5], [1.74760758E12, 14.533333333333333], [1.74760728E12, 14.933333333333334], [1.74760794E12, 14.2], [1.74760764E12, 14.0], [1.74760734E12, 14.55]], "isOverall": false, "label": "HTTP Request - enroll-success", "isController": false}, {"data": [[1.747608E12, 14.483333333333333], [1.7476077E12, 14.15], [1.7476074E12, 12.4], [1.74760806E12, 9.416666666666666], [1.74760776E12, 14.383333333333333], [1.74760746E12, 12.233333333333333], [1.74760782E12, 14.45], [1.74760752E12, 12.916666666666666], [1.74760722E12, 8.883333333333333], [1.74760788E12, 14.483333333333333], [1.74760758E12, 14.533333333333333], [1.74760728E12, 14.916666666666666], [1.74760794E12, 14.216666666666667], [1.74760764E12, 13.983333333333333], [1.74760734E12, 14.55]], "isOverall": false, "label": "Create CSR-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74760806E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 17.75, "minX": 1.74760722E12, "maxY": 29.85, "series": [{"data": [[1.747608E12, 28.966666666666665], [1.7476077E12, 28.3], [1.7476074E12, 24.75], [1.74760806E12, 18.85], [1.74760776E12, 28.75], [1.74760746E12, 24.5], [1.74760782E12, 28.9], [1.74760752E12, 25.833333333333332], [1.74760722E12, 17.75], [1.74760788E12, 28.983333333333334], [1.74760758E12, 29.066666666666666], [1.74760728E12, 29.85], [1.74760794E12, 28.416666666666668], [1.74760764E12, 27.983333333333334], [1.74760734E12, 29.1]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74760806E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

