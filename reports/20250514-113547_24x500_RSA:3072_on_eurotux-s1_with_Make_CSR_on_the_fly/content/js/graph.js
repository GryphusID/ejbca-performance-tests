/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 27.0, "minX": 0.0, "maxY": 9368.0, "series": [{"data": [[0.0, 133.0], [0.1, 238.0], [0.2, 287.0], [0.3, 332.0], [0.4, 359.0], [0.5, 383.0], [0.6, 398.0], [0.7, 405.0], [0.8, 412.0], [0.9, 422.0], [1.0, 433.0], [1.1, 440.0], [1.2, 449.0], [1.3, 455.0], [1.4, 461.0], [1.5, 468.0], [1.6, 475.0], [1.7, 478.0], [1.8, 483.0], [1.9, 489.0], [2.0, 496.0], [2.1, 502.0], [2.2, 506.0], [2.3, 509.0], [2.4, 516.0], [2.5, 520.0], [2.6, 524.0], [2.7, 526.0], [2.8, 529.0], [2.9, 532.0], [3.0, 538.0], [3.1, 541.0], [3.2, 545.0], [3.3, 549.0], [3.4, 552.0], [3.5, 555.0], [3.6, 557.0], [3.7, 561.0], [3.8, 563.0], [3.9, 568.0], [4.0, 571.0], [4.1, 574.0], [4.2, 579.0], [4.3, 582.0], [4.4, 585.0], [4.5, 589.0], [4.6, 592.0], [4.7, 595.0], [4.8, 598.0], [4.9, 601.0], [5.0, 604.0], [5.1, 606.0], [5.2, 608.0], [5.3, 611.0], [5.4, 615.0], [5.5, 618.0], [5.6, 621.0], [5.7, 623.0], [5.8, 626.0], [5.9, 629.0], [6.0, 632.0], [6.1, 636.0], [6.2, 640.0], [6.3, 641.0], [6.4, 644.0], [6.5, 647.0], [6.6, 650.0], [6.7, 652.0], [6.8, 654.0], [6.9, 657.0], [7.0, 659.0], [7.1, 661.0], [7.2, 663.0], [7.3, 665.0], [7.4, 667.0], [7.5, 669.0], [7.6, 671.0], [7.7, 675.0], [7.8, 677.0], [7.9, 680.0], [8.0, 682.0], [8.1, 683.0], [8.2, 687.0], [8.3, 688.0], [8.4, 691.0], [8.5, 693.0], [8.6, 695.0], [8.7, 699.0], [8.8, 701.0], [8.9, 704.0], [9.0, 705.0], [9.1, 708.0], [9.2, 710.0], [9.3, 713.0], [9.4, 715.0], [9.5, 717.0], [9.6, 718.0], [9.7, 721.0], [9.8, 724.0], [9.9, 725.0], [10.0, 727.0], [10.1, 729.0], [10.2, 731.0], [10.3, 732.0], [10.4, 734.0], [10.5, 735.0], [10.6, 736.0], [10.7, 738.0], [10.8, 740.0], [10.9, 742.0], [11.0, 744.0], [11.1, 746.0], [11.2, 748.0], [11.3, 749.0], [11.4, 751.0], [11.5, 753.0], [11.6, 755.0], [11.7, 757.0], [11.8, 759.0], [11.9, 760.0], [12.0, 763.0], [12.1, 764.0], [12.2, 766.0], [12.3, 767.0], [12.4, 769.0], [12.5, 770.0], [12.6, 774.0], [12.7, 776.0], [12.8, 778.0], [12.9, 780.0], [13.0, 782.0], [13.1, 785.0], [13.2, 786.0], [13.3, 789.0], [13.4, 793.0], [13.5, 795.0], [13.6, 796.0], [13.7, 799.0], [13.8, 801.0], [13.9, 804.0], [14.0, 806.0], [14.1, 807.0], [14.2, 810.0], [14.3, 812.0], [14.4, 814.0], [14.5, 816.0], [14.6, 817.0], [14.7, 820.0], [14.8, 823.0], [14.9, 824.0], [15.0, 826.0], [15.1, 828.0], [15.2, 830.0], [15.3, 831.0], [15.4, 834.0], [15.5, 836.0], [15.6, 838.0], [15.7, 840.0], [15.8, 842.0], [15.9, 844.0], [16.0, 846.0], [16.1, 849.0], [16.2, 852.0], [16.3, 855.0], [16.4, 857.0], [16.5, 859.0], [16.6, 861.0], [16.7, 862.0], [16.8, 864.0], [16.9, 866.0], [17.0, 868.0], [17.1, 870.0], [17.2, 872.0], [17.3, 874.0], [17.4, 876.0], [17.5, 878.0], [17.6, 880.0], [17.7, 882.0], [17.8, 885.0], [17.9, 888.0], [18.0, 889.0], [18.1, 892.0], [18.2, 893.0], [18.3, 895.0], [18.4, 895.0], [18.5, 898.0], [18.6, 900.0], [18.7, 902.0], [18.8, 903.0], [18.9, 905.0], [19.0, 907.0], [19.1, 908.0], [19.2, 910.0], [19.3, 912.0], [19.4, 914.0], [19.5, 916.0], [19.6, 917.0], [19.7, 919.0], [19.8, 922.0], [19.9, 923.0], [20.0, 926.0], [20.1, 928.0], [20.2, 931.0], [20.3, 933.0], [20.4, 935.0], [20.5, 937.0], [20.6, 939.0], [20.7, 941.0], [20.8, 943.0], [20.9, 945.0], [21.0, 946.0], [21.1, 948.0], [21.2, 950.0], [21.3, 952.0], [21.4, 953.0], [21.5, 954.0], [21.6, 956.0], [21.7, 958.0], [21.8, 960.0], [21.9, 962.0], [22.0, 964.0], [22.1, 966.0], [22.2, 968.0], [22.3, 970.0], [22.4, 971.0], [22.5, 973.0], [22.6, 976.0], [22.7, 977.0], [22.8, 978.0], [22.9, 980.0], [23.0, 982.0], [23.1, 983.0], [23.2, 985.0], [23.3, 986.0], [23.4, 988.0], [23.5, 990.0], [23.6, 992.0], [23.7, 994.0], [23.8, 996.0], [23.9, 997.0], [24.0, 998.0], [24.1, 1000.0], [24.2, 1003.0], [24.3, 1005.0], [24.4, 1007.0], [24.5, 1009.0], [24.6, 1012.0], [24.7, 1013.0], [24.8, 1017.0], [24.9, 1018.0], [25.0, 1019.0], [25.1, 1020.0], [25.2, 1022.0], [25.3, 1026.0], [25.4, 1028.0], [25.5, 1029.0], [25.6, 1031.0], [25.7, 1032.0], [25.8, 1033.0], [25.9, 1035.0], [26.0, 1038.0], [26.1, 1039.0], [26.2, 1040.0], [26.3, 1042.0], [26.4, 1044.0], [26.5, 1046.0], [26.6, 1047.0], [26.7, 1049.0], [26.8, 1051.0], [26.9, 1053.0], [27.0, 1054.0], [27.1, 1056.0], [27.2, 1058.0], [27.3, 1060.0], [27.4, 1062.0], [27.5, 1064.0], [27.6, 1065.0], [27.7, 1067.0], [27.8, 1069.0], [27.9, 1070.0], [28.0, 1072.0], [28.1, 1075.0], [28.2, 1077.0], [28.3, 1079.0], [28.4, 1080.0], [28.5, 1082.0], [28.6, 1083.0], [28.7, 1084.0], [28.8, 1087.0], [28.9, 1089.0], [29.0, 1090.0], [29.1, 1092.0], [29.2, 1094.0], [29.3, 1096.0], [29.4, 1098.0], [29.5, 1099.0], [29.6, 1101.0], [29.7, 1103.0], [29.8, 1104.0], [29.9, 1106.0], [30.0, 1107.0], [30.1, 1109.0], [30.2, 1110.0], [30.3, 1112.0], [30.4, 1113.0], [30.5, 1115.0], [30.6, 1117.0], [30.7, 1118.0], [30.8, 1121.0], [30.9, 1122.0], [31.0, 1123.0], [31.1, 1126.0], [31.2, 1127.0], [31.3, 1129.0], [31.4, 1131.0], [31.5, 1133.0], [31.6, 1135.0], [31.7, 1137.0], [31.8, 1138.0], [31.9, 1139.0], [32.0, 1142.0], [32.1, 1144.0], [32.2, 1146.0], [32.3, 1148.0], [32.4, 1151.0], [32.5, 1153.0], [32.6, 1155.0], [32.7, 1157.0], [32.8, 1159.0], [32.9, 1162.0], [33.0, 1163.0], [33.1, 1165.0], [33.2, 1166.0], [33.3, 1167.0], [33.4, 1169.0], [33.5, 1171.0], [33.6, 1173.0], [33.7, 1175.0], [33.8, 1177.0], [33.9, 1180.0], [34.0, 1182.0], [34.1, 1185.0], [34.2, 1187.0], [34.3, 1188.0], [34.4, 1190.0], [34.5, 1192.0], [34.6, 1194.0], [34.7, 1195.0], [34.8, 1197.0], [34.9, 1198.0], [35.0, 1200.0], [35.1, 1202.0], [35.2, 1203.0], [35.3, 1205.0], [35.4, 1206.0], [35.5, 1207.0], [35.6, 1209.0], [35.7, 1210.0], [35.8, 1211.0], [35.9, 1213.0], [36.0, 1215.0], [36.1, 1217.0], [36.2, 1218.0], [36.3, 1219.0], [36.4, 1220.0], [36.5, 1223.0], [36.6, 1225.0], [36.7, 1228.0], [36.8, 1230.0], [36.9, 1232.0], [37.0, 1234.0], [37.1, 1236.0], [37.2, 1238.0], [37.3, 1240.0], [37.4, 1241.0], [37.5, 1243.0], [37.6, 1246.0], [37.7, 1248.0], [37.8, 1250.0], [37.9, 1252.0], [38.0, 1254.0], [38.1, 1255.0], [38.2, 1258.0], [38.3, 1259.0], [38.4, 1261.0], [38.5, 1262.0], [38.6, 1265.0], [38.7, 1267.0], [38.8, 1270.0], [38.9, 1271.0], [39.0, 1272.0], [39.1, 1273.0], [39.2, 1274.0], [39.3, 1276.0], [39.4, 1279.0], [39.5, 1280.0], [39.6, 1282.0], [39.7, 1284.0], [39.8, 1286.0], [39.9, 1287.0], [40.0, 1289.0], [40.1, 1291.0], [40.2, 1293.0], [40.3, 1296.0], [40.4, 1297.0], [40.5, 1299.0], [40.6, 1301.0], [40.7, 1302.0], [40.8, 1304.0], [40.9, 1306.0], [41.0, 1307.0], [41.1, 1311.0], [41.2, 1313.0], [41.3, 1315.0], [41.4, 1317.0], [41.5, 1318.0], [41.6, 1320.0], [41.7, 1321.0], [41.8, 1323.0], [41.9, 1324.0], [42.0, 1327.0], [42.1, 1330.0], [42.2, 1331.0], [42.3, 1333.0], [42.4, 1334.0], [42.5, 1336.0], [42.6, 1338.0], [42.7, 1339.0], [42.8, 1342.0], [42.9, 1344.0], [43.0, 1345.0], [43.1, 1349.0], [43.2, 1351.0], [43.3, 1354.0], [43.4, 1355.0], [43.5, 1358.0], [43.6, 1360.0], [43.7, 1361.0], [43.8, 1362.0], [43.9, 1363.0], [44.0, 1365.0], [44.1, 1367.0], [44.2, 1369.0], [44.3, 1372.0], [44.4, 1374.0], [44.5, 1376.0], [44.6, 1379.0], [44.7, 1382.0], [44.8, 1385.0], [44.9, 1387.0], [45.0, 1389.0], [45.1, 1391.0], [45.2, 1393.0], [45.3, 1396.0], [45.4, 1398.0], [45.5, 1400.0], [45.6, 1402.0], [45.7, 1404.0], [45.8, 1407.0], [45.9, 1409.0], [46.0, 1411.0], [46.1, 1413.0], [46.2, 1415.0], [46.3, 1417.0], [46.4, 1420.0], [46.5, 1421.0], [46.6, 1424.0], [46.7, 1426.0], [46.8, 1429.0], [46.9, 1431.0], [47.0, 1434.0], [47.1, 1436.0], [47.2, 1438.0], [47.3, 1441.0], [47.4, 1443.0], [47.5, 1444.0], [47.6, 1446.0], [47.7, 1447.0], [47.8, 1450.0], [47.9, 1454.0], [48.0, 1456.0], [48.1, 1459.0], [48.2, 1462.0], [48.3, 1463.0], [48.4, 1465.0], [48.5, 1467.0], [48.6, 1468.0], [48.7, 1471.0], [48.8, 1473.0], [48.9, 1476.0], [49.0, 1479.0], [49.1, 1481.0], [49.2, 1482.0], [49.3, 1484.0], [49.4, 1486.0], [49.5, 1489.0], [49.6, 1490.0], [49.7, 1493.0], [49.8, 1495.0], [49.9, 1497.0], [50.0, 1498.0], [50.1, 1501.0], [50.2, 1503.0], [50.3, 1504.0], [50.4, 1505.0], [50.5, 1507.0], [50.6, 1510.0], [50.7, 1512.0], [50.8, 1515.0], [50.9, 1518.0], [51.0, 1520.0], [51.1, 1523.0], [51.2, 1525.0], [51.3, 1527.0], [51.4, 1530.0], [51.5, 1533.0], [51.6, 1535.0], [51.7, 1538.0], [51.8, 1541.0], [51.9, 1543.0], [52.0, 1545.0], [52.1, 1547.0], [52.2, 1550.0], [52.3, 1552.0], [52.4, 1553.0], [52.5, 1556.0], [52.6, 1558.0], [52.7, 1561.0], [52.8, 1564.0], [52.9, 1566.0], [53.0, 1569.0], [53.1, 1571.0], [53.2, 1573.0], [53.3, 1575.0], [53.4, 1577.0], [53.5, 1579.0], [53.6, 1581.0], [53.7, 1583.0], [53.8, 1586.0], [53.9, 1588.0], [54.0, 1589.0], [54.1, 1592.0], [54.2, 1594.0], [54.3, 1596.0], [54.4, 1600.0], [54.5, 1602.0], [54.6, 1605.0], [54.7, 1607.0], [54.8, 1609.0], [54.9, 1611.0], [55.0, 1614.0], [55.1, 1616.0], [55.2, 1618.0], [55.3, 1620.0], [55.4, 1622.0], [55.5, 1624.0], [55.6, 1627.0], [55.7, 1629.0], [55.8, 1631.0], [55.9, 1633.0], [56.0, 1636.0], [56.1, 1640.0], [56.2, 1643.0], [56.3, 1646.0], [56.4, 1648.0], [56.5, 1650.0], [56.6, 1652.0], [56.7, 1655.0], [56.8, 1657.0], [56.9, 1659.0], [57.0, 1662.0], [57.1, 1665.0], [57.2, 1667.0], [57.3, 1670.0], [57.4, 1673.0], [57.5, 1675.0], [57.6, 1676.0], [57.7, 1679.0], [57.8, 1681.0], [57.9, 1683.0], [58.0, 1685.0], [58.1, 1689.0], [58.2, 1691.0], [58.3, 1694.0], [58.4, 1696.0], [58.5, 1698.0], [58.6, 1699.0], [58.7, 1702.0], [58.8, 1704.0], [58.9, 1706.0], [59.0, 1709.0], [59.1, 1712.0], [59.2, 1715.0], [59.3, 1718.0], [59.4, 1720.0], [59.5, 1721.0], [59.6, 1723.0], [59.7, 1727.0], [59.8, 1730.0], [59.9, 1733.0], [60.0, 1735.0], [60.1, 1739.0], [60.2, 1741.0], [60.3, 1743.0], [60.4, 1746.0], [60.5, 1750.0], [60.6, 1751.0], [60.7, 1754.0], [60.8, 1756.0], [60.9, 1760.0], [61.0, 1762.0], [61.1, 1764.0], [61.2, 1769.0], [61.3, 1771.0], [61.4, 1773.0], [61.5, 1775.0], [61.6, 1778.0], [61.7, 1779.0], [61.8, 1783.0], [61.9, 1786.0], [62.0, 1790.0], [62.1, 1792.0], [62.2, 1793.0], [62.3, 1796.0], [62.4, 1801.0], [62.5, 1805.0], [62.6, 1810.0], [62.7, 1813.0], [62.8, 1816.0], [62.9, 1819.0], [63.0, 1821.0], [63.1, 1824.0], [63.2, 1827.0], [63.3, 1829.0], [63.4, 1831.0], [63.5, 1833.0], [63.6, 1835.0], [63.7, 1838.0], [63.8, 1843.0], [63.9, 1846.0], [64.0, 1849.0], [64.1, 1852.0], [64.2, 1859.0], [64.3, 1862.0], [64.4, 1864.0], [64.5, 1868.0], [64.6, 1872.0], [64.7, 1876.0], [64.8, 1879.0], [64.9, 1883.0], [65.0, 1886.0], [65.1, 1891.0], [65.2, 1894.0], [65.3, 1897.0], [65.4, 1898.0], [65.5, 1901.0], [65.6, 1903.0], [65.7, 1906.0], [65.8, 1908.0], [65.9, 1911.0], [66.0, 1914.0], [66.1, 1918.0], [66.2, 1920.0], [66.3, 1923.0], [66.4, 1925.0], [66.5, 1930.0], [66.6, 1933.0], [66.7, 1936.0], [66.8, 1941.0], [66.9, 1944.0], [67.0, 1946.0], [67.1, 1949.0], [67.2, 1952.0], [67.3, 1955.0], [67.4, 1958.0], [67.5, 1961.0], [67.6, 1964.0], [67.7, 1968.0], [67.8, 1970.0], [67.9, 1972.0], [68.0, 1976.0], [68.1, 1980.0], [68.2, 1982.0], [68.3, 1985.0], [68.4, 1988.0], [68.5, 1991.0], [68.6, 1996.0], [68.7, 1999.0], [68.8, 2003.0], [68.9, 2007.0], [69.0, 2010.0], [69.1, 2013.0], [69.2, 2015.0], [69.3, 2018.0], [69.4, 2022.0], [69.5, 2024.0], [69.6, 2027.0], [69.7, 2030.0], [69.8, 2036.0], [69.9, 2039.0], [70.0, 2041.0], [70.1, 2043.0], [70.2, 2047.0], [70.3, 2051.0], [70.4, 2054.0], [70.5, 2057.0], [70.6, 2059.0], [70.7, 2061.0], [70.8, 2063.0], [70.9, 2067.0], [71.0, 2071.0], [71.1, 2074.0], [71.2, 2078.0], [71.3, 2083.0], [71.4, 2086.0], [71.5, 2091.0], [71.6, 2094.0], [71.7, 2097.0], [71.8, 2099.0], [71.9, 2103.0], [72.0, 2106.0], [72.1, 2109.0], [72.2, 2114.0], [72.3, 2117.0], [72.4, 2123.0], [72.5, 2126.0], [72.6, 2128.0], [72.7, 2133.0], [72.8, 2136.0], [72.9, 2139.0], [73.0, 2142.0], [73.1, 2146.0], [73.2, 2149.0], [73.3, 2152.0], [73.4, 2156.0], [73.5, 2158.0], [73.6, 2162.0], [73.7, 2168.0], [73.8, 2172.0], [73.9, 2175.0], [74.0, 2177.0], [74.1, 2181.0], [74.2, 2185.0], [74.3, 2189.0], [74.4, 2192.0], [74.5, 2197.0], [74.6, 2199.0], [74.7, 2207.0], [74.8, 2213.0], [74.9, 2219.0], [75.0, 2223.0], [75.1, 2228.0], [75.2, 2231.0], [75.3, 2237.0], [75.4, 2241.0], [75.5, 2245.0], [75.6, 2251.0], [75.7, 2255.0], [75.8, 2260.0], [75.9, 2264.0], [76.0, 2269.0], [76.1, 2271.0], [76.2, 2274.0], [76.3, 2279.0], [76.4, 2283.0], [76.5, 2287.0], [76.6, 2290.0], [76.7, 2297.0], [76.8, 2299.0], [76.9, 2302.0], [77.0, 2305.0], [77.1, 2311.0], [77.2, 2317.0], [77.3, 2320.0], [77.4, 2323.0], [77.5, 2327.0], [77.6, 2330.0], [77.7, 2336.0], [77.8, 2340.0], [77.9, 2344.0], [78.0, 2349.0], [78.1, 2353.0], [78.2, 2355.0], [78.3, 2358.0], [78.4, 2362.0], [78.5, 2366.0], [78.6, 2371.0], [78.7, 2374.0], [78.8, 2377.0], [78.9, 2383.0], [79.0, 2393.0], [79.1, 2396.0], [79.2, 2400.0], [79.3, 2406.0], [79.4, 2411.0], [79.5, 2417.0], [79.6, 2419.0], [79.7, 2422.0], [79.8, 2426.0], [79.9, 2430.0], [80.0, 2436.0], [80.1, 2441.0], [80.2, 2444.0], [80.3, 2451.0], [80.4, 2454.0], [80.5, 2458.0], [80.6, 2467.0], [80.7, 2472.0], [80.8, 2476.0], [80.9, 2479.0], [81.0, 2482.0], [81.1, 2486.0], [81.2, 2490.0], [81.3, 2493.0], [81.4, 2501.0], [81.5, 2507.0], [81.6, 2512.0], [81.7, 2516.0], [81.8, 2519.0], [81.9, 2523.0], [82.0, 2526.0], [82.1, 2531.0], [82.2, 2535.0], [82.3, 2541.0], [82.4, 2545.0], [82.5, 2550.0], [82.6, 2554.0], [82.7, 2559.0], [82.8, 2566.0], [82.9, 2572.0], [83.0, 2578.0], [83.1, 2583.0], [83.2, 2587.0], [83.3, 2593.0], [83.4, 2598.0], [83.5, 2603.0], [83.6, 2608.0], [83.7, 2611.0], [83.8, 2617.0], [83.9, 2623.0], [84.0, 2629.0], [84.1, 2635.0], [84.2, 2640.0], [84.3, 2645.0], [84.4, 2651.0], [84.5, 2657.0], [84.6, 2662.0], [84.7, 2671.0], [84.8, 2676.0], [84.9, 2681.0], [85.0, 2686.0], [85.1, 2693.0], [85.2, 2699.0], [85.3, 2707.0], [85.4, 2715.0], [85.5, 2720.0], [85.6, 2726.0], [85.7, 2730.0], [85.8, 2740.0], [85.9, 2748.0], [86.0, 2752.0], [86.1, 2759.0], [86.2, 2773.0], [86.3, 2781.0], [86.4, 2787.0], [86.5, 2796.0], [86.6, 2805.0], [86.7, 2814.0], [86.8, 2822.0], [86.9, 2829.0], [87.0, 2837.0], [87.1, 2845.0], [87.2, 2849.0], [87.3, 2855.0], [87.4, 2864.0], [87.5, 2869.0], [87.6, 2877.0], [87.7, 2886.0], [87.8, 2891.0], [87.9, 2898.0], [88.0, 2907.0], [88.1, 2913.0], [88.2, 2922.0], [88.3, 2927.0], [88.4, 2936.0], [88.5, 2942.0], [88.6, 2947.0], [88.7, 2960.0], [88.8, 2968.0], [88.9, 2980.0], [89.0, 2987.0], [89.1, 2995.0], [89.2, 3000.0], [89.3, 3007.0], [89.4, 3013.0], [89.5, 3023.0], [89.6, 3031.0], [89.7, 3038.0], [89.8, 3045.0], [89.9, 3051.0], [90.0, 3061.0], [90.1, 3070.0], [90.2, 3079.0], [90.3, 3085.0], [90.4, 3091.0], [90.5, 3099.0], [90.6, 3106.0], [90.7, 3119.0], [90.8, 3134.0], [90.9, 3141.0], [91.0, 3148.0], [91.1, 3159.0], [91.2, 3166.0], [91.3, 3178.0], [91.4, 3187.0], [91.5, 3199.0], [91.6, 3212.0], [91.7, 3220.0], [91.8, 3231.0], [91.9, 3248.0], [92.0, 3258.0], [92.1, 3274.0], [92.2, 3287.0], [92.3, 3299.0], [92.4, 3310.0], [92.5, 3318.0], [92.6, 3329.0], [92.7, 3347.0], [92.8, 3358.0], [92.9, 3372.0], [93.0, 3382.0], [93.1, 3394.0], [93.2, 3408.0], [93.3, 3425.0], [93.4, 3441.0], [93.5, 3456.0], [93.6, 3475.0], [93.7, 3486.0], [93.8, 3499.0], [93.9, 3513.0], [94.0, 3529.0], [94.1, 3541.0], [94.2, 3554.0], [94.3, 3568.0], [94.4, 3585.0], [94.5, 3602.0], [94.6, 3620.0], [94.7, 3634.0], [94.8, 3649.0], [94.9, 3666.0], [95.0, 3691.0], [95.1, 3703.0], [95.2, 3721.0], [95.3, 3741.0], [95.4, 3750.0], [95.5, 3769.0], [95.6, 3801.0], [95.7, 3818.0], [95.8, 3837.0], [95.9, 3872.0], [96.0, 3897.0], [96.1, 3917.0], [96.2, 3938.0], [96.3, 3959.0], [96.4, 3992.0], [96.5, 4013.0], [96.6, 4034.0], [96.7, 4063.0], [96.8, 4098.0], [96.9, 4124.0], [97.0, 4167.0], [97.1, 4192.0], [97.2, 4225.0], [97.3, 4238.0], [97.4, 4279.0], [97.5, 4306.0], [97.6, 4350.0], [97.7, 4384.0], [97.8, 4425.0], [97.9, 4480.0], [98.0, 4535.0], [98.1, 4588.0], [98.2, 4610.0], [98.3, 4653.0], [98.4, 4756.0], [98.5, 4809.0], [98.6, 4896.0], [98.7, 4931.0], [98.8, 5001.0], [98.9, 5066.0], [99.0, 5151.0], [99.1, 5277.0], [99.2, 5379.0], [99.3, 5504.0], [99.4, 5651.0], [99.5, 5798.0], [99.6, 5971.0], [99.7, 6345.0], [99.8, 6526.0], [99.9, 7395.0], [100.0, 9368.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 27.0], [0.1, 30.0], [0.2, 31.0], [0.3, 33.0], [0.4, 35.0], [0.5, 36.0], [0.6, 36.0], [0.7, 37.0], [0.8, 37.0], [0.9, 37.0], [1.0, 37.0], [1.1, 37.0], [1.2, 37.0], [1.3, 37.0], [1.4, 37.0], [1.5, 38.0], [1.6, 38.0], [1.7, 38.0], [1.8, 38.0], [1.9, 38.0], [2.0, 38.0], [2.1, 38.0], [2.2, 38.0], [2.3, 38.0], [2.4, 38.0], [2.5, 38.0], [2.6, 38.0], [2.7, 38.0], [2.8, 38.0], [2.9, 38.0], [3.0, 38.0], [3.1, 39.0], [3.2, 39.0], [3.3, 39.0], [3.4, 39.0], [3.5, 39.0], [3.6, 39.0], [3.7, 39.0], [3.8, 39.0], [3.9, 39.0], [4.0, 39.0], [4.1, 39.0], [4.2, 39.0], [4.3, 39.0], [4.4, 39.0], [4.5, 39.0], [4.6, 39.0], [4.7, 39.0], [4.8, 39.0], [4.9, 39.0], [5.0, 39.0], [5.1, 39.0], [5.2, 39.0], [5.3, 39.0], [5.4, 39.0], [5.5, 39.0], [5.6, 39.0], [5.7, 39.0], [5.8, 39.0], [5.9, 39.0], [6.0, 39.0], [6.1, 39.0], [6.2, 39.0], [6.3, 40.0], [6.4, 40.0], [6.5, 40.0], [6.6, 40.0], [6.7, 40.0], [6.8, 40.0], [6.9, 40.0], [7.0, 40.0], [7.1, 40.0], [7.2, 40.0], [7.3, 40.0], [7.4, 40.0], [7.5, 40.0], [7.6, 40.0], [7.7, 40.0], [7.8, 40.0], [7.9, 40.0], [8.0, 40.0], [8.1, 40.0], [8.2, 40.0], [8.3, 40.0], [8.4, 40.0], [8.5, 40.0], [8.6, 40.0], [8.7, 40.0], [8.8, 40.0], [8.9, 40.0], [9.0, 40.0], [9.1, 40.0], [9.2, 40.0], [9.3, 40.0], [9.4, 40.0], [9.5, 40.0], [9.6, 40.0], [9.7, 40.0], [9.8, 40.0], [9.9, 40.0], [10.0, 40.0], [10.1, 40.0], [10.2, 40.0], [10.3, 40.0], [10.4, 40.0], [10.5, 40.0], [10.6, 41.0], [10.7, 41.0], [10.8, 41.0], [10.9, 41.0], [11.0, 41.0], [11.1, 41.0], [11.2, 41.0], [11.3, 41.0], [11.4, 41.0], [11.5, 41.0], [11.6, 41.0], [11.7, 41.0], [11.8, 41.0], [11.9, 41.0], [12.0, 41.0], [12.1, 41.0], [12.2, 41.0], [12.3, 41.0], [12.4, 41.0], [12.5, 41.0], [12.6, 41.0], [12.7, 41.0], [12.8, 41.0], [12.9, 41.0], [13.0, 41.0], [13.1, 41.0], [13.2, 41.0], [13.3, 41.0], [13.4, 41.0], [13.5, 41.0], [13.6, 41.0], [13.7, 41.0], [13.8, 41.0], [13.9, 41.0], [14.0, 41.0], [14.1, 41.0], [14.2, 41.0], [14.3, 41.0], [14.4, 41.0], [14.5, 41.0], [14.6, 41.0], [14.7, 41.0], [14.8, 41.0], [14.9, 41.0], [15.0, 41.0], [15.1, 41.0], [15.2, 41.0], [15.3, 42.0], [15.4, 42.0], [15.5, 42.0], [15.6, 42.0], [15.7, 42.0], [15.8, 42.0], [15.9, 42.0], [16.0, 42.0], [16.1, 42.0], [16.2, 42.0], [16.3, 42.0], [16.4, 42.0], [16.5, 42.0], [16.6, 42.0], [16.7, 42.0], [16.8, 42.0], [16.9, 42.0], [17.0, 42.0], [17.1, 42.0], [17.2, 42.0], [17.3, 42.0], [17.4, 42.0], [17.5, 42.0], [17.6, 42.0], [17.7, 42.0], [17.8, 42.0], [17.9, 42.0], [18.0, 42.0], [18.1, 42.0], [18.2, 42.0], [18.3, 42.0], [18.4, 42.0], [18.5, 42.0], [18.6, 42.0], [18.7, 42.0], [18.8, 42.0], [18.9, 42.0], [19.0, 42.0], [19.1, 42.0], [19.2, 42.0], [19.3, 42.0], [19.4, 42.0], [19.5, 42.0], [19.6, 42.0], [19.7, 42.0], [19.8, 42.0], [19.9, 42.0], [20.0, 42.0], [20.1, 42.0], [20.2, 42.0], [20.3, 42.0], [20.4, 42.0], [20.5, 42.0], [20.6, 42.0], [20.7, 42.0], [20.8, 42.0], [20.9, 42.0], [21.0, 42.0], [21.1, 42.0], [21.2, 43.0], [21.3, 43.0], [21.4, 43.0], [21.5, 43.0], [21.6, 43.0], [21.7, 43.0], [21.8, 43.0], [21.9, 43.0], [22.0, 43.0], [22.1, 43.0], [22.2, 43.0], [22.3, 43.0], [22.4, 43.0], [22.5, 43.0], [22.6, 43.0], [22.7, 43.0], [22.8, 43.0], [22.9, 43.0], [23.0, 43.0], [23.1, 43.0], [23.2, 43.0], [23.3, 43.0], [23.4, 43.0], [23.5, 43.0], [23.6, 43.0], [23.7, 43.0], [23.8, 43.0], [23.9, 43.0], [24.0, 43.0], [24.1, 43.0], [24.2, 43.0], [24.3, 43.0], [24.4, 43.0], [24.5, 43.0], [24.6, 43.0], [24.7, 43.0], [24.8, 43.0], [24.9, 43.0], [25.0, 43.0], [25.1, 43.0], [25.2, 43.0], [25.3, 43.0], [25.4, 43.0], [25.5, 43.0], [25.6, 43.0], [25.7, 43.0], [25.8, 43.0], [25.9, 43.0], [26.0, 43.0], [26.1, 43.0], [26.2, 43.0], [26.3, 43.0], [26.4, 43.0], [26.5, 43.0], [26.6, 43.0], [26.7, 43.0], [26.8, 43.0], [26.9, 43.0], [27.0, 43.0], [27.1, 43.0], [27.2, 43.0], [27.3, 43.0], [27.4, 43.0], [27.5, 43.0], [27.6, 43.0], [27.7, 43.0], [27.8, 43.0], [27.9, 43.0], [28.0, 43.0], [28.1, 43.0], [28.2, 43.0], [28.3, 43.0], [28.4, 44.0], [28.5, 44.0], [28.6, 44.0], [28.7, 44.0], [28.8, 44.0], [28.9, 44.0], [29.0, 44.0], [29.1, 44.0], [29.2, 44.0], [29.3, 44.0], [29.4, 44.0], [29.5, 44.0], [29.6, 44.0], [29.7, 44.0], [29.8, 44.0], [29.9, 44.0], [30.0, 44.0], [30.1, 44.0], [30.2, 44.0], [30.3, 44.0], [30.4, 44.0], [30.5, 44.0], [30.6, 44.0], [30.7, 44.0], [30.8, 44.0], [30.9, 44.0], [31.0, 44.0], [31.1, 44.0], [31.2, 44.0], [31.3, 44.0], [31.4, 44.0], [31.5, 44.0], [31.6, 44.0], [31.7, 44.0], [31.8, 44.0], [31.9, 44.0], [32.0, 44.0], [32.1, 44.0], [32.2, 44.0], [32.3, 44.0], [32.4, 44.0], [32.5, 44.0], [32.6, 44.0], [32.7, 44.0], [32.8, 44.0], [32.9, 44.0], [33.0, 44.0], [33.1, 44.0], [33.2, 44.0], [33.3, 44.0], [33.4, 44.0], [33.5, 44.0], [33.6, 44.0], [33.7, 44.0], [33.8, 44.0], [33.9, 44.0], [34.0, 44.0], [34.1, 44.0], [34.2, 44.0], [34.3, 44.0], [34.4, 44.0], [34.5, 44.0], [34.6, 44.0], [34.7, 44.0], [34.8, 44.0], [34.9, 44.0], [35.0, 44.0], [35.1, 44.0], [35.2, 44.0], [35.3, 44.0], [35.4, 44.0], [35.5, 44.0], [35.6, 44.0], [35.7, 44.0], [35.8, 44.0], [35.9, 45.0], [36.0, 45.0], [36.1, 45.0], [36.2, 45.0], [36.3, 45.0], [36.4, 45.0], [36.5, 45.0], [36.6, 45.0], [36.7, 45.0], [36.8, 45.0], [36.9, 45.0], [37.0, 45.0], [37.1, 45.0], [37.2, 45.0], [37.3, 45.0], [37.4, 45.0], [37.5, 45.0], [37.6, 45.0], [37.7, 45.0], [37.8, 45.0], [37.9, 45.0], [38.0, 45.0], [38.1, 45.0], [38.2, 45.0], [38.3, 45.0], [38.4, 45.0], [38.5, 45.0], [38.6, 45.0], [38.7, 45.0], [38.8, 45.0], [38.9, 45.0], [39.0, 45.0], [39.1, 45.0], [39.2, 45.0], [39.3, 45.0], [39.4, 45.0], [39.5, 45.0], [39.6, 45.0], [39.7, 45.0], [39.8, 45.0], [39.9, 45.0], [40.0, 45.0], [40.1, 45.0], [40.2, 45.0], [40.3, 45.0], [40.4, 45.0], [40.5, 45.0], [40.6, 45.0], [40.7, 45.0], [40.8, 45.0], [40.9, 45.0], [41.0, 45.0], [41.1, 45.0], [41.2, 45.0], [41.3, 45.0], [41.4, 45.0], [41.5, 45.0], [41.6, 45.0], [41.7, 45.0], [41.8, 45.0], [41.9, 45.0], [42.0, 45.0], [42.1, 45.0], [42.2, 45.0], [42.3, 45.0], [42.4, 45.0], [42.5, 45.0], [42.6, 45.0], [42.7, 45.0], [42.8, 45.0], [42.9, 45.0], [43.0, 45.0], [43.1, 45.0], [43.2, 45.0], [43.3, 45.0], [43.4, 45.0], [43.5, 45.0], [43.6, 46.0], [43.7, 46.0], [43.8, 46.0], [43.9, 46.0], [44.0, 46.0], [44.1, 46.0], [44.2, 46.0], [44.3, 46.0], [44.4, 46.0], [44.5, 46.0], [44.6, 46.0], [44.7, 46.0], [44.8, 46.0], [44.9, 46.0], [45.0, 46.0], [45.1, 46.0], [45.2, 46.0], [45.3, 46.0], [45.4, 46.0], [45.5, 46.0], [45.6, 46.0], [45.7, 46.0], [45.8, 46.0], [45.9, 46.0], [46.0, 46.0], [46.1, 46.0], [46.2, 46.0], [46.3, 46.0], [46.4, 46.0], [46.5, 46.0], [46.6, 46.0], [46.7, 46.0], [46.8, 46.0], [46.9, 46.0], [47.0, 46.0], [47.1, 46.0], [47.2, 46.0], [47.3, 46.0], [47.4, 46.0], [47.5, 46.0], [47.6, 46.0], [47.7, 46.0], [47.8, 46.0], [47.9, 46.0], [48.0, 46.0], [48.1, 46.0], [48.2, 46.0], [48.3, 46.0], [48.4, 46.0], [48.5, 46.0], [48.6, 46.0], [48.7, 46.0], [48.8, 46.0], [48.9, 46.0], [49.0, 46.0], [49.1, 46.0], [49.2, 46.0], [49.3, 46.0], [49.4, 46.0], [49.5, 46.0], [49.6, 47.0], [49.7, 47.0], [49.8, 47.0], [49.9, 47.0], [50.0, 47.0], [50.1, 47.0], [50.2, 47.0], [50.3, 47.0], [50.4, 47.0], [50.5, 47.0], [50.6, 47.0], [50.7, 47.0], [50.8, 47.0], [50.9, 47.0], [51.0, 47.0], [51.1, 47.0], [51.2, 47.0], [51.3, 47.0], [51.4, 47.0], [51.5, 47.0], [51.6, 47.0], [51.7, 47.0], [51.8, 47.0], [51.9, 47.0], [52.0, 47.0], [52.1, 47.0], [52.2, 47.0], [52.3, 47.0], [52.4, 47.0], [52.5, 47.0], [52.6, 47.0], [52.7, 47.0], [52.8, 47.0], [52.9, 47.0], [53.0, 47.0], [53.1, 47.0], [53.2, 47.0], [53.3, 47.0], [53.4, 47.0], [53.5, 47.0], [53.6, 47.0], [53.7, 47.0], [53.8, 47.0], [53.9, 47.0], [54.0, 47.0], [54.1, 47.0], [54.2, 47.0], [54.3, 47.0], [54.4, 47.0], [54.5, 48.0], [54.6, 48.0], [54.7, 48.0], [54.8, 48.0], [54.9, 48.0], [55.0, 48.0], [55.1, 48.0], [55.2, 48.0], [55.3, 48.0], [55.4, 48.0], [55.5, 48.0], [55.6, 48.0], [55.7, 48.0], [55.8, 48.0], [55.9, 48.0], [56.0, 48.0], [56.1, 48.0], [56.2, 48.0], [56.3, 48.0], [56.4, 48.0], [56.5, 48.0], [56.6, 48.0], [56.7, 48.0], [56.8, 48.0], [56.9, 48.0], [57.0, 48.0], [57.1, 48.0], [57.2, 48.0], [57.3, 48.0], [57.4, 48.0], [57.5, 48.0], [57.6, 48.0], [57.7, 48.0], [57.8, 48.0], [57.9, 48.0], [58.0, 48.0], [58.1, 48.0], [58.2, 48.0], [58.3, 48.0], [58.4, 48.0], [58.5, 48.0], [58.6, 48.0], [58.7, 48.0], [58.8, 48.0], [58.9, 48.0], [59.0, 48.0], [59.1, 49.0], [59.2, 49.0], [59.3, 49.0], [59.4, 49.0], [59.5, 49.0], [59.6, 49.0], [59.7, 49.0], [59.8, 49.0], [59.9, 49.0], [60.0, 49.0], [60.1, 49.0], [60.2, 49.0], [60.3, 49.0], [60.4, 49.0], [60.5, 49.0], [60.6, 49.0], [60.7, 49.0], [60.8, 49.0], [60.9, 49.0], [61.0, 49.0], [61.1, 49.0], [61.2, 49.0], [61.3, 49.0], [61.4, 49.0], [61.5, 49.0], [61.6, 49.0], [61.7, 49.0], [61.8, 49.0], [61.9, 49.0], [62.0, 49.0], [62.1, 49.0], [62.2, 49.0], [62.3, 49.0], [62.4, 49.0], [62.5, 49.0], [62.6, 49.0], [62.7, 49.0], [62.8, 49.0], [62.9, 49.0], [63.0, 49.0], [63.1, 49.0], [63.2, 49.0], [63.3, 49.0], [63.4, 49.0], [63.5, 49.0], [63.6, 49.0], [63.7, 49.0], [63.8, 49.0], [63.9, 49.0], [64.0, 49.0], [64.1, 49.0], [64.2, 49.0], [64.3, 50.0], [64.4, 50.0], [64.5, 50.0], [64.6, 50.0], [64.7, 50.0], [64.8, 50.0], [64.9, 50.0], [65.0, 50.0], [65.1, 50.0], [65.2, 50.0], [65.3, 50.0], [65.4, 50.0], [65.5, 50.0], [65.6, 50.0], [65.7, 50.0], [65.8, 50.0], [65.9, 50.0], [66.0, 50.0], [66.1, 50.0], [66.2, 50.0], [66.3, 50.0], [66.4, 50.0], [66.5, 50.0], [66.6, 50.0], [66.7, 50.0], [66.8, 50.0], [66.9, 50.0], [67.0, 50.0], [67.1, 50.0], [67.2, 50.0], [67.3, 50.0], [67.4, 50.0], [67.5, 50.0], [67.6, 50.0], [67.7, 50.0], [67.8, 50.0], [67.9, 50.0], [68.0, 50.0], [68.1, 50.0], [68.2, 50.0], [68.3, 50.0], [68.4, 50.0], [68.5, 50.0], [68.6, 50.0], [68.7, 50.0], [68.8, 50.0], [68.9, 50.0], [69.0, 50.0], [69.1, 50.0], [69.2, 50.0], [69.3, 50.0], [69.4, 50.0], [69.5, 50.0], [69.6, 50.0], [69.7, 50.0], [69.8, 50.0], [69.9, 51.0], [70.0, 51.0], [70.1, 51.0], [70.2, 51.0], [70.3, 51.0], [70.4, 51.0], [70.5, 51.0], [70.6, 51.0], [70.7, 51.0], [70.8, 51.0], [70.9, 51.0], [71.0, 51.0], [71.1, 51.0], [71.2, 51.0], [71.3, 51.0], [71.4, 51.0], [71.5, 51.0], [71.6, 51.0], [71.7, 51.0], [71.8, 51.0], [71.9, 51.0], [72.0, 51.0], [72.1, 51.0], [72.2, 51.0], [72.3, 51.0], [72.4, 51.0], [72.5, 51.0], [72.6, 51.0], [72.7, 51.0], [72.8, 51.0], [72.9, 51.0], [73.0, 51.0], [73.1, 51.0], [73.2, 51.0], [73.3, 51.0], [73.4, 51.0], [73.5, 51.0], [73.6, 51.0], [73.7, 51.0], [73.8, 51.0], [73.9, 51.0], [74.0, 51.0], [74.1, 51.0], [74.2, 51.0], [74.3, 51.0], [74.4, 51.0], [74.5, 51.0], [74.6, 51.0], [74.7, 52.0], [74.8, 52.0], [74.9, 52.0], [75.0, 52.0], [75.1, 52.0], [75.2, 52.0], [75.3, 52.0], [75.4, 52.0], [75.5, 52.0], [75.6, 52.0], [75.7, 52.0], [75.8, 52.0], [75.9, 52.0], [76.0, 52.0], [76.1, 52.0], [76.2, 52.0], [76.3, 52.0], [76.4, 52.0], [76.5, 52.0], [76.6, 52.0], [76.7, 52.0], [76.8, 52.0], [76.9, 52.0], [77.0, 52.0], [77.1, 52.0], [77.2, 52.0], [77.3, 52.0], [77.4, 52.0], [77.5, 52.0], [77.6, 52.0], [77.7, 52.0], [77.8, 52.0], [77.9, 52.0], [78.0, 52.0], [78.1, 52.0], [78.2, 52.0], [78.3, 52.0], [78.4, 52.0], [78.5, 53.0], [78.6, 53.0], [78.7, 53.0], [78.8, 53.0], [78.9, 53.0], [79.0, 53.0], [79.1, 53.0], [79.2, 53.0], [79.3, 53.0], [79.4, 53.0], [79.5, 53.0], [79.6, 53.0], [79.7, 53.0], [79.8, 53.0], [79.9, 53.0], [80.0, 53.0], [80.1, 53.0], [80.2, 53.0], [80.3, 53.0], [80.4, 53.0], [80.5, 53.0], [80.6, 53.0], [80.7, 53.0], [80.8, 53.0], [80.9, 53.0], [81.0, 53.0], [81.1, 53.0], [81.2, 53.0], [81.3, 53.0], [81.4, 53.0], [81.5, 53.0], [81.6, 53.0], [81.7, 54.0], [81.8, 54.0], [81.9, 54.0], [82.0, 54.0], [82.1, 54.0], [82.2, 54.0], [82.3, 54.0], [82.4, 54.0], [82.5, 54.0], [82.6, 54.0], [82.7, 54.0], [82.8, 54.0], [82.9, 54.0], [83.0, 54.0], [83.1, 54.0], [83.2, 54.0], [83.3, 54.0], [83.4, 54.0], [83.5, 54.0], [83.6, 54.0], [83.7, 54.0], [83.8, 54.0], [83.9, 54.0], [84.0, 55.0], [84.1, 55.0], [84.2, 55.0], [84.3, 55.0], [84.4, 55.0], [84.5, 55.0], [84.6, 55.0], [84.7, 55.0], [84.8, 55.0], [84.9, 55.0], [85.0, 55.0], [85.1, 55.0], [85.2, 55.0], [85.3, 55.0], [85.4, 55.0], [85.5, 55.0], [85.6, 56.0], [85.7, 56.0], [85.8, 56.0], [85.9, 56.0], [86.0, 56.0], [86.1, 56.0], [86.2, 56.0], [86.3, 56.0], [86.4, 56.0], [86.5, 56.0], [86.6, 56.0], [86.7, 56.0], [86.8, 56.0], [86.9, 56.0], [87.0, 57.0], [87.1, 57.0], [87.2, 57.0], [87.3, 57.0], [87.4, 57.0], [87.5, 57.0], [87.6, 57.0], [87.7, 57.0], [87.8, 57.0], [87.9, 57.0], [88.0, 57.0], [88.1, 58.0], [88.2, 58.0], [88.3, 58.0], [88.4, 58.0], [88.5, 58.0], [88.6, 58.0], [88.7, 58.0], [88.8, 58.0], [88.9, 58.0], [89.0, 59.0], [89.1, 59.0], [89.2, 59.0], [89.3, 59.0], [89.4, 59.0], [89.5, 59.0], [89.6, 59.0], [89.7, 59.0], [89.8, 59.0], [89.9, 60.0], [90.0, 60.0], [90.1, 60.0], [90.2, 60.0], [90.3, 60.0], [90.4, 60.0], [90.5, 60.0], [90.6, 60.0], [90.7, 61.0], [90.8, 61.0], [90.9, 61.0], [91.0, 61.0], [91.1, 61.0], [91.2, 61.0], [91.3, 62.0], [91.4, 62.0], [91.5, 62.0], [91.6, 62.0], [91.7, 62.0], [91.8, 63.0], [91.9, 63.0], [92.0, 63.0], [92.1, 63.0], [92.2, 63.0], [92.3, 64.0], [92.4, 64.0], [92.5, 64.0], [92.6, 64.0], [92.7, 65.0], [92.8, 65.0], [92.9, 65.0], [93.0, 65.0], [93.1, 66.0], [93.2, 66.0], [93.3, 66.0], [93.4, 67.0], [93.5, 67.0], [93.6, 67.0], [93.7, 67.0], [93.8, 68.0], [93.9, 68.0], [94.0, 68.0], [94.1, 68.0], [94.2, 68.0], [94.3, 69.0], [94.4, 69.0], [94.5, 69.0], [94.6, 70.0], [94.7, 70.0], [94.8, 71.0], [94.9, 71.0], [95.0, 71.0], [95.1, 71.0], [95.2, 72.0], [95.3, 73.0], [95.4, 73.0], [95.5, 73.0], [95.6, 74.0], [95.7, 74.0], [95.8, 75.0], [95.9, 75.0], [96.0, 76.0], [96.1, 76.0], [96.2, 77.0], [96.3, 78.0], [96.4, 78.0], [96.5, 79.0], [96.6, 79.0], [96.7, 80.0], [96.8, 81.0], [96.9, 81.0], [97.0, 82.0], [97.1, 83.0], [97.2, 83.0], [97.3, 84.0], [97.4, 85.0], [97.5, 86.0], [97.6, 87.0], [97.7, 88.0], [97.8, 89.0], [97.9, 91.0], [98.0, 93.0], [98.1, 94.0], [98.2, 96.0], [98.3, 98.0], [98.4, 101.0], [98.5, 104.0], [98.6, 107.0], [98.7, 113.0], [98.8, 116.0], [98.9, 119.0], [99.0, 127.0], [99.1, 138.0], [99.2, 158.0], [99.3, 193.0], [99.4, 314.0], [99.5, 1259.0], [99.6, 1705.0], [99.7, 2992.0], [99.8, 3655.0], [99.9, 3949.0], [100.0, 5776.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 11799.0, "series": [{"data": [[600.0, 464.0], [700.0, 604.0], [800.0, 580.0], [900.0, 658.0], [1000.0, 651.0], [1100.0, 658.0], [1200.0, 666.0], [1300.0, 594.0], [1400.0, 547.0], [1500.0, 523.0], [1600.0, 506.0], [1700.0, 452.0], [1800.0, 369.0], [1900.0, 390.0], [2000.0, 374.0], [2100.0, 337.0], [2200.0, 262.0], [2300.0, 283.0], [2400.0, 262.0], [2500.0, 251.0], [2600.0, 212.0], [2800.0, 162.0], [2700.0, 162.0], [2900.0, 153.0], [3000.0, 157.0], [3100.0, 120.0], [3200.0, 98.0], [3300.0, 97.0], [3400.0, 82.0], [3500.0, 79.0], [3700.0, 62.0], [3600.0, 72.0], [3800.0, 51.0], [3900.0, 51.0], [4000.0, 44.0], [4100.0, 37.0], [4200.0, 45.0], [4300.0, 31.0], [4600.0, 22.0], [4400.0, 25.0], [4500.0, 23.0], [4800.0, 16.0], [4700.0, 17.0], [4900.0, 23.0], [5000.0, 16.0], [5100.0, 12.0], [5200.0, 12.0], [5300.0, 11.0], [5400.0, 9.0], [5600.0, 7.0], [5500.0, 9.0], [5800.0, 8.0], [5700.0, 9.0], [6100.0, 2.0], [6000.0, 4.0], [5900.0, 4.0], [6300.0, 7.0], [6200.0, 2.0], [6400.0, 6.0], [6500.0, 3.0], [6600.0, 4.0], [6900.0, 2.0], [6800.0, 1.0], [7100.0, 1.0], [7300.0, 3.0], [7400.0, 1.0], [7200.0, 1.0], [7500.0, 2.0], [7600.0, 1.0], [7800.0, 2.0], [7700.0, 1.0], [8100.0, 1.0], [8000.0, 1.0], [8600.0, 1.0], [9200.0, 1.0], [9300.0, 1.0], [100.0, 6.0], [200.0, 21.0], [300.0, 47.0], [400.0, 173.0], [500.0, 336.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 11799.0], [600.0, 3.0], [700.0, 2.0], [800.0, 1.0], [1100.0, 3.0], [1200.0, 2.0], [1300.0, 2.0], [1400.0, 1.0], [1500.0, 2.0], [1600.0, 6.0], [100.0, 117.0], [1700.0, 1.0], [1800.0, 1.0], [1900.0, 2.0], [2000.0, 1.0], [2300.0, 2.0], [2400.0, 1.0], [2700.0, 1.0], [2900.0, 5.0], [3000.0, 2.0], [3100.0, 1.0], [3200.0, 2.0], [3300.0, 2.0], [200.0, 10.0], [3500.0, 3.0], [3700.0, 6.0], [3600.0, 1.0], [3800.0, 4.0], [3900.0, 2.0], [4000.0, 1.0], [4100.0, 2.0], [4800.0, 1.0], [300.0, 2.0], [4900.0, 1.0], [5100.0, 1.0], [5000.0, 1.0], [5600.0, 2.0], [5400.0, 1.0], [5500.0, 1.0], [5700.0, 1.0], [400.0, 1.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 9300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 12177.0, "series": [{"data": [[0.0, 12177.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 5777.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 6041.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 5.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.06896551724138, "minX": 1.7472189E12, "maxY": 24.0, "series": [{"data": [[1.7472195E12, 24.0], [1.7472198E12, 21.246242774566497], [1.74721914E12, 24.0], [1.74721944E12, 24.0], [1.74721908E12, 24.0], [1.74721974E12, 24.0], [1.74721938E12, 24.0], [1.74721968E12, 24.0], [1.74721902E12, 24.0], [1.74721932E12, 24.0], [1.74721896E12, 24.0], [1.74721962E12, 24.0], [1.74721926E12, 24.0], [1.74721956E12, 24.0], [1.74721986E12, 2.06896551724138], [1.7472189E12, 23.92372881355932], [1.7472192E12, 24.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74721986E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 29.0, "minX": 1.0, "maxY": 1863.9375, "series": [{"data": [[8.0, 610.5833333333334], [2.0, 339.0], [9.0, 509.85714285714295], [10.0, 827.8235294117646], [11.0, 598.6666666666666], [12.0, 928.7241379310346], [3.0, 533.2222222222222], [13.0, 762.6923076923076], [14.0, 1029.375], [15.0, 974.7333333333332], [16.0, 1083.4769230769232], [4.0, 457.0], [1.0, 445.80000000000007], [17.0, 1279.142857142857], [18.0, 1012.0], [19.0, 1371.6666666666667], [20.0, 1863.9375], [5.0, 497.7500000000001], [21.0, 1257.7333333333336], [22.0, 1647.25], [23.0, 1413.4705882352944], [24.0, 1761.3118536877098], [7.0, 460.6666666666667]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[23.748083333333348, 1742.5540833333346]], "isOverall": false, "label": "Create CSR-Aggregated", "isController": false}, {"data": [[8.0, 35.74999999999999], [2.0, 29.0], [9.0, 35.00000000000001], [10.0, 36.823529411764696], [11.0, 37.333333333333336], [12.0, 40.23333333333334], [3.0, 29.999999999999996], [13.0, 44.69230769230769], [14.0, 42.875], [15.0, 44.142857142857146], [16.0, 48.48484848484848], [4.0, 31.25], [1.0, 32.199999999999996], [17.0, 43.38461538461539], [18.0, 46.714285714285715], [19.0, 45.45454545454546], [20.0, 52.214285714285715], [5.0, 31.75], [21.0, 42.99999999999999], [22.0, 43.111111111111114], [23.0, 43.81249999999999], [24.0, 66.82568572160997], [6.0, 38.0], [7.0, 34.4]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}, {"data": [[23.74816666666664, 66.21716666666684]], "isOverall": false, "label": "HTTP Request - enroll-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 24.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 859.3833333333333, "minX": 1.7472189E12, "maxY": 134138.5, "series": [{"data": [[1.7472195E12, 113225.85], [1.7472198E12, 127381.31666666667], [1.74721914E12, 104558.85], [1.74721944E12, 124754.46666666666], [1.74721908E12, 107040.66666666667], [1.74721974E12, 108829.11666666667], [1.74721938E12, 126330.55], [1.74721968E12, 111332.48333333334], [1.74721902E12, 116612.45], [1.74721932E12, 128855.45], [1.74721896E12, 134138.5], [1.74721962E12, 107799.51666666666], [1.74721926E12, 127552.1], [1.74721956E12, 100876.86666666667], [1.74721986E12, 4268.966666666666], [1.7472189E12, 7254.166666666667], [1.7472192E12, 115751.55]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7472195E12, 22823.616666666665], [1.7472198E12, 25670.516666666666], [1.74721914E12, 21072.833333333332], [1.74721944E12, 25138.416666666668], [1.74721908E12, 21577.216666666667], [1.74721974E12, 21933.416666666668], [1.74721938E12, 25463.6], [1.74721968E12, 22437.9], [1.74721902E12, 23506.3], [1.74721932E12, 25968.583333333332], [1.74721896E12, 27126.333333333332], [1.74721962E12, 21726.2], [1.74721926E12, 25702.033333333333], [1.74721956E12, 20330.716666666667], [1.74721986E12, 859.3833333333333], [1.7472189E12, 1484.0333333333333], [1.7472192E12, 23328.9]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74721986E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 31.275862068965516, "minX": 1.7472189E12, "maxY": 3306.8799999999997, "series": [{"data": [[1.7472195E12, 1821.8059895833333], [1.7472198E12, 1461.750289017342], [1.74721914E12, 1958.1366197183088], [1.74721944E12, 1647.248820754716], [1.74721908E12, 1933.3622589531662], [1.74721974E12, 1899.8186738836284], [1.74721938E12, 1630.9521586931148], [1.74721968E12, 1856.0489417989427], [1.74721902E12, 1764.925410872315], [1.74721932E12, 1591.2537142857143], [1.74721896E12, 1522.9175946547875], [1.74721962E12, 1909.3456284152996], [1.74721926E12, 1622.5640138408291], [1.74721956E12, 2049.277372262774], [1.74721986E12, 470.7931034482758], [1.7472189E12, 928.8970588235294], [1.7472192E12, 1794.5267175572496]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.7472195E12, 48.40572171651497], [1.7472198E12, 46.431213872832345], [1.74721914E12, 52.415492957746466], [1.74721944E12, 47.45218417945693], [1.74721908E12, 58.18294360385149], [1.74721974E12, 50.14749661705008], [1.74721938E12, 48.040792540792516], [1.74721968E12, 50.37830687830684], [1.74721902E12, 48.748737373737406], [1.74721932E12, 47.13371428571429], [1.74721896E12, 88.4715536105033], [1.74721962E12, 51.52185792349723], [1.74721926E12, 46.94226327944572], [1.74721956E12, 53.582481751824844], [1.74721986E12, 31.275862068965516], [1.7472189E12, 3306.8799999999997], [1.7472192E12, 49.76335877862595]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74721986E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.7472189E12, "maxY": 3306.82, "series": [{"data": [[1.7472195E12, 0.0], [1.7472198E12, 0.0], [1.74721914E12, 0.0], [1.74721944E12, 0.0], [1.74721908E12, 0.0], [1.74721974E12, 0.0], [1.74721938E12, 0.0], [1.74721968E12, 0.0], [1.74721902E12, 0.0], [1.74721932E12, 0.0], [1.74721896E12, 0.0], [1.74721962E12, 0.0], [1.74721926E12, 0.0], [1.74721956E12, 0.0], [1.74721986E12, 0.0], [1.7472189E12, 0.0], [1.7472192E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.7472195E12, 48.39791937581275], [1.7472198E12, 46.42774566473988], [1.74721914E12, 52.405633802816894], [1.74721944E12, 47.44864226682407], [1.74721908E12, 58.16918844566712], [1.74721974E12, 50.14073071718535], [1.74721938E12, 48.034965034965], [1.74721968E12, 50.37037037037037], [1.74721902E12, 48.73358585858583], [1.74721932E12, 47.122285714285695], [1.74721896E12, 88.43326039387313], [1.74721962E12, 51.5136612021857], [1.74721926E12, 46.9330254041571], [1.74721956E12, 53.576642335766394], [1.74721986E12, 31.24137931034483], [1.7472189E12, 3306.82], [1.7472192E12, 49.75445292620865]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74721986E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.7472189E12, "maxY": 216.45999999999998, "series": [{"data": [[1.7472195E12, 0.0], [1.7472198E12, 0.0], [1.74721914E12, 0.0], [1.74721944E12, 0.0], [1.74721908E12, 0.0], [1.74721974E12, 0.0], [1.74721938E12, 0.0], [1.74721968E12, 0.0], [1.74721902E12, 0.0], [1.74721932E12, 0.0], [1.74721896E12, 0.0], [1.74721962E12, 0.0], [1.74721926E12, 0.0], [1.74721956E12, 0.0], [1.74721986E12, 0.0], [1.7472189E12, 0.0], [1.7472192E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.7472195E12, 0.07022106631989597], [1.7472198E12, 0.09595375722543358], [1.74721914E12, 0.16478873239436626], [1.74721944E12, 0.08618654073199528], [1.74721908E12, 0.14580467675378259], [1.74721974E12, 0.11502029769959417], [1.74721938E12, 0.08624708624708624], [1.74721968E12, 0.09523809523809525], [1.74721902E12, 0.17424242424242425], [1.74721932E12, 0.08571428571428573], [1.74721896E12, 0.14989059080962808], [1.74721962E12, 0.09562841530054644], [1.74721926E12, 0.10854503464203229], [1.74721956E12, 0.13868613138686162], [1.74721986E12, 0.10344827586206899], [1.7472189E12, 216.45999999999998], [1.7472192E12, 0.1590330788804072]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74721986E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 27.0, "minX": 1.7472189E12, "maxY": 9368.0, "series": [{"data": [[1.7472195E12, 6428.0], [1.7472198E12, 6376.0], [1.74721914E12, 8688.0], [1.74721944E12, 5087.0], [1.74721908E12, 9368.0], [1.74721974E12, 7340.0], [1.74721938E12, 6526.0], [1.74721968E12, 7208.0], [1.74721902E12, 6955.0], [1.74721932E12, 5782.0], [1.74721896E12, 5870.0], [1.74721962E12, 9254.0], [1.74721926E12, 7848.0], [1.74721956E12, 7550.0], [1.74721986E12, 994.0], [1.7472189E12, 5776.0], [1.7472192E12, 7717.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7472195E12, 2478.0], [1.7472198E12, 2058.6000000000004], [1.74721914E12, 2728.2000000000007], [1.74721944E12, 2330.0], [1.74721908E12, 2741.2000000000003], [1.74721974E12, 2648.0000000000014], [1.74721938E12, 2260.8], [1.74721968E12, 2593.0], [1.74721902E12, 2478.6000000000004], [1.74721932E12, 2232.4000000000033], [1.74721896E12, 2180.7999999999997], [1.74721962E12, 2708.0], [1.74721926E12, 2172.6000000000004], [1.74721956E12, 2958.100000000001], [1.74721986E12, 766.8000000000001], [1.7472189E12, 4097.0], [1.7472192E12, 2479.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7472195E12, 4982.339999999977], [1.7472198E12, 4279.080000000013], [1.74721914E12, 5040.489999999995], [1.74721944E12, 3951.439999999998], [1.74721908E12, 4971.440000000002], [1.74721974E12, 5177.180000000002], [1.74721938E12, 4230.68], [1.74721968E12, 4900.3699999999835], [1.74721902E12, 4397.16], [1.74721932E12, 3715.6200000000003], [1.74721896E12, 3653.3199999999983], [1.74721962E12, 4982.449999999992], [1.74721926E12, 4014.9000000000015], [1.74721956E12, 5198.749999999994], [1.74721986E12, 994.0], [1.7472189E12, 5762.2], [1.7472192E12, 4605.62]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7472195E12, 3090.499999999997], [1.7472198E12, 2630.649999999997], [1.74721914E12, 3474.55], [1.74721944E12, 2816.5999999999995], [1.74721908E12, 3468.9999999999995], [1.74721974E12, 3276.0], [1.74721938E12, 2914.7999999999984], [1.74721968E12, 3111.9499999999985], [1.74721902E12, 3044.0], [1.74721932E12, 2663.3499999999995], [1.74721896E12, 2645.7999999999915], [1.74721962E12, 3399.75], [1.74721926E12, 2729.6], [1.74721956E12, 3622.1500000000005], [1.74721986E12, 841.9499999999998], [1.7472189E12, 5245.0], [1.7472192E12, 3192.2499999999986]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7472195E12, 34.0], [1.7472198E12, 27.0], [1.74721914E12, 35.0], [1.74721944E12, 37.0], [1.74721908E12, 36.0], [1.74721974E12, 37.0], [1.74721938E12, 36.0], [1.74721968E12, 35.0], [1.74721902E12, 36.0], [1.74721932E12, 36.0], [1.74721896E12, 37.0], [1.74721962E12, 37.0], [1.74721926E12, 37.0], [1.74721956E12, 33.0], [1.74721986E12, 28.0], [1.7472189E12, 216.0], [1.7472192E12, 35.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7472195E12, 146.0], [1.7472198E12, 124.5], [1.74721914E12, 302.0], [1.74721944E12, 332.0], [1.74721908E12, 441.0], [1.74721974E12, 219.5], [1.74721938E12, 193.0], [1.74721968E12, 239.5], [1.74721902E12, 108.0], [1.74721932E12, 269.0], [1.74721896E12, 418.0], [1.74721962E12, 223.5], [1.74721926E12, 204.0], [1.74721956E12, 264.0], [1.74721986E12, 98.0], [1.7472189E12, 1207.0], [1.7472192E12, 239.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74721986E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 36.0, "minX": 2.0, "maxY": 4896.0, "series": [{"data": [[33.0, 451.0], [32.0, 121.0], [2.0, 425.5], [35.0, 479.0], [34.0, 315.0], [37.0, 302.0], [36.0, 431.0], [38.0, 400.0], [39.0, 129.0], [40.0, 85.5], [42.0, 411.0], [43.0, 440.0], [45.0, 550.5], [3.0, 738.5], [4.0, 247.0], [5.0, 640.0], [6.0, 98.0], [7.0, 36.0], [8.0, 1037.0], [9.0, 4896.0], [10.0, 615.5], [11.0, 767.0], [12.0, 536.0], [13.0, 4117.0], [14.0, 476.5], [15.0, 944.0], [16.0, 495.5], [17.0, 681.0], [18.0, 605.5], [19.0, 390.0], [20.0, 541.5], [21.0, 467.5], [22.0, 524.5], [23.0, 107.5], [24.0, 407.0], [25.0, 398.0], [26.0, 93.5], [27.0, 432.5], [28.0, 129.5], [29.0, 113.0], [30.0, 100.5], [31.0, 101.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[35.0, 3824.0], [12.0, 410.0], [13.0, 3108.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 45.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 2.0, "maxY": 4896.0, "series": [{"data": [[33.0, 0.0], [32.0, 36.5], [2.0, 15.0], [35.0, 39.0], [34.0, 0.0], [37.0, 19.0], [36.0, 0.0], [38.0, 0.0], [39.0, 37.0], [40.0, 41.0], [42.0, 0.0], [43.0, 0.0], [45.0, 0.0], [3.0, 0.0], [4.0, 14.5], [5.0, 0.0], [6.0, 14.5], [7.0, 31.0], [8.0, 0.0], [9.0, 4896.0], [10.0, 18.0], [11.0, 0.0], [12.0, 0.0], [13.0, 4117.0], [14.0, 0.0], [15.0, 0.0], [16.0, 0.0], [17.0, 0.0], [18.0, 0.0], [19.0, 0.0], [20.0, 38.0], [21.0, 0.0], [22.0, 0.0], [23.0, 37.0], [24.0, 0.0], [25.0, 0.0], [26.0, 30.5], [27.0, 0.0], [28.0, 37.0], [29.0, 37.0], [30.0, 38.0], [31.0, 31.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[35.0, 3824.0], [12.0, 410.0], [13.0, 3108.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 45.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.9, "minX": 1.7472189E12, "maxY": 30.2, "series": [{"data": [[1.7472195E12, 25.616666666666667], [1.7472198E12, 28.5], [1.74721914E12, 23.666666666666668], [1.74721944E12, 28.25], [1.74721908E12, 24.216666666666665], [1.74721974E12, 24.633333333333333], [1.74721938E12, 28.583333333333332], [1.74721968E12, 25.2], [1.74721902E12, 26.383333333333333], [1.74721932E12, 29.166666666666668], [1.74721896E12, 30.2], [1.74721962E12, 24.4], [1.74721926E12, 28.883333333333333], [1.74721956E12, 22.833333333333332], [1.74721986E12, 0.9], [1.7472189E12, 2.3666666666666667], [1.7472192E12, 26.2]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74721986E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.7472189E12, "maxY": 15.216666666666667, "series": [{"data": [[1.7472195E12, 12.8], [1.7472198E12, 14.416666666666666], [1.74721914E12, 11.833333333333334], [1.74721944E12, 14.133333333333333], [1.74721908E12, 12.1], [1.74721974E12, 12.316666666666666], [1.74721938E12, 14.283333333333333], [1.74721968E12, 12.6], [1.74721902E12, 13.183333333333334], [1.74721932E12, 14.583333333333334], [1.74721896E12, 14.966666666666667], [1.74721962E12, 12.2], [1.74721926E12, 14.45], [1.74721956E12, 11.416666666666666], [1.74721986E12, 0.48333333333333334], [1.7472189E12, 1.1333333333333333], [1.7472192E12, 13.1]], "isOverall": false, "label": "0", "isController": false}, {"data": [[1.7472195E12, 12.816666666666666], [1.7472198E12, 14.416666666666666], [1.74721914E12, 11.833333333333334], [1.74721944E12, 14.116666666666667], [1.74721908E12, 12.116666666666667], [1.74721974E12, 12.316666666666666], [1.74721938E12, 14.3], [1.74721968E12, 12.6], [1.74721902E12, 13.2], [1.74721932E12, 14.583333333333334], [1.74721896E12, 15.216666666666667], [1.74721962E12, 12.2], [1.74721926E12, 14.433333333333334], [1.74721956E12, 11.416666666666666], [1.74721986E12, 0.48333333333333334], [1.7472189E12, 0.7666666666666667], [1.7472192E12, 13.1]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.74721896E12, 0.016666666666666666], [1.7472189E12, 0.06666666666666667]], "isOverall": false, "label": "400", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74721986E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.7472189E12, "maxY": 15.216666666666667, "series": [{"data": [[1.7472195E12, 12.816666666666666], [1.7472198E12, 14.416666666666666], [1.74721914E12, 11.833333333333334], [1.74721944E12, 14.116666666666667], [1.74721908E12, 12.116666666666667], [1.74721974E12, 12.316666666666666], [1.74721938E12, 14.3], [1.74721968E12, 12.6], [1.74721902E12, 13.2], [1.74721932E12, 14.583333333333334], [1.74721896E12, 15.216666666666667], [1.74721962E12, 12.2], [1.74721926E12, 14.433333333333334], [1.74721956E12, 11.416666666666666], [1.74721986E12, 0.48333333333333334], [1.7472189E12, 0.7666666666666667], [1.7472192E12, 13.1]], "isOverall": false, "label": "HTTP Request - enroll-success", "isController": false}, {"data": [[1.74721896E12, 0.016666666666666666], [1.7472189E12, 0.06666666666666667]], "isOverall": false, "label": "HTTP Request - enroll-failure", "isController": false}, {"data": [[1.7472195E12, 12.8], [1.7472198E12, 14.416666666666666], [1.74721914E12, 11.833333333333334], [1.74721944E12, 14.133333333333333], [1.74721908E12, 12.1], [1.74721974E12, 12.316666666666666], [1.74721938E12, 14.283333333333333], [1.74721968E12, 12.6], [1.74721902E12, 13.183333333333334], [1.74721932E12, 14.583333333333334], [1.74721896E12, 14.966666666666667], [1.74721962E12, 12.2], [1.74721926E12, 14.45], [1.74721956E12, 11.416666666666666], [1.74721986E12, 0.48333333333333334], [1.7472189E12, 1.1333333333333333], [1.7472192E12, 13.1]], "isOverall": false, "label": "Create CSR-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74721986E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.7472189E12, "maxY": 30.183333333333334, "series": [{"data": [[1.7472195E12, 25.616666666666667], [1.7472198E12, 28.833333333333332], [1.74721914E12, 23.666666666666668], [1.74721944E12, 28.25], [1.74721908E12, 24.216666666666665], [1.74721974E12, 24.633333333333333], [1.74721938E12, 28.583333333333332], [1.74721968E12, 25.2], [1.74721902E12, 26.383333333333333], [1.74721932E12, 29.166666666666668], [1.74721896E12, 30.183333333333334], [1.74721962E12, 24.4], [1.74721926E12, 28.883333333333333], [1.74721956E12, 22.833333333333332], [1.74721986E12, 0.9666666666666667], [1.7472189E12, 1.9], [1.7472192E12, 26.2]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.74721896E12, 0.016666666666666666], [1.7472189E12, 0.06666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74721986E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

