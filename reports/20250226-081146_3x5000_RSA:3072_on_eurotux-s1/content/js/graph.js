/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 111.0, "minX": 0.0, "maxY": 2330.0, "series": [{"data": [[0.0, 113.0], [0.1, 119.0], [0.2, 123.0], [0.3, 126.0], [0.4, 128.0], [0.5, 130.0], [0.6, 132.0], [0.7, 133.0], [0.8, 135.0], [0.9, 136.0], [1.0, 137.0], [1.1, 139.0], [1.2, 139.0], [1.3, 141.0], [1.4, 142.0], [1.5, 143.0], [1.6, 144.0], [1.7, 145.0], [1.8, 146.0], [1.9, 147.0], [2.0, 147.0], [2.1, 149.0], [2.2, 150.0], [2.3, 151.0], [2.4, 152.0], [2.5, 152.0], [2.6, 153.0], [2.7, 154.0], [2.8, 155.0], [2.9, 156.0], [3.0, 157.0], [3.1, 158.0], [3.2, 159.0], [3.3, 160.0], [3.4, 160.0], [3.5, 161.0], [3.6, 162.0], [3.7, 163.0], [3.8, 163.0], [3.9, 164.0], [4.0, 165.0], [4.1, 166.0], [4.2, 166.0], [4.3, 167.0], [4.4, 168.0], [4.5, 168.0], [4.6, 169.0], [4.7, 170.0], [4.8, 170.0], [4.9, 171.0], [5.0, 172.0], [5.1, 172.0], [5.2, 173.0], [5.3, 174.0], [5.4, 175.0], [5.5, 176.0], [5.6, 176.0], [5.7, 177.0], [5.8, 178.0], [5.9, 179.0], [6.0, 179.0], [6.1, 180.0], [6.2, 181.0], [6.3, 182.0], [6.4, 182.0], [6.5, 183.0], [6.6, 183.0], [6.7, 184.0], [6.8, 185.0], [6.9, 186.0], [7.0, 186.0], [7.1, 187.0], [7.2, 188.0], [7.3, 188.0], [7.4, 189.0], [7.5, 190.0], [7.6, 190.0], [7.7, 191.0], [7.8, 191.0], [7.9, 192.0], [8.0, 192.0], [8.1, 193.0], [8.2, 194.0], [8.3, 194.0], [8.4, 195.0], [8.5, 196.0], [8.6, 196.0], [8.7, 197.0], [8.8, 198.0], [8.9, 198.0], [9.0, 199.0], [9.1, 199.0], [9.2, 200.0], [9.3, 201.0], [9.4, 201.0], [9.5, 202.0], [9.6, 202.0], [9.7, 203.0], [9.8, 203.0], [9.9, 204.0], [10.0, 205.0], [10.1, 205.0], [10.2, 205.0], [10.3, 206.0], [10.4, 206.0], [10.5, 207.0], [10.6, 208.0], [10.7, 208.0], [10.8, 209.0], [10.9, 210.0], [11.0, 210.0], [11.1, 210.0], [11.2, 211.0], [11.3, 212.0], [11.4, 212.0], [11.5, 213.0], [11.6, 213.0], [11.7, 214.0], [11.8, 214.0], [11.9, 215.0], [12.0, 215.0], [12.1, 216.0], [12.2, 216.0], [12.3, 217.0], [12.4, 217.0], [12.5, 218.0], [12.6, 218.0], [12.7, 218.0], [12.8, 219.0], [12.9, 219.0], [13.0, 220.0], [13.1, 220.0], [13.2, 221.0], [13.3, 221.0], [13.4, 222.0], [13.5, 222.0], [13.6, 223.0], [13.7, 223.0], [13.8, 223.0], [13.9, 224.0], [14.0, 224.0], [14.1, 225.0], [14.2, 225.0], [14.3, 226.0], [14.4, 226.0], [14.5, 227.0], [14.6, 227.0], [14.7, 228.0], [14.8, 228.0], [14.9, 229.0], [15.0, 229.0], [15.1, 230.0], [15.2, 230.0], [15.3, 231.0], [15.4, 231.0], [15.5, 232.0], [15.6, 232.0], [15.7, 232.0], [15.8, 233.0], [15.9, 234.0], [16.0, 234.0], [16.1, 235.0], [16.2, 235.0], [16.3, 236.0], [16.4, 237.0], [16.5, 237.0], [16.6, 238.0], [16.7, 238.0], [16.8, 239.0], [16.9, 239.0], [17.0, 240.0], [17.1, 240.0], [17.2, 241.0], [17.3, 241.0], [17.4, 241.0], [17.5, 242.0], [17.6, 242.0], [17.7, 243.0], [17.8, 244.0], [17.9, 244.0], [18.0, 245.0], [18.1, 245.0], [18.2, 246.0], [18.3, 246.0], [18.4, 247.0], [18.5, 247.0], [18.6, 248.0], [18.7, 248.0], [18.8, 249.0], [18.9, 249.0], [19.0, 250.0], [19.1, 250.0], [19.2, 251.0], [19.3, 251.0], [19.4, 251.0], [19.5, 252.0], [19.6, 252.0], [19.7, 253.0], [19.8, 253.0], [19.9, 253.0], [20.0, 254.0], [20.1, 254.0], [20.2, 255.0], [20.3, 256.0], [20.4, 256.0], [20.5, 256.0], [20.6, 257.0], [20.7, 257.0], [20.8, 258.0], [20.9, 258.0], [21.0, 259.0], [21.1, 259.0], [21.2, 260.0], [21.3, 260.0], [21.4, 261.0], [21.5, 261.0], [21.6, 261.0], [21.7, 262.0], [21.8, 262.0], [21.9, 263.0], [22.0, 263.0], [22.1, 264.0], [22.2, 264.0], [22.3, 265.0], [22.4, 265.0], [22.5, 266.0], [22.6, 266.0], [22.7, 266.0], [22.8, 267.0], [22.9, 267.0], [23.0, 268.0], [23.1, 268.0], [23.2, 268.0], [23.3, 269.0], [23.4, 270.0], [23.5, 270.0], [23.6, 271.0], [23.7, 271.0], [23.8, 272.0], [23.9, 272.0], [24.0, 273.0], [24.1, 273.0], [24.2, 273.0], [24.3, 274.0], [24.4, 274.0], [24.5, 275.0], [24.6, 276.0], [24.7, 276.0], [24.8, 277.0], [24.9, 277.0], [25.0, 277.0], [25.1, 278.0], [25.2, 278.0], [25.3, 279.0], [25.4, 279.0], [25.5, 280.0], [25.6, 280.0], [25.7, 281.0], [25.8, 282.0], [25.9, 282.0], [26.0, 283.0], [26.1, 283.0], [26.2, 284.0], [26.3, 284.0], [26.4, 285.0], [26.5, 285.0], [26.6, 286.0], [26.7, 286.0], [26.8, 287.0], [26.9, 287.0], [27.0, 288.0], [27.1, 288.0], [27.2, 289.0], [27.3, 289.0], [27.4, 290.0], [27.5, 290.0], [27.6, 290.0], [27.7, 291.0], [27.8, 292.0], [27.9, 292.0], [28.0, 293.0], [28.1, 293.0], [28.2, 294.0], [28.3, 294.0], [28.4, 294.0], [28.5, 295.0], [28.6, 295.0], [28.7, 296.0], [28.8, 297.0], [28.9, 297.0], [29.0, 297.0], [29.1, 298.0], [29.2, 298.0], [29.3, 298.0], [29.4, 299.0], [29.5, 300.0], [29.6, 300.0], [29.7, 300.0], [29.8, 301.0], [29.9, 301.0], [30.0, 302.0], [30.1, 302.0], [30.2, 303.0], [30.3, 304.0], [30.4, 304.0], [30.5, 305.0], [30.6, 306.0], [30.7, 306.0], [30.8, 307.0], [30.9, 307.0], [31.0, 308.0], [31.1, 308.0], [31.2, 309.0], [31.3, 309.0], [31.4, 309.0], [31.5, 310.0], [31.6, 310.0], [31.7, 311.0], [31.8, 311.0], [31.9, 312.0], [32.0, 312.0], [32.1, 313.0], [32.2, 313.0], [32.3, 314.0], [32.4, 314.0], [32.5, 314.0], [32.6, 315.0], [32.7, 315.0], [32.8, 316.0], [32.9, 316.0], [33.0, 316.0], [33.1, 317.0], [33.2, 317.0], [33.3, 318.0], [33.4, 318.0], [33.5, 319.0], [33.6, 319.0], [33.7, 319.0], [33.8, 320.0], [33.9, 320.0], [34.0, 321.0], [34.1, 321.0], [34.2, 322.0], [34.3, 322.0], [34.4, 323.0], [34.5, 323.0], [34.6, 324.0], [34.7, 324.0], [34.8, 325.0], [34.9, 325.0], [35.0, 326.0], [35.1, 326.0], [35.2, 327.0], [35.3, 327.0], [35.4, 327.0], [35.5, 328.0], [35.6, 329.0], [35.7, 330.0], [35.8, 330.0], [35.9, 331.0], [36.0, 331.0], [36.1, 331.0], [36.2, 332.0], [36.3, 333.0], [36.4, 333.0], [36.5, 334.0], [36.6, 334.0], [36.7, 334.0], [36.8, 335.0], [36.9, 336.0], [37.0, 336.0], [37.1, 336.0], [37.2, 337.0], [37.3, 337.0], [37.4, 338.0], [37.5, 338.0], [37.6, 338.0], [37.7, 339.0], [37.8, 339.0], [37.9, 340.0], [38.0, 340.0], [38.1, 341.0], [38.2, 341.0], [38.3, 341.0], [38.4, 342.0], [38.5, 342.0], [38.6, 343.0], [38.7, 343.0], [38.8, 344.0], [38.9, 344.0], [39.0, 345.0], [39.1, 345.0], [39.2, 346.0], [39.3, 346.0], [39.4, 347.0], [39.5, 347.0], [39.6, 348.0], [39.7, 349.0], [39.8, 349.0], [39.9, 350.0], [40.0, 350.0], [40.1, 351.0], [40.2, 352.0], [40.3, 352.0], [40.4, 353.0], [40.5, 353.0], [40.6, 354.0], [40.7, 354.0], [40.8, 355.0], [40.9, 355.0], [41.0, 356.0], [41.1, 356.0], [41.2, 357.0], [41.3, 357.0], [41.4, 358.0], [41.5, 359.0], [41.6, 359.0], [41.7, 360.0], [41.8, 360.0], [41.9, 361.0], [42.0, 362.0], [42.1, 362.0], [42.2, 362.0], [42.3, 363.0], [42.4, 363.0], [42.5, 364.0], [42.6, 364.0], [42.7, 365.0], [42.8, 365.0], [42.9, 366.0], [43.0, 367.0], [43.1, 367.0], [43.2, 368.0], [43.3, 368.0], [43.4, 369.0], [43.5, 369.0], [43.6, 370.0], [43.7, 370.0], [43.8, 371.0], [43.9, 371.0], [44.0, 372.0], [44.1, 373.0], [44.2, 373.0], [44.3, 374.0], [44.4, 374.0], [44.5, 375.0], [44.6, 375.0], [44.7, 376.0], [44.8, 376.0], [44.9, 377.0], [45.0, 377.0], [45.1, 378.0], [45.2, 378.0], [45.3, 379.0], [45.4, 379.0], [45.5, 380.0], [45.6, 381.0], [45.7, 381.0], [45.8, 382.0], [45.9, 382.0], [46.0, 383.0], [46.1, 383.0], [46.2, 384.0], [46.3, 384.0], [46.4, 385.0], [46.5, 385.0], [46.6, 386.0], [46.7, 387.0], [46.8, 387.0], [46.9, 388.0], [47.0, 388.0], [47.1, 389.0], [47.2, 389.0], [47.3, 390.0], [47.4, 391.0], [47.5, 391.0], [47.6, 392.0], [47.7, 393.0], [47.8, 393.0], [47.9, 393.0], [48.0, 394.0], [48.1, 395.0], [48.2, 395.0], [48.3, 396.0], [48.4, 397.0], [48.5, 397.0], [48.6, 398.0], [48.7, 399.0], [48.8, 399.0], [48.9, 400.0], [49.0, 400.0], [49.1, 401.0], [49.2, 401.0], [49.3, 402.0], [49.4, 403.0], [49.5, 404.0], [49.6, 404.0], [49.7, 405.0], [49.8, 405.0], [49.9, 406.0], [50.0, 406.0], [50.1, 406.0], [50.2, 407.0], [50.3, 407.0], [50.4, 408.0], [50.5, 408.0], [50.6, 409.0], [50.7, 409.0], [50.8, 410.0], [50.9, 410.0], [51.0, 411.0], [51.1, 412.0], [51.2, 412.0], [51.3, 413.0], [51.4, 413.0], [51.5, 414.0], [51.6, 414.0], [51.7, 415.0], [51.8, 415.0], [51.9, 416.0], [52.0, 416.0], [52.1, 417.0], [52.2, 418.0], [52.3, 418.0], [52.4, 419.0], [52.5, 419.0], [52.6, 420.0], [52.7, 420.0], [52.8, 421.0], [52.9, 421.0], [53.0, 422.0], [53.1, 422.0], [53.2, 423.0], [53.3, 423.0], [53.4, 424.0], [53.5, 425.0], [53.6, 426.0], [53.7, 426.0], [53.8, 427.0], [53.9, 427.0], [54.0, 428.0], [54.1, 428.0], [54.2, 429.0], [54.3, 429.0], [54.4, 430.0], [54.5, 430.0], [54.6, 431.0], [54.7, 432.0], [54.8, 433.0], [54.9, 433.0], [55.0, 434.0], [55.1, 434.0], [55.2, 435.0], [55.3, 436.0], [55.4, 436.0], [55.5, 437.0], [55.6, 437.0], [55.7, 438.0], [55.8, 439.0], [55.9, 439.0], [56.0, 440.0], [56.1, 441.0], [56.2, 441.0], [56.3, 442.0], [56.4, 442.0], [56.5, 443.0], [56.6, 443.0], [56.7, 444.0], [56.8, 445.0], [56.9, 445.0], [57.0, 446.0], [57.1, 446.0], [57.2, 447.0], [57.3, 447.0], [57.4, 448.0], [57.5, 448.0], [57.6, 449.0], [57.7, 450.0], [57.8, 450.0], [57.9, 451.0], [58.0, 451.0], [58.1, 452.0], [58.2, 453.0], [58.3, 453.0], [58.4, 454.0], [58.5, 454.0], [58.6, 455.0], [58.7, 456.0], [58.8, 456.0], [58.9, 457.0], [59.0, 457.0], [59.1, 458.0], [59.2, 459.0], [59.3, 459.0], [59.4, 460.0], [59.5, 461.0], [59.6, 461.0], [59.7, 462.0], [59.8, 462.0], [59.9, 463.0], [60.0, 464.0], [60.1, 464.0], [60.2, 465.0], [60.3, 466.0], [60.4, 467.0], [60.5, 467.0], [60.6, 468.0], [60.7, 468.0], [60.8, 469.0], [60.9, 469.0], [61.0, 470.0], [61.1, 471.0], [61.2, 471.0], [61.3, 472.0], [61.4, 473.0], [61.5, 473.0], [61.6, 474.0], [61.7, 474.0], [61.8, 475.0], [61.9, 476.0], [62.0, 476.0], [62.1, 476.0], [62.2, 477.0], [62.3, 478.0], [62.4, 478.0], [62.5, 479.0], [62.6, 480.0], [62.7, 480.0], [62.8, 481.0], [62.9, 481.0], [63.0, 482.0], [63.1, 483.0], [63.2, 484.0], [63.3, 484.0], [63.4, 485.0], [63.5, 486.0], [63.6, 487.0], [63.7, 487.0], [63.8, 488.0], [63.9, 489.0], [64.0, 489.0], [64.1, 490.0], [64.2, 491.0], [64.3, 491.0], [64.4, 492.0], [64.5, 493.0], [64.6, 493.0], [64.7, 494.0], [64.8, 495.0], [64.9, 496.0], [65.0, 496.0], [65.1, 497.0], [65.2, 498.0], [65.3, 498.0], [65.4, 499.0], [65.5, 500.0], [65.6, 500.0], [65.7, 501.0], [65.8, 502.0], [65.9, 502.0], [66.0, 503.0], [66.1, 504.0], [66.2, 504.0], [66.3, 505.0], [66.4, 506.0], [66.5, 507.0], [66.6, 508.0], [66.7, 509.0], [66.8, 510.0], [66.9, 510.0], [67.0, 511.0], [67.1, 512.0], [67.2, 513.0], [67.3, 514.0], [67.4, 514.0], [67.5, 515.0], [67.6, 516.0], [67.7, 517.0], [67.8, 518.0], [67.9, 519.0], [68.0, 520.0], [68.1, 521.0], [68.2, 522.0], [68.3, 522.0], [68.4, 523.0], [68.5, 524.0], [68.6, 525.0], [68.7, 525.0], [68.8, 526.0], [68.9, 527.0], [69.0, 528.0], [69.1, 530.0], [69.2, 531.0], [69.3, 532.0], [69.4, 532.0], [69.5, 533.0], [69.6, 534.0], [69.7, 535.0], [69.8, 536.0], [69.9, 536.0], [70.0, 537.0], [70.1, 538.0], [70.2, 539.0], [70.3, 540.0], [70.4, 541.0], [70.5, 542.0], [70.6, 543.0], [70.7, 544.0], [70.8, 544.0], [70.9, 545.0], [71.0, 546.0], [71.1, 547.0], [71.2, 548.0], [71.3, 549.0], [71.4, 550.0], [71.5, 551.0], [71.6, 551.0], [71.7, 552.0], [71.8, 553.0], [71.9, 554.0], [72.0, 555.0], [72.1, 556.0], [72.2, 557.0], [72.3, 557.0], [72.4, 558.0], [72.5, 559.0], [72.6, 559.0], [72.7, 560.0], [72.8, 562.0], [72.9, 562.0], [73.0, 563.0], [73.1, 564.0], [73.2, 565.0], [73.3, 566.0], [73.4, 567.0], [73.5, 568.0], [73.6, 569.0], [73.7, 570.0], [73.8, 571.0], [73.9, 572.0], [74.0, 573.0], [74.1, 573.0], [74.2, 574.0], [74.3, 575.0], [74.4, 576.0], [74.5, 577.0], [74.6, 577.0], [74.7, 578.0], [74.8, 579.0], [74.9, 580.0], [75.0, 581.0], [75.1, 583.0], [75.2, 583.0], [75.3, 584.0], [75.4, 585.0], [75.5, 585.0], [75.6, 586.0], [75.7, 587.0], [75.8, 588.0], [75.9, 589.0], [76.0, 590.0], [76.1, 591.0], [76.2, 592.0], [76.3, 592.0], [76.4, 593.0], [76.5, 595.0], [76.6, 595.0], [76.7, 596.0], [76.8, 598.0], [76.9, 599.0], [77.0, 600.0], [77.1, 601.0], [77.2, 602.0], [77.3, 603.0], [77.4, 604.0], [77.5, 604.0], [77.6, 605.0], [77.7, 606.0], [77.8, 607.0], [77.9, 608.0], [78.0, 609.0], [78.1, 610.0], [78.2, 611.0], [78.3, 612.0], [78.4, 614.0], [78.5, 614.0], [78.6, 615.0], [78.7, 616.0], [78.8, 617.0], [78.9, 618.0], [79.0, 619.0], [79.1, 620.0], [79.2, 622.0], [79.3, 623.0], [79.4, 624.0], [79.5, 624.0], [79.6, 626.0], [79.7, 627.0], [79.8, 628.0], [79.9, 629.0], [80.0, 630.0], [80.1, 631.0], [80.2, 632.0], [80.3, 633.0], [80.4, 635.0], [80.5, 637.0], [80.6, 638.0], [80.7, 639.0], [80.8, 640.0], [80.9, 642.0], [81.0, 643.0], [81.1, 643.0], [81.2, 645.0], [81.3, 646.0], [81.4, 647.0], [81.5, 648.0], [81.6, 649.0], [81.7, 651.0], [81.8, 652.0], [81.9, 654.0], [82.0, 655.0], [82.1, 656.0], [82.2, 658.0], [82.3, 659.0], [82.4, 660.0], [82.5, 662.0], [82.6, 664.0], [82.7, 665.0], [82.8, 666.0], [82.9, 667.0], [83.0, 669.0], [83.1, 670.0], [83.2, 672.0], [83.3, 673.0], [83.4, 674.0], [83.5, 675.0], [83.6, 677.0], [83.7, 679.0], [83.8, 680.0], [83.9, 682.0], [84.0, 683.0], [84.1, 684.0], [84.2, 685.0], [84.3, 687.0], [84.4, 688.0], [84.5, 689.0], [84.6, 691.0], [84.7, 692.0], [84.8, 693.0], [84.9, 694.0], [85.0, 696.0], [85.1, 697.0], [85.2, 698.0], [85.3, 700.0], [85.4, 701.0], [85.5, 703.0], [85.6, 704.0], [85.7, 706.0], [85.8, 707.0], [85.9, 709.0], [86.0, 710.0], [86.1, 712.0], [86.2, 713.0], [86.3, 714.0], [86.4, 716.0], [86.5, 718.0], [86.6, 720.0], [86.7, 721.0], [86.8, 723.0], [86.9, 725.0], [87.0, 726.0], [87.1, 728.0], [87.2, 730.0], [87.3, 732.0], [87.4, 734.0], [87.5, 737.0], [87.6, 738.0], [87.7, 740.0], [87.8, 743.0], [87.9, 745.0], [88.0, 746.0], [88.1, 749.0], [88.2, 751.0], [88.3, 752.0], [88.4, 755.0], [88.5, 756.0], [88.6, 759.0], [88.7, 761.0], [88.8, 763.0], [88.9, 765.0], [89.0, 767.0], [89.1, 769.0], [89.2, 772.0], [89.3, 773.0], [89.4, 775.0], [89.5, 777.0], [89.6, 779.0], [89.7, 782.0], [89.8, 783.0], [89.9, 786.0], [90.0, 788.0], [90.1, 790.0], [90.2, 792.0], [90.3, 794.0], [90.4, 796.0], [90.5, 799.0], [90.6, 802.0], [90.7, 804.0], [90.8, 806.0], [90.9, 809.0], [91.0, 811.0], [91.1, 812.0], [91.2, 815.0], [91.3, 818.0], [91.4, 821.0], [91.5, 823.0], [91.6, 826.0], [91.7, 829.0], [91.8, 831.0], [91.9, 834.0], [92.0, 838.0], [92.1, 840.0], [92.2, 841.0], [92.3, 843.0], [92.4, 847.0], [92.5, 849.0], [92.6, 853.0], [92.7, 856.0], [92.8, 860.0], [92.9, 862.0], [93.0, 866.0], [93.1, 868.0], [93.2, 871.0], [93.3, 873.0], [93.4, 876.0], [93.5, 879.0], [93.6, 882.0], [93.7, 885.0], [93.8, 889.0], [93.9, 892.0], [94.0, 896.0], [94.1, 901.0], [94.2, 904.0], [94.3, 906.0], [94.4, 911.0], [94.5, 914.0], [94.6, 920.0], [94.7, 927.0], [94.8, 930.0], [94.9, 936.0], [95.0, 940.0], [95.1, 942.0], [95.2, 947.0], [95.3, 953.0], [95.4, 959.0], [95.5, 962.0], [95.6, 965.0], [95.7, 971.0], [95.8, 976.0], [95.9, 981.0], [96.0, 987.0], [96.1, 990.0], [96.2, 997.0], [96.3, 1002.0], [96.4, 1006.0], [96.5, 1013.0], [96.6, 1018.0], [96.7, 1025.0], [96.8, 1030.0], [96.9, 1035.0], [97.0, 1042.0], [97.1, 1051.0], [97.2, 1063.0], [97.3, 1068.0], [97.4, 1078.0], [97.5, 1083.0], [97.6, 1096.0], [97.7, 1104.0], [97.8, 1111.0], [97.9, 1122.0], [98.0, 1128.0], [98.1, 1140.0], [98.2, 1151.0], [98.3, 1162.0], [98.4, 1172.0], [98.5, 1185.0], [98.6, 1200.0], [98.7, 1220.0], [98.8, 1241.0], [98.9, 1259.0], [99.0, 1275.0], [99.1, 1289.0], [99.2, 1315.0], [99.3, 1334.0], [99.4, 1357.0], [99.5, 1392.0], [99.6, 1457.0], [99.7, 1543.0], [99.8, 1648.0], [99.9, 1903.0]], "isOverall": false, "label": "OS Process Sampler", "isController": false}, {"data": [[0.0, 111.0], [0.1, 113.0], [0.2, 113.0], [0.3, 114.0], [0.4, 114.0], [0.5, 115.0], [0.6, 115.0], [0.7, 115.0], [0.8, 115.0], [0.9, 116.0], [1.0, 116.0], [1.1, 116.0], [1.2, 116.0], [1.3, 116.0], [1.4, 116.0], [1.5, 117.0], [1.6, 117.0], [1.7, 117.0], [1.8, 117.0], [1.9, 117.0], [2.0, 117.0], [2.1, 117.0], [2.2, 117.0], [2.3, 118.0], [2.4, 118.0], [2.5, 118.0], [2.6, 118.0], [2.7, 118.0], [2.8, 118.0], [2.9, 118.0], [3.0, 118.0], [3.1, 119.0], [3.2, 119.0], [3.3, 119.0], [3.4, 119.0], [3.5, 119.0], [3.6, 119.0], [3.7, 119.0], [3.8, 119.0], [3.9, 119.0], [4.0, 119.0], [4.1, 119.0], [4.2, 120.0], [4.3, 120.0], [4.4, 120.0], [4.5, 120.0], [4.6, 120.0], [4.7, 120.0], [4.8, 120.0], [4.9, 120.0], [5.0, 120.0], [5.1, 120.0], [5.2, 121.0], [5.3, 121.0], [5.4, 121.0], [5.5, 121.0], [5.6, 121.0], [5.7, 121.0], [5.8, 121.0], [5.9, 121.0], [6.0, 121.0], [6.1, 122.0], [6.2, 122.0], [6.3, 122.0], [6.4, 122.0], [6.5, 122.0], [6.6, 122.0], [6.7, 122.0], [6.8, 122.0], [6.9, 122.0], [7.0, 122.0], [7.1, 122.0], [7.2, 123.0], [7.3, 123.0], [7.4, 123.0], [7.5, 123.0], [7.6, 123.0], [7.7, 123.0], [7.8, 123.0], [7.9, 123.0], [8.0, 123.0], [8.1, 123.0], [8.2, 123.0], [8.3, 123.0], [8.4, 123.0], [8.5, 124.0], [8.6, 124.0], [8.7, 124.0], [8.8, 124.0], [8.9, 124.0], [9.0, 124.0], [9.1, 124.0], [9.2, 124.0], [9.3, 124.0], [9.4, 124.0], [9.5, 124.0], [9.6, 125.0], [9.7, 125.0], [9.8, 125.0], [9.9, 125.0], [10.0, 125.0], [10.1, 125.0], [10.2, 125.0], [10.3, 125.0], [10.4, 125.0], [10.5, 125.0], [10.6, 125.0], [10.7, 125.0], [10.8, 125.0], [10.9, 126.0], [11.0, 126.0], [11.1, 126.0], [11.2, 126.0], [11.3, 126.0], [11.4, 126.0], [11.5, 126.0], [11.6, 126.0], [11.7, 126.0], [11.8, 126.0], [11.9, 126.0], [12.0, 126.0], [12.1, 126.0], [12.2, 126.0], [12.3, 126.0], [12.4, 127.0], [12.5, 127.0], [12.6, 127.0], [12.7, 127.0], [12.8, 127.0], [12.9, 127.0], [13.0, 127.0], [13.1, 127.0], [13.2, 127.0], [13.3, 127.0], [13.4, 127.0], [13.5, 127.0], [13.6, 127.0], [13.7, 127.0], [13.8, 128.0], [13.9, 128.0], [14.0, 128.0], [14.1, 128.0], [14.2, 128.0], [14.3, 128.0], [14.4, 128.0], [14.5, 128.0], [14.6, 128.0], [14.7, 128.0], [14.8, 128.0], [14.9, 128.0], [15.0, 128.0], [15.1, 128.0], [15.2, 129.0], [15.3, 129.0], [15.4, 129.0], [15.5, 129.0], [15.6, 129.0], [15.7, 129.0], [15.8, 129.0], [15.9, 129.0], [16.0, 129.0], [16.1, 129.0], [16.2, 129.0], [16.3, 129.0], [16.4, 129.0], [16.5, 129.0], [16.6, 130.0], [16.7, 130.0], [16.8, 130.0], [16.9, 130.0], [17.0, 130.0], [17.1, 130.0], [17.2, 130.0], [17.3, 130.0], [17.4, 130.0], [17.5, 130.0], [17.6, 130.0], [17.7, 130.0], [17.8, 130.0], [17.9, 130.0], [18.0, 130.0], [18.1, 130.0], [18.2, 131.0], [18.3, 131.0], [18.4, 131.0], [18.5, 131.0], [18.6, 131.0], [18.7, 131.0], [18.8, 131.0], [18.9, 131.0], [19.0, 131.0], [19.1, 131.0], [19.2, 131.0], [19.3, 131.0], [19.4, 131.0], [19.5, 131.0], [19.6, 132.0], [19.7, 132.0], [19.8, 132.0], [19.9, 132.0], [20.0, 132.0], [20.1, 132.0], [20.2, 132.0], [20.3, 132.0], [20.4, 132.0], [20.5, 132.0], [20.6, 132.0], [20.7, 132.0], [20.8, 132.0], [20.9, 132.0], [21.0, 133.0], [21.1, 133.0], [21.2, 133.0], [21.3, 133.0], [21.4, 133.0], [21.5, 133.0], [21.6, 133.0], [21.7, 133.0], [21.8, 133.0], [21.9, 133.0], [22.0, 134.0], [22.1, 134.0], [22.2, 134.0], [22.3, 134.0], [22.4, 134.0], [22.5, 134.0], [22.6, 134.0], [22.7, 134.0], [22.8, 134.0], [22.9, 134.0], [23.0, 134.0], [23.1, 134.0], [23.2, 134.0], [23.3, 135.0], [23.4, 135.0], [23.5, 135.0], [23.6, 135.0], [23.7, 135.0], [23.8, 135.0], [23.9, 135.0], [24.0, 135.0], [24.1, 135.0], [24.2, 135.0], [24.3, 136.0], [24.4, 136.0], [24.5, 136.0], [24.6, 136.0], [24.7, 136.0], [24.8, 136.0], [24.9, 136.0], [25.0, 136.0], [25.1, 137.0], [25.2, 137.0], [25.3, 137.0], [25.4, 137.0], [25.5, 137.0], [25.6, 137.0], [25.7, 138.0], [25.8, 138.0], [25.9, 138.0], [26.0, 138.0], [26.1, 138.0], [26.2, 138.0], [26.3, 139.0], [26.4, 139.0], [26.5, 139.0], [26.6, 139.0], [26.7, 139.0], [26.8, 139.0], [26.9, 140.0], [27.0, 140.0], [27.1, 140.0], [27.2, 140.0], [27.3, 140.0], [27.4, 140.0], [27.5, 141.0], [27.6, 141.0], [27.7, 141.0], [27.8, 141.0], [27.9, 141.0], [28.0, 141.0], [28.1, 141.0], [28.2, 142.0], [28.3, 142.0], [28.4, 142.0], [28.5, 142.0], [28.6, 142.0], [28.7, 142.0], [28.8, 142.0], [28.9, 142.0], [29.0, 142.0], [29.1, 142.0], [29.2, 143.0], [29.3, 143.0], [29.4, 143.0], [29.5, 143.0], [29.6, 143.0], [29.7, 143.0], [29.8, 143.0], [29.9, 143.0], [30.0, 143.0], [30.1, 143.0], [30.2, 143.0], [30.3, 143.0], [30.4, 144.0], [30.5, 144.0], [30.6, 144.0], [30.7, 144.0], [30.8, 144.0], [30.9, 144.0], [31.0, 144.0], [31.1, 144.0], [31.2, 144.0], [31.3, 144.0], [31.4, 144.0], [31.5, 144.0], [31.6, 144.0], [31.7, 144.0], [31.8, 145.0], [31.9, 145.0], [32.0, 145.0], [32.1, 145.0], [32.2, 145.0], [32.3, 145.0], [32.4, 145.0], [32.5, 145.0], [32.6, 145.0], [32.7, 145.0], [32.8, 145.0], [32.9, 145.0], [33.0, 145.0], [33.1, 145.0], [33.2, 145.0], [33.3, 146.0], [33.4, 146.0], [33.5, 146.0], [33.6, 146.0], [33.7, 146.0], [33.8, 146.0], [33.9, 146.0], [34.0, 146.0], [34.1, 146.0], [34.2, 146.0], [34.3, 146.0], [34.4, 146.0], [34.5, 146.0], [34.6, 146.0], [34.7, 146.0], [34.8, 146.0], [34.9, 146.0], [35.0, 146.0], [35.1, 146.0], [35.2, 146.0], [35.3, 147.0], [35.4, 147.0], [35.5, 147.0], [35.6, 147.0], [35.7, 147.0], [35.8, 147.0], [35.9, 147.0], [36.0, 147.0], [36.1, 147.0], [36.2, 147.0], [36.3, 147.0], [36.4, 147.0], [36.5, 147.0], [36.6, 147.0], [36.7, 147.0], [36.8, 147.0], [36.9, 147.0], [37.0, 147.0], [37.1, 147.0], [37.2, 147.0], [37.3, 148.0], [37.4, 148.0], [37.5, 148.0], [37.6, 148.0], [37.7, 148.0], [37.8, 148.0], [37.9, 148.0], [38.0, 148.0], [38.1, 148.0], [38.2, 148.0], [38.3, 148.0], [38.4, 148.0], [38.5, 148.0], [38.6, 148.0], [38.7, 148.0], [38.8, 148.0], [38.9, 148.0], [39.0, 148.0], [39.1, 148.0], [39.2, 149.0], [39.3, 149.0], [39.4, 149.0], [39.5, 149.0], [39.6, 149.0], [39.7, 149.0], [39.8, 149.0], [39.9, 149.0], [40.0, 149.0], [40.1, 149.0], [40.2, 149.0], [40.3, 149.0], [40.4, 149.0], [40.5, 149.0], [40.6, 149.0], [40.7, 149.0], [40.8, 149.0], [40.9, 149.0], [41.0, 149.0], [41.1, 149.0], [41.2, 150.0], [41.3, 150.0], [41.4, 150.0], [41.5, 150.0], [41.6, 150.0], [41.7, 150.0], [41.8, 150.0], [41.9, 150.0], [42.0, 150.0], [42.1, 150.0], [42.2, 150.0], [42.3, 150.0], [42.4, 150.0], [42.5, 150.0], [42.6, 150.0], [42.7, 150.0], [42.8, 150.0], [42.9, 150.0], [43.0, 150.0], [43.1, 150.0], [43.2, 151.0], [43.3, 151.0], [43.4, 151.0], [43.5, 151.0], [43.6, 151.0], [43.7, 151.0], [43.8, 151.0], [43.9, 151.0], [44.0, 151.0], [44.1, 151.0], [44.2, 151.0], [44.3, 151.0], [44.4, 151.0], [44.5, 151.0], [44.6, 151.0], [44.7, 151.0], [44.8, 151.0], [44.9, 151.0], [45.0, 151.0], [45.1, 151.0], [45.2, 151.0], [45.3, 151.0], [45.4, 151.0], [45.5, 151.0], [45.6, 152.0], [45.7, 152.0], [45.8, 152.0], [45.9, 152.0], [46.0, 152.0], [46.1, 152.0], [46.2, 152.0], [46.3, 152.0], [46.4, 152.0], [46.5, 152.0], [46.6, 152.0], [46.7, 152.0], [46.8, 152.0], [46.9, 152.0], [47.0, 152.0], [47.1, 152.0], [47.2, 152.0], [47.3, 152.0], [47.4, 152.0], [47.5, 152.0], [47.6, 152.0], [47.7, 152.0], [47.8, 152.0], [47.9, 153.0], [48.0, 153.0], [48.1, 153.0], [48.2, 153.0], [48.3, 153.0], [48.4, 153.0], [48.5, 153.0], [48.6, 153.0], [48.7, 153.0], [48.8, 153.0], [48.9, 153.0], [49.0, 153.0], [49.1, 153.0], [49.2, 153.0], [49.3, 153.0], [49.4, 153.0], [49.5, 153.0], [49.6, 153.0], [49.7, 153.0], [49.8, 153.0], [49.9, 153.0], [50.0, 153.0], [50.1, 153.0], [50.2, 154.0], [50.3, 154.0], [50.4, 154.0], [50.5, 154.0], [50.6, 154.0], [50.7, 154.0], [50.8, 154.0], [50.9, 154.0], [51.0, 154.0], [51.1, 154.0], [51.2, 154.0], [51.3, 154.0], [51.4, 154.0], [51.5, 154.0], [51.6, 154.0], [51.7, 154.0], [51.8, 154.0], [51.9, 154.0], [52.0, 154.0], [52.1, 154.0], [52.2, 154.0], [52.3, 154.0], [52.4, 154.0], [52.5, 154.0], [52.6, 154.0], [52.7, 155.0], [52.8, 155.0], [52.9, 155.0], [53.0, 155.0], [53.1, 155.0], [53.2, 155.0], [53.3, 155.0], [53.4, 155.0], [53.5, 155.0], [53.6, 155.0], [53.7, 155.0], [53.8, 155.0], [53.9, 155.0], [54.0, 155.0], [54.1, 155.0], [54.2, 155.0], [54.3, 155.0], [54.4, 155.0], [54.5, 155.0], [54.6, 155.0], [54.7, 155.0], [54.8, 155.0], [54.9, 156.0], [55.0, 156.0], [55.1, 156.0], [55.2, 156.0], [55.3, 156.0], [55.4, 156.0], [55.5, 156.0], [55.6, 156.0], [55.7, 156.0], [55.8, 156.0], [55.9, 156.0], [56.0, 156.0], [56.1, 156.0], [56.2, 156.0], [56.3, 156.0], [56.4, 156.0], [56.5, 156.0], [56.6, 156.0], [56.7, 156.0], [56.8, 156.0], [56.9, 156.0], [57.0, 156.0], [57.1, 156.0], [57.2, 156.0], [57.3, 156.0], [57.4, 157.0], [57.5, 157.0], [57.6, 157.0], [57.7, 157.0], [57.8, 157.0], [57.9, 157.0], [58.0, 157.0], [58.1, 157.0], [58.2, 157.0], [58.3, 157.0], [58.4, 157.0], [58.5, 157.0], [58.6, 157.0], [58.7, 157.0], [58.8, 157.0], [58.9, 157.0], [59.0, 157.0], [59.1, 157.0], [59.2, 157.0], [59.3, 157.0], [59.4, 157.0], [59.5, 157.0], [59.6, 157.0], [59.7, 157.0], [59.8, 158.0], [59.9, 158.0], [60.0, 158.0], [60.1, 158.0], [60.2, 158.0], [60.3, 158.0], [60.4, 158.0], [60.5, 158.0], [60.6, 158.0], [60.7, 158.0], [60.8, 158.0], [60.9, 158.0], [61.0, 158.0], [61.1, 158.0], [61.2, 158.0], [61.3, 158.0], [61.4, 158.0], [61.5, 158.0], [61.6, 158.0], [61.7, 158.0], [61.8, 158.0], [61.9, 158.0], [62.0, 158.0], [62.1, 158.0], [62.2, 158.0], [62.3, 159.0], [62.4, 159.0], [62.5, 159.0], [62.6, 159.0], [62.7, 159.0], [62.8, 159.0], [62.9, 159.0], [63.0, 159.0], [63.1, 159.0], [63.2, 159.0], [63.3, 159.0], [63.4, 159.0], [63.5, 159.0], [63.6, 159.0], [63.7, 159.0], [63.8, 159.0], [63.9, 159.0], [64.0, 159.0], [64.1, 159.0], [64.2, 159.0], [64.3, 159.0], [64.4, 159.0], [64.5, 159.0], [64.6, 159.0], [64.7, 159.0], [64.8, 159.0], [64.9, 160.0], [65.0, 160.0], [65.1, 160.0], [65.2, 160.0], [65.3, 160.0], [65.4, 160.0], [65.5, 160.0], [65.6, 160.0], [65.7, 160.0], [65.8, 160.0], [65.9, 160.0], [66.0, 160.0], [66.1, 160.0], [66.2, 160.0], [66.3, 160.0], [66.4, 160.0], [66.5, 160.0], [66.6, 160.0], [66.7, 160.0], [66.8, 160.0], [66.9, 160.0], [67.0, 160.0], [67.1, 160.0], [67.2, 160.0], [67.3, 161.0], [67.4, 161.0], [67.5, 161.0], [67.6, 161.0], [67.7, 161.0], [67.8, 161.0], [67.9, 161.0], [68.0, 161.0], [68.1, 161.0], [68.2, 161.0], [68.3, 161.0], [68.4, 161.0], [68.5, 161.0], [68.6, 161.0], [68.7, 161.0], [68.8, 161.0], [68.9, 161.0], [69.0, 161.0], [69.1, 161.0], [69.2, 161.0], [69.3, 161.0], [69.4, 161.0], [69.5, 161.0], [69.6, 161.0], [69.7, 161.0], [69.8, 161.0], [69.9, 162.0], [70.0, 162.0], [70.1, 162.0], [70.2, 162.0], [70.3, 162.0], [70.4, 162.0], [70.5, 162.0], [70.6, 162.0], [70.7, 162.0], [70.8, 162.0], [70.9, 162.0], [71.0, 162.0], [71.1, 162.0], [71.2, 162.0], [71.3, 162.0], [71.4, 162.0], [71.5, 162.0], [71.6, 162.0], [71.7, 162.0], [71.8, 162.0], [71.9, 162.0], [72.0, 162.0], [72.1, 162.0], [72.2, 162.0], [72.3, 162.0], [72.4, 162.0], [72.5, 162.0], [72.6, 163.0], [72.7, 163.0], [72.8, 163.0], [72.9, 163.0], [73.0, 163.0], [73.1, 163.0], [73.2, 163.0], [73.3, 163.0], [73.4, 163.0], [73.5, 163.0], [73.6, 163.0], [73.7, 163.0], [73.8, 163.0], [73.9, 163.0], [74.0, 163.0], [74.1, 163.0], [74.2, 163.0], [74.3, 163.0], [74.4, 163.0], [74.5, 163.0], [74.6, 163.0], [74.7, 163.0], [74.8, 163.0], [74.9, 163.0], [75.0, 164.0], [75.1, 164.0], [75.2, 164.0], [75.3, 164.0], [75.4, 164.0], [75.5, 164.0], [75.6, 164.0], [75.7, 164.0], [75.8, 164.0], [75.9, 164.0], [76.0, 164.0], [76.1, 164.0], [76.2, 164.0], [76.3, 164.0], [76.4, 164.0], [76.5, 164.0], [76.6, 164.0], [76.7, 164.0], [76.8, 164.0], [76.9, 164.0], [77.0, 164.0], [77.1, 164.0], [77.2, 164.0], [77.3, 164.0], [77.4, 164.0], [77.5, 165.0], [77.6, 165.0], [77.7, 165.0], [77.8, 165.0], [77.9, 165.0], [78.0, 165.0], [78.1, 165.0], [78.2, 165.0], [78.3, 165.0], [78.4, 165.0], [78.5, 165.0], [78.6, 165.0], [78.7, 165.0], [78.8, 165.0], [78.9, 165.0], [79.0, 165.0], [79.1, 165.0], [79.2, 165.0], [79.3, 165.0], [79.4, 165.0], [79.5, 165.0], [79.6, 165.0], [79.7, 165.0], [79.8, 165.0], [79.9, 165.0], [80.0, 165.0], [80.1, 165.0], [80.2, 166.0], [80.3, 166.0], [80.4, 166.0], [80.5, 166.0], [80.6, 166.0], [80.7, 166.0], [80.8, 166.0], [80.9, 166.0], [81.0, 166.0], [81.1, 166.0], [81.2, 166.0], [81.3, 166.0], [81.4, 166.0], [81.5, 166.0], [81.6, 166.0], [81.7, 166.0], [81.8, 166.0], [81.9, 166.0], [82.0, 166.0], [82.1, 166.0], [82.2, 166.0], [82.3, 166.0], [82.4, 166.0], [82.5, 166.0], [82.6, 166.0], [82.7, 167.0], [82.8, 167.0], [82.9, 167.0], [83.0, 167.0], [83.1, 167.0], [83.2, 167.0], [83.3, 167.0], [83.4, 167.0], [83.5, 167.0], [83.6, 167.0], [83.7, 167.0], [83.8, 167.0], [83.9, 167.0], [84.0, 167.0], [84.1, 167.0], [84.2, 167.0], [84.3, 167.0], [84.4, 167.0], [84.5, 167.0], [84.6, 167.0], [84.7, 167.0], [84.8, 167.0], [84.9, 167.0], [85.0, 168.0], [85.1, 168.0], [85.2, 168.0], [85.3, 168.0], [85.4, 168.0], [85.5, 168.0], [85.6, 168.0], [85.7, 168.0], [85.8, 168.0], [85.9, 168.0], [86.0, 168.0], [86.1, 168.0], [86.2, 168.0], [86.3, 168.0], [86.4, 168.0], [86.5, 168.0], [86.6, 168.0], [86.7, 168.0], [86.8, 168.0], [86.9, 168.0], [87.0, 169.0], [87.1, 169.0], [87.2, 169.0], [87.3, 169.0], [87.4, 169.0], [87.5, 169.0], [87.6, 169.0], [87.7, 169.0], [87.8, 169.0], [87.9, 169.0], [88.0, 169.0], [88.1, 169.0], [88.2, 169.0], [88.3, 169.0], [88.4, 169.0], [88.5, 169.0], [88.6, 169.0], [88.7, 169.0], [88.8, 170.0], [88.9, 170.0], [89.0, 170.0], [89.1, 170.0], [89.2, 170.0], [89.3, 170.0], [89.4, 170.0], [89.5, 170.0], [89.6, 170.0], [89.7, 170.0], [89.8, 170.0], [89.9, 170.0], [90.0, 170.0], [90.1, 170.0], [90.2, 171.0], [90.3, 171.0], [90.4, 171.0], [90.5, 171.0], [90.6, 171.0], [90.7, 171.0], [90.8, 171.0], [90.9, 171.0], [91.0, 171.0], [91.1, 171.0], [91.2, 171.0], [91.3, 172.0], [91.4, 172.0], [91.5, 172.0], [91.6, 172.0], [91.7, 172.0], [91.8, 172.0], [91.9, 172.0], [92.0, 172.0], [92.1, 172.0], [92.2, 172.0], [92.3, 172.0], [92.4, 173.0], [92.5, 173.0], [92.6, 173.0], [92.7, 173.0], [92.8, 173.0], [92.9, 173.0], [93.0, 173.0], [93.1, 173.0], [93.2, 173.0], [93.3, 173.0], [93.4, 174.0], [93.5, 174.0], [93.6, 174.0], [93.7, 174.0], [93.8, 174.0], [93.9, 174.0], [94.0, 174.0], [94.1, 175.0], [94.2, 175.0], [94.3, 175.0], [94.4, 175.0], [94.5, 175.0], [94.6, 175.0], [94.7, 175.0], [94.8, 175.0], [94.9, 176.0], [95.0, 176.0], [95.1, 176.0], [95.2, 176.0], [95.3, 176.0], [95.4, 176.0], [95.5, 176.0], [95.6, 176.0], [95.7, 177.0], [95.8, 177.0], [95.9, 177.0], [96.0, 177.0], [96.1, 177.0], [96.2, 178.0], [96.3, 178.0], [96.4, 178.0], [96.5, 178.0], [96.6, 178.0], [96.7, 179.0], [96.8, 179.0], [96.9, 179.0], [97.0, 179.0], [97.1, 180.0], [97.2, 180.0], [97.3, 180.0], [97.4, 181.0], [97.5, 181.0], [97.6, 181.0], [97.7, 182.0], [97.8, 182.0], [97.9, 183.0], [98.0, 183.0], [98.1, 184.0], [98.2, 184.0], [98.3, 185.0], [98.4, 185.0], [98.5, 186.0], [98.6, 187.0], [98.7, 188.0], [98.8, 189.0], [98.9, 189.0], [99.0, 190.0], [99.1, 191.0], [99.2, 193.0], [99.3, 194.0], [99.4, 196.0], [99.5, 196.0], [99.6, 198.0], [99.7, 201.0], [99.8, 203.0], [99.9, 207.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 14948.0, "series": [{"data": [[2100.0, 2.0], [2300.0, 1.0], [600.0, 1252.0], [700.0, 786.0], [200.0, 3057.0], [800.0, 537.0], [900.0, 322.0], [1000.0, 213.0], [1100.0, 143.0], [300.0, 2907.0], [1200.0, 84.0], [1300.0, 53.0], [1400.0, 25.0], [1500.0, 13.0], [100.0, 1366.0], [400.0, 2492.0], [1600.0, 12.0], [1700.0, 5.0], [1800.0, 3.0], [1900.0, 6.0], [500.0, 1715.0], [2000.0, 6.0]], "isOverall": false, "label": "OS Process Sampler", "isController": false}, {"data": [[400.0, 2.0], [100.0, 14948.0], [200.0, 50.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 48.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 24844.0, "series": [{"data": [[0.0, 24844.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 5108.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 48.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.781637717121589, "minX": 1.74055746E12, "maxY": 3.0, "series": [{"data": [[1.74055758E12, 3.0], [1.7405598E12, 3.0], [1.74055818E12, 3.0], [1.7405604E12, 3.0], [1.74055878E12, 3.0], [1.74055776E12, 3.0], [1.74055938E12, 3.0], [1.74055902E12, 3.0], [1.740558E12, 3.0], [1.74055962E12, 3.0], [1.74056022E12, 3.0], [1.7405586E12, 3.0], [1.7405592E12, 3.0], [1.74055854E12, 3.0], [1.74055752E12, 3.0], [1.74055914E12, 3.0], [1.74055812E12, 3.0], [1.74055974E12, 3.0], [1.74056034E12, 3.0], [1.74055872E12, 3.0], [1.74055836E12, 3.0], [1.74055998E12, 3.0], [1.74055896E12, 3.0], [1.74055956E12, 3.0], [1.74055794E12, 3.0], [1.74056016E12, 3.0], [1.74055788E12, 3.0], [1.7405595E12, 3.0], [1.74055848E12, 3.0], [1.7405601E12, 3.0], [1.74055908E12, 3.0], [1.74055968E12, 3.0], [1.74055746E12, 2.9824561403508776], [1.74055932E12, 3.0], [1.7405577E12, 3.0], [1.74055992E12, 3.0], [1.7405583E12, 3.0], [1.74056052E12, 2.781637717121589], [1.7405589E12, 3.0], [1.74056046E12, 3.0], [1.74055884E12, 3.0], [1.74055944E12, 3.0], [1.74055782E12, 3.0], [1.74056004E12, 3.0], [1.74055842E12, 3.0], [1.74055806E12, 3.0], [1.74056028E12, 3.0], [1.74055866E12, 3.0], [1.74055764E12, 3.0], [1.74055926E12, 3.0], [1.74055824E12, 3.0], [1.74055986E12, 3.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74056052E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 150.7731401095237, "minX": 1.0, "maxY": 513.9, "series": [{"data": [[2.0, 513.9], [1.0, 483.3888888888889], [3.0, 459.5294549826327]], "isOverall": false, "label": "OS Process Sampler", "isController": false}, {"data": [[2.9969333333333337, 459.59433333333317]], "isOverall": false, "label": "OS Process Sampler-Aggregated", "isController": false}, {"data": [[2.0, 169.99999999999997], [1.0, 173.6666666666667], [3.0, 150.7731401095237]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}, {"data": [[2.9970666666666665, 150.81086666666715]], "isOverall": false, "label": "HTTP Request - enroll-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1658.5333333333333, "minX": 1.74055746E12, "maxY": 45500.23333333333, "series": [{"data": [[1.74055758E12, 43881.416666666664], [1.7405598E12, 44301.53333333333], [1.74055818E12, 42682.48333333333], [1.7405604E12, 40517.0], [1.74055878E12, 43986.01666666667], [1.74055776E12, 44785.316666666666], [1.74055938E12, 42114.98333333333], [1.74055902E12, 44322.683333333334], [1.740558E12, 43838.85], [1.74055962E12, 42703.76666666667], [1.74056022E12, 42219.8], [1.7405586E12, 41189.65], [1.7405592E12, 42829.78333333333], [1.74055854E12, 44196.63333333333], [1.74055752E12, 44553.61666666667], [1.74055914E12, 42093.683333333334], [1.74055812E12, 43565.63333333333], [1.74055974E12, 44175.48333333333], [1.74056034E12, 43986.083333333336], [1.74055872E12, 44764.333333333336], [1.74055836E12, 43565.53333333333], [1.74055998E12, 43271.316666666666], [1.74055896E12, 43250.01666666667], [1.74055956E12, 43712.78333333333], [1.74055794E12, 45500.23333333333], [1.74056016E12, 41631.15], [1.74055788E12, 43292.51666666667], [1.7405595E12, 44574.78333333333], [1.74055848E12, 43712.916666666664], [1.7405601E12, 43460.5], [1.74055908E12, 42682.61666666667], [1.74055968E12, 43250.05], [1.74055746E12, 8284.45], [1.74055932E12, 44406.46666666667], [1.7405577E12, 43544.48333333333], [1.74055992E12, 43124.03333333333], [1.7405583E12, 43124.066666666666], [1.74056052E12, 29709.516666666666], [1.7405589E12, 42409.316666666666], [1.74056046E12, 43397.416666666664], [1.74055884E12, 42535.45], [1.74055944E12, 42535.433333333334], [1.74055782E12, 44553.5], [1.74056004E12, 42682.65], [1.74055842E12, 44448.65], [1.74055806E12, 43838.9], [1.74056028E12, 43439.48333333333], [1.74055866E12, 43523.333333333336], [1.74055764E12, 44890.26666666667], [1.74055926E12, 42556.48333333333], [1.74055824E12, 43439.583333333336], [1.74055986E12, 42661.36666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74055758E12, 8825.766666666666], [1.7405598E12, 8914.616666666667], [1.74055818E12, 8588.833333333334], [1.7405604E12, 8144.583333333333], [1.74055878E12, 8855.383333333333], [1.74055776E12, 9003.466666666667], [1.74055938E12, 8470.366666666667], [1.74055902E12, 8914.616666666667], [1.740558E12, 8825.766666666666], [1.74055962E12, 8588.833333333334], [1.74056022E12, 8499.983333333334], [1.7405586E12, 8292.666666666666], [1.7405592E12, 8618.45], [1.74055854E12, 8885.0], [1.74055752E12, 8973.85], [1.74055914E12, 8470.366666666667], [1.74055812E12, 8766.533333333333], [1.74055974E12, 8885.0], [1.74056034E12, 8855.383333333333], [1.74055872E12, 9003.466666666667], [1.74055836E12, 8766.533333333333], [1.74055998E12, 8707.3], [1.74055896E12, 8707.3], [1.74055956E12, 8796.15], [1.74055794E12, 9151.55], [1.74056016E12, 8381.516666666666], [1.74055788E12, 8707.3], [1.7405595E12, 8973.85], [1.74055848E12, 8796.15], [1.7405601E12, 8736.916666666666], [1.74055908E12, 8588.833333333334], [1.74055968E12, 8707.3], [1.74055746E12, 1658.5333333333333], [1.74055932E12, 8944.233333333334], [1.7405577E12, 8766.533333333333], [1.74055992E12, 8677.683333333332], [1.7405583E12, 8677.683333333332], [1.74056052E12, 5982.566666666667], [1.7405589E12, 8529.6], [1.74056046E12, 8736.916666666666], [1.74055884E12, 8559.216666666667], [1.74055944E12, 8559.216666666667], [1.74055782E12, 8973.85], [1.74056004E12, 8588.833333333334], [1.74055842E12, 8944.233333333334], [1.74055806E12, 8825.766666666666], [1.74056028E12, 8736.916666666666], [1.74055866E12, 8766.533333333333], [1.74055764E12, 9033.083333333334], [1.74055926E12, 8559.216666666667], [1.74055824E12, 8736.916666666666], [1.74055986E12, 8588.833333333334]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74056052E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 139.30201342281865, "minX": 1.74055746E12, "maxY": 495.5663082437273, "series": [{"data": [[1.74055758E12, 463.9498327759194], [1.7405598E12, 440.04651162790657], [1.74055818E12, 473.51724137931035], [1.7405604E12, 485.6714801444043], [1.74055878E12, 452.69463087248323], [1.74055776E12, 445.8888888888885], [1.74055938E12, 470.0034843205578], [1.74055902E12, 448.45695364238435], [1.740558E12, 460.91245791245797], [1.74055962E12, 464.1683848797253], [1.74056022E12, 468.71328671328655], [1.7405586E12, 495.5663082437273], [1.7405592E12, 465.3402061855672], [1.74055854E12, 452.8774834437085], [1.74055752E12, 455.5880398671097], [1.74055914E12, 478.0769230769233], [1.74055812E12, 467.3141891891893], [1.74055974E12, 443.41860465116287], [1.74056034E12, 440.25838926174475], [1.74055872E12, 444.30491803278693], [1.74055836E12, 461.26351351351354], [1.74055998E12, 453.70748299319735], [1.74055896E12, 460.8054607508534], [1.74055956E12, 451.5252525252526], [1.74055794E12, 439.2064516129034], [1.74056016E12, 476.2092198581559], [1.74055788E12, 468.81355932203417], [1.7405595E12, 440.9701986754964], [1.74055848E12, 457.6632996632997], [1.7405601E12, 454.2390572390572], [1.74055908E12, 467.82068965517254], [1.74055968E12, 455.75767918088735], [1.74055746E12, 454.6379310344828], [1.74055932E12, 447.0400000000001], [1.7405577E12, 469.0610169491525], [1.74055992E12, 457.65187713310564], [1.7405583E12, 465.7098976109217], [1.74056052E12, 457.00995024875584], [1.7405589E12, 475.1003460207614], [1.74056046E12, 453.5204081632652], [1.74055884E12, 472.26989619377144], [1.74055944E12, 469.740484429066], [1.74055782E12, 455.73421926910294], [1.74056004E12, 458.9137931034484], [1.74055842E12, 449.48013245033115], [1.74055806E12, 458.67003367003366], [1.74056028E12, 450.1520270270269], [1.74055866E12, 460.88095238095246], [1.74055764E12, 447.593442622951], [1.74055926E12, 468.6551724137931], [1.74055824E12, 464.32432432432415], [1.74055986E12, 465.09688581314873]], "isOverall": false, "label": "OS Process Sampler", "isController": false}, {"data": [[1.74055758E12, 139.30201342281865], [1.7405598E12, 156.32890365448512], [1.74055818E12, 144.9310344827585], [1.7405604E12, 161.60363636363633], [1.74055878E12, 150.19732441471578], [1.74055776E12, 141.85526315789463], [1.74055938E12, 154.66083916083903], [1.74055902E12, 150.2890365448505], [1.740558E12, 143.32885906040264], [1.74055962E12, 156.03448275862067], [1.74056022E12, 161.3170731707316], [1.7405586E12, 148.86785714285708], [1.7405592E12, 152.87628865979374], [1.74055854E12, 146.72999999999982], [1.74055752E12, 140.92739273927398], [1.74055914E12, 151.40909090909082], [1.74055812E12, 144.69594594594594], [1.74055974E12, 157.4066666666666], [1.74056034E12, 160.80936454849478], [1.74055872E12, 148.13486842105263], [1.74055836E12, 145.61148648648657], [1.74055998E12, 157.19387755102028], [1.74055896E12, 150.32312925170066], [1.74055956E12, 153.94949494949492], [1.74055794E12, 142.8673139158576], [1.74056016E12, 158.862190812721], [1.74055788E12, 141.44217687074817], [1.7405595E12, 153.31353135313537], [1.74055848E12, 147.56565656565667], [1.7405601E12, 158.9152542372882], [1.74055908E12, 151.77931034482762], [1.74055968E12, 155.45578231292518], [1.74055746E12, 152.96428571428572], [1.74055932E12, 152.81125827814557], [1.7405577E12, 141.74662162162156], [1.74055992E12, 156.63481228668968], [1.7405583E12, 146.4095563139931], [1.74056052E12, 162.92574257425736], [1.7405589E12, 149.3888888888889], [1.74056046E12, 162.58983050847456], [1.74055884E12, 149.0865051903114], [1.74055944E12, 154.5328719723184], [1.74055782E12, 141.26402640264035], [1.74056004E12, 158.2793103448275], [1.74055842E12, 146.99006622516566], [1.74055806E12, 143.1040268456374], [1.74056028E12, 160.52542372881368], [1.74055866E12, 148.32770270270262], [1.74055764E12, 140.11475409836063], [1.74055926E12, 152.22491349480956], [1.74055824E12, 145.4779661016949], [1.74055986E12, 156.71034482758628]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74056052E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74055746E12, "maxY": 162.92079207920784, "series": [{"data": [[1.74055758E12, 0.0], [1.7405598E12, 0.0], [1.74055818E12, 0.0], [1.7405604E12, 0.0], [1.74055878E12, 0.0], [1.74055776E12, 0.0], [1.74055938E12, 0.0], [1.74055902E12, 0.0], [1.740558E12, 0.0], [1.74055962E12, 0.0], [1.74056022E12, 0.0], [1.7405586E12, 0.0], [1.7405592E12, 0.0], [1.74055854E12, 0.0], [1.74055752E12, 0.0], [1.74055914E12, 0.0], [1.74055812E12, 0.0], [1.74055974E12, 0.0], [1.74056034E12, 0.0], [1.74055872E12, 0.0], [1.74055836E12, 0.0], [1.74055998E12, 0.0], [1.74055896E12, 0.0], [1.74055956E12, 0.0], [1.74055794E12, 0.0], [1.74056016E12, 0.0], [1.74055788E12, 0.0], [1.7405595E12, 0.0], [1.74055848E12, 0.0], [1.7405601E12, 0.0], [1.74055908E12, 0.0], [1.74055968E12, 0.0], [1.74055746E12, 0.0], [1.74055932E12, 0.0], [1.7405577E12, 0.0], [1.74055992E12, 0.0], [1.7405583E12, 0.0], [1.74056052E12, 0.0], [1.7405589E12, 0.0], [1.74056046E12, 0.0], [1.74055884E12, 0.0], [1.74055944E12, 0.0], [1.74055782E12, 0.0], [1.74056004E12, 0.0], [1.74055842E12, 0.0], [1.74055806E12, 0.0], [1.74056028E12, 0.0], [1.74055866E12, 0.0], [1.74055764E12, 0.0], [1.74055926E12, 0.0], [1.74055824E12, 0.0], [1.74055986E12, 0.0]], "isOverall": false, "label": "OS Process Sampler", "isController": false}, {"data": [[1.74055758E12, 139.2953020134228], [1.7405598E12, 156.31893687707648], [1.74055818E12, 144.92068965517245], [1.7405604E12, 161.6], [1.74055878E12, 150.1939799331105], [1.74055776E12, 141.84868421052636], [1.74055938E12, 154.653846153846], [1.74055902E12, 150.27906976744188], [1.740558E12, 143.3020134228188], [1.74055962E12, 156.0241379310346], [1.74056022E12, 161.3170731707316], [1.7405586E12, 148.8642857142856], [1.7405592E12, 152.86254295532638], [1.74055854E12, 146.72333333333327], [1.74055752E12, 140.90759075907582], [1.74055914E12, 151.40559440559434], [1.74055812E12, 144.68918918918908], [1.74055974E12, 157.4066666666666], [1.74056034E12, 160.80602006688963], [1.74055872E12, 148.125], [1.74055836E12, 145.60810810810818], [1.74055998E12, 157.18367346938774], [1.74055896E12, 150.31632653061226], [1.74055956E12, 153.94276094276088], [1.74055794E12, 142.86084142394824], [1.74056016E12, 158.862190812721], [1.74055788E12, 141.4319727891156], [1.7405595E12, 153.30033003300315], [1.74055848E12, 147.56228956228958], [1.7405601E12, 158.90847457627123], [1.74055908E12, 151.76896551724144], [1.74055968E12, 155.45578231292518], [1.74055746E12, 152.92857142857147], [1.74055932E12, 152.8013245033112], [1.7405577E12, 141.71621621621625], [1.74055992E12, 156.63481228668968], [1.7405583E12, 146.40273037542656], [1.74056052E12, 162.92079207920784], [1.7405589E12, 149.3854166666668], [1.74056046E12, 162.58644067796607], [1.74055884E12, 149.0865051903114], [1.74055944E12, 154.52249134948096], [1.74055782E12, 141.24752475247536], [1.74056004E12, 158.27241379310337], [1.74055842E12, 146.98675496688728], [1.74055806E12, 143.1006711409396], [1.74056028E12, 160.51864406779657], [1.74055866E12, 148.30067567567554], [1.74055764E12, 140.09836065573762], [1.74055926E12, 152.22145328719728], [1.74055824E12, 145.4542372881356], [1.74055986E12, 156.71034482758628]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74056052E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74055746E12, "maxY": 10.160714285714286, "series": [{"data": [[1.74055758E12, 0.0], [1.7405598E12, 0.0], [1.74055818E12, 0.0], [1.7405604E12, 0.0], [1.74055878E12, 0.0], [1.74055776E12, 0.0], [1.74055938E12, 0.0], [1.74055902E12, 0.0], [1.740558E12, 0.0], [1.74055962E12, 0.0], [1.74056022E12, 0.0], [1.7405586E12, 0.0], [1.7405592E12, 0.0], [1.74055854E12, 0.0], [1.74055752E12, 0.0], [1.74055914E12, 0.0], [1.74055812E12, 0.0], [1.74055974E12, 0.0], [1.74056034E12, 0.0], [1.74055872E12, 0.0], [1.74055836E12, 0.0], [1.74055998E12, 0.0], [1.74055896E12, 0.0], [1.74055956E12, 0.0], [1.74055794E12, 0.0], [1.74056016E12, 0.0], [1.74055788E12, 0.0], [1.7405595E12, 0.0], [1.74055848E12, 0.0], [1.7405601E12, 0.0], [1.74055908E12, 0.0], [1.74055968E12, 0.0], [1.74055746E12, 0.0], [1.74055932E12, 0.0], [1.7405577E12, 0.0], [1.74055992E12, 0.0], [1.7405583E12, 0.0], [1.74056052E12, 0.0], [1.7405589E12, 0.0], [1.74056046E12, 0.0], [1.74055884E12, 0.0], [1.74055944E12, 0.0], [1.74055782E12, 0.0], [1.74056004E12, 0.0], [1.74055842E12, 0.0], [1.74055806E12, 0.0], [1.74056028E12, 0.0], [1.74055866E12, 0.0], [1.74055764E12, 0.0], [1.74055926E12, 0.0], [1.74055824E12, 0.0], [1.74055986E12, 0.0]], "isOverall": false, "label": "OS Process Sampler", "isController": false}, {"data": [[1.74055758E12, 0.0436241610738255], [1.7405598E12, 0.026578073089700983], [1.74055818E12, 0.031034482758620703], [1.7405604E12, 0.02545454545454547], [1.74055878E12, 0.030100334448160543], [1.74055776E12, 0.036184210526315784], [1.74055938E12, 0.020979020979020994], [1.74055902E12, 0.03322259136212625], [1.740558E12, 0.04026845637583893], [1.74055962E12, 0.031034482758620703], [1.74056022E12, 0.024390243902439046], [1.7405586E12, 0.03214285714285715], [1.7405592E12, 0.030927835051546396], [1.74055854E12, 0.026666666666666658], [1.74055752E12, 0.06270627062706273], [1.74055914E12, 0.027972027972027965], [1.74055812E12, 0.03040540540540542], [1.74055974E12, 0.026666666666666655], [1.74056034E12, 0.023411371237458217], [1.74055872E12, 0.029605263157894742], [1.74055836E12, 0.037162162162162164], [1.74055998E12, 0.023809523809523832], [1.74055896E12, 0.02721088435374149], [1.74055956E12, 0.02020202020202023], [1.74055794E12, 0.03236245954692559], [1.74056016E12, 0.031802120141342774], [1.74055788E12, 0.037414965986394544], [1.7405595E12, 0.02640264026402639], [1.74055848E12, 0.02693602693602693], [1.7405601E12, 0.0271186440677966], [1.74055908E12, 0.034482758620689655], [1.74055968E12, 0.023809523809523832], [1.74055746E12, 10.160714285714286], [1.74055932E12, 0.02980132450331127], [1.7405577E12, 0.04054054054054053], [1.74055992E12, 0.03071672354948807], [1.7405583E12, 0.03412969283276453], [1.74056052E12, 0.0396039603960396], [1.7405589E12, 0.02777777777777778], [1.74056046E12, 0.023728813559322055], [1.74055884E12, 0.027681660899653984], [1.74055944E12, 0.02768166089965396], [1.74055782E12, 0.03300330033003303], [1.74056004E12, 0.031034482758620703], [1.74055842E12, 0.03642384105960265], [1.74055806E12, 0.033557046979865786], [1.74056028E12, 0.0271186440677966], [1.74055866E12, 0.030405405405405414], [1.74055764E12, 0.0360655737704918], [1.74055926E12, 0.027681660899653977], [1.74055824E12, 0.0305084745762712], [1.74055986E12, 0.027586206896551717]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74056052E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 111.0, "minX": 1.74055746E12, "maxY": 2330.0, "series": [{"data": [[1.74055758E12, 1688.0], [1.7405598E12, 1442.0], [1.74055818E12, 1693.0], [1.7405604E12, 1743.0], [1.74055878E12, 1412.0], [1.74055776E12, 1381.0], [1.74055938E12, 1467.0], [1.74055902E12, 1873.0], [1.740558E12, 1220.0], [1.74055962E12, 1325.0], [1.74056022E12, 1588.0], [1.7405586E12, 1801.0], [1.7405592E12, 1642.0], [1.74055854E12, 1267.0], [1.74055752E12, 1581.0], [1.74055914E12, 1632.0], [1.74055812E12, 1662.0], [1.74055974E12, 1949.0], [1.74056034E12, 1564.0], [1.74055872E12, 1701.0], [1.74055836E12, 2079.0], [1.74055998E12, 1751.0], [1.74055896E12, 1496.0], [1.74055956E12, 1632.0], [1.74055794E12, 1966.0], [1.74056016E12, 2163.0], [1.74055788E12, 2330.0], [1.7405595E12, 1283.0], [1.74055848E12, 1353.0], [1.7405601E12, 2091.0], [1.74055908E12, 2095.0], [1.74055968E12, 1298.0], [1.74055746E12, 1247.0], [1.74055932E12, 1321.0], [1.7405577E12, 1695.0], [1.74055992E12, 1671.0], [1.7405583E12, 2189.0], [1.74056052E12, 1276.0], [1.7405589E12, 1777.0], [1.74056046E12, 1922.0], [1.74055884E12, 1303.0], [1.74055944E12, 1325.0], [1.74055782E12, 1482.0], [1.74056004E12, 1349.0], [1.74055842E12, 1348.0], [1.74055806E12, 1084.0], [1.74056028E12, 1331.0], [1.74055866E12, 2025.0], [1.74055764E12, 1870.0], [1.74055926E12, 2008.0], [1.74055824E12, 1919.0], [1.74055986E12, 1499.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.74055758E12, 623.0000000000002], [1.7405598E12, 602.7], [1.74055818E12, 649.6999999999997], [1.7405604E12, 688.7], [1.74055878E12, 627.4000000000001], [1.74055776E12, 629.2999999999998], [1.74055938E12, 647.2], [1.74055902E12, 605.6], [1.740558E12, 617.1999999999999], [1.74055962E12, 663.200000000001], [1.74056022E12, 659.2], [1.7405586E12, 703.0], [1.7405592E12, 636.9000000000003], [1.74055854E12, 649.7], [1.74055752E12, 619.0], [1.74055914E12, 666.8000000000002], [1.74055812E12, 639.8000000000002], [1.74055974E12, 599.8000000000001], [1.74056034E12, 615.8000000000002], [1.74055872E12, 602.0], [1.74055836E12, 649.4000000000001], [1.74055998E12, 623.1], [1.74055896E12, 631.2], [1.74055956E12, 624.5], [1.74055794E12, 622.0], [1.74056016E12, 678.8000000000001], [1.74055788E12, 633.0], [1.7405595E12, 605.1999999999999], [1.74055848E12, 623.5], [1.7405601E12, 637.4000000000001], [1.74055908E12, 638.9999999999998], [1.74055968E12, 648.2], [1.74055746E12, 651.0], [1.74055932E12, 605.7], [1.7405577E12, 648.0], [1.74055992E12, 632.1000000000005], [1.7405583E12, 617.3000000000001], [1.74056052E12, 622.6], [1.7405589E12, 618.4000000000005], [1.74056046E12, 646.0], [1.74055884E12, 667.6000000000001], [1.74055944E12, 650.4000000000001], [1.74055782E12, 611.0], [1.74056004E12, 642.6999999999999], [1.74055842E12, 605.5], [1.74055806E12, 632.0], [1.74056028E12, 614.0], [1.74055866E12, 656.9], [1.74055764E12, 586.6999999999999], [1.74055926E12, 653.0], [1.74055824E12, 629.0], [1.74055986E12, 627.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.74055758E12, 1286.9599999999991], [1.7405598E12, 1100.8500000000001], [1.74055818E12, 1223.6999999999982], [1.7405604E12, 1273.1000000000008], [1.74055878E12, 1271.4799999999996], [1.74055776E12, 1125.67], [1.74055938E12, 1187.86], [1.74055902E12, 1113.88], [1.740558E12, 1010.6799999999976], [1.74055962E12, 1076.0199999999982], [1.74056022E12, 1116.6], [1.7405586E12, 1090.1999999999985], [1.7405592E12, 1220.1399999999942], [1.74055854E12, 1124.4000000000005], [1.74055752E12, 1126.5000000000005], [1.74055914E12, 1398.039999999999], [1.74055812E12, 1122.4200000000003], [1.74055974E12, 1184.2200000000016], [1.74056034E12, 1181.4599999999996], [1.74055872E12, 1204.5999999999992], [1.74055836E12, 1142.0300000000016], [1.74055998E12, 1096.8300000000008], [1.74055896E12, 1127.6800000000003], [1.74055956E12, 1110.4499999999996], [1.74055794E12, 1104.5999999999985], [1.74056016E12, 1016.0], [1.74055788E12, 1202.4000000000012], [1.7405595E12, 1021.0], [1.74055848E12, 1078.499999999994], [1.7405601E12, 1173.260000000006], [1.74055908E12, 1110.879999999997], [1.74055968E12, 1102.0000000000002], [1.74055746E12, 1231.8499999999995], [1.74055932E12, 1073.2200000000007], [1.7405577E12, 1143.1600000000021], [1.74055992E12, 1168.0099999999998], [1.7405583E12, 1335.1999999999998], [1.74056052E12, 1103.1199999999994], [1.7405589E12, 1163.4000000000005], [1.74056046E12, 1209.9000000000033], [1.74055884E12, 1104.5000000000018], [1.74055944E12, 1041.5200000000004], [1.74055782E12, 1232.2500000000043], [1.74056004E12, 1162.0], [1.74055842E12, 1097.1500000000008], [1.74055806E12, 1030.12], [1.74056028E12, 1102.2000000000025], [1.74055866E12, 1126.940000000002], [1.74055764E12, 1100.4899999999993], [1.74055926E12, 1191.600000000002], [1.74055824E12, 1086.6000000000008], [1.74055986E12, 1190.4000000000005]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.74055758E12, 792.4000000000001], [1.7405598E12, 719.5500000000001], [1.74055818E12, 811.4499999999992], [1.7405604E12, 897.4500000000002], [1.74055878E12, 777.5000000000001], [1.74055776E12, 782.0], [1.74055938E12, 846.5999999999995], [1.74055902E12, 742.1999999999996], [1.740558E12, 744.1999999999999], [1.74055962E12, 823.8], [1.74056022E12, 802.5999999999999], [1.7405586E12, 880.0], [1.7405592E12, 804.8000000000002], [1.74055854E12, 810.7], [1.74055752E12, 739.5], [1.74055914E12, 842.7], [1.74055812E12, 761.1500000000002], [1.74055974E12, 714.0], [1.74056034E12, 794.3000000000008], [1.74055872E12, 722.5], [1.74055836E12, 794.5500000000003], [1.74055998E12, 738.55], [1.74055896E12, 793.0000000000001], [1.74055956E12, 780.0], [1.74055794E12, 784.0], [1.74056016E12, 817.2999999999994], [1.74055788E12, 829.0], [1.7405595E12, 776.5999999999995], [1.74055848E12, 809.0], [1.7405601E12, 790.4000000000001], [1.74055908E12, 827.6999999999996], [1.74055968E12, 784.2], [1.74055746E12, 776.0], [1.74055932E12, 785.1000000000001], [1.7405577E12, 787.0], [1.74055992E12, 839.65], [1.7405583E12, 760.7499999999997], [1.74056052E12, 735.1999999999996], [1.7405589E12, 822.5000000000001], [1.74056046E12, 801.5], [1.74055884E12, 824.05], [1.74055944E12, 831.3999999999996], [1.74055782E12, 755.5], [1.74056004E12, 775.4499999999992], [1.74055842E12, 735.0], [1.74055806E12, 787.799999999998], [1.74056028E12, 788.4], [1.74055866E12, 795.2499999999997], [1.74055764E12, 719.8999999999999], [1.74055926E12, 799.0], [1.74055824E12, 789.9999999999998], [1.74055986E12, 776.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.74055758E12, 111.0], [1.7405598E12, 125.0], [1.74055818E12, 115.0], [1.7405604E12, 119.0], [1.74055878E12, 118.0], [1.74055776E12, 112.0], [1.74055938E12, 113.0], [1.74055902E12, 121.0], [1.740558E12, 115.0], [1.74055962E12, 123.0], [1.74056022E12, 128.0], [1.7405586E12, 117.0], [1.7405592E12, 120.0], [1.74055854E12, 115.0], [1.74055752E12, 113.0], [1.74055914E12, 120.0], [1.74055812E12, 115.0], [1.74055974E12, 118.0], [1.74056034E12, 117.0], [1.74055872E12, 119.0], [1.74055836E12, 117.0], [1.74055998E12, 126.0], [1.74055896E12, 118.0], [1.74055956E12, 113.0], [1.74055794E12, 113.0], [1.74056016E12, 118.0], [1.74055788E12, 112.0], [1.7405595E12, 116.0], [1.74055848E12, 116.0], [1.7405601E12, 123.0], [1.74055908E12, 119.0], [1.74055968E12, 123.0], [1.74055746E12, 115.0], [1.74055932E12, 122.0], [1.7405577E12, 112.0], [1.74055992E12, 122.0], [1.7405583E12, 117.0], [1.74056052E12, 125.0], [1.7405589E12, 119.0], [1.74056046E12, 123.0], [1.74055884E12, 118.0], [1.74055944E12, 117.0], [1.74055782E12, 114.0], [1.74056004E12, 127.0], [1.74055842E12, 118.0], [1.74055806E12, 114.0], [1.74056028E12, 127.0], [1.74055866E12, 118.0], [1.74055764E12, 111.0], [1.74055926E12, 123.0], [1.74055824E12, 116.0], [1.74055986E12, 125.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.74055758E12, 165.0], [1.7405598E12, 177.0], [1.74055818E12, 171.5], [1.7405604E12, 180.0], [1.74055878E12, 175.0], [1.74055776E12, 164.0], [1.74055938E12, 176.0], [1.74055902E12, 172.0], [1.740558E12, 170.0], [1.74055962E12, 177.0], [1.74056022E12, 178.0], [1.7405586E12, 167.0], [1.7405592E12, 174.5], [1.74055854E12, 167.0], [1.74055752E12, 166.0], [1.74055914E12, 170.5], [1.74055812E12, 168.5], [1.74055974E12, 174.0], [1.74056034E12, 179.0], [1.74055872E12, 172.0], [1.74055836E12, 161.5], [1.74055998E12, 176.5], [1.74055896E12, 172.0], [1.74055956E12, 172.0], [1.74055794E12, 165.0], [1.74056016E12, 181.0], [1.74055788E12, 160.0], [1.7405595E12, 171.0], [1.74055848E12, 167.0], [1.7405601E12, 180.5], [1.74055908E12, 172.5], [1.74055968E12, 174.0], [1.74055746E12, 177.5], [1.74055932E12, 176.5], [1.7405577E12, 169.0], [1.74055992E12, 175.0], [1.7405583E12, 171.5], [1.74056052E12, 180.0], [1.7405589E12, 173.0], [1.74056046E12, 181.0], [1.74055884E12, 171.0], [1.74055944E12, 173.5], [1.74055782E12, 163.5], [1.74056004E12, 179.0], [1.74055842E12, 174.5], [1.74055806E12, 163.0], [1.74056028E12, 178.0], [1.74055866E12, 172.0], [1.74055764E12, 161.0], [1.74055926E12, 174.0], [1.74055824E12, 173.0], [1.74055986E12, 176.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74056052E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 148.0, "minX": 1.0, "maxY": 437.5, "series": [{"data": [[8.0, 182.0], [2.0, 437.5], [9.0, 178.0], [10.0, 176.0], [11.0, 174.0], [12.0, 172.0], [3.0, 243.0], [13.0, 171.0], [14.0, 169.0], [15.0, 165.0], [4.0, 175.0], [16.0, 159.0], [1.0, 174.0], [17.0, 148.0], [5.0, 226.5], [6.0, 191.0], [7.0, 188.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 17.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 174.0, "series": [{"data": [[8.0, 0.0], [2.0, 87.0], [9.0, 0.0], [10.0, 113.0], [11.0, 113.0], [12.0, 115.0], [3.0, 0.0], [13.0, 114.0], [14.0, 56.0], [15.0, 0.0], [4.0, 62.5], [16.0, 116.5], [1.0, 174.0], [17.0, 0.0], [5.0, 0.0], [6.0, 0.0], [7.0, 114.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 17.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.95, "minX": 1.74055746E12, "maxY": 10.316666666666666, "series": [{"data": [[1.74055758E12, 9.95], [1.7405598E12, 10.033333333333333], [1.74055818E12, 9.666666666666666], [1.7405604E12, 9.2], [1.74055878E12, 9.95], [1.74055776E12, 10.166666666666666], [1.74055938E12, 9.55], [1.74055902E12, 10.05], [1.740558E12, 9.916666666666666], [1.74055962E12, 9.683333333333334], [1.74056022E12, 9.55], [1.7405586E12, 9.316666666666666], [1.7405592E12, 9.7], [1.74055854E12, 10.033333333333333], [1.74055752E12, 10.066666666666666], [1.74055914E12, 9.533333333333333], [1.74055812E12, 9.866666666666667], [1.74055974E12, 10.016666666666667], [1.74056034E12, 9.95], [1.74055872E12, 10.15], [1.74055836E12, 9.866666666666667], [1.74055998E12, 9.8], [1.74055896E12, 9.783333333333333], [1.74055956E12, 9.9], [1.74055794E12, 10.316666666666666], [1.74056016E12, 9.416666666666666], [1.74055788E12, 9.816666666666666], [1.7405595E12, 10.083333333333334], [1.74055848E12, 9.9], [1.7405601E12, 9.866666666666667], [1.74055908E12, 9.666666666666666], [1.74055968E12, 9.783333333333333], [1.74055746E12, 1.95], [1.74055932E12, 10.033333333333333], [1.7405577E12, 9.85], [1.74055992E12, 9.766666666666667], [1.7405583E12, 9.766666666666667], [1.74056052E12, 6.666666666666667], [1.7405589E12, 9.616666666666667], [1.74056046E12, 9.816666666666666], [1.74055884E12, 9.633333333333333], [1.74055944E12, 9.633333333333333], [1.74055782E12, 10.066666666666666], [1.74056004E12, 9.666666666666666], [1.74055842E12, 10.066666666666666], [1.74055806E12, 9.916666666666666], [1.74056028E12, 9.85], [1.74055866E12, 9.833333333333334], [1.74055764E12, 10.166666666666666], [1.74055926E12, 9.65], [1.74055824E12, 9.85], [1.74055986E12, 9.65]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74056052E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.9333333333333333, "minX": 1.74055746E12, "maxY": 5.166666666666667, "series": [{"data": [[1.74055758E12, 4.983333333333333], [1.7405598E12, 5.016666666666667], [1.74055818E12, 4.833333333333333], [1.7405604E12, 4.616666666666666], [1.74055878E12, 4.966666666666667], [1.74055776E12, 5.1], [1.74055938E12, 4.783333333333333], [1.74055902E12, 5.033333333333333], [1.740558E12, 4.95], [1.74055962E12, 4.85], [1.74056022E12, 4.766666666666667], [1.7405586E12, 4.65], [1.7405592E12, 4.85], [1.74055854E12, 5.033333333333333], [1.74055752E12, 5.016666666666667], [1.74055914E12, 4.766666666666667], [1.74055812E12, 4.933333333333334], [1.74055974E12, 5.016666666666667], [1.74056034E12, 4.966666666666667], [1.74055872E12, 5.083333333333333], [1.74055836E12, 4.933333333333334], [1.74055998E12, 4.9], [1.74055896E12, 4.883333333333334], [1.74055956E12, 4.95], [1.74055794E12, 5.166666666666667], [1.74056016E12, 4.7], [1.74055788E12, 4.916666666666667], [1.7405595E12, 5.033333333333333], [1.74055848E12, 4.95], [1.7405601E12, 4.95], [1.74055908E12, 4.833333333333333], [1.74055968E12, 4.883333333333334], [1.74055746E12, 0.9666666666666667], [1.74055932E12, 5.0], [1.7405577E12, 4.916666666666667], [1.74055992E12, 4.883333333333334], [1.7405583E12, 4.883333333333334], [1.74056052E12, 3.35], [1.7405589E12, 4.816666666666666], [1.74056046E12, 4.9], [1.74055884E12, 4.816666666666666], [1.74055944E12, 4.816666666666666], [1.74055782E12, 5.016666666666667], [1.74056004E12, 4.833333333333333], [1.74055842E12, 5.033333333333333], [1.74055806E12, 4.95], [1.74056028E12, 4.933333333333334], [1.74055866E12, 4.9], [1.74055764E12, 5.083333333333333], [1.74055926E12, 4.833333333333333], [1.74055824E12, 4.933333333333334], [1.74055986E12, 4.816666666666666]], "isOverall": false, "label": "0", "isController": false}, {"data": [[1.74055758E12, 4.966666666666667], [1.7405598E12, 5.016666666666667], [1.74055818E12, 4.833333333333333], [1.7405604E12, 4.583333333333333], [1.74055878E12, 4.983333333333333], [1.74055776E12, 5.066666666666666], [1.74055938E12, 4.766666666666667], [1.74055902E12, 5.016666666666667], [1.740558E12, 4.966666666666667], [1.74055962E12, 4.833333333333333], [1.74056022E12, 4.783333333333333], [1.7405586E12, 4.666666666666667], [1.7405592E12, 4.85], [1.74055854E12, 5.0], [1.74055752E12, 5.05], [1.74055914E12, 4.766666666666667], [1.74055812E12, 4.933333333333334], [1.74055974E12, 5.0], [1.74056034E12, 4.983333333333333], [1.74055872E12, 5.066666666666666], [1.74055836E12, 4.933333333333334], [1.74055998E12, 4.9], [1.74055896E12, 4.9], [1.74055956E12, 4.95], [1.74055794E12, 5.15], [1.74056016E12, 4.716666666666667], [1.74055788E12, 4.9], [1.7405595E12, 5.05], [1.74055848E12, 4.95], [1.7405601E12, 4.916666666666667], [1.74055908E12, 4.833333333333333], [1.74055968E12, 4.9], [1.74055746E12, 0.9333333333333333], [1.74055932E12, 5.033333333333333], [1.7405577E12, 4.933333333333334], [1.74055992E12, 4.883333333333334], [1.7405583E12, 4.883333333333334], [1.74056052E12, 3.3666666666666667], [1.7405589E12, 4.8], [1.74056046E12, 4.916666666666667], [1.74055884E12, 4.816666666666666], [1.74055944E12, 4.816666666666666], [1.74055782E12, 5.05], [1.74056004E12, 4.833333333333333], [1.74055842E12, 5.033333333333333], [1.74055806E12, 4.966666666666667], [1.74056028E12, 4.916666666666667], [1.74055866E12, 4.933333333333334], [1.74055764E12, 5.083333333333333], [1.74055926E12, 4.816666666666666], [1.74055824E12, 4.916666666666667], [1.74055986E12, 4.833333333333333]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74056052E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.9333333333333333, "minX": 1.74055746E12, "maxY": 5.166666666666667, "series": [{"data": [[1.74055758E12, 4.983333333333333], [1.7405598E12, 5.016666666666667], [1.74055818E12, 4.833333333333333], [1.7405604E12, 4.616666666666666], [1.74055878E12, 4.966666666666667], [1.74055776E12, 5.1], [1.74055938E12, 4.783333333333333], [1.74055902E12, 5.033333333333333], [1.740558E12, 4.95], [1.74055962E12, 4.85], [1.74056022E12, 4.766666666666667], [1.7405586E12, 4.65], [1.7405592E12, 4.85], [1.74055854E12, 5.033333333333333], [1.74055752E12, 5.016666666666667], [1.74055914E12, 4.766666666666667], [1.74055812E12, 4.933333333333334], [1.74055974E12, 5.016666666666667], [1.74056034E12, 4.966666666666667], [1.74055872E12, 5.083333333333333], [1.74055836E12, 4.933333333333334], [1.74055998E12, 4.9], [1.74055896E12, 4.883333333333334], [1.74055956E12, 4.95], [1.74055794E12, 5.166666666666667], [1.74056016E12, 4.7], [1.74055788E12, 4.916666666666667], [1.7405595E12, 5.033333333333333], [1.74055848E12, 4.95], [1.7405601E12, 4.95], [1.74055908E12, 4.833333333333333], [1.74055968E12, 4.883333333333334], [1.74055746E12, 0.9666666666666667], [1.74055932E12, 5.0], [1.7405577E12, 4.916666666666667], [1.74055992E12, 4.883333333333334], [1.7405583E12, 4.883333333333334], [1.74056052E12, 3.35], [1.7405589E12, 4.816666666666666], [1.74056046E12, 4.9], [1.74055884E12, 4.816666666666666], [1.74055944E12, 4.816666666666666], [1.74055782E12, 5.016666666666667], [1.74056004E12, 4.833333333333333], [1.74055842E12, 5.033333333333333], [1.74055806E12, 4.95], [1.74056028E12, 4.933333333333334], [1.74055866E12, 4.9], [1.74055764E12, 5.083333333333333], [1.74055926E12, 4.833333333333333], [1.74055824E12, 4.933333333333334], [1.74055986E12, 4.816666666666666]], "isOverall": false, "label": "OS Process Sampler-success", "isController": false}, {"data": [[1.74055758E12, 4.966666666666667], [1.7405598E12, 5.016666666666667], [1.74055818E12, 4.833333333333333], [1.7405604E12, 4.583333333333333], [1.74055878E12, 4.983333333333333], [1.74055776E12, 5.066666666666666], [1.74055938E12, 4.766666666666667], [1.74055902E12, 5.016666666666667], [1.740558E12, 4.966666666666667], [1.74055962E12, 4.833333333333333], [1.74056022E12, 4.783333333333333], [1.7405586E12, 4.666666666666667], [1.7405592E12, 4.85], [1.74055854E12, 5.0], [1.74055752E12, 5.05], [1.74055914E12, 4.766666666666667], [1.74055812E12, 4.933333333333334], [1.74055974E12, 5.0], [1.74056034E12, 4.983333333333333], [1.74055872E12, 5.066666666666666], [1.74055836E12, 4.933333333333334], [1.74055998E12, 4.9], [1.74055896E12, 4.9], [1.74055956E12, 4.95], [1.74055794E12, 5.15], [1.74056016E12, 4.716666666666667], [1.74055788E12, 4.9], [1.7405595E12, 5.05], [1.74055848E12, 4.95], [1.7405601E12, 4.916666666666667], [1.74055908E12, 4.833333333333333], [1.74055968E12, 4.9], [1.74055746E12, 0.9333333333333333], [1.74055932E12, 5.033333333333333], [1.7405577E12, 4.933333333333334], [1.74055992E12, 4.883333333333334], [1.7405583E12, 4.883333333333334], [1.74056052E12, 3.3666666666666667], [1.7405589E12, 4.8], [1.74056046E12, 4.916666666666667], [1.74055884E12, 4.816666666666666], [1.74055944E12, 4.816666666666666], [1.74055782E12, 5.05], [1.74056004E12, 4.833333333333333], [1.74055842E12, 5.033333333333333], [1.74055806E12, 4.966666666666667], [1.74056028E12, 4.916666666666667], [1.74055866E12, 4.933333333333334], [1.74055764E12, 5.083333333333333], [1.74055926E12, 4.816666666666666], [1.74055824E12, 4.916666666666667], [1.74055986E12, 4.833333333333333]], "isOverall": false, "label": "HTTP Request - enroll-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74056052E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.9, "minX": 1.74055746E12, "maxY": 10.316666666666666, "series": [{"data": [[1.74055758E12, 9.95], [1.7405598E12, 10.033333333333333], [1.74055818E12, 9.666666666666666], [1.7405604E12, 9.2], [1.74055878E12, 9.95], [1.74055776E12, 10.166666666666666], [1.74055938E12, 9.55], [1.74055902E12, 10.05], [1.740558E12, 9.916666666666666], [1.74055962E12, 9.683333333333334], [1.74056022E12, 9.55], [1.7405586E12, 9.316666666666666], [1.7405592E12, 9.7], [1.74055854E12, 10.033333333333333], [1.74055752E12, 10.066666666666666], [1.74055914E12, 9.533333333333333], [1.74055812E12, 9.866666666666667], [1.74055974E12, 10.016666666666667], [1.74056034E12, 9.95], [1.74055872E12, 10.15], [1.74055836E12, 9.866666666666667], [1.74055998E12, 9.8], [1.74055896E12, 9.783333333333333], [1.74055956E12, 9.9], [1.74055794E12, 10.316666666666666], [1.74056016E12, 9.416666666666666], [1.74055788E12, 9.816666666666666], [1.7405595E12, 10.083333333333334], [1.74055848E12, 9.9], [1.7405601E12, 9.866666666666667], [1.74055908E12, 9.666666666666666], [1.74055968E12, 9.783333333333333], [1.74055746E12, 1.9], [1.74055932E12, 10.033333333333333], [1.7405577E12, 9.85], [1.74055992E12, 9.766666666666667], [1.7405583E12, 9.766666666666667], [1.74056052E12, 6.716666666666667], [1.7405589E12, 9.616666666666667], [1.74056046E12, 9.816666666666666], [1.74055884E12, 9.633333333333333], [1.74055944E12, 9.633333333333333], [1.74055782E12, 10.066666666666666], [1.74056004E12, 9.666666666666666], [1.74055842E12, 10.066666666666666], [1.74055806E12, 9.916666666666666], [1.74056028E12, 9.85], [1.74055866E12, 9.833333333333334], [1.74055764E12, 10.166666666666666], [1.74055926E12, 9.65], [1.74055824E12, 9.85], [1.74055986E12, 9.65]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74056052E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

