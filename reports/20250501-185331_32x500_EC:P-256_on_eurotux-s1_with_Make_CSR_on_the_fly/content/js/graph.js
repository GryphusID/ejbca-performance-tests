/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 7.0, "minX": 0.0, "maxY": 9896.0, "series": [{"data": [[0.0, 7.0], [0.1, 8.0], [0.2, 9.0], [0.3, 9.0], [0.4, 9.0], [0.5, 9.0], [0.6, 9.0], [0.7, 10.0], [0.8, 10.0], [0.9, 10.0], [1.0, 10.0], [1.1, 10.0], [1.2, 10.0], [1.3, 10.0], [1.4, 10.0], [1.5, 10.0], [1.6, 10.0], [1.7, 10.0], [1.8, 10.0], [1.9, 10.0], [2.0, 11.0], [2.1, 11.0], [2.2, 11.0], [2.3, 11.0], [2.4, 11.0], [2.5, 11.0], [2.6, 11.0], [2.7, 11.0], [2.8, 11.0], [2.9, 11.0], [3.0, 11.0], [3.1, 11.0], [3.2, 11.0], [3.3, 11.0], [3.4, 11.0], [3.5, 11.0], [3.6, 11.0], [3.7, 11.0], [3.8, 11.0], [3.9, 11.0], [4.0, 11.0], [4.1, 11.0], [4.2, 11.0], [4.3, 11.0], [4.4, 11.0], [4.5, 11.0], [4.6, 11.0], [4.7, 11.0], [4.8, 12.0], [4.9, 12.0], [5.0, 12.0], [5.1, 12.0], [5.2, 12.0], [5.3, 12.0], [5.4, 12.0], [5.5, 12.0], [5.6, 12.0], [5.7, 12.0], [5.8, 12.0], [5.9, 12.0], [6.0, 12.0], [6.1, 12.0], [6.2, 12.0], [6.3, 12.0], [6.4, 12.0], [6.5, 12.0], [6.6, 12.0], [6.7, 12.0], [6.8, 12.0], [6.9, 12.0], [7.0, 12.0], [7.1, 12.0], [7.2, 12.0], [7.3, 12.0], [7.4, 12.0], [7.5, 12.0], [7.6, 12.0], [7.7, 12.0], [7.8, 12.0], [7.9, 12.0], [8.0, 12.0], [8.1, 12.0], [8.2, 12.0], [8.3, 12.0], [8.4, 12.0], [8.5, 12.0], [8.6, 12.0], [8.7, 12.0], [8.8, 12.0], [8.9, 12.0], [9.0, 12.0], [9.1, 12.0], [9.2, 12.0], [9.3, 12.0], [9.4, 12.0], [9.5, 12.0], [9.6, 13.0], [9.7, 13.0], [9.8, 13.0], [9.9, 13.0], [10.0, 13.0], [10.1, 13.0], [10.2, 13.0], [10.3, 13.0], [10.4, 13.0], [10.5, 13.0], [10.6, 13.0], [10.7, 13.0], [10.8, 13.0], [10.9, 13.0], [11.0, 13.0], [11.1, 13.0], [11.2, 13.0], [11.3, 13.0], [11.4, 13.0], [11.5, 13.0], [11.6, 13.0], [11.7, 13.0], [11.8, 13.0], [11.9, 13.0], [12.0, 13.0], [12.1, 13.0], [12.2, 13.0], [12.3, 13.0], [12.4, 13.0], [12.5, 13.0], [12.6, 13.0], [12.7, 13.0], [12.8, 13.0], [12.9, 13.0], [13.0, 13.0], [13.1, 13.0], [13.2, 13.0], [13.3, 13.0], [13.4, 13.0], [13.5, 13.0], [13.6, 13.0], [13.7, 13.0], [13.8, 13.0], [13.9, 13.0], [14.0, 13.0], [14.1, 13.0], [14.2, 14.0], [14.3, 14.0], [14.4, 14.0], [14.5, 14.0], [14.6, 14.0], [14.7, 14.0], [14.8, 14.0], [14.9, 14.0], [15.0, 14.0], [15.1, 14.0], [15.2, 14.0], [15.3, 14.0], [15.4, 14.0], [15.5, 14.0], [15.6, 14.0], [15.7, 14.0], [15.8, 14.0], [15.9, 14.0], [16.0, 14.0], [16.1, 14.0], [16.2, 14.0], [16.3, 14.0], [16.4, 14.0], [16.5, 14.0], [16.6, 14.0], [16.7, 14.0], [16.8, 14.0], [16.9, 14.0], [17.0, 14.0], [17.1, 14.0], [17.2, 14.0], [17.3, 14.0], [17.4, 14.0], [17.5, 14.0], [17.6, 14.0], [17.7, 14.0], [17.8, 14.0], [17.9, 14.0], [18.0, 14.0], [18.1, 14.0], [18.2, 14.0], [18.3, 14.0], [18.4, 14.0], [18.5, 14.0], [18.6, 14.0], [18.7, 14.0], [18.8, 14.0], [18.9, 14.0], [19.0, 14.0], [19.1, 15.0], [19.2, 15.0], [19.3, 15.0], [19.4, 15.0], [19.5, 15.0], [19.6, 15.0], [19.7, 15.0], [19.8, 15.0], [19.9, 15.0], [20.0, 15.0], [20.1, 15.0], [20.2, 15.0], [20.3, 15.0], [20.4, 15.0], [20.5, 15.0], [20.6, 15.0], [20.7, 15.0], [20.8, 15.0], [20.9, 15.0], [21.0, 15.0], [21.1, 15.0], [21.2, 15.0], [21.3, 15.0], [21.4, 15.0], [21.5, 15.0], [21.6, 15.0], [21.7, 15.0], [21.8, 15.0], [21.9, 15.0], [22.0, 15.0], [22.1, 15.0], [22.2, 15.0], [22.3, 15.0], [22.4, 15.0], [22.5, 15.0], [22.6, 15.0], [22.7, 15.0], [22.8, 15.0], [22.9, 15.0], [23.0, 15.0], [23.1, 15.0], [23.2, 15.0], [23.3, 15.0], [23.4, 15.0], [23.5, 15.0], [23.6, 15.0], [23.7, 16.0], [23.8, 16.0], [23.9, 16.0], [24.0, 16.0], [24.1, 16.0], [24.2, 16.0], [24.3, 16.0], [24.4, 16.0], [24.5, 16.0], [24.6, 16.0], [24.7, 16.0], [24.8, 16.0], [24.9, 16.0], [25.0, 16.0], [25.1, 16.0], [25.2, 16.0], [25.3, 16.0], [25.4, 16.0], [25.5, 16.0], [25.6, 16.0], [25.7, 16.0], [25.8, 16.0], [25.9, 16.0], [26.0, 16.0], [26.1, 16.0], [26.2, 16.0], [26.3, 16.0], [26.4, 16.0], [26.5, 16.0], [26.6, 16.0], [26.7, 16.0], [26.8, 16.0], [26.9, 16.0], [27.0, 16.0], [27.1, 16.0], [27.2, 16.0], [27.3, 16.0], [27.4, 16.0], [27.5, 16.0], [27.6, 16.0], [27.7, 16.0], [27.8, 16.0], [27.9, 17.0], [28.0, 17.0], [28.1, 17.0], [28.2, 17.0], [28.3, 17.0], [28.4, 17.0], [28.5, 17.0], [28.6, 17.0], [28.7, 17.0], [28.8, 17.0], [28.9, 17.0], [29.0, 17.0], [29.1, 17.0], [29.2, 17.0], [29.3, 17.0], [29.4, 17.0], [29.5, 17.0], [29.6, 17.0], [29.7, 17.0], [29.8, 17.0], [29.9, 17.0], [30.0, 17.0], [30.1, 17.0], [30.2, 17.0], [30.3, 17.0], [30.4, 17.0], [30.5, 17.0], [30.6, 17.0], [30.7, 17.0], [30.8, 17.0], [30.9, 17.0], [31.0, 17.0], [31.1, 17.0], [31.2, 17.0], [31.3, 17.0], [31.4, 17.0], [31.5, 17.0], [31.6, 17.0], [31.7, 18.0], [31.8, 18.0], [31.9, 18.0], [32.0, 18.0], [32.1, 18.0], [32.2, 18.0], [32.3, 18.0], [32.4, 18.0], [32.5, 18.0], [32.6, 18.0], [32.7, 18.0], [32.8, 18.0], [32.9, 18.0], [33.0, 18.0], [33.1, 18.0], [33.2, 18.0], [33.3, 18.0], [33.4, 18.0], [33.5, 18.0], [33.6, 18.0], [33.7, 18.0], [33.8, 18.0], [33.9, 18.0], [34.0, 18.0], [34.1, 18.0], [34.2, 18.0], [34.3, 18.0], [34.4, 18.0], [34.5, 18.0], [34.6, 18.0], [34.7, 18.0], [34.8, 18.0], [34.9, 19.0], [35.0, 19.0], [35.1, 19.0], [35.2, 19.0], [35.3, 19.0], [35.4, 19.0], [35.5, 19.0], [35.6, 19.0], [35.7, 19.0], [35.8, 19.0], [35.9, 19.0], [36.0, 19.0], [36.1, 19.0], [36.2, 19.0], [36.3, 19.0], [36.4, 19.0], [36.5, 19.0], [36.6, 19.0], [36.7, 19.0], [36.8, 19.0], [36.9, 19.0], [37.0, 19.0], [37.1, 19.0], [37.2, 19.0], [37.3, 19.0], [37.4, 19.0], [37.5, 19.0], [37.6, 19.0], [37.7, 19.0], [37.8, 19.0], [37.9, 20.0], [38.0, 20.0], [38.1, 20.0], [38.2, 20.0], [38.3, 20.0], [38.4, 20.0], [38.5, 20.0], [38.6, 20.0], [38.7, 20.0], [38.8, 20.0], [38.9, 20.0], [39.0, 20.0], [39.1, 20.0], [39.2, 20.0], [39.3, 20.0], [39.4, 20.0], [39.5, 20.0], [39.6, 20.0], [39.7, 20.0], [39.8, 20.0], [39.9, 20.0], [40.0, 20.0], [40.1, 20.0], [40.2, 20.0], [40.3, 20.0], [40.4, 20.0], [40.5, 20.0], [40.6, 20.0], [40.7, 21.0], [40.8, 21.0], [40.9, 21.0], [41.0, 21.0], [41.1, 21.0], [41.2, 21.0], [41.3, 21.0], [41.4, 21.0], [41.5, 21.0], [41.6, 21.0], [41.7, 21.0], [41.8, 21.0], [41.9, 21.0], [42.0, 21.0], [42.1, 21.0], [42.2, 21.0], [42.3, 21.0], [42.4, 21.0], [42.5, 21.0], [42.6, 21.0], [42.7, 21.0], [42.8, 21.0], [42.9, 21.0], [43.0, 21.0], [43.1, 22.0], [43.2, 22.0], [43.3, 22.0], [43.4, 22.0], [43.5, 22.0], [43.6, 22.0], [43.7, 22.0], [43.8, 22.0], [43.9, 22.0], [44.0, 22.0], [44.1, 22.0], [44.2, 22.0], [44.3, 22.0], [44.4, 22.0], [44.5, 22.0], [44.6, 22.0], [44.7, 22.0], [44.8, 22.0], [44.9, 22.0], [45.0, 22.0], [45.1, 22.0], [45.2, 22.0], [45.3, 23.0], [45.4, 23.0], [45.5, 23.0], [45.6, 23.0], [45.7, 23.0], [45.8, 23.0], [45.9, 23.0], [46.0, 23.0], [46.1, 23.0], [46.2, 23.0], [46.3, 23.0], [46.4, 23.0], [46.5, 23.0], [46.6, 23.0], [46.7, 23.0], [46.8, 23.0], [46.9, 23.0], [47.0, 23.0], [47.1, 23.0], [47.2, 23.0], [47.3, 23.0], [47.4, 24.0], [47.5, 24.0], [47.6, 24.0], [47.7, 24.0], [47.8, 24.0], [47.9, 24.0], [48.0, 24.0], [48.1, 24.0], [48.2, 24.0], [48.3, 24.0], [48.4, 24.0], [48.5, 24.0], [48.6, 24.0], [48.7, 24.0], [48.8, 24.0], [48.9, 24.0], [49.0, 24.0], [49.1, 24.0], [49.2, 24.0], [49.3, 25.0], [49.4, 25.0], [49.5, 25.0], [49.6, 25.0], [49.7, 25.0], [49.8, 25.0], [49.9, 25.0], [50.0, 25.0], [50.1, 25.0], [50.2, 25.0], [50.3, 25.0], [50.4, 25.0], [50.5, 25.0], [50.6, 25.0], [50.7, 25.0], [50.8, 25.0], [50.9, 25.0], [51.0, 25.0], [51.1, 25.0], [51.2, 25.0], [51.3, 26.0], [51.4, 26.0], [51.5, 26.0], [51.6, 26.0], [51.7, 26.0], [51.8, 26.0], [51.9, 26.0], [52.0, 26.0], [52.1, 26.0], [52.2, 26.0], [52.3, 26.0], [52.4, 26.0], [52.5, 26.0], [52.6, 26.0], [52.7, 26.0], [52.8, 27.0], [52.9, 27.0], [53.0, 27.0], [53.1, 27.0], [53.2, 27.0], [53.3, 27.0], [53.4, 27.0], [53.5, 27.0], [53.6, 27.0], [53.7, 27.0], [53.8, 27.0], [53.9, 27.0], [54.0, 27.0], [54.1, 27.0], [54.2, 27.0], [54.3, 27.0], [54.4, 27.0], [54.5, 28.0], [54.6, 28.0], [54.7, 28.0], [54.8, 28.0], [54.9, 28.0], [55.0, 28.0], [55.1, 28.0], [55.2, 28.0], [55.3, 28.0], [55.4, 28.0], [55.5, 28.0], [55.6, 28.0], [55.7, 28.0], [55.8, 28.0], [55.9, 28.0], [56.0, 29.0], [56.1, 29.0], [56.2, 29.0], [56.3, 29.0], [56.4, 29.0], [56.5, 29.0], [56.6, 29.0], [56.7, 29.0], [56.8, 29.0], [56.9, 29.0], [57.0, 29.0], [57.1, 29.0], [57.2, 29.0], [57.3, 29.0], [57.4, 29.0], [57.5, 29.0], [57.6, 29.0], [57.7, 30.0], [57.8, 30.0], [57.9, 30.0], [58.0, 30.0], [58.1, 30.0], [58.2, 30.0], [58.3, 30.0], [58.4, 30.0], [58.5, 30.0], [58.6, 30.0], [58.7, 30.0], [58.8, 30.0], [58.9, 30.0], [59.0, 30.0], [59.1, 30.0], [59.2, 31.0], [59.3, 31.0], [59.4, 31.0], [59.5, 31.0], [59.6, 31.0], [59.7, 31.0], [59.8, 31.0], [59.9, 31.0], [60.0, 31.0], [60.1, 31.0], [60.2, 31.0], [60.3, 31.0], [60.4, 31.0], [60.5, 31.0], [60.6, 31.0], [60.7, 32.0], [60.8, 32.0], [60.9, 32.0], [61.0, 32.0], [61.1, 32.0], [61.2, 32.0], [61.3, 32.0], [61.4, 32.0], [61.5, 32.0], [61.6, 32.0], [61.7, 32.0], [61.8, 32.0], [61.9, 32.0], [62.0, 32.0], [62.1, 32.0], [62.2, 33.0], [62.3, 33.0], [62.4, 33.0], [62.5, 33.0], [62.6, 33.0], [62.7, 33.0], [62.8, 33.0], [62.9, 33.0], [63.0, 33.0], [63.1, 33.0], [63.2, 33.0], [63.3, 33.0], [63.4, 33.0], [63.5, 33.0], [63.6, 33.0], [63.7, 34.0], [63.8, 34.0], [63.9, 34.0], [64.0, 34.0], [64.1, 34.0], [64.2, 34.0], [64.3, 34.0], [64.4, 34.0], [64.5, 34.0], [64.6, 34.0], [64.7, 34.0], [64.8, 34.0], [64.9, 34.0], [65.0, 34.0], [65.1, 34.0], [65.2, 35.0], [65.3, 35.0], [65.4, 35.0], [65.5, 35.0], [65.6, 35.0], [65.7, 35.0], [65.8, 35.0], [65.9, 35.0], [66.0, 35.0], [66.1, 35.0], [66.2, 35.0], [66.3, 35.0], [66.4, 35.0], [66.5, 36.0], [66.6, 36.0], [66.7, 36.0], [66.8, 36.0], [66.9, 36.0], [67.0, 36.0], [67.1, 36.0], [67.2, 36.0], [67.3, 36.0], [67.4, 36.0], [67.5, 36.0], [67.6, 36.0], [67.7, 36.0], [67.8, 36.0], [67.9, 36.0], [68.0, 37.0], [68.1, 37.0], [68.2, 37.0], [68.3, 37.0], [68.4, 37.0], [68.5, 37.0], [68.6, 37.0], [68.7, 37.0], [68.8, 37.0], [68.9, 37.0], [69.0, 37.0], [69.1, 37.0], [69.2, 37.0], [69.3, 38.0], [69.4, 38.0], [69.5, 38.0], [69.6, 38.0], [69.7, 38.0], [69.8, 38.0], [69.9, 38.0], [70.0, 38.0], [70.1, 38.0], [70.2, 38.0], [70.3, 38.0], [70.4, 38.0], [70.5, 38.0], [70.6, 39.0], [70.7, 39.0], [70.8, 39.0], [70.9, 39.0], [71.0, 39.0], [71.1, 39.0], [71.2, 39.0], [71.3, 39.0], [71.4, 39.0], [71.5, 39.0], [71.6, 39.0], [71.7, 39.0], [71.8, 40.0], [71.9, 40.0], [72.0, 40.0], [72.1, 40.0], [72.2, 40.0], [72.3, 40.0], [72.4, 40.0], [72.5, 40.0], [72.6, 40.0], [72.7, 40.0], [72.8, 40.0], [72.9, 40.0], [73.0, 40.0], [73.1, 41.0], [73.2, 41.0], [73.3, 41.0], [73.4, 41.0], [73.5, 41.0], [73.6, 41.0], [73.7, 41.0], [73.8, 41.0], [73.9, 41.0], [74.0, 41.0], [74.1, 41.0], [74.2, 41.0], [74.3, 42.0], [74.4, 42.0], [74.5, 42.0], [74.6, 42.0], [74.7, 42.0], [74.8, 42.0], [74.9, 42.0], [75.0, 42.0], [75.1, 42.0], [75.2, 42.0], [75.3, 42.0], [75.4, 42.0], [75.5, 42.0], [75.6, 43.0], [75.7, 43.0], [75.8, 43.0], [75.9, 43.0], [76.0, 43.0], [76.1, 43.0], [76.2, 43.0], [76.3, 43.0], [76.4, 43.0], [76.5, 43.0], [76.6, 43.0], [76.7, 43.0], [76.8, 43.0], [76.9, 43.0], [77.0, 44.0], [77.1, 44.0], [77.2, 44.0], [77.3, 44.0], [77.4, 44.0], [77.5, 44.0], [77.6, 44.0], [77.7, 44.0], [77.8, 44.0], [77.9, 44.0], [78.0, 45.0], [78.1, 45.0], [78.2, 45.0], [78.3, 45.0], [78.4, 45.0], [78.5, 45.0], [78.6, 45.0], [78.7, 45.0], [78.8, 45.0], [78.9, 45.0], [79.0, 45.0], [79.1, 46.0], [79.2, 46.0], [79.3, 46.0], [79.4, 46.0], [79.5, 46.0], [79.6, 46.0], [79.7, 46.0], [79.8, 46.0], [79.9, 46.0], [80.0, 46.0], [80.1, 47.0], [80.2, 47.0], [80.3, 47.0], [80.4, 47.0], [80.5, 47.0], [80.6, 47.0], [80.7, 47.0], [80.8, 47.0], [80.9, 47.0], [81.0, 47.0], [81.1, 47.0], [81.2, 47.0], [81.3, 48.0], [81.4, 48.0], [81.5, 48.0], [81.6, 48.0], [81.7, 48.0], [81.8, 48.0], [81.9, 48.0], [82.0, 48.0], [82.1, 48.0], [82.2, 48.0], [82.3, 49.0], [82.4, 49.0], [82.5, 49.0], [82.6, 49.0], [82.7, 49.0], [82.8, 49.0], [82.9, 49.0], [83.0, 49.0], [83.1, 49.0], [83.2, 49.0], [83.3, 49.0], [83.4, 49.0], [83.5, 50.0], [83.6, 50.0], [83.7, 50.0], [83.8, 50.0], [83.9, 50.0], [84.0, 50.0], [84.1, 50.0], [84.2, 50.0], [84.3, 50.0], [84.4, 50.0], [84.5, 51.0], [84.6, 51.0], [84.7, 51.0], [84.8, 51.0], [84.9, 51.0], [85.0, 51.0], [85.1, 51.0], [85.2, 51.0], [85.3, 51.0], [85.4, 52.0], [85.5, 52.0], [85.6, 52.0], [85.7, 52.0], [85.8, 52.0], [85.9, 52.0], [86.0, 52.0], [86.1, 52.0], [86.2, 52.0], [86.3, 53.0], [86.4, 53.0], [86.5, 53.0], [86.6, 53.0], [86.7, 53.0], [86.8, 53.0], [86.9, 53.0], [87.0, 53.0], [87.1, 54.0], [87.2, 54.0], [87.3, 54.0], [87.4, 54.0], [87.5, 54.0], [87.6, 54.0], [87.7, 54.0], [87.8, 54.0], [87.9, 54.0], [88.0, 55.0], [88.1, 55.0], [88.2, 55.0], [88.3, 55.0], [88.4, 55.0], [88.5, 55.0], [88.6, 55.0], [88.7, 55.0], [88.8, 56.0], [88.9, 56.0], [89.0, 56.0], [89.1, 56.0], [89.2, 56.0], [89.3, 56.0], [89.4, 57.0], [89.5, 57.0], [89.6, 57.0], [89.7, 57.0], [89.8, 57.0], [89.9, 57.0], [90.0, 58.0], [90.1, 58.0], [90.2, 58.0], [90.3, 58.0], [90.4, 58.0], [90.5, 58.0], [90.6, 58.0], [90.7, 59.0], [90.8, 59.0], [90.9, 59.0], [91.0, 59.0], [91.1, 59.0], [91.2, 59.0], [91.3, 59.0], [91.4, 60.0], [91.5, 60.0], [91.6, 60.0], [91.7, 60.0], [91.8, 60.0], [91.9, 60.0], [92.0, 61.0], [92.1, 61.0], [92.2, 61.0], [92.3, 61.0], [92.4, 61.0], [92.5, 62.0], [92.6, 62.0], [92.7, 62.0], [92.8, 62.0], [92.9, 62.0], [93.0, 63.0], [93.1, 63.0], [93.2, 63.0], [93.3, 63.0], [93.4, 64.0], [93.5, 64.0], [93.6, 64.0], [93.7, 64.0], [93.8, 64.0], [93.9, 65.0], [94.0, 65.0], [94.1, 65.0], [94.2, 65.0], [94.3, 65.0], [94.4, 66.0], [94.5, 66.0], [94.6, 66.0], [94.7, 67.0], [94.8, 67.0], [94.9, 67.0], [95.0, 67.0], [95.1, 67.0], [95.2, 68.0], [95.3, 68.0], [95.4, 68.0], [95.5, 68.0], [95.6, 69.0], [95.7, 69.0], [95.8, 69.0], [95.9, 70.0], [96.0, 70.0], [96.1, 71.0], [96.2, 71.0], [96.3, 71.0], [96.4, 72.0], [96.5, 72.0], [96.6, 72.0], [96.7, 73.0], [96.8, 73.0], [96.9, 74.0], [97.0, 74.0], [97.1, 75.0], [97.2, 75.0], [97.3, 76.0], [97.4, 76.0], [97.5, 77.0], [97.6, 77.0], [97.7, 78.0], [97.8, 78.0], [97.9, 78.0], [98.0, 79.0], [98.1, 80.0], [98.2, 80.0], [98.3, 81.0], [98.4, 82.0], [98.5, 83.0], [98.6, 84.0], [98.7, 85.0], [98.8, 86.0], [98.9, 87.0], [99.0, 89.0], [99.1, 91.0], [99.2, 92.0], [99.3, 94.0], [99.4, 97.0], [99.5, 99.0], [99.6, 102.0], [99.7, 106.0], [99.8, 112.0], [99.9, 123.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 17.0], [0.1, 20.0], [0.2, 24.0], [0.3, 29.0], [0.4, 33.0], [0.5, 38.0], [0.6, 39.0], [0.7, 40.0], [0.8, 41.0], [0.9, 43.0], [1.0, 44.0], [1.1, 45.0], [1.2, 46.0], [1.3, 47.0], [1.4, 47.0], [1.5, 48.0], [1.6, 49.0], [1.7, 50.0], [1.8, 50.0], [1.9, 51.0], [2.0, 51.0], [2.1, 52.0], [2.2, 52.0], [2.3, 53.0], [2.4, 53.0], [2.5, 54.0], [2.6, 54.0], [2.7, 54.0], [2.8, 54.0], [2.9, 55.0], [3.0, 55.0], [3.1, 55.0], [3.2, 56.0], [3.3, 56.0], [3.4, 56.0], [3.5, 57.0], [3.6, 57.0], [3.7, 57.0], [3.8, 57.0], [3.9, 58.0], [4.0, 58.0], [4.1, 58.0], [4.2, 58.0], [4.3, 59.0], [4.4, 59.0], [4.5, 59.0], [4.6, 59.0], [4.7, 59.0], [4.8, 60.0], [4.9, 60.0], [5.0, 60.0], [5.1, 60.0], [5.2, 60.0], [5.3, 60.0], [5.4, 61.0], [5.5, 61.0], [5.6, 61.0], [5.7, 61.0], [5.8, 61.0], [5.9, 61.0], [6.0, 62.0], [6.1, 62.0], [6.2, 62.0], [6.3, 62.0], [6.4, 62.0], [6.5, 62.0], [6.6, 63.0], [6.7, 63.0], [6.8, 63.0], [6.9, 63.0], [7.0, 63.0], [7.1, 63.0], [7.2, 63.0], [7.3, 64.0], [7.4, 64.0], [7.5, 64.0], [7.6, 64.0], [7.7, 64.0], [7.8, 64.0], [7.9, 64.0], [8.0, 65.0], [8.1, 65.0], [8.2, 65.0], [8.3, 65.0], [8.4, 65.0], [8.5, 65.0], [8.6, 65.0], [8.7, 65.0], [8.8, 66.0], [8.9, 66.0], [9.0, 66.0], [9.1, 66.0], [9.2, 66.0], [9.3, 66.0], [9.4, 66.0], [9.5, 66.0], [9.6, 66.0], [9.7, 67.0], [9.8, 67.0], [9.9, 67.0], [10.0, 67.0], [10.1, 67.0], [10.2, 67.0], [10.3, 67.0], [10.4, 67.0], [10.5, 68.0], [10.6, 68.0], [10.7, 68.0], [10.8, 68.0], [10.9, 68.0], [11.0, 68.0], [11.1, 68.0], [11.2, 68.0], [11.3, 68.0], [11.4, 69.0], [11.5, 69.0], [11.6, 69.0], [11.7, 69.0], [11.8, 69.0], [11.9, 69.0], [12.0, 69.0], [12.1, 69.0], [12.2, 69.0], [12.3, 69.0], [12.4, 70.0], [12.5, 70.0], [12.6, 70.0], [12.7, 70.0], [12.8, 70.0], [12.9, 70.0], [13.0, 70.0], [13.1, 70.0], [13.2, 70.0], [13.3, 70.0], [13.4, 71.0], [13.5, 71.0], [13.6, 71.0], [13.7, 71.0], [13.8, 71.0], [13.9, 71.0], [14.0, 71.0], [14.1, 71.0], [14.2, 71.0], [14.3, 71.0], [14.4, 72.0], [14.5, 72.0], [14.6, 72.0], [14.7, 72.0], [14.8, 72.0], [14.9, 72.0], [15.0, 72.0], [15.1, 72.0], [15.2, 72.0], [15.3, 72.0], [15.4, 72.0], [15.5, 73.0], [15.6, 73.0], [15.7, 73.0], [15.8, 73.0], [15.9, 73.0], [16.0, 73.0], [16.1, 73.0], [16.2, 73.0], [16.3, 73.0], [16.4, 73.0], [16.5, 73.0], [16.6, 74.0], [16.7, 74.0], [16.8, 74.0], [16.9, 74.0], [17.0, 74.0], [17.1, 74.0], [17.2, 74.0], [17.3, 74.0], [17.4, 74.0], [17.5, 75.0], [17.6, 75.0], [17.7, 75.0], [17.8, 75.0], [17.9, 75.0], [18.0, 75.0], [18.1, 75.0], [18.2, 75.0], [18.3, 75.0], [18.4, 75.0], [18.5, 75.0], [18.6, 75.0], [18.7, 76.0], [18.8, 76.0], [18.9, 76.0], [19.0, 76.0], [19.1, 76.0], [19.2, 76.0], [19.3, 76.0], [19.4, 76.0], [19.5, 76.0], [19.6, 76.0], [19.7, 76.0], [19.8, 76.0], [19.9, 77.0], [20.0, 77.0], [20.1, 77.0], [20.2, 77.0], [20.3, 77.0], [20.4, 77.0], [20.5, 77.0], [20.6, 77.0], [20.7, 77.0], [20.8, 77.0], [20.9, 77.0], [21.0, 77.0], [21.1, 78.0], [21.2, 78.0], [21.3, 78.0], [21.4, 78.0], [21.5, 78.0], [21.6, 78.0], [21.7, 78.0], [21.8, 78.0], [21.9, 78.0], [22.0, 78.0], [22.1, 78.0], [22.2, 79.0], [22.3, 79.0], [22.4, 79.0], [22.5, 79.0], [22.6, 79.0], [22.7, 79.0], [22.8, 79.0], [22.9, 79.0], [23.0, 79.0], [23.1, 79.0], [23.2, 79.0], [23.3, 80.0], [23.4, 80.0], [23.5, 80.0], [23.6, 80.0], [23.7, 80.0], [23.8, 80.0], [23.9, 80.0], [24.0, 80.0], [24.1, 80.0], [24.2, 80.0], [24.3, 80.0], [24.4, 81.0], [24.5, 81.0], [24.6, 81.0], [24.7, 81.0], [24.8, 81.0], [24.9, 81.0], [25.0, 81.0], [25.1, 81.0], [25.2, 81.0], [25.3, 81.0], [25.4, 81.0], [25.5, 82.0], [25.6, 82.0], [25.7, 82.0], [25.8, 82.0], [25.9, 82.0], [26.0, 82.0], [26.1, 82.0], [26.2, 82.0], [26.3, 82.0], [26.4, 82.0], [26.5, 83.0], [26.6, 83.0], [26.7, 83.0], [26.8, 83.0], [26.9, 83.0], [27.0, 83.0], [27.1, 83.0], [27.2, 83.0], [27.3, 83.0], [27.4, 83.0], [27.5, 84.0], [27.6, 84.0], [27.7, 84.0], [27.8, 84.0], [27.9, 84.0], [28.0, 84.0], [28.1, 84.0], [28.2, 84.0], [28.3, 84.0], [28.4, 85.0], [28.5, 85.0], [28.6, 85.0], [28.7, 85.0], [28.8, 85.0], [28.9, 85.0], [29.0, 85.0], [29.1, 85.0], [29.2, 85.0], [29.3, 85.0], [29.4, 86.0], [29.5, 86.0], [29.6, 86.0], [29.7, 86.0], [29.8, 86.0], [29.9, 86.0], [30.0, 86.0], [30.1, 86.0], [30.2, 87.0], [30.3, 87.0], [30.4, 87.0], [30.5, 87.0], [30.6, 87.0], [30.7, 87.0], [30.8, 87.0], [30.9, 87.0], [31.0, 87.0], [31.1, 88.0], [31.2, 88.0], [31.3, 88.0], [31.4, 88.0], [31.5, 88.0], [31.6, 88.0], [31.7, 88.0], [31.8, 88.0], [31.9, 89.0], [32.0, 89.0], [32.1, 89.0], [32.2, 89.0], [32.3, 89.0], [32.4, 89.0], [32.5, 89.0], [32.6, 89.0], [32.7, 89.0], [32.8, 89.0], [32.9, 90.0], [33.0, 90.0], [33.1, 90.0], [33.2, 90.0], [33.3, 90.0], [33.4, 90.0], [33.5, 90.0], [33.6, 90.0], [33.7, 91.0], [33.8, 91.0], [33.9, 91.0], [34.0, 91.0], [34.1, 91.0], [34.2, 91.0], [34.3, 91.0], [34.4, 91.0], [34.5, 92.0], [34.6, 92.0], [34.7, 92.0], [34.8, 92.0], [34.9, 92.0], [35.0, 92.0], [35.1, 92.0], [35.2, 92.0], [35.3, 93.0], [35.4, 93.0], [35.5, 93.0], [35.6, 93.0], [35.7, 93.0], [35.8, 93.0], [35.9, 93.0], [36.0, 93.0], [36.1, 94.0], [36.2, 94.0], [36.3, 94.0], [36.4, 94.0], [36.5, 94.0], [36.6, 94.0], [36.7, 94.0], [36.8, 94.0], [36.9, 95.0], [37.0, 95.0], [37.1, 95.0], [37.2, 95.0], [37.3, 95.0], [37.4, 95.0], [37.5, 95.0], [37.6, 96.0], [37.7, 96.0], [37.8, 96.0], [37.9, 96.0], [38.0, 96.0], [38.1, 96.0], [38.2, 96.0], [38.3, 97.0], [38.4, 97.0], [38.5, 97.0], [38.6, 97.0], [38.7, 97.0], [38.8, 98.0], [38.9, 98.0], [39.0, 98.0], [39.1, 98.0], [39.2, 98.0], [39.3, 99.0], [39.4, 99.0], [39.5, 99.0], [39.6, 99.0], [39.7, 99.0], [39.8, 100.0], [39.9, 100.0], [40.0, 100.0], [40.1, 100.0], [40.2, 100.0], [40.3, 100.0], [40.4, 101.0], [40.5, 101.0], [40.6, 101.0], [40.7, 101.0], [40.8, 102.0], [40.9, 102.0], [41.0, 102.0], [41.1, 102.0], [41.2, 102.0], [41.3, 103.0], [41.4, 103.0], [41.5, 103.0], [41.6, 103.0], [41.7, 104.0], [41.8, 104.0], [41.9, 104.0], [42.0, 105.0], [42.1, 105.0], [42.2, 105.0], [42.3, 105.0], [42.4, 105.0], [42.5, 106.0], [42.6, 106.0], [42.7, 106.0], [42.8, 106.0], [42.9, 107.0], [43.0, 107.0], [43.1, 107.0], [43.2, 107.0], [43.3, 107.0], [43.4, 108.0], [43.5, 108.0], [43.6, 108.0], [43.7, 109.0], [43.8, 109.0], [43.9, 110.0], [44.0, 110.0], [44.1, 110.0], [44.2, 111.0], [44.3, 111.0], [44.4, 111.0], [44.5, 112.0], [44.6, 112.0], [44.7, 113.0], [44.8, 113.0], [44.9, 114.0], [45.0, 114.0], [45.1, 114.0], [45.2, 115.0], [45.3, 115.0], [45.4, 116.0], [45.5, 116.0], [45.6, 116.0], [45.7, 117.0], [45.8, 118.0], [45.9, 118.0], [46.0, 119.0], [46.1, 119.0], [46.2, 120.0], [46.3, 120.0], [46.4, 121.0], [46.5, 121.0], [46.6, 122.0], [46.7, 122.0], [46.8, 123.0], [46.9, 124.0], [47.0, 125.0], [47.1, 126.0], [47.2, 127.0], [47.3, 127.0], [47.4, 128.0], [47.5, 129.0], [47.6, 131.0], [47.7, 132.0], [47.8, 134.0], [47.9, 136.0], [48.0, 139.0], [48.1, 142.0], [48.2, 145.0], [48.3, 152.0], [48.4, 171.0], [48.5, 349.0], [48.6, 439.0], [48.7, 539.0], [48.8, 565.0], [48.9, 611.0], [49.0, 648.0], [49.1, 672.0], [49.2, 698.0], [49.3, 729.0], [49.4, 769.0], [49.5, 802.0], [49.6, 1011.0], [49.7, 1130.0], [49.8, 1204.0], [49.9, 1276.0], [50.0, 1336.0], [50.1, 1352.0], [50.2, 1371.0], [50.3, 1388.0], [50.4, 1416.0], [50.5, 1430.0], [50.6, 1443.0], [50.7, 1454.0], [50.8, 1462.0], [50.9, 1469.0], [51.0, 1483.0], [51.1, 1491.0], [51.2, 1500.0], [51.3, 1507.0], [51.4, 1513.0], [51.5, 1520.0], [51.6, 1527.0], [51.7, 1531.0], [51.8, 1535.0], [51.9, 1540.0], [52.0, 1545.0], [52.1, 1551.0], [52.2, 1556.0], [52.3, 1561.0], [52.4, 1569.0], [52.5, 1577.0], [52.6, 1584.0], [52.7, 1588.0], [52.8, 1592.0], [52.9, 1597.0], [53.0, 1600.0], [53.1, 1605.0], [53.2, 1610.0], [53.3, 1615.0], [53.4, 1624.0], [53.5, 1629.0], [53.6, 1633.0], [53.7, 1636.0], [53.8, 1640.0], [53.9, 1643.0], [54.0, 1647.0], [54.1, 1653.0], [54.2, 1660.0], [54.3, 1664.0], [54.4, 1668.0], [54.5, 1673.0], [54.6, 1675.0], [54.7, 1681.0], [54.8, 1686.0], [54.9, 1691.0], [55.0, 1697.0], [55.1, 1703.0], [55.2, 1711.0], [55.3, 1718.0], [55.4, 1724.0], [55.5, 1730.0], [55.6, 1737.0], [55.7, 1745.0], [55.8, 1756.0], [55.9, 1762.0], [56.0, 1766.0], [56.1, 1774.0], [56.2, 1779.0], [56.3, 1785.0], [56.4, 1792.0], [56.5, 1801.0], [56.6, 1808.0], [56.7, 1816.0], [56.8, 1821.0], [56.9, 1832.0], [57.0, 1837.0], [57.1, 1842.0], [57.2, 1846.0], [57.3, 1853.0], [57.4, 1858.0], [57.5, 1865.0], [57.6, 1876.0], [57.7, 1886.0], [57.8, 1893.0], [57.9, 1899.0], [58.0, 1908.0], [58.1, 1917.0], [58.2, 1924.0], [58.3, 1928.0], [58.4, 1933.0], [58.5, 1938.0], [58.6, 1943.0], [58.7, 1950.0], [58.8, 1956.0], [58.9, 1960.0], [59.0, 1982.0], [59.1, 1996.0], [59.2, 2004.0], [59.3, 2015.0], [59.4, 2029.0], [59.5, 2044.0], [59.6, 2058.0], [59.7, 2062.0], [59.8, 2078.0], [59.9, 2099.0], [60.0, 2110.0], [60.1, 2122.0], [60.2, 2128.0], [60.3, 2137.0], [60.4, 2151.0], [60.5, 2215.0], [60.6, 2242.0], [60.7, 2283.0], [60.8, 2314.0], [60.9, 2353.0], [61.0, 2388.0], [61.1, 2424.0], [61.2, 2457.0], [61.3, 2483.0], [61.4, 2502.0], [61.5, 2519.0], [61.6, 2535.0], [61.7, 2542.0], [61.8, 2553.0], [61.9, 2567.0], [62.0, 2580.0], [62.1, 2589.0], [62.2, 2597.0], [62.3, 2605.0], [62.4, 2613.0], [62.5, 2618.0], [62.6, 2630.0], [62.7, 2637.0], [62.8, 2644.0], [62.9, 2654.0], [63.0, 2664.0], [63.1, 2671.0], [63.2, 2679.0], [63.3, 2682.0], [63.4, 2688.0], [63.5, 2693.0], [63.6, 2697.0], [63.7, 2699.0], [63.8, 2701.0], [63.9, 2706.0], [64.0, 2709.0], [64.1, 2714.0], [64.2, 2718.0], [64.3, 2723.0], [64.4, 2730.0], [64.5, 2734.0], [64.6, 2737.0], [64.7, 2741.0], [64.8, 2744.0], [64.9, 2747.0], [65.0, 2751.0], [65.1, 2754.0], [65.2, 2758.0], [65.3, 2761.0], [65.4, 2764.0], [65.5, 2768.0], [65.6, 2771.0], [65.7, 2774.0], [65.8, 2776.0], [65.9, 2778.0], [66.0, 2781.0], [66.1, 2783.0], [66.2, 2785.0], [66.3, 2787.0], [66.4, 2790.0], [66.5, 2791.0], [66.6, 2793.0], [66.7, 2795.0], [66.8, 2797.0], [66.9, 2799.0], [67.0, 2800.0], [67.1, 2801.0], [67.2, 2803.0], [67.3, 2805.0], [67.4, 2807.0], [67.5, 2809.0], [67.6, 2811.0], [67.7, 2812.0], [67.8, 2813.0], [67.9, 2814.0], [68.0, 2816.0], [68.1, 2817.0], [68.2, 2818.0], [68.3, 2820.0], [68.4, 2822.0], [68.5, 2824.0], [68.6, 2828.0], [68.7, 2830.0], [68.8, 2832.0], [68.9, 2834.0], [69.0, 2837.0], [69.1, 2838.0], [69.2, 2841.0], [69.3, 2843.0], [69.4, 2844.0], [69.5, 2846.0], [69.6, 2848.0], [69.7, 2849.0], [69.8, 2851.0], [69.9, 2853.0], [70.0, 2854.0], [70.1, 2856.0], [70.2, 2858.0], [70.3, 2860.0], [70.4, 2862.0], [70.5, 2864.0], [70.6, 2866.0], [70.7, 2867.0], [70.8, 2869.0], [70.9, 2871.0], [71.0, 2872.0], [71.1, 2873.0], [71.2, 2875.0], [71.3, 2877.0], [71.4, 2878.0], [71.5, 2880.0], [71.6, 2883.0], [71.7, 2886.0], [71.8, 2888.0], [71.9, 2890.0], [72.0, 2892.0], [72.1, 2893.0], [72.2, 2896.0], [72.3, 2899.0], [72.4, 2901.0], [72.5, 2905.0], [72.6, 2908.0], [72.7, 2911.0], [72.8, 2913.0], [72.9, 2917.0], [73.0, 2919.0], [73.1, 2921.0], [73.2, 2925.0], [73.3, 2928.0], [73.4, 2930.0], [73.5, 2933.0], [73.6, 2936.0], [73.7, 2939.0], [73.8, 2942.0], [73.9, 2945.0], [74.0, 2947.0], [74.1, 2949.0], [74.2, 2950.0], [74.3, 2952.0], [74.4, 2955.0], [74.5, 2958.0], [74.6, 2961.0], [74.7, 2965.0], [74.8, 2969.0], [74.9, 2973.0], [75.0, 2976.0], [75.1, 2978.0], [75.2, 2981.0], [75.3, 2985.0], [75.4, 2989.0], [75.5, 2996.0], [75.6, 3003.0], [75.7, 3010.0], [75.8, 3018.0], [75.9, 3021.0], [76.0, 3024.0], [76.1, 3027.0], [76.2, 3030.0], [76.3, 3034.0], [76.4, 3038.0], [76.5, 3041.0], [76.6, 3045.0], [76.7, 3050.0], [76.8, 3056.0], [76.9, 3061.0], [77.0, 3066.0], [77.1, 3070.0], [77.2, 3076.0], [77.3, 3082.0], [77.4, 3088.0], [77.5, 3094.0], [77.6, 3101.0], [77.7, 3107.0], [77.8, 3112.0], [77.9, 3116.0], [78.0, 3123.0], [78.1, 3130.0], [78.2, 3137.0], [78.3, 3141.0], [78.4, 3145.0], [78.5, 3150.0], [78.6, 3160.0], [78.7, 3163.0], [78.8, 3172.0], [78.9, 3178.0], [79.0, 3184.0], [79.1, 3191.0], [79.2, 3197.0], [79.3, 3205.0], [79.4, 3217.0], [79.5, 3236.0], [79.6, 3243.0], [79.7, 3251.0], [79.8, 3268.0], [79.9, 3289.0], [80.0, 3304.0], [80.1, 3313.0], [80.2, 3340.0], [80.3, 3359.0], [80.4, 3384.0], [80.5, 3418.0], [80.6, 3448.0], [80.7, 3481.0], [80.8, 3513.0], [80.9, 3577.0], [81.0, 3615.0], [81.1, 3628.0], [81.2, 3662.0], [81.3, 3711.0], [81.4, 3728.0], [81.5, 3741.0], [81.6, 3746.0], [81.7, 3761.0], [81.8, 3773.0], [81.9, 3785.0], [82.0, 3791.0], [82.1, 3802.0], [82.2, 3806.0], [82.3, 3813.0], [82.4, 3820.0], [82.5, 3827.0], [82.6, 3834.0], [82.7, 3838.0], [82.8, 3845.0], [82.9, 3857.0], [83.0, 3864.0], [83.1, 3871.0], [83.2, 3879.0], [83.3, 3884.0], [83.4, 3893.0], [83.5, 3898.0], [83.6, 3906.0], [83.7, 3911.0], [83.8, 3920.0], [83.9, 3928.0], [84.0, 3933.0], [84.1, 3940.0], [84.2, 3947.0], [84.3, 3951.0], [84.4, 3956.0], [84.5, 3962.0], [84.6, 3967.0], [84.7, 3974.0], [84.8, 3980.0], [84.9, 3986.0], [85.0, 3992.0], [85.1, 3995.0], [85.2, 3999.0], [85.3, 4003.0], [85.4, 4013.0], [85.5, 4022.0], [85.6, 4027.0], [85.7, 4031.0], [85.8, 4035.0], [85.9, 4039.0], [86.0, 4044.0], [86.1, 4047.0], [86.2, 4050.0], [86.3, 4053.0], [86.4, 4055.0], [86.5, 4057.0], [86.6, 4061.0], [86.7, 4065.0], [86.8, 4069.0], [86.9, 4072.0], [87.0, 4076.0], [87.1, 4081.0], [87.2, 4084.0], [87.3, 4088.0], [87.4, 4092.0], [87.5, 4095.0], [87.6, 4100.0], [87.7, 4103.0], [87.8, 4108.0], [87.9, 4114.0], [88.0, 4122.0], [88.1, 4127.0], [88.2, 4131.0], [88.3, 4136.0], [88.4, 4141.0], [88.5, 4147.0], [88.6, 4153.0], [88.7, 4160.0], [88.8, 4166.0], [88.9, 4173.0], [89.0, 4177.0], [89.1, 4180.0], [89.2, 4183.0], [89.3, 4189.0], [89.4, 4193.0], [89.5, 4200.0], [89.6, 4203.0], [89.7, 4207.0], [89.8, 4210.0], [89.9, 4214.0], [90.0, 4220.0], [90.1, 4228.0], [90.2, 4236.0], [90.3, 4239.0], [90.4, 4242.0], [90.5, 4249.0], [90.6, 4253.0], [90.7, 4256.0], [90.8, 4259.0], [90.9, 4266.0], [91.0, 4271.0], [91.1, 4277.0], [91.2, 4282.0], [91.3, 4290.0], [91.4, 4294.0], [91.5, 4300.0], [91.6, 4308.0], [91.7, 4310.0], [91.8, 4313.0], [91.9, 4315.0], [92.0, 4320.0], [92.1, 4327.0], [92.2, 4336.0], [92.3, 4350.0], [92.4, 4357.0], [92.5, 4363.0], [92.6, 4373.0], [92.7, 4390.0], [92.8, 4395.0], [92.9, 4403.0], [93.0, 4409.0], [93.1, 4425.0], [93.2, 4440.0], [93.3, 4453.0], [93.4, 4459.0], [93.5, 4475.0], [93.6, 4493.0], [93.7, 4508.0], [93.8, 4555.0], [93.9, 4609.0], [94.0, 4624.0], [94.1, 4668.0], [94.2, 4724.0], [94.3, 4809.0], [94.4, 4900.0], [94.5, 4960.0], [94.6, 5000.0], [94.7, 5044.0], [94.8, 5081.0], [94.9, 5101.0], [95.0, 5142.0], [95.1, 5158.0], [95.2, 5168.0], [95.3, 5184.0], [95.4, 5200.0], [95.5, 5223.0], [95.6, 5245.0], [95.7, 5260.0], [95.8, 5269.0], [95.9, 5275.0], [96.0, 5289.0], [96.1, 5301.0], [96.2, 5313.0], [96.3, 5324.0], [96.4, 5343.0], [96.5, 5359.0], [96.6, 5384.0], [96.7, 5403.0], [96.8, 5411.0], [96.9, 5428.0], [97.0, 5437.0], [97.1, 5445.0], [97.2, 5467.0], [97.3, 5495.0], [97.4, 5513.0], [97.5, 5520.0], [97.6, 5538.0], [97.7, 5550.0], [97.8, 5560.0], [97.9, 5579.0], [98.0, 5619.0], [98.1, 5640.0], [98.2, 5655.0], [98.3, 5706.0], [98.4, 5755.0], [98.5, 5769.0], [98.6, 5851.0], [98.7, 5950.0], [98.8, 6377.0], [98.9, 6461.0], [99.0, 6521.0], [99.1, 6590.0], [99.2, 6681.0], [99.3, 6720.0], [99.4, 6794.0], [99.5, 6880.0], [99.6, 6983.0], [99.7, 7726.0], [99.8, 7950.0], [99.9, 8317.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 15923.0, "series": [{"data": [[0.0, 15923.0], [100.0, 77.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 6364.0], [600.0, 60.0], [700.0, 44.0], [800.0, 10.0], [900.0, 3.0], [1000.0, 12.0], [1100.0, 22.0], [1200.0, 21.0], [1300.0, 67.0], [1400.0, 136.0], [1500.0, 285.0], [1600.0, 333.0], [1700.0, 229.0], [1800.0, 228.0], [1900.0, 197.0], [2000.0, 124.0], [2100.0, 92.0], [2200.0, 40.0], [2300.0, 44.0], [2400.0, 59.0], [2500.0, 139.0], [2600.0, 232.0], [2700.0, 519.0], [2800.0, 868.0], [2900.0, 511.0], [3000.0, 321.0], [3100.0, 266.0], [3200.0, 117.0], [3300.0, 76.0], [3400.0, 48.0], [3500.0, 33.0], [3700.0, 120.0], [3600.0, 56.0], [3800.0, 236.0], [3900.0, 271.0], [4000.0, 378.0], [4200.0, 319.0], [4300.0, 219.0], [4100.0, 305.0], [4400.0, 134.0], [4600.0, 45.0], [4500.0, 33.0], [4800.0, 16.0], [4700.0, 21.0], [4900.0, 32.0], [5100.0, 80.0], [5000.0, 48.0], [5200.0, 109.0], [5300.0, 96.0], [5400.0, 102.0], [5500.0, 106.0], [5600.0, 49.0], [5700.0, 47.0], [5800.0, 10.0], [6100.0, 5.0], [5900.0, 10.0], [6000.0, 1.0], [6300.0, 7.0], [6200.0, 4.0], [6600.0, 22.0], [6500.0, 24.0], [6400.0, 24.0], [6700.0, 25.0], [6800.0, 18.0], [6900.0, 16.0], [7000.0, 5.0], [7100.0, 2.0], [7200.0, 3.0], [7400.0, 1.0], [7800.0, 2.0], [7900.0, 12.0], [7700.0, 5.0], [8100.0, 6.0], [8000.0, 2.0], [8200.0, 7.0], [8400.0, 3.0], [8300.0, 4.0], [8700.0, 1.0], [9100.0, 2.0], [9200.0, 1.0], [9000.0, 1.0], [9400.0, 2.0], [9600.0, 1.0], [9800.0, 1.0], [100.0, 1387.0], [200.0, 4.0], [300.0, 13.0], [400.0, 17.0], [500.0, 30.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 9800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 295.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 23757.0, "series": [{"data": [[0.0, 23757.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 295.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 6614.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1334.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 13.748971193415638, "minX": 1.74612198E12, "maxY": 32.0, "series": [{"data": [[1.74612264E12, 32.0], [1.74612234E12, 32.0], [1.7461221E12, 32.0], [1.7461227E12, 32.0], [1.74612222E12, 32.0], [1.74612288E12, 13.748971193415638], [1.74612258E12, 32.0], [1.74612216E12, 32.0], [1.74612198E12, 31.948421957509535], [1.74612228E12, 32.0], [1.74612282E12, 31.798158803222062], [1.74612252E12, 32.0], [1.7461224E12, 32.0], [1.74612204E12, 32.0], [1.74612276E12, 32.0], [1.74612246E12, 32.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74612288E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 9.0, "minX": 1.0, "maxY": 1729.3099987295047, "series": [{"data": [[32.0, 30.970259278088406], [2.0, 9.0], [3.0, 9.0], [4.0, 9.285714285714285], [5.0, 10.0], [6.0, 9.666666666666666], [7.0, 11.333333333333334], [8.0, 11.5], [9.0, 11.666666666666666], [10.0, 14.0], [11.0, 13.0], [12.0, 18.78571428571429], [13.0, 24.416666666666664], [14.0, 22.687500000000004], [15.0, 27.0], [1.0, 9.0], [17.0, 25.307692307692307], [18.0, 19.0], [19.0, 21.777777777777775], [20.0, 15.0], [21.0, 16.666666666666668], [22.0, 12.5], [23.0, 21.277777777777775], [24.0, 28.57142857142857], [25.0, 18.5], [26.0, 23.25], [27.0, 30.95454545454545], [28.0, 33.46511627906976], [29.0, 24.666666666666664], [30.0, 43.91666666666668], [31.0, 27.625]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[31.8185625, 30.89175000000006]], "isOverall": false, "label": "Create CSR-Aggregated", "isController": false}, {"data": [[32.0, 1729.3099987295047], [2.0, 19.0], [3.0, 18.0], [4.0, 19.357142857142858], [5.0, 20.333333333333332], [6.0, 19.75], [7.0, 22.666666666666668], [8.0, 25.75], [9.0, 26.88888888888889], [10.0, 29.5], [11.0, 31.5], [12.0, 33.25], [13.0, 34.58333333333333], [14.0, 36.916666666666664], [15.0, 33.0], [16.0, 47.5], [1.0, 17.5], [17.0, 46.13333333333333], [18.0, 61.0], [19.0, 49.8], [20.0, 60.285714285714285], [21.0, 67.75], [22.0, 63.5], [23.0, 66.78571428571428], [24.0, 62.5], [25.0, 72.0], [26.0, 72.45454545454544], [27.0, 69.42105263157895], [28.0, 68.675], [29.0, 72.35714285714288], [30.0, 72.14285714285714], [31.0, 95.78571428571429]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}, {"data": [[31.823124999999987, 1702.3371249999907]], "isOverall": false, "label": "HTTP Request - enroll-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 32.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1978.3333333333333, "minX": 1.74612198E12, "maxY": 237224.91666666666, "series": [{"data": [[1.74612264E12, 28366.45], [1.74612234E12, 29752.616666666665], [1.7461221E12, 51984.61666666667], [1.7461227E12, 32126.25], [1.74612222E12, 30747.95], [1.74612288E12, 7494.45], [1.74612258E12, 28316.9], [1.74612216E12, 31515.616666666665], [1.74612198E12, 237224.91666666666], [1.74612228E12, 31524.9], [1.74612282E12, 123993.2], [1.74612252E12, 31769.3], [1.7461224E12, 23722.333333333332], [1.74612204E12, 122871.63333333333], [1.74612276E12, 29094.683333333334], [1.74612246E12, 31835.466666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74612264E12, 8343.4], [1.74612234E12, 8967.5], [1.7461221E12, 14861.466666666667], [1.7461227E12, 9820.766666666666], [1.74612222E12, 9211.966666666667], [1.74612288E12, 1978.3333333333333], [1.74612258E12, 8558.033333333333], [1.74612216E12, 9562.533333333333], [1.74612198E12, 61848.0], [1.74612228E12, 9438.966666666667], [1.74612282E12, 33193.6], [1.74612252E12, 9654.366666666667], [1.7461224E12, 7111.566666666667], [1.74612204E12, 32966.53333333333], [1.74612276E12, 8770.866666666667], [1.74612246E12, 9334.366666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74612288E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 16.558886509635983, "minX": 1.74612198E12, "maxY": 4070.124197002144, "series": [{"data": [[1.74612264E12, 17.6058394160584], [1.74612234E12, 16.794567062818356], [1.7461221E12, 32.50102459016391], [1.7461227E12, 18.51007751937983], [1.74612222E12, 18.876033057851245], [1.74612288E12, 16.654867256637175], [1.74612258E12, 17.677935943060508], [1.74612216E12, 18.302547770700606], [1.74612198E12, 43.58270031854932], [1.74612228E12, 18.706451612903216], [1.74612282E12, 38.04341801385686], [1.74612252E12, 17.749211356466898], [1.7461224E12, 16.558886509635983], [1.74612204E12, 38.17860422405873], [1.74612276E12, 21.140624999999996], [1.74612246E12, 16.63621533442088]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74612264E12, 3492.6551094890524], [1.74612234E12, 3327.6876061120547], [1.7461221E12, 1908.79918032787], [1.7461227E12, 2943.1023255813957], [1.74612222E12, 3130.980165289256], [1.74612288E12, 40.15384615384613], [1.74612258E12, 3394.7508896797126], [1.74612216E12, 3073.385350318472], [1.74612198E12, 166.71344165435738], [1.74612228E12, 3062.6000000000013], [1.74612282E12, 864.6068807339456], [1.74612252E12, 3067.2413249211363], [1.7461224E12, 4070.124197002144], [1.74612204E12, 824.3020785219403], [1.74612276E12, 3316.0763888888896], [1.74612246E12, 3040.4975530179463]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74612288E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74612198E12, "maxY": 4070.113490364027, "series": [{"data": [[1.74612264E12, 0.0], [1.74612234E12, 0.0], [1.7461221E12, 0.0], [1.7461227E12, 0.0], [1.74612222E12, 0.0], [1.74612288E12, 0.0], [1.74612258E12, 0.0], [1.74612216E12, 0.0], [1.74612198E12, 0.0], [1.74612228E12, 0.0], [1.74612282E12, 0.0], [1.74612252E12, 0.0], [1.7461224E12, 0.0], [1.74612204E12, 0.0], [1.74612276E12, 0.0], [1.74612246E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74612264E12, 3492.6532846715304], [1.74612234E12, 3327.6876061120547], [1.7461221E12, 1908.795081967215], [1.7461227E12, 2943.0976744186055], [1.74612222E12, 3130.976859504132], [1.74612288E12, 40.15384615384613], [1.74612258E12, 3394.747330960855], [1.74612216E12, 3073.3805732484057], [1.74612198E12, 166.67602166420454], [1.74612228E12, 3062.593548387098], [1.74612282E12, 864.6013761467902], [1.74612252E12, 3067.238170347004], [1.7461224E12, 4070.113490364027], [1.74612204E12, 824.293302540415], [1.74612276E12, 3316.067708333336], [1.74612246E12, 3040.487765089721]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74612288E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74612198E12, "maxY": 4.7210733628754085, "series": [{"data": [[1.74612264E12, 0.0], [1.74612234E12, 0.0], [1.7461221E12, 0.0], [1.7461227E12, 0.0], [1.74612222E12, 0.0], [1.74612288E12, 0.0], [1.74612258E12, 0.0], [1.74612216E12, 0.0], [1.74612198E12, 0.0], [1.74612228E12, 0.0], [1.74612282E12, 0.0], [1.74612252E12, 0.0], [1.7461224E12, 0.0], [1.74612204E12, 0.0], [1.74612276E12, 0.0], [1.74612246E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74612264E12, 0.10766423357664233], [1.74612234E12, 0.19524617996604418], [1.7461221E12, 0.125], [1.7461227E12, 0.1736434108527133], [1.74612222E12, 0.231404958677686], [1.74612288E12, 0.0], [1.74612258E12, 0.1832740213523132], [1.74612216E12, 0.17834394904458611], [1.74612198E12, 4.7210733628754085], [1.74612228E12, 0.18870967741935468], [1.74612282E12, 0.09082568807339443], [1.74612252E12, 0.1593059936908518], [1.7461224E12, 0.1841541755888651], [1.74612204E12, 0.16212471131639714], [1.74612276E12, 0.16840277777777782], [1.74612246E12, 0.1419249592169657]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74612288E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 7.0, "minX": 1.74612198E12, "maxY": 9896.0, "series": [{"data": [[1.74612264E12, 9106.0], [1.74612234E12, 9196.0], [1.7461221E12, 5489.0], [1.7461227E12, 9439.0], [1.74612222E12, 7904.0], [1.74612288E12, 88.0], [1.74612258E12, 8402.0], [1.74612216E12, 8206.0], [1.74612198E12, 5235.0], [1.74612228E12, 7906.0], [1.74612282E12, 8027.0], [1.74612252E12, 8445.0], [1.7461224E12, 9896.0], [1.74612204E12, 7950.0], [1.74612276E12, 8768.0], [1.74612246E12, 6964.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.74612264E12, 4271.0], [1.74612234E12, 4279.8], [1.7461221E12, 3031.4], [1.7461227E12, 4082.0000000000055], [1.74612222E12, 4086.8], [1.74612288E12, 57.79999999999998], [1.74612258E12, 4200.0], [1.74612216E12, 4081.0], [1.74612198E12, 108.0], [1.74612228E12, 4253.0], [1.74612282E12, 114.0], [1.74612252E12, 4176.400000000001], [1.7461224E12, 5441.0], [1.74612204E12, 136.0], [1.74612276E12, 4304.200000000001], [1.74612246E12, 4052.7]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.74612264E12, 6733.4], [1.74612234E12, 6660.170000000007], [1.7461221E12, 4554.779999999998], [1.7461227E12, 5730.82], [1.74612222E12, 5537.86], [1.74612288E12, 78.12], [1.74612258E12, 6937.9000000000015], [1.74612216E12, 6707.639999999999], [1.74612198E12, 1179.199999999999], [1.74612228E12, 5775.899999999992], [1.74612282E12, 5306.3999999999905], [1.74612252E12, 5692.1], [1.7461224E12, 8252.4], [1.74612204E12, 5190.76], [1.74612276E12, 6175.800000000036], [1.74612246E12, 5646.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.74612264E12, 5173.0], [1.74612234E12, 5348.1], [1.7461221E12, 3898.3999999999996], [1.7461227E12, 4391.0], [1.74612222E12, 4310.0], [1.74612288E12, 68.0], [1.74612258E12, 5304.0], [1.74612216E12, 4861.999999999999], [1.74612198E12, 121.0], [1.74612228E12, 4405.9], [1.74612282E12, 3898.0499999999997], [1.74612252E12, 4445.599999999999], [1.7461224E12, 6515.0], [1.74612204E12, 2944.5999999999985], [1.74612276E12, 5263.9], [1.74612246E12, 4308.8499999999985]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.74612264E12, 8.0], [1.74612234E12, 9.0], [1.7461221E12, 7.0], [1.7461227E12, 8.0], [1.74612222E12, 9.0], [1.74612288E12, 9.0], [1.74612258E12, 8.0], [1.74612216E12, 8.0], [1.74612198E12, 9.0], [1.74612228E12, 8.0], [1.74612282E12, 8.0], [1.74612252E12, 8.0], [1.7461224E12, 8.0], [1.74612204E12, 8.0], [1.74612276E12, 8.0], [1.74612246E12, 8.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.74612264E12, 26.0], [1.74612234E12, 23.0], [1.7461221E12, 56.0], [1.7461227E12, 28.0], [1.74612222E12, 33.0], [1.74612288E12, 22.0], [1.74612258E12, 27.0], [1.74612216E12, 28.0], [1.74612198E12, 66.0], [1.74612228E12, 33.0], [1.74612282E12, 60.0], [1.74612252E12, 27.0], [1.7461224E12, 24.0], [1.74612204E12, 61.0], [1.74612276E12, 37.0], [1.74612246E12, 26.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74612288E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 14.5, "minX": 1.0, "maxY": 4210.5, "series": [{"data": [[516.0, 64.0], [513.0, 62.0], [519.0, 61.0], [527.0, 61.0], [520.0, 62.0], [518.0, 62.0], [2.0, 27.0], [536.0, 61.0], [531.0, 62.0], [530.0, 61.0], [534.0, 62.0], [529.0, 61.0], [3.0, 3834.0], [4.0, 21.0], [6.0, 20.5], [7.0, 22.0], [8.0, 25.0], [9.0, 4210.5], [10.0, 29.0], [12.0, 19.0], [13.0, 27.5], [14.0, 21.0], [15.0, 1003.0], [16.0, 24.0], [17.0, 20.0], [18.0, 22.0], [19.0, 27.0], [20.0, 22.0], [21.0, 2841.0], [22.0, 25.0], [23.0, 3942.0], [24.0, 26.0], [25.0, 2224.0], [26.0, 30.0], [27.0, 2186.0], [28.0, 28.0], [29.0, 26.0], [30.0, 32.0], [31.0, 21.0], [32.0, 29.0], [33.0, 21.0], [34.0, 32.0], [35.0, 825.0], [36.0, 29.0], [38.0, 32.0], [40.0, 33.5], [42.0, 30.0], [44.0, 32.0], [46.0, 36.0], [47.0, 37.5], [48.0, 46.0], [50.0, 42.0], [52.0, 20.5], [54.0, 41.5], [60.0, 24.0], [62.0, 48.0], [66.0, 23.0], [64.0, 17.0], [65.0, 78.0], [70.0, 29.5], [68.0, 21.0], [72.0, 19.0], [86.0, 24.0], [92.0, 81.0], [98.0, 65.5], [100.0, 68.0], [157.0, 67.0], [243.0, 22.0], [271.0, 67.0], [264.0, 57.0], [1.0, 14.5], [266.0, 61.0], [395.0, 78.0], [430.0, 59.0], [433.0, 71.0], [457.0, 71.0], [460.0, 72.0], [463.0, 64.0], [466.0, 62.0], [476.0, 66.5], [484.0, 65.0], [492.0, 64.0], [493.0, 63.0], [510.0, 63.0], [501.0, 65.0], [503.0, 64.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 2718.0], [4.0, 2771.0], [6.0, 2833.0], [8.0, 1637.5], [9.0, 3812.0], [10.0, 2352.0], [12.0, 1925.0], [13.0, 2465.0], [14.0, 2898.0], [15.0, 2372.0], [16.0, 2884.5], [17.0, 2277.5], [18.0, 2678.0], [19.0, 2863.0], [20.0, 2959.0], [21.0, 2816.0], [22.0, 2952.0], [23.0, 4144.0], [24.0, 2788.5], [25.0, 3475.5], [26.0, 2757.0], [27.0, 3754.0], [28.0, 3944.0], [30.0, 2710.0], [32.0, 2825.0], [34.0, 2841.0], [35.0, 1190.5], [36.0, 2807.0], [38.0, 2791.0], [40.0, 1791.0], [42.0, 2483.0], [44.0, 2706.5], [46.0, 2871.0], [47.0, 2059.0], [48.0, 2925.0], [50.0, 2877.0], [52.0, 3909.0], [54.0, 2175.5], [60.0, 319.0], [62.0, 1833.0], [66.0, 4050.0], [64.0, 3115.0], [65.0, 286.0], [70.0, 2480.0], [68.0, 3247.0], [72.0, 2999.0], [86.0, 2919.5], [92.0, 3277.0], [100.0, 776.0], [266.0, 3361.5], [430.0, 2890.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 536.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 4210.5, "series": [{"data": [[516.0, 23.5], [513.0, 20.5], [519.0, 0.0], [527.0, 42.0], [520.0, 53.5], [518.0, 20.0], [2.0, 0.0], [536.0, 21.0], [531.0, 0.0], [530.0, 25.0], [534.0, 48.0], [529.0, 0.0], [3.0, 3834.0], [4.0, 0.0], [6.0, 0.0], [7.0, 0.0], [8.0, 0.0], [9.0, 4210.5], [10.0, 0.0], [12.0, 0.0], [13.0, 0.0], [14.0, 0.0], [15.0, 991.5], [16.0, 0.0], [17.0, 0.0], [18.0, 0.0], [19.0, 0.0], [20.0, 0.0], [21.0, 2841.0], [22.0, 0.0], [23.0, 3942.0], [24.0, 0.0], [25.0, 2224.0], [26.0, 0.0], [27.0, 2186.0], [28.0, 0.0], [29.0, 0.0], [30.0, 0.0], [31.0, 0.0], [32.0, 0.0], [33.0, 0.0], [34.0, 0.0], [35.0, 825.0], [36.0, 0.0], [38.0, 0.0], [40.0, 0.0], [42.0, 0.0], [44.0, 0.0], [46.0, 0.0], [47.0, 0.0], [48.0, 0.0], [50.0, 0.0], [52.0, 0.0], [54.0, 0.0], [60.0, 0.0], [62.0, 0.0], [66.0, 0.0], [64.0, 0.0], [65.0, 0.0], [70.0, 0.0], [68.0, 0.0], [72.0, 0.0], [86.0, 0.0], [92.0, 46.5], [98.0, 0.0], [100.0, 0.0], [157.0, 51.0], [243.0, 19.0], [271.0, 0.0], [264.0, 0.0], [1.0, 0.0], [266.0, 40.0], [395.0, 0.0], [430.0, 37.0], [433.0, 0.0], [457.0, 60.0], [460.0, 70.5], [463.0, 64.0], [466.0, 0.0], [476.0, 32.0], [484.0, 0.0], [492.0, 0.0], [493.0, 0.0], [510.0, 50.5], [501.0, 46.0], [503.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[2.0, 2718.0], [4.0, 2771.0], [6.0, 2833.0], [8.0, 1637.5], [9.0, 3812.0], [10.0, 2352.0], [12.0, 1925.0], [13.0, 2465.0], [14.0, 2898.0], [15.0, 2372.0], [16.0, 2884.5], [17.0, 2277.5], [18.0, 2678.0], [19.0, 2863.0], [20.0, 2959.0], [21.0, 2816.0], [22.0, 2952.0], [23.0, 4144.0], [24.0, 2788.5], [25.0, 3475.5], [26.0, 2757.0], [27.0, 3754.0], [28.0, 3944.0], [30.0, 2710.0], [32.0, 2825.0], [34.0, 2841.0], [35.0, 1190.5], [36.0, 2807.0], [38.0, 2791.0], [40.0, 1791.0], [42.0, 2483.0], [44.0, 2706.5], [46.0, 2871.0], [47.0, 2059.0], [48.0, 2925.0], [50.0, 2877.0], [52.0, 3909.0], [54.0, 2175.5], [60.0, 319.0], [62.0, 1833.0], [66.0, 4050.0], [64.0, 3115.0], [65.0, 286.0], [70.0, 2480.0], [68.0, 3247.0], [72.0, 2999.0], [86.0, 2919.5], [92.0, 3277.0], [100.0, 776.0], [266.0, 3361.5], [430.0, 2890.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 536.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.6666666666666665, "minX": 1.74612198E12, "maxY": 136.25, "series": [{"data": [[1.74612264E12, 18.266666666666666], [1.74612234E12, 19.633333333333333], [1.7461221E12, 32.53333333333333], [1.7461227E12, 21.5], [1.74612222E12, 20.166666666666668], [1.74612288E12, 3.6666666666666665], [1.74612258E12, 18.733333333333334], [1.74612216E12, 20.933333333333334], [1.74612198E12, 136.25], [1.74612228E12, 20.666666666666668], [1.74612282E12, 72.26666666666667], [1.74612252E12, 21.133333333333333], [1.7461224E12, 15.566666666666666], [1.74612204E12, 72.38333333333334], [1.74612276E12, 19.2], [1.74612246E12, 20.433333333333334]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74612288E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.74612198E12, "maxY": 68.01666666666667, "series": [{"data": [[1.74612264E12, 9.133333333333333], [1.74612234E12, 9.816666666666666], [1.7461221E12, 16.266666666666666], [1.7461227E12, 10.75], [1.74612222E12, 10.083333333333334], [1.74612288E12, 1.8833333333333333], [1.74612258E12, 9.366666666666667], [1.74612216E12, 10.466666666666667], [1.74612198E12, 68.01666666666667], [1.74612228E12, 10.333333333333334], [1.74612282E12, 36.083333333333336], [1.74612252E12, 10.566666666666666], [1.7461224E12, 7.783333333333333], [1.74612204E12, 36.3], [1.74612276E12, 9.6], [1.74612246E12, 10.216666666666667]], "isOverall": false, "label": "0", "isController": false}, {"data": [[1.74612264E12, 7.85], [1.74612234E12, 8.183333333333334], [1.7461221E12, 14.483333333333333], [1.7461227E12, 8.8], [1.74612222E12, 8.466666666666667], [1.74612288E12, 2.1666666666666665], [1.74612258E12, 7.783333333333333], [1.74612216E12, 8.65], [1.74612198E12, 67.46666666666667], [1.74612228E12, 8.683333333333334], [1.74612282E12, 35.11666666666667], [1.74612252E12, 8.716666666666667], [1.7461224E12, 6.533333333333333], [1.74612204E12, 34.71666666666667], [1.74612276E12, 8.0], [1.74612246E12, 8.816666666666666]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.74612264E12, 1.2833333333333334], [1.74612234E12, 1.6333333333333333], [1.7461221E12, 1.7833333333333334], [1.7461227E12, 1.95], [1.74612222E12, 1.6166666666666667], [1.74612258E12, 1.5833333333333333], [1.74612216E12, 1.8166666666666667], [1.74612198E12, 0.23333333333333334], [1.74612228E12, 1.65], [1.74612282E12, 1.2166666666666666], [1.74612252E12, 1.85], [1.7461224E12, 1.25], [1.74612204E12, 1.3666666666666667], [1.74612276E12, 1.6], [1.74612246E12, 1.4]], "isOverall": false, "label": "400", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74612288E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.74612198E12, "maxY": 68.01666666666667, "series": [{"data": [[1.74612264E12, 7.85], [1.74612234E12, 8.183333333333334], [1.7461221E12, 14.483333333333333], [1.7461227E12, 8.8], [1.74612222E12, 8.466666666666667], [1.74612288E12, 2.1666666666666665], [1.74612258E12, 7.783333333333333], [1.74612216E12, 8.65], [1.74612198E12, 67.46666666666667], [1.74612228E12, 8.683333333333334], [1.74612282E12, 35.11666666666667], [1.74612252E12, 8.716666666666667], [1.7461224E12, 6.533333333333333], [1.74612204E12, 34.71666666666667], [1.74612276E12, 8.0], [1.74612246E12, 8.816666666666666]], "isOverall": false, "label": "HTTP Request - enroll-success", "isController": false}, {"data": [[1.74612264E12, 1.2833333333333334], [1.74612234E12, 1.6333333333333333], [1.7461221E12, 1.7833333333333334], [1.7461227E12, 1.95], [1.74612222E12, 1.6166666666666667], [1.74612258E12, 1.5833333333333333], [1.74612216E12, 1.8166666666666667], [1.74612198E12, 0.23333333333333334], [1.74612228E12, 1.65], [1.74612282E12, 1.2166666666666666], [1.74612252E12, 1.85], [1.7461224E12, 1.25], [1.74612204E12, 1.3666666666666667], [1.74612276E12, 1.6], [1.74612246E12, 1.4]], "isOverall": false, "label": "HTTP Request - enroll-failure", "isController": false}, {"data": [[1.74612264E12, 9.133333333333333], [1.74612234E12, 9.816666666666666], [1.7461221E12, 16.266666666666666], [1.7461227E12, 10.75], [1.74612222E12, 10.083333333333334], [1.74612288E12, 1.8833333333333333], [1.74612258E12, 9.366666666666667], [1.74612216E12, 10.466666666666667], [1.74612198E12, 68.01666666666667], [1.74612228E12, 10.333333333333334], [1.74612282E12, 36.083333333333336], [1.74612252E12, 10.566666666666666], [1.7461224E12, 7.783333333333333], [1.74612204E12, 36.3], [1.74612276E12, 9.6], [1.74612246E12, 10.216666666666667]], "isOverall": false, "label": "Create CSR-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74612288E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.74612198E12, "maxY": 135.48333333333332, "series": [{"data": [[1.74612264E12, 16.983333333333334], [1.74612234E12, 18.0], [1.7461221E12, 30.75], [1.7461227E12, 19.55], [1.74612222E12, 18.55], [1.74612288E12, 4.05], [1.74612258E12, 17.15], [1.74612216E12, 19.116666666666667], [1.74612198E12, 135.48333333333332], [1.74612228E12, 19.016666666666666], [1.74612282E12, 71.2], [1.74612252E12, 19.283333333333335], [1.7461224E12, 14.316666666666666], [1.74612204E12, 71.01666666666667], [1.74612276E12, 17.6], [1.74612246E12, 19.033333333333335]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.74612264E12, 1.2833333333333334], [1.74612234E12, 1.6333333333333333], [1.7461221E12, 1.7833333333333334], [1.7461227E12, 1.95], [1.74612222E12, 1.6166666666666667], [1.74612258E12, 1.5833333333333333], [1.74612216E12, 1.8166666666666667], [1.74612198E12, 0.23333333333333334], [1.74612228E12, 1.65], [1.74612282E12, 1.2166666666666666], [1.74612252E12, 1.85], [1.7461224E12, 1.25], [1.74612204E12, 1.3666666666666667], [1.74612276E12, 1.6], [1.74612246E12, 1.4]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74612288E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

