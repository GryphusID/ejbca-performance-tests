/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 8.0, "minX": 0.0, "maxY": 4372.0, "series": [{"data": [[0.0, 8.0], [0.1, 9.0], [0.2, 10.0], [0.3, 22.0], [0.4, 26.0], [0.5, 31.0], [0.6, 34.0], [0.7, 35.0], [0.8, 36.0], [0.9, 36.0], [1.0, 37.0], [1.1, 37.0], [1.2, 38.0], [1.3, 38.0], [1.4, 39.0], [1.5, 39.0], [1.6, 39.0], [1.7, 40.0], [1.8, 40.0], [1.9, 40.0], [2.0, 40.0], [2.1, 40.0], [2.2, 41.0], [2.3, 41.0], [2.4, 41.0], [2.5, 42.0], [2.6, 42.0], [2.7, 42.0], [2.8, 42.0], [2.9, 42.0], [3.0, 42.0], [3.1, 43.0], [3.2, 43.0], [3.3, 43.0], [3.4, 43.0], [3.5, 43.0], [3.6, 43.0], [3.7, 43.0], [3.8, 43.0], [3.9, 44.0], [4.0, 44.0], [4.1, 44.0], [4.2, 44.0], [4.3, 44.0], [4.4, 44.0], [4.5, 44.0], [4.6, 44.0], [4.7, 44.0], [4.8, 44.0], [4.9, 45.0], [5.0, 45.0], [5.1, 45.0], [5.2, 45.0], [5.3, 45.0], [5.4, 45.0], [5.5, 45.0], [5.6, 45.0], [5.7, 46.0], [5.8, 46.0], [5.9, 46.0], [6.0, 46.0], [6.1, 46.0], [6.2, 46.0], [6.3, 46.0], [6.4, 46.0], [6.5, 46.0], [6.6, 46.0], [6.7, 47.0], [6.8, 47.0], [6.9, 47.0], [7.0, 47.0], [7.1, 47.0], [7.2, 47.0], [7.3, 47.0], [7.4, 47.0], [7.5, 47.0], [7.6, 47.0], [7.7, 47.0], [7.8, 47.0], [7.9, 47.0], [8.0, 47.0], [8.1, 48.0], [8.2, 48.0], [8.3, 48.0], [8.4, 48.0], [8.5, 48.0], [8.6, 48.0], [8.7, 48.0], [8.8, 48.0], [8.9, 48.0], [9.0, 48.0], [9.1, 48.0], [9.2, 48.0], [9.3, 48.0], [9.4, 48.0], [9.5, 48.0], [9.6, 48.0], [9.7, 48.0], [9.8, 48.0], [9.9, 48.0], [10.0, 48.0], [10.1, 49.0], [10.2, 49.0], [10.3, 49.0], [10.4, 49.0], [10.5, 49.0], [10.6, 49.0], [10.7, 49.0], [10.8, 49.0], [10.9, 49.0], [11.0, 49.0], [11.1, 49.0], [11.2, 50.0], [11.3, 50.0], [11.4, 50.0], [11.5, 50.0], [11.6, 50.0], [11.7, 50.0], [11.8, 50.0], [11.9, 50.0], [12.0, 50.0], [12.1, 50.0], [12.2, 50.0], [12.3, 50.0], [12.4, 50.0], [12.5, 50.0], [12.6, 50.0], [12.7, 50.0], [12.8, 50.0], [12.9, 51.0], [13.0, 51.0], [13.1, 51.0], [13.2, 51.0], [13.3, 51.0], [13.4, 51.0], [13.5, 51.0], [13.6, 51.0], [13.7, 51.0], [13.8, 51.0], [13.9, 51.0], [14.0, 51.0], [14.1, 51.0], [14.2, 51.0], [14.3, 51.0], [14.4, 51.0], [14.5, 51.0], [14.6, 51.0], [14.7, 51.0], [14.8, 51.0], [14.9, 51.0], [15.0, 51.0], [15.1, 51.0], [15.2, 51.0], [15.3, 51.0], [15.4, 51.0], [15.5, 52.0], [15.6, 52.0], [15.7, 52.0], [15.8, 52.0], [15.9, 52.0], [16.0, 52.0], [16.1, 52.0], [16.2, 52.0], [16.3, 52.0], [16.4, 52.0], [16.5, 52.0], [16.6, 52.0], [16.7, 52.0], [16.8, 52.0], [16.9, 52.0], [17.0, 52.0], [17.1, 52.0], [17.2, 52.0], [17.3, 52.0], [17.4, 52.0], [17.5, 52.0], [17.6, 52.0], [17.7, 52.0], [17.8, 52.0], [17.9, 52.0], [18.0, 52.0], [18.1, 52.0], [18.2, 52.0], [18.3, 52.0], [18.4, 53.0], [18.5, 53.0], [18.6, 53.0], [18.7, 53.0], [18.8, 53.0], [18.9, 53.0], [19.0, 53.0], [19.1, 53.0], [19.2, 53.0], [19.3, 53.0], [19.4, 53.0], [19.5, 53.0], [19.6, 53.0], [19.7, 53.0], [19.8, 53.0], [19.9, 53.0], [20.0, 53.0], [20.1, 53.0], [20.2, 54.0], [20.3, 54.0], [20.4, 54.0], [20.5, 54.0], [20.6, 54.0], [20.7, 54.0], [20.8, 54.0], [20.9, 54.0], [21.0, 54.0], [21.1, 54.0], [21.2, 54.0], [21.3, 54.0], [21.4, 54.0], [21.5, 54.0], [21.6, 54.0], [21.7, 54.0], [21.8, 54.0], [21.9, 54.0], [22.0, 54.0], [22.1, 54.0], [22.2, 54.0], [22.3, 54.0], [22.4, 54.0], [22.5, 54.0], [22.6, 54.0], [22.7, 54.0], [22.8, 54.0], [22.9, 55.0], [23.0, 55.0], [23.1, 55.0], [23.2, 55.0], [23.3, 55.0], [23.4, 55.0], [23.5, 55.0], [23.6, 55.0], [23.7, 55.0], [23.8, 55.0], [23.9, 55.0], [24.0, 55.0], [24.1, 55.0], [24.2, 55.0], [24.3, 55.0], [24.4, 55.0], [24.5, 55.0], [24.6, 55.0], [24.7, 55.0], [24.8, 55.0], [24.9, 55.0], [25.0, 55.0], [25.1, 55.0], [25.2, 55.0], [25.3, 55.0], [25.4, 55.0], [25.5, 55.0], [25.6, 55.0], [25.7, 55.0], [25.8, 55.0], [25.9, 55.0], [26.0, 55.0], [26.1, 55.0], [26.2, 55.0], [26.3, 55.0], [26.4, 55.0], [26.5, 55.0], [26.6, 56.0], [26.7, 56.0], [26.8, 56.0], [26.9, 56.0], [27.0, 56.0], [27.1, 56.0], [27.2, 56.0], [27.3, 56.0], [27.4, 56.0], [27.5, 56.0], [27.6, 56.0], [27.7, 56.0], [27.8, 56.0], [27.9, 56.0], [28.0, 56.0], [28.1, 56.0], [28.2, 56.0], [28.3, 56.0], [28.4, 56.0], [28.5, 56.0], [28.6, 56.0], [28.7, 56.0], [28.8, 56.0], [28.9, 56.0], [29.0, 56.0], [29.1, 56.0], [29.2, 56.0], [29.3, 56.0], [29.4, 56.0], [29.5, 56.0], [29.6, 56.0], [29.7, 56.0], [29.8, 56.0], [29.9, 56.0], [30.0, 56.0], [30.1, 56.0], [30.2, 56.0], [30.3, 56.0], [30.4, 56.0], [30.5, 56.0], [30.6, 56.0], [30.7, 56.0], [30.8, 56.0], [30.9, 56.0], [31.0, 57.0], [31.1, 57.0], [31.2, 57.0], [31.3, 57.0], [31.4, 57.0], [31.5, 57.0], [31.6, 57.0], [31.7, 57.0], [31.8, 57.0], [31.9, 57.0], [32.0, 57.0], [32.1, 57.0], [32.2, 57.0], [32.3, 57.0], [32.4, 57.0], [32.5, 57.0], [32.6, 57.0], [32.7, 57.0], [32.8, 57.0], [32.9, 57.0], [33.0, 57.0], [33.1, 58.0], [33.2, 58.0], [33.3, 58.0], [33.4, 58.0], [33.5, 58.0], [33.6, 58.0], [33.7, 58.0], [33.8, 58.0], [33.9, 58.0], [34.0, 58.0], [34.1, 58.0], [34.2, 58.0], [34.3, 58.0], [34.4, 58.0], [34.5, 58.0], [34.6, 58.0], [34.7, 58.0], [34.8, 58.0], [34.9, 58.0], [35.0, 58.0], [35.1, 58.0], [35.2, 58.0], [35.3, 58.0], [35.4, 58.0], [35.5, 58.0], [35.6, 58.0], [35.7, 58.0], [35.8, 58.0], [35.9, 58.0], [36.0, 58.0], [36.1, 58.0], [36.2, 58.0], [36.3, 58.0], [36.4, 58.0], [36.5, 58.0], [36.6, 58.0], [36.7, 58.0], [36.8, 58.0], [36.9, 59.0], [37.0, 59.0], [37.1, 59.0], [37.2, 59.0], [37.3, 59.0], [37.4, 59.0], [37.5, 59.0], [37.6, 59.0], [37.7, 59.0], [37.8, 59.0], [37.9, 59.0], [38.0, 59.0], [38.1, 59.0], [38.2, 59.0], [38.3, 59.0], [38.4, 59.0], [38.5, 59.0], [38.6, 59.0], [38.7, 59.0], [38.8, 59.0], [38.9, 59.0], [39.0, 59.0], [39.1, 59.0], [39.2, 59.0], [39.3, 59.0], [39.4, 59.0], [39.5, 59.0], [39.6, 59.0], [39.7, 59.0], [39.8, 59.0], [39.9, 59.0], [40.0, 59.0], [40.1, 59.0], [40.2, 59.0], [40.3, 59.0], [40.4, 59.0], [40.5, 59.0], [40.6, 59.0], [40.7, 59.0], [40.8, 59.0], [40.9, 59.0], [41.0, 59.0], [41.1, 59.0], [41.2, 59.0], [41.3, 59.0], [41.4, 60.0], [41.5, 60.0], [41.6, 60.0], [41.7, 60.0], [41.8, 60.0], [41.9, 60.0], [42.0, 60.0], [42.1, 60.0], [42.2, 60.0], [42.3, 60.0], [42.4, 60.0], [42.5, 60.0], [42.6, 60.0], [42.7, 60.0], [42.8, 60.0], [42.9, 60.0], [43.0, 60.0], [43.1, 60.0], [43.2, 60.0], [43.3, 60.0], [43.4, 60.0], [43.5, 60.0], [43.6, 60.0], [43.7, 60.0], [43.8, 60.0], [43.9, 60.0], [44.0, 60.0], [44.1, 60.0], [44.2, 60.0], [44.3, 60.0], [44.4, 60.0], [44.5, 60.0], [44.6, 60.0], [44.7, 60.0], [44.8, 60.0], [44.9, 60.0], [45.0, 60.0], [45.1, 60.0], [45.2, 60.0], [45.3, 60.0], [45.4, 60.0], [45.5, 60.0], [45.6, 60.0], [45.7, 60.0], [45.8, 60.0], [45.9, 60.0], [46.0, 60.0], [46.1, 60.0], [46.2, 60.0], [46.3, 60.0], [46.4, 60.0], [46.5, 60.0], [46.6, 61.0], [46.7, 61.0], [46.8, 61.0], [46.9, 61.0], [47.0, 61.0], [47.1, 61.0], [47.2, 61.0], [47.3, 61.0], [47.4, 61.0], [47.5, 61.0], [47.6, 61.0], [47.7, 61.0], [47.8, 61.0], [47.9, 61.0], [48.0, 61.0], [48.1, 61.0], [48.2, 61.0], [48.3, 61.0], [48.4, 61.0], [48.5, 61.0], [48.6, 61.0], [48.7, 61.0], [48.8, 61.0], [48.9, 62.0], [49.0, 62.0], [49.1, 62.0], [49.2, 62.0], [49.3, 62.0], [49.4, 62.0], [49.5, 62.0], [49.6, 62.0], [49.7, 62.0], [49.8, 62.0], [49.9, 62.0], [50.0, 62.0], [50.1, 62.0], [50.2, 62.0], [50.3, 62.0], [50.4, 62.0], [50.5, 62.0], [50.6, 62.0], [50.7, 62.0], [50.8, 62.0], [50.9, 62.0], [51.0, 62.0], [51.1, 62.0], [51.2, 62.0], [51.3, 62.0], [51.4, 62.0], [51.5, 62.0], [51.6, 62.0], [51.7, 62.0], [51.8, 62.0], [51.9, 62.0], [52.0, 62.0], [52.1, 62.0], [52.2, 62.0], [52.3, 62.0], [52.4, 62.0], [52.5, 62.0], [52.6, 63.0], [52.7, 63.0], [52.8, 63.0], [52.9, 63.0], [53.0, 63.0], [53.1, 63.0], [53.2, 63.0], [53.3, 63.0], [53.4, 63.0], [53.5, 63.0], [53.6, 63.0], [53.7, 63.0], [53.8, 63.0], [53.9, 63.0], [54.0, 63.0], [54.1, 63.0], [54.2, 63.0], [54.3, 63.0], [54.4, 63.0], [54.5, 63.0], [54.6, 63.0], [54.7, 63.0], [54.8, 63.0], [54.9, 63.0], [55.0, 63.0], [55.1, 63.0], [55.2, 63.0], [55.3, 63.0], [55.4, 63.0], [55.5, 63.0], [55.6, 63.0], [55.7, 63.0], [55.8, 63.0], [55.9, 63.0], [56.0, 63.0], [56.1, 63.0], [56.2, 63.0], [56.3, 63.0], [56.4, 63.0], [56.5, 63.0], [56.6, 63.0], [56.7, 63.0], [56.8, 63.0], [56.9, 63.0], [57.0, 63.0], [57.1, 63.0], [57.2, 63.0], [57.3, 64.0], [57.4, 64.0], [57.5, 64.0], [57.6, 64.0], [57.7, 64.0], [57.8, 64.0], [57.9, 64.0], [58.0, 64.0], [58.1, 64.0], [58.2, 64.0], [58.3, 64.0], [58.4, 64.0], [58.5, 64.0], [58.6, 64.0], [58.7, 64.0], [58.8, 64.0], [58.9, 64.0], [59.0, 64.0], [59.1, 64.0], [59.2, 64.0], [59.3, 64.0], [59.4, 64.0], [59.5, 64.0], [59.6, 64.0], [59.7, 64.0], [59.8, 64.0], [59.9, 64.0], [60.0, 64.0], [60.1, 64.0], [60.2, 64.0], [60.3, 64.0], [60.4, 64.0], [60.5, 64.0], [60.6, 64.0], [60.7, 64.0], [60.8, 64.0], [60.9, 64.0], [61.0, 64.0], [61.1, 64.0], [61.2, 64.0], [61.3, 64.0], [61.4, 64.0], [61.5, 64.0], [61.6, 64.0], [61.7, 64.0], [61.8, 64.0], [61.9, 64.0], [62.0, 64.0], [62.1, 64.0], [62.2, 64.0], [62.3, 64.0], [62.4, 64.0], [62.5, 65.0], [62.6, 65.0], [62.7, 65.0], [62.8, 65.0], [62.9, 65.0], [63.0, 65.0], [63.1, 65.0], [63.2, 65.0], [63.3, 65.0], [63.4, 65.0], [63.5, 65.0], [63.6, 65.0], [63.7, 65.0], [63.8, 65.0], [63.9, 65.0], [64.0, 65.0], [64.1, 65.0], [64.2, 65.0], [64.3, 65.0], [64.4, 65.0], [64.5, 65.0], [64.6, 65.0], [64.7, 66.0], [64.8, 66.0], [64.9, 66.0], [65.0, 66.0], [65.1, 66.0], [65.2, 66.0], [65.3, 66.0], [65.4, 66.0], [65.5, 66.0], [65.6, 66.0], [65.7, 66.0], [65.8, 66.0], [65.9, 66.0], [66.0, 66.0], [66.1, 66.0], [66.2, 66.0], [66.3, 66.0], [66.4, 66.0], [66.5, 66.0], [66.6, 66.0], [66.7, 66.0], [66.8, 66.0], [66.9, 66.0], [67.0, 66.0], [67.1, 66.0], [67.2, 66.0], [67.3, 66.0], [67.4, 66.0], [67.5, 66.0], [67.6, 66.0], [67.7, 66.0], [67.8, 66.0], [67.9, 67.0], [68.0, 67.0], [68.1, 67.0], [68.2, 67.0], [68.3, 67.0], [68.4, 67.0], [68.5, 67.0], [68.6, 67.0], [68.7, 67.0], [68.8, 67.0], [68.9, 67.0], [69.0, 67.0], [69.1, 67.0], [69.2, 67.0], [69.3, 67.0], [69.4, 67.0], [69.5, 67.0], [69.6, 67.0], [69.7, 67.0], [69.8, 67.0], [69.9, 67.0], [70.0, 67.0], [70.1, 67.0], [70.2, 67.0], [70.3, 67.0], [70.4, 67.0], [70.5, 67.0], [70.6, 67.0], [70.7, 67.0], [70.8, 67.0], [70.9, 67.0], [71.0, 67.0], [71.1, 67.0], [71.2, 67.0], [71.3, 67.0], [71.4, 67.0], [71.5, 67.0], [71.6, 67.0], [71.7, 67.0], [71.8, 67.0], [71.9, 67.0], [72.0, 68.0], [72.1, 68.0], [72.2, 68.0], [72.3, 68.0], [72.4, 68.0], [72.5, 68.0], [72.6, 68.0], [72.7, 68.0], [72.8, 68.0], [72.9, 68.0], [73.0, 68.0], [73.1, 68.0], [73.2, 68.0], [73.3, 68.0], [73.4, 68.0], [73.5, 68.0], [73.6, 68.0], [73.7, 68.0], [73.8, 68.0], [73.9, 68.0], [74.0, 68.0], [74.1, 68.0], [74.2, 68.0], [74.3, 68.0], [74.4, 68.0], [74.5, 68.0], [74.6, 68.0], [74.7, 68.0], [74.8, 68.0], [74.9, 68.0], [75.0, 68.0], [75.1, 68.0], [75.2, 68.0], [75.3, 68.0], [75.4, 68.0], [75.5, 68.0], [75.6, 68.0], [75.7, 68.0], [75.8, 68.0], [75.9, 68.0], [76.0, 68.0], [76.1, 68.0], [76.2, 68.0], [76.3, 68.0], [76.4, 68.0], [76.5, 68.0], [76.6, 69.0], [76.7, 69.0], [76.8, 69.0], [76.9, 69.0], [77.0, 69.0], [77.1, 69.0], [77.2, 69.0], [77.3, 69.0], [77.4, 69.0], [77.5, 69.0], [77.6, 69.0], [77.7, 69.0], [77.8, 69.0], [77.9, 69.0], [78.0, 69.0], [78.1, 69.0], [78.2, 69.0], [78.3, 70.0], [78.4, 70.0], [78.5, 70.0], [78.6, 70.0], [78.7, 70.0], [78.8, 70.0], [78.9, 70.0], [79.0, 70.0], [79.1, 70.0], [79.2, 70.0], [79.3, 70.0], [79.4, 70.0], [79.5, 70.0], [79.6, 70.0], [79.7, 70.0], [79.8, 70.0], [79.9, 70.0], [80.0, 70.0], [80.1, 70.0], [80.2, 70.0], [80.3, 70.0], [80.4, 70.0], [80.5, 70.0], [80.6, 70.0], [80.7, 71.0], [80.8, 71.0], [80.9, 71.0], [81.0, 71.0], [81.1, 71.0], [81.2, 71.0], [81.3, 71.0], [81.4, 71.0], [81.5, 71.0], [81.6, 71.0], [81.7, 71.0], [81.8, 71.0], [81.9, 71.0], [82.0, 71.0], [82.1, 71.0], [82.2, 71.0], [82.3, 71.0], [82.4, 71.0], [82.5, 71.0], [82.6, 71.0], [82.7, 71.0], [82.8, 71.0], [82.9, 71.0], [83.0, 71.0], [83.1, 71.0], [83.2, 71.0], [83.3, 71.0], [83.4, 71.0], [83.5, 71.0], [83.6, 72.0], [83.7, 72.0], [83.8, 72.0], [83.9, 72.0], [84.0, 72.0], [84.1, 72.0], [84.2, 72.0], [84.3, 72.0], [84.4, 72.0], [84.5, 72.0], [84.6, 72.0], [84.7, 72.0], [84.8, 72.0], [84.9, 72.0], [85.0, 72.0], [85.1, 72.0], [85.2, 72.0], [85.3, 72.0], [85.4, 72.0], [85.5, 72.0], [85.6, 72.0], [85.7, 72.0], [85.8, 72.0], [85.9, 72.0], [86.0, 72.0], [86.1, 72.0], [86.2, 72.0], [86.3, 72.0], [86.4, 72.0], [86.5, 72.0], [86.6, 72.0], [86.7, 72.0], [86.8, 72.0], [86.9, 73.0], [87.0, 73.0], [87.1, 73.0], [87.2, 73.0], [87.3, 73.0], [87.4, 73.0], [87.5, 73.0], [87.6, 73.0], [87.7, 73.0], [87.8, 73.0], [87.9, 73.0], [88.0, 74.0], [88.1, 74.0], [88.2, 74.0], [88.3, 74.0], [88.4, 74.0], [88.5, 74.0], [88.6, 74.0], [88.7, 74.0], [88.8, 74.0], [88.9, 74.0], [89.0, 74.0], [89.1, 74.0], [89.2, 74.0], [89.3, 74.0], [89.4, 75.0], [89.5, 75.0], [89.6, 75.0], [89.7, 75.0], [89.8, 75.0], [89.9, 75.0], [90.0, 75.0], [90.1, 75.0], [90.2, 75.0], [90.3, 75.0], [90.4, 75.0], [90.5, 75.0], [90.6, 75.0], [90.7, 75.0], [90.8, 75.0], [90.9, 75.0], [91.0, 75.0], [91.1, 75.0], [91.2, 76.0], [91.3, 76.0], [91.4, 76.0], [91.5, 76.0], [91.6, 76.0], [91.7, 76.0], [91.8, 76.0], [91.9, 76.0], [92.0, 76.0], [92.1, 76.0], [92.2, 76.0], [92.3, 76.0], [92.4, 76.0], [92.5, 76.0], [92.6, 76.0], [92.7, 76.0], [92.8, 76.0], [92.9, 76.0], [93.0, 76.0], [93.1, 76.0], [93.2, 76.0], [93.3, 76.0], [93.4, 76.0], [93.5, 77.0], [93.6, 77.0], [93.7, 77.0], [93.8, 77.0], [93.9, 77.0], [94.0, 77.0], [94.1, 77.0], [94.2, 77.0], [94.3, 78.0], [94.4, 78.0], [94.5, 78.0], [94.6, 78.0], [94.7, 78.0], [94.8, 78.0], [94.9, 78.0], [95.0, 78.0], [95.1, 78.0], [95.2, 79.0], [95.3, 79.0], [95.4, 79.0], [95.5, 79.0], [95.6, 79.0], [95.7, 79.0], [95.8, 79.0], [95.9, 79.0], [96.0, 79.0], [96.1, 80.0], [96.2, 80.0], [96.3, 80.0], [96.4, 80.0], [96.5, 80.0], [96.6, 80.0], [96.7, 80.0], [96.8, 80.0], [96.9, 80.0], [97.0, 80.0], [97.1, 80.0], [97.2, 81.0], [97.3, 81.0], [97.4, 82.0], [97.5, 82.0], [97.6, 82.0], [97.7, 82.0], [97.8, 83.0], [97.9, 83.0], [98.0, 83.0], [98.1, 83.0], [98.2, 83.0], [98.3, 84.0], [98.4, 84.0], [98.5, 84.0], [98.6, 84.0], [98.7, 84.0], [98.8, 84.0], [98.9, 85.0], [99.0, 85.0], [99.1, 86.0], [99.2, 87.0], [99.3, 87.0], [99.4, 88.0], [99.5, 88.0], [99.6, 89.0], [99.7, 91.0], [99.8, 95.0], [99.9, 100.0], [100.0, 138.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 502.0], [0.1, 579.0], [0.2, 844.0], [0.3, 1198.0], [0.4, 1288.0], [0.5, 1337.0], [0.6, 1366.0], [0.7, 1387.0], [0.8, 1415.0], [0.9, 1431.0], [1.0, 1442.0], [1.1, 1463.0], [1.2, 1473.0], [1.3, 1492.0], [1.4, 1508.0], [1.5, 1515.0], [1.6, 1524.0], [1.7, 1532.0], [1.8, 1540.0], [1.9, 1547.0], [2.0, 1557.0], [2.1, 1565.0], [2.2, 1575.0], [2.3, 1583.0], [2.4, 1589.0], [2.5, 1595.0], [2.6, 1603.0], [2.7, 1608.0], [2.8, 1613.0], [2.9, 1622.0], [3.0, 1626.0], [3.1, 1632.0], [3.2, 1638.0], [3.3, 1644.0], [3.4, 1648.0], [3.5, 1652.0], [3.6, 1658.0], [3.7, 1662.0], [3.8, 1666.0], [3.9, 1671.0], [4.0, 1676.0], [4.1, 1680.0], [4.2, 1685.0], [4.3, 1689.0], [4.4, 1693.0], [4.5, 1698.0], [4.6, 1703.0], [4.7, 1706.0], [4.8, 1711.0], [4.9, 1715.0], [5.0, 1717.0], [5.1, 1724.0], [5.2, 1728.0], [5.3, 1733.0], [5.4, 1736.0], [5.5, 1740.0], [5.6, 1743.0], [5.7, 1745.0], [5.8, 1748.0], [5.9, 1751.0], [6.0, 1755.0], [6.1, 1760.0], [6.2, 1763.0], [6.3, 1767.0], [6.4, 1769.0], [6.5, 1773.0], [6.6, 1776.0], [6.7, 1777.0], [6.8, 1780.0], [6.9, 1783.0], [7.0, 1784.0], [7.1, 1787.0], [7.2, 1789.0], [7.3, 1792.0], [7.4, 1796.0], [7.5, 1800.0], [7.6, 1803.0], [7.7, 1807.0], [7.8, 1808.0], [7.9, 1812.0], [8.0, 1815.0], [8.1, 1818.0], [8.2, 1821.0], [8.3, 1825.0], [8.4, 1827.0], [8.5, 1830.0], [8.6, 1832.0], [8.7, 1836.0], [8.8, 1839.0], [8.9, 1841.0], [9.0, 1844.0], [9.1, 1847.0], [9.2, 1850.0], [9.3, 1852.0], [9.4, 1855.0], [9.5, 1857.0], [9.6, 1859.0], [9.7, 1861.0], [9.8, 1864.0], [9.9, 1865.0], [10.0, 1868.0], [10.1, 1870.0], [10.2, 1872.0], [10.3, 1875.0], [10.4, 1877.0], [10.5, 1880.0], [10.6, 1883.0], [10.7, 1884.0], [10.8, 1887.0], [10.9, 1888.0], [11.0, 1892.0], [11.1, 1894.0], [11.2, 1896.0], [11.3, 1899.0], [11.4, 1901.0], [11.5, 1904.0], [11.6, 1906.0], [11.7, 1908.0], [11.8, 1911.0], [11.9, 1913.0], [12.0, 1915.0], [12.1, 1918.0], [12.2, 1920.0], [12.3, 1920.0], [12.4, 1923.0], [12.5, 1926.0], [12.6, 1928.0], [12.7, 1929.0], [12.8, 1932.0], [12.9, 1933.0], [13.0, 1936.0], [13.1, 1939.0], [13.2, 1941.0], [13.3, 1944.0], [13.4, 1945.0], [13.5, 1948.0], [13.6, 1949.0], [13.7, 1951.0], [13.8, 1953.0], [13.9, 1955.0], [14.0, 1957.0], [14.1, 1959.0], [14.2, 1960.0], [14.3, 1963.0], [14.4, 1964.0], [14.5, 1966.0], [14.6, 1968.0], [14.7, 1971.0], [14.8, 1972.0], [14.9, 1974.0], [15.0, 1976.0], [15.1, 1978.0], [15.2, 1980.0], [15.3, 1981.0], [15.4, 1984.0], [15.5, 1985.0], [15.6, 1986.0], [15.7, 1988.0], [15.8, 1990.0], [15.9, 1992.0], [16.0, 1994.0], [16.1, 1996.0], [16.2, 1998.0], [16.3, 2000.0], [16.4, 2002.0], [16.5, 2004.0], [16.6, 2005.0], [16.7, 2007.0], [16.8, 2008.0], [16.9, 2011.0], [17.0, 2012.0], [17.1, 2014.0], [17.2, 2016.0], [17.3, 2017.0], [17.4, 2019.0], [17.5, 2020.0], [17.6, 2023.0], [17.7, 2024.0], [17.8, 2025.0], [17.9, 2027.0], [18.0, 2028.0], [18.1, 2029.0], [18.2, 2032.0], [18.3, 2033.0], [18.4, 2035.0], [18.5, 2036.0], [18.6, 2037.0], [18.7, 2039.0], [18.8, 2040.0], [18.9, 2041.0], [19.0, 2043.0], [19.1, 2045.0], [19.2, 2047.0], [19.3, 2048.0], [19.4, 2049.0], [19.5, 2051.0], [19.6, 2052.0], [19.7, 2055.0], [19.8, 2055.0], [19.9, 2056.0], [20.0, 2058.0], [20.1, 2059.0], [20.2, 2060.0], [20.3, 2062.0], [20.4, 2063.0], [20.5, 2064.0], [20.6, 2067.0], [20.7, 2069.0], [20.8, 2071.0], [20.9, 2072.0], [21.0, 2074.0], [21.1, 2075.0], [21.2, 2076.0], [21.3, 2078.0], [21.4, 2080.0], [21.5, 2081.0], [21.6, 2083.0], [21.7, 2084.0], [21.8, 2085.0], [21.9, 2088.0], [22.0, 2088.0], [22.1, 2090.0], [22.2, 2092.0], [22.3, 2093.0], [22.4, 2095.0], [22.5, 2097.0], [22.6, 2098.0], [22.7, 2100.0], [22.8, 2101.0], [22.9, 2102.0], [23.0, 2104.0], [23.1, 2104.0], [23.2, 2105.0], [23.3, 2107.0], [23.4, 2109.0], [23.5, 2110.0], [23.6, 2111.0], [23.7, 2112.0], [23.8, 2113.0], [23.9, 2115.0], [24.0, 2116.0], [24.1, 2117.0], [24.2, 2119.0], [24.3, 2120.0], [24.4, 2122.0], [24.5, 2123.0], [24.6, 2125.0], [24.7, 2126.0], [24.8, 2128.0], [24.9, 2129.0], [25.0, 2131.0], [25.1, 2132.0], [25.2, 2133.0], [25.3, 2136.0], [25.4, 2136.0], [25.5, 2138.0], [25.6, 2139.0], [25.7, 2140.0], [25.8, 2143.0], [25.9, 2144.0], [26.0, 2145.0], [26.1, 2147.0], [26.2, 2148.0], [26.3, 2150.0], [26.4, 2151.0], [26.5, 2152.0], [26.6, 2153.0], [26.7, 2155.0], [26.8, 2156.0], [26.9, 2157.0], [27.0, 2159.0], [27.1, 2160.0], [27.2, 2162.0], [27.3, 2164.0], [27.4, 2165.0], [27.5, 2166.0], [27.6, 2168.0], [27.7, 2169.0], [27.8, 2169.0], [27.9, 2171.0], [28.0, 2172.0], [28.1, 2173.0], [28.2, 2174.0], [28.3, 2176.0], [28.4, 2176.0], [28.5, 2178.0], [28.6, 2180.0], [28.7, 2180.0], [28.8, 2182.0], [28.9, 2183.0], [29.0, 2184.0], [29.1, 2185.0], [29.2, 2187.0], [29.3, 2188.0], [29.4, 2189.0], [29.5, 2191.0], [29.6, 2192.0], [29.7, 2193.0], [29.8, 2196.0], [29.9, 2196.0], [30.0, 2198.0], [30.1, 2200.0], [30.2, 2201.0], [30.3, 2202.0], [30.4, 2204.0], [30.5, 2205.0], [30.6, 2207.0], [30.7, 2208.0], [30.8, 2209.0], [30.9, 2211.0], [31.0, 2212.0], [31.1, 2213.0], [31.2, 2215.0], [31.3, 2216.0], [31.4, 2217.0], [31.5, 2219.0], [31.6, 2220.0], [31.7, 2220.0], [31.8, 2221.0], [31.9, 2223.0], [32.0, 2224.0], [32.1, 2224.0], [32.2, 2226.0], [32.3, 2228.0], [32.4, 2229.0], [32.5, 2230.0], [32.6, 2231.0], [32.7, 2232.0], [32.8, 2234.0], [32.9, 2235.0], [33.0, 2236.0], [33.1, 2238.0], [33.2, 2240.0], [33.3, 2241.0], [33.4, 2243.0], [33.5, 2244.0], [33.6, 2244.0], [33.7, 2246.0], [33.8, 2247.0], [33.9, 2248.0], [34.0, 2250.0], [34.1, 2251.0], [34.2, 2252.0], [34.3, 2253.0], [34.4, 2254.0], [34.5, 2256.0], [34.6, 2257.0], [34.7, 2259.0], [34.8, 2260.0], [34.9, 2260.0], [35.0, 2262.0], [35.1, 2263.0], [35.2, 2264.0], [35.3, 2266.0], [35.4, 2267.0], [35.5, 2268.0], [35.6, 2269.0], [35.7, 2271.0], [35.8, 2271.0], [35.9, 2272.0], [36.0, 2274.0], [36.1, 2276.0], [36.2, 2277.0], [36.3, 2279.0], [36.4, 2280.0], [36.5, 2281.0], [36.6, 2283.0], [36.7, 2284.0], [36.8, 2285.0], [36.9, 2287.0], [37.0, 2288.0], [37.1, 2289.0], [37.2, 2290.0], [37.3, 2292.0], [37.4, 2293.0], [37.5, 2294.0], [37.6, 2295.0], [37.7, 2296.0], [37.8, 2298.0], [37.9, 2300.0], [38.0, 2301.0], [38.1, 2302.0], [38.2, 2304.0], [38.3, 2304.0], [38.4, 2305.0], [38.5, 2307.0], [38.6, 2307.0], [38.7, 2308.0], [38.8, 2309.0], [38.9, 2311.0], [39.0, 2312.0], [39.1, 2312.0], [39.2, 2314.0], [39.3, 2315.0], [39.4, 2316.0], [39.5, 2318.0], [39.6, 2319.0], [39.7, 2320.0], [39.8, 2321.0], [39.9, 2323.0], [40.0, 2324.0], [40.1, 2324.0], [40.2, 2326.0], [40.3, 2327.0], [40.4, 2328.0], [40.5, 2329.0], [40.6, 2331.0], [40.7, 2332.0], [40.8, 2332.0], [40.9, 2333.0], [41.0, 2334.0], [41.1, 2335.0], [41.2, 2336.0], [41.3, 2336.0], [41.4, 2338.0], [41.5, 2339.0], [41.6, 2340.0], [41.7, 2341.0], [41.8, 2343.0], [41.9, 2344.0], [42.0, 2345.0], [42.1, 2347.0], [42.2, 2348.0], [42.3, 2349.0], [42.4, 2351.0], [42.5, 2352.0], [42.6, 2352.0], [42.7, 2355.0], [42.8, 2356.0], [42.9, 2356.0], [43.0, 2357.0], [43.1, 2359.0], [43.2, 2360.0], [43.3, 2361.0], [43.4, 2362.0], [43.5, 2363.0], [43.6, 2364.0], [43.7, 2365.0], [43.8, 2366.0], [43.9, 2367.0], [44.0, 2368.0], [44.1, 2370.0], [44.2, 2371.0], [44.3, 2372.0], [44.4, 2372.0], [44.5, 2374.0], [44.6, 2375.0], [44.7, 2376.0], [44.8, 2377.0], [44.9, 2379.0], [45.0, 2380.0], [45.1, 2381.0], [45.2, 2383.0], [45.3, 2384.0], [45.4, 2385.0], [45.5, 2387.0], [45.6, 2388.0], [45.7, 2389.0], [45.8, 2391.0], [45.9, 2392.0], [46.0, 2392.0], [46.1, 2394.0], [46.2, 2396.0], [46.3, 2396.0], [46.4, 2397.0], [46.5, 2399.0], [46.6, 2400.0], [46.7, 2400.0], [46.8, 2402.0], [46.9, 2403.0], [47.0, 2403.0], [47.1, 2405.0], [47.2, 2406.0], [47.3, 2408.0], [47.4, 2408.0], [47.5, 2410.0], [47.6, 2411.0], [47.7, 2412.0], [47.8, 2413.0], [47.9, 2415.0], [48.0, 2416.0], [48.1, 2417.0], [48.2, 2419.0], [48.3, 2420.0], [48.4, 2421.0], [48.5, 2422.0], [48.6, 2424.0], [48.7, 2424.0], [48.8, 2425.0], [48.9, 2427.0], [49.0, 2428.0], [49.1, 2429.0], [49.2, 2430.0], [49.3, 2431.0], [49.4, 2432.0], [49.5, 2433.0], [49.6, 2435.0], [49.7, 2436.0], [49.8, 2437.0], [49.9, 2439.0], [50.0, 2440.0], [50.1, 2440.0], [50.2, 2442.0], [50.3, 2444.0], [50.4, 2444.0], [50.5, 2446.0], [50.6, 2447.0], [50.7, 2447.0], [50.8, 2448.0], [50.9, 2450.0], [51.0, 2451.0], [51.1, 2452.0], [51.2, 2453.0], [51.3, 2455.0], [51.4, 2456.0], [51.5, 2457.0], [51.6, 2458.0], [51.7, 2459.0], [51.8, 2460.0], [51.9, 2461.0], [52.0, 2462.0], [52.1, 2463.0], [52.2, 2464.0], [52.3, 2465.0], [52.4, 2468.0], [52.5, 2468.0], [52.6, 2470.0], [52.7, 2471.0], [52.8, 2472.0], [52.9, 2473.0], [53.0, 2475.0], [53.1, 2476.0], [53.2, 2476.0], [53.3, 2477.0], [53.4, 2479.0], [53.5, 2480.0], [53.6, 2481.0], [53.7, 2483.0], [53.8, 2484.0], [53.9, 2485.0], [54.0, 2486.0], [54.1, 2488.0], [54.2, 2488.0], [54.3, 2490.0], [54.4, 2491.0], [54.5, 2492.0], [54.6, 2494.0], [54.7, 2495.0], [54.8, 2496.0], [54.9, 2497.0], [55.0, 2499.0], [55.1, 2500.0], [55.2, 2502.0], [55.3, 2504.0], [55.4, 2504.0], [55.5, 2506.0], [55.6, 2507.0], [55.7, 2508.0], [55.8, 2508.0], [55.9, 2511.0], [56.0, 2512.0], [56.1, 2513.0], [56.2, 2515.0], [56.3, 2516.0], [56.4, 2518.0], [56.5, 2519.0], [56.6, 2520.0], [56.7, 2521.0], [56.8, 2522.0], [56.9, 2524.0], [57.0, 2525.0], [57.1, 2526.0], [57.2, 2528.0], [57.3, 2528.0], [57.4, 2529.0], [57.5, 2531.0], [57.6, 2532.0], [57.7, 2532.0], [57.8, 2533.0], [57.9, 2535.0], [58.0, 2535.0], [58.1, 2536.0], [58.2, 2537.0], [58.3, 2539.0], [58.4, 2540.0], [58.5, 2540.0], [58.6, 2542.0], [58.7, 2543.0], [58.8, 2544.0], [58.9, 2545.0], [59.0, 2547.0], [59.1, 2548.0], [59.2, 2551.0], [59.3, 2552.0], [59.4, 2553.0], [59.5, 2554.0], [59.6, 2555.0], [59.7, 2556.0], [59.8, 2557.0], [59.9, 2559.0], [60.0, 2560.0], [60.1, 2561.0], [60.2, 2563.0], [60.3, 2564.0], [60.4, 2565.0], [60.5, 2567.0], [60.6, 2568.0], [60.7, 2568.0], [60.8, 2570.0], [60.9, 2572.0], [61.0, 2573.0], [61.1, 2575.0], [61.2, 2576.0], [61.3, 2577.0], [61.4, 2579.0], [61.5, 2580.0], [61.6, 2581.0], [61.7, 2583.0], [61.8, 2584.0], [61.9, 2585.0], [62.0, 2586.0], [62.1, 2588.0], [62.2, 2589.0], [62.3, 2591.0], [62.4, 2592.0], [62.5, 2593.0], [62.6, 2594.0], [62.7, 2596.0], [62.8, 2596.0], [62.9, 2599.0], [63.0, 2600.0], [63.1, 2601.0], [63.2, 2603.0], [63.3, 2604.0], [63.4, 2606.0], [63.5, 2608.0], [63.6, 2608.0], [63.7, 2610.0], [63.8, 2612.0], [63.9, 2613.0], [64.0, 2615.0], [64.1, 2616.0], [64.2, 2618.0], [64.3, 2620.0], [64.4, 2620.0], [64.5, 2622.0], [64.6, 2623.0], [64.7, 2625.0], [64.8, 2626.0], [64.9, 2628.0], [65.0, 2629.0], [65.1, 2631.0], [65.2, 2632.0], [65.3, 2633.0], [65.4, 2635.0], [65.5, 2636.0], [65.6, 2637.0], [65.7, 2639.0], [65.8, 2640.0], [65.9, 2640.0], [66.0, 2642.0], [66.1, 2644.0], [66.2, 2645.0], [66.3, 2646.0], [66.4, 2647.0], [66.5, 2648.0], [66.6, 2649.0], [66.7, 2651.0], [66.8, 2652.0], [66.9, 2654.0], [67.0, 2656.0], [67.1, 2657.0], [67.2, 2659.0], [67.3, 2660.0], [67.4, 2661.0], [67.5, 2663.0], [67.6, 2664.0], [67.7, 2665.0], [67.8, 2667.0], [67.9, 2668.0], [68.0, 2669.0], [68.1, 2671.0], [68.2, 2673.0], [68.3, 2676.0], [68.4, 2677.0], [68.5, 2678.0], [68.6, 2679.0], [68.7, 2680.0], [68.8, 2681.0], [68.9, 2683.0], [69.0, 2684.0], [69.1, 2685.0], [69.2, 2687.0], [69.3, 2688.0], [69.4, 2690.0], [69.5, 2691.0], [69.6, 2692.0], [69.7, 2693.0], [69.8, 2694.0], [69.9, 2696.0], [70.0, 2697.0], [70.1, 2699.0], [70.2, 2700.0], [70.3, 2702.0], [70.4, 2703.0], [70.5, 2705.0], [70.6, 2707.0], [70.7, 2708.0], [70.8, 2709.0], [70.9, 2711.0], [71.0, 2712.0], [71.1, 2713.0], [71.2, 2716.0], [71.3, 2716.0], [71.4, 2719.0], [71.5, 2720.0], [71.6, 2721.0], [71.7, 2723.0], [71.8, 2724.0], [71.9, 2725.0], [72.0, 2727.0], [72.1, 2728.0], [72.2, 2729.0], [72.3, 2732.0], [72.4, 2732.0], [72.5, 2735.0], [72.6, 2736.0], [72.7, 2737.0], [72.8, 2739.0], [72.9, 2740.0], [73.0, 2742.0], [73.1, 2744.0], [73.2, 2746.0], [73.3, 2748.0], [73.4, 2749.0], [73.5, 2750.0], [73.6, 2752.0], [73.7, 2753.0], [73.8, 2756.0], [73.9, 2757.0], [74.0, 2759.0], [74.1, 2760.0], [74.2, 2761.0], [74.3, 2763.0], [74.4, 2764.0], [74.5, 2766.0], [74.6, 2768.0], [74.7, 2769.0], [74.8, 2772.0], [74.9, 2773.0], [75.0, 2775.0], [75.1, 2776.0], [75.2, 2778.0], [75.3, 2780.0], [75.4, 2781.0], [75.5, 2783.0], [75.6, 2784.0], [75.7, 2785.0], [75.8, 2788.0], [75.9, 2789.0], [76.0, 2791.0], [76.1, 2792.0], [76.2, 2793.0], [76.3, 2796.0], [76.4, 2797.0], [76.5, 2799.0], [76.6, 2800.0], [76.7, 2802.0], [76.8, 2804.0], [76.9, 2805.0], [77.0, 2807.0], [77.1, 2809.0], [77.2, 2811.0], [77.3, 2812.0], [77.4, 2815.0], [77.5, 2816.0], [77.6, 2818.0], [77.7, 2820.0], [77.8, 2821.0], [77.9, 2823.0], [78.0, 2824.0], [78.1, 2825.0], [78.2, 2827.0], [78.3, 2828.0], [78.4, 2831.0], [78.5, 2832.0], [78.6, 2833.0], [78.7, 2836.0], [78.8, 2837.0], [78.9, 2839.0], [79.0, 2840.0], [79.1, 2842.0], [79.2, 2844.0], [79.3, 2845.0], [79.4, 2848.0], [79.5, 2850.0], [79.6, 2851.0], [79.7, 2853.0], [79.8, 2854.0], [79.9, 2856.0], [80.0, 2856.0], [80.1, 2859.0], [80.2, 2860.0], [80.3, 2864.0], [80.4, 2865.0], [80.5, 2868.0], [80.6, 2869.0], [80.7, 2872.0], [80.8, 2875.0], [80.9, 2876.0], [81.0, 2877.0], [81.1, 2880.0], [81.2, 2882.0], [81.3, 2884.0], [81.4, 2886.0], [81.5, 2888.0], [81.6, 2890.0], [81.7, 2892.0], [81.8, 2895.0], [81.9, 2896.0], [82.0, 2899.0], [82.1, 2900.0], [82.2, 2903.0], [82.3, 2904.0], [82.4, 2906.0], [82.5, 2908.0], [82.6, 2909.0], [82.7, 2912.0], [82.8, 2913.0], [82.9, 2916.0], [83.0, 2918.0], [83.1, 2920.0], [83.2, 2924.0], [83.3, 2925.0], [83.4, 2928.0], [83.5, 2930.0], [83.6, 2932.0], [83.7, 2934.0], [83.8, 2936.0], [83.9, 2938.0], [84.0, 2940.0], [84.1, 2942.0], [84.2, 2944.0], [84.3, 2947.0], [84.4, 2949.0], [84.5, 2951.0], [84.6, 2953.0], [84.7, 2956.0], [84.8, 2957.0], [84.9, 2959.0], [85.0, 2960.0], [85.1, 2963.0], [85.2, 2965.0], [85.3, 2967.0], [85.4, 2971.0], [85.5, 2974.0], [85.6, 2976.0], [85.7, 2979.0], [85.8, 2981.0], [85.9, 2983.0], [86.0, 2985.0], [86.1, 2987.0], [86.2, 2988.0], [86.3, 2991.0], [86.4, 2992.0], [86.5, 2995.0], [86.6, 2997.0], [86.7, 3000.0], [86.8, 3003.0], [86.9, 3006.0], [87.0, 3008.0], [87.1, 3011.0], [87.2, 3012.0], [87.3, 3015.0], [87.4, 3017.0], [87.5, 3019.0], [87.6, 3022.0], [87.7, 3024.0], [87.8, 3027.0], [87.9, 3031.0], [88.0, 3033.0], [88.1, 3036.0], [88.2, 3039.0], [88.3, 3041.0], [88.4, 3044.0], [88.5, 3048.0], [88.6, 3050.0], [88.7, 3052.0], [88.8, 3055.0], [88.9, 3057.0], [89.0, 3060.0], [89.1, 3064.0], [89.2, 3067.0], [89.3, 3071.0], [89.4, 3074.0], [89.5, 3077.0], [89.6, 3079.0], [89.7, 3081.0], [89.8, 3084.0], [89.9, 3087.0], [90.0, 3089.0], [90.1, 3093.0], [90.2, 3096.0], [90.3, 3100.0], [90.4, 3103.0], [90.5, 3107.0], [90.6, 3110.0], [90.7, 3112.0], [90.8, 3116.0], [90.9, 3120.0], [91.0, 3123.0], [91.1, 3125.0], [91.2, 3129.0], [91.3, 3133.0], [91.4, 3135.0], [91.5, 3138.0], [91.6, 3142.0], [91.7, 3145.0], [91.8, 3148.0], [91.9, 3151.0], [92.0, 3153.0], [92.1, 3156.0], [92.2, 3160.0], [92.3, 3164.0], [92.4, 3168.0], [92.5, 3172.0], [92.6, 3175.0], [92.7, 3178.0], [92.8, 3183.0], [92.9, 3188.0], [93.0, 3192.0], [93.1, 3196.0], [93.2, 3200.0], [93.3, 3204.0], [93.4, 3208.0], [93.5, 3212.0], [93.6, 3217.0], [93.7, 3222.0], [93.8, 3227.0], [93.9, 3229.0], [94.0, 3235.0], [94.1, 3240.0], [94.2, 3246.0], [94.3, 3251.0], [94.4, 3256.0], [94.5, 3263.0], [94.6, 3268.0], [94.7, 3273.0], [94.8, 3280.0], [94.9, 3285.0], [95.0, 3288.0], [95.1, 3292.0], [95.2, 3297.0], [95.3, 3302.0], [95.4, 3308.0], [95.5, 3315.0], [95.6, 3324.0], [95.7, 3328.0], [95.8, 3334.0], [95.9, 3341.0], [96.0, 3347.0], [96.1, 3353.0], [96.2, 3360.0], [96.3, 3366.0], [96.4, 3375.0], [96.5, 3381.0], [96.6, 3385.0], [96.7, 3391.0], [96.8, 3396.0], [96.9, 3403.0], [97.0, 3414.0], [97.1, 3419.0], [97.2, 3426.0], [97.3, 3435.0], [97.4, 3444.0], [97.5, 3456.0], [97.6, 3464.0], [97.7, 3474.0], [97.8, 3487.0], [97.9, 3493.0], [98.0, 3500.0], [98.1, 3508.0], [98.2, 3519.0], [98.3, 3527.0], [98.4, 3542.0], [98.5, 3553.0], [98.6, 3572.0], [98.7, 3586.0], [98.8, 3611.0], [98.9, 3627.0], [99.0, 3655.0], [99.1, 3672.0], [99.2, 3695.0], [99.3, 3712.0], [99.4, 3732.0], [99.5, 3780.0], [99.6, 3808.0], [99.7, 3861.0], [99.8, 3929.0], [99.9, 4021.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 15982.0, "series": [{"data": [[0.0, 15982.0], [100.0, 18.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[600.0, 7.0], [700.0, 5.0], [800.0, 5.0], [900.0, 2.0], [1000.0, 4.0], [1100.0, 10.0], [1200.0, 17.0], [1300.0, 54.0], [1400.0, 96.0], [1500.0, 196.0], [1600.0, 314.0], [1700.0, 469.0], [1800.0, 617.0], [1900.0, 790.0], [2000.0, 1029.0], [2100.0, 1185.0], [2200.0, 1244.0], [2300.0, 1395.0], [2400.0, 1349.0], [2500.0, 1274.0], [2600.0, 1143.0], [2800.0, 882.0], [2700.0, 1028.0], [2900.0, 738.0], [3000.0, 578.0], [3100.0, 458.0], [3200.0, 332.0], [3300.0, 256.0], [3400.0, 184.0], [3500.0, 125.0], [3700.0, 50.0], [3600.0, 76.0], [3800.0, 31.0], [3900.0, 20.0], [4000.0, 14.0], [4300.0, 3.0], [4200.0, 3.0], [4100.0, 1.0], [500.0, 16.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 4300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 217.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 16000.0, "series": [{"data": [[0.0, 16000.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 217.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 15783.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.8181818181818181, "minX": 1.7460192E12, "maxY": 32.0, "series": [{"data": [[1.74601974E12, 32.0], [1.74602004E12, 32.0], [1.74602034E12, 32.0], [1.74601938E12, 32.0], [1.74601968E12, 32.0], [1.74602046E12, 29.380405405405387], [1.7460195E12, 32.0], [1.7460198E12, 32.0], [1.74601944E12, 32.0], [1.7460201E12, 32.0], [1.7460204E12, 32.0], [1.74602022E12, 32.0], [1.74601926E12, 32.0], [1.74601956E12, 32.0], [1.74602052E12, 1.8181818181818181], [1.7460192E12, 29.51479289940828], [1.74601986E12, 32.0], [1.74602016E12, 32.0], [1.74601932E12, 32.0], [1.74601998E12, 32.0], [1.74602028E12, 32.0], [1.74601962E12, 32.0], [1.74601992E12, 32.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74602052E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 8.0, "minX": 1.0, "maxY": 2471.410238518139, "series": [{"data": [[32.0, 61.756629869305904], [2.0, 8.0], [3.0, 8.25], [6.0, 9.5], [7.0, 8.833333333333334], [8.0, 9.5], [9.0, 11.333333333333334], [12.0, 22.812500000000004], [13.0, 28.0], [14.0, 88.5], [15.0, 44.5], [16.0, 40.0], [1.0, 8.0], [17.0, 53.111111111111114], [18.0, 56.888888888888886], [19.0, 28.666666666666664], [20.0, 33.0], [21.0, 59.36363636363636], [22.0, 64.3], [23.0, 53.75], [24.0, 54.36363636363636], [25.0, 62.99999999999999], [26.0, 49.75], [27.0, 64.03333333333333], [28.0, 59.66666666666666], [29.0, 62.05000000000001], [30.0, 64.41379310344827], [31.0, 56.77777777777778]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[31.857187499999966, 61.609000000000066]], "isOverall": false, "label": "Create CSR-Aggregated", "isController": false}, {"data": [[32.0, 2471.410238518139], [2.0, 514.0], [3.0, 531.1111111111111], [4.0, 579.0], [5.0, 576.0], [6.0, 650.0], [7.0, 683.1666666666666], [8.0, 783.3333333333334], [9.0, 831.0], [10.0, 886.0], [11.0, 986.0], [12.0, 1282.2857142857142], [13.0, 1247.3333333333333], [14.0, 1109.0], [15.0, 1161.3333333333333], [16.0, 1093.0], [1.0, 504.6666666666667], [17.0, 1529.7142857142858], [18.0, 1556.125], [19.0, 1468.4], [20.0, 1510.5], [21.0, 1722.8000000000002], [22.0, 1970.1000000000001], [23.0, 1899.5], [24.0, 1909.5], [25.0, 1932.8750000000002], [26.0, 2231.0], [27.0, 2229.733333333333], [28.0, 2144.2083333333335], [29.0, 2305.5238095238087], [30.0, 2458.9999999999995], [31.0, 2281.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}, {"data": [[31.853500000000015, 2461.842562500001]], "isOverall": false, "label": "HTTP Request - enroll-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 32.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 96.1, "minX": 1.7460192E12, "maxY": 40127.1, "series": [{"data": [[1.74601974E12, 39716.86666666667], [1.74602004E12, 39248.316666666666], [1.74602034E12, 39091.51666666667], [1.74601938E12, 39560.25], [1.74601968E12, 39809.65], [1.74602046E12, 39091.5], [1.7460195E12, 39763.05], [1.7460198E12, 39664.01666666667], [1.74601944E12, 40127.1], [1.7460201E12, 39341.666666666664], [1.7460204E12, 39237.6], [1.74602022E12, 38883.75], [1.74601926E12, 39612.05], [1.74601956E12, 39242.25], [1.74602052E12, 348.05], [1.7460192E12, 3757.983333333333], [1.74601986E12, 39606.816666666666], [1.74602016E12, 39387.816666666666], [1.74601932E12, 40122.083333333336], [1.74601998E12, 39711.066666666666], [1.74602028E12, 38987.083333333336], [1.74601962E12, 39601.51666666667], [1.74601992E12, 38820.76666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74601974E12, 10508.3], [1.74602004E12, 10384.2], [1.74602034E12, 10342.4], [1.74601938E12, 10466.5], [1.74601968E12, 10535.7], [1.74602046E12, 10383.4], [1.7460195E12, 10521.7], [1.7460198E12, 10493.9], [1.74601944E12, 10618.0], [1.7460201E12, 10411.6], [1.7460204E12, 10384.5], [1.74602022E12, 10287.9], [1.74601926E12, 10480.3], [1.74601956E12, 10383.9], [1.74602052E12, 96.1], [1.7460192E12, 950.2], [1.74601986E12, 10480.5], [1.74602016E12, 10425.1], [1.74601932E12, 10618.3], [1.74601998E12, 10508.5], [1.74602028E12, 10314.7], [1.74601962E12, 10480.4], [1.74601992E12, 10273.9]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74602052E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 8.0, "minX": 1.7460192E12, "maxY": 2720.6811594202895, "series": [{"data": [[1.74601974E12, 61.151832460733026], [1.74602004E12, 61.3907284768212], [1.74602034E12, 61.51462765957446], [1.74601938E12, 62.26938239159002], [1.74601968E12, 62.341623036649175], [1.74602046E12, 59.81542699724518], [1.7460195E12, 61.948952879581164], [1.7460198E12, 61.60419397116645], [1.74601944E12, 62.67055771725036], [1.7460201E12, 61.48741721854302], [1.7460204E12, 61.390438247011986], [1.74602022E12, 61.20588235294118], [1.74601926E12, 63.41994750656169], [1.74601956E12, 61.39522546419098], [1.74602052E12, 8.0], [1.7460192E12, 54.82999999999999], [1.74601986E12, 61.51511169513794], [1.74602016E12, 61.31788079470196], [1.74601932E12, 62.964935064935034], [1.74601998E12, 61.36041939711668], [1.74602028E12, 61.24000000000002], [1.74601962E12, 61.70131578947366], [1.74601992E12, 61.10604026845638]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74601974E12, 2459.879423328962], [1.74602004E12, 2469.9469496021234], [1.74602034E12, 2486.499334221041], [1.74601938E12, 2438.224999999998], [1.74601968E12, 2455.2640522875804], [1.74602046E12, 2304.827586206895], [1.7460195E12, 2445.7552356020947], [1.7460198E12, 2455.5026246719153], [1.74601944E12, 2443.1828793774303], [1.7460201E12, 2476.6984126984175], [1.7460204E12, 2491.733421750664], [1.74602022E12, 2507.8366800535464], [1.74601926E12, 2484.865965834426], [1.74601956E12, 2472.812997347482], [1.74602052E12, 511.85714285714283], [1.7460192E12, 2720.6811594202895], [1.74601986E12, 2462.4218134034163], [1.74602016E12, 2480.219286657856], [1.74601932E12, 2430.4461738002624], [1.74601998E12, 2461.6382699868923], [1.74602028E12, 2498.58611481976], [1.74601962E12, 2466.3508541392916], [1.74601992E12, 2502.9678284182282]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74602052E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.7460192E12, "maxY": 2720.63768115942, "series": [{"data": [[1.74601974E12, 0.0], [1.74602004E12, 0.0], [1.74602034E12, 0.0], [1.74601938E12, 0.0], [1.74601968E12, 0.0], [1.74602046E12, 0.0], [1.7460195E12, 0.0], [1.7460198E12, 0.0], [1.74601944E12, 0.0], [1.7460201E12, 0.0], [1.7460204E12, 0.0], [1.74602022E12, 0.0], [1.74601926E12, 0.0], [1.74601956E12, 0.0], [1.74602052E12, 0.0], [1.7460192E12, 0.0], [1.74601986E12, 0.0], [1.74602016E12, 0.0], [1.74601932E12, 0.0], [1.74601998E12, 0.0], [1.74602028E12, 0.0], [1.74601962E12, 0.0], [1.74601992E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74601974E12, 2459.8715596330285], [1.74602004E12, 2469.942970822281], [1.74602034E12, 2486.4940079893477], [1.74601938E12, 2438.2039473684226], [1.74601968E12, 2455.2575163398687], [1.74602046E12, 2304.82095490716], [1.7460195E12, 2445.7434554973815], [1.7460198E12, 2455.4934383202135], [1.74601944E12, 2443.166018158235], [1.7460201E12, 2476.6944444444416], [1.7460204E12, 2491.7267904509304], [1.74602022E12, 2507.8313253012025], [1.74601926E12, 2484.835742444152], [1.74601956E12, 2472.8023872679037], [1.74602052E12, 511.85714285714283], [1.7460192E12, 2720.63768115942], [1.74601986E12, 2462.416557161631], [1.74602016E12, 2480.2166446499373], [1.74601932E12, 2430.4267185473436], [1.74601998E12, 2461.625163826995], [1.74602028E12, 2498.582109479305], [1.74601962E12, 2466.337713534822], [1.74601992E12, 2502.958445040215]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74602052E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.7460192E12, "maxY": 281.95652173913044, "series": [{"data": [[1.74601974E12, 0.0], [1.74602004E12, 0.0], [1.74602034E12, 0.0], [1.74601938E12, 0.0], [1.74601968E12, 0.0], [1.74602046E12, 0.0], [1.7460195E12, 0.0], [1.7460198E12, 0.0], [1.74601944E12, 0.0], [1.7460201E12, 0.0], [1.7460204E12, 0.0], [1.74602022E12, 0.0], [1.74601926E12, 0.0], [1.74601956E12, 0.0], [1.74602052E12, 0.0], [1.7460192E12, 0.0], [1.74601986E12, 0.0], [1.74602016E12, 0.0], [1.74601932E12, 0.0], [1.74601998E12, 0.0], [1.74602028E12, 0.0], [1.74601962E12, 0.0], [1.74601992E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74601974E12, 0.25819134993446885], [1.74602004E12, 0.23474801061007972], [1.74602034E12, 0.2410119840213052], [1.74601938E12, 0.28421052631578947], [1.74601968E12, 0.2901960784313726], [1.74602046E12, 0.18832891246684336], [1.7460195E12, 0.15052356020942392], [1.7460198E12, 0.21391076115485547], [1.74601944E12, 0.23605706874189367], [1.7460201E12, 0.2526455026455028], [1.7460204E12, 0.21352785145888595], [1.74602022E12, 0.23962516733601072], [1.74601926E12, 0.42838370565045986], [1.74601956E12, 0.20954907161803668], [1.74602052E12, 0.0], [1.7460192E12, 281.95652173913044], [1.74601986E12, 0.2036793692509851], [1.74602016E12, 0.2298546895640688], [1.74601932E12, 0.28145265888456555], [1.74601998E12, 0.24639580602883365], [1.74602028E12, 0.24566088117489981], [1.74601962E12, 0.2614980289093306], [1.74601992E12, 0.2613941018766756]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74602052E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 8.0, "minX": 1.7460192E12, "maxY": 4372.0, "series": [{"data": [[1.74601974E12, 3850.0], [1.74602004E12, 4075.0], [1.74602034E12, 3893.0], [1.74601938E12, 4320.0], [1.74601968E12, 4107.0], [1.74602046E12, 4344.0], [1.7460195E12, 3828.0], [1.7460198E12, 3961.0], [1.74601944E12, 4204.0], [1.7460201E12, 3814.0], [1.7460204E12, 4040.0], [1.74602022E12, 4372.0], [1.74601926E12, 3916.0], [1.74601956E12, 4007.0], [1.74602052E12, 523.0], [1.7460192E12, 3469.0], [1.74601986E12, 4213.0], [1.74602016E12, 3801.0], [1.74601932E12, 3861.0], [1.74601998E12, 3705.0], [1.74602028E12, 4038.0], [1.74601962E12, 3941.0], [1.74601992E12, 3916.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.74601974E12, 2840.2], [1.74602004E12, 2832.0], [1.74602034E12, 2896.0], [1.74601938E12, 2838.6], [1.74601968E12, 2839.0], [1.74602046E12, 2763.9], [1.7460195E12, 2832.7000000000007], [1.7460198E12, 2828.8], [1.74601944E12, 2856.7], [1.7460201E12, 2848.6], [1.7460204E12, 2876.8], [1.74602022E12, 2936.6000000000004], [1.74601926E12, 2857.0], [1.74601956E12, 2904.2000000000003], [1.74602052E12, 522.0], [1.7460192E12, 3128.0], [1.74601986E12, 2867.4], [1.74602016E12, 2838.7], [1.74601932E12, 2805.3999999999996], [1.74601998E12, 2852.3], [1.74602028E12, 2947.0], [1.74601962E12, 2884.8], [1.74601992E12, 2906.8]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.74601974E12, 3569.2800000000007], [1.74602004E12, 3533.800000000001], [1.74602034E12, 3507.84], [1.74601938E12, 3600.68], [1.74601968E12, 3523.300000000001], [1.74602046E12, 3635.060000000004], [1.7460195E12, 3489.6800000000003], [1.7460198E12, 3400.1400000000003], [1.74601944E12, 3504.129999999999], [1.7460201E12, 3472.3199999999983], [1.7460204E12, 3486.120000000001], [1.74602022E12, 3578.079999999999], [1.74601926E12, 3511.08], [1.74601956E12, 3608.940000000003], [1.74602052E12, 523.0], [1.7460192E12, 3467.6], [1.74601986E12, 3492.31], [1.74602016E12, 3498.569999999999], [1.74601932E12, 3403.74], [1.74601998E12, 3387.46], [1.74602028E12, 3503.0], [1.74601962E12, 3480.24], [1.74601992E12, 3494.7999999999993]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.74601974E12, 3077.2], [1.74602004E12, 3100.0], [1.74602034E12, 3110.6], [1.74601938E12, 3095.7], [1.74601968E12, 3067.5], [1.74602046E12, 3022.8], [1.7460195E12, 3079.0], [1.7460198E12, 3019.7], [1.74601944E12, 3126.2499999999995], [1.7460201E12, 3069.0], [1.7460204E12, 3092.3999999999996], [1.74602022E12, 3173.2], [1.74601926E12, 3073.8], [1.74601956E12, 3110.2], [1.74602052E12, 523.0], [1.7460192E12, 3208.0], [1.74601986E12, 3119.85], [1.74602016E12, 3024.0], [1.74601932E12, 3053.7], [1.74601998E12, 3047.249999999999], [1.74602028E12, 3153.0], [1.74601962E12, 3077.7999999999997], [1.74601992E12, 3154.2]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.74601974E12, 24.0], [1.74602004E12, 26.0], [1.74602034E12, 29.0], [1.74601938E12, 27.0], [1.74601968E12, 35.0], [1.74602046E12, 8.0], [1.7460195E12, 19.0], [1.7460198E12, 35.0], [1.74601944E12, 36.0], [1.7460201E12, 33.0], [1.7460204E12, 35.0], [1.74602022E12, 24.0], [1.74601926E12, 25.0], [1.74601956E12, 31.0], [1.74602052E12, 8.0], [1.7460192E12, 9.0], [1.74601986E12, 34.0], [1.74602016E12, 23.0], [1.74601932E12, 31.0], [1.74601998E12, 32.0], [1.74602028E12, 25.0], [1.74601962E12, 31.0], [1.74601992E12, 25.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.74601974E12, 99.0], [1.74602004E12, 104.0], [1.74602034E12, 92.0], [1.74601938E12, 88.0], [1.74601968E12, 1239.0], [1.74602046E12, 667.0], [1.7460195E12, 702.5], [1.7460198E12, 99.0], [1.74601944E12, 678.0], [1.7460201E12, 1354.0], [1.7460204E12, 1352.0], [1.74602022E12, 100.0], [1.74601926E12, 124.0], [1.74601956E12, 612.0], [1.74602052E12, 505.0], [1.7460192E12, 85.0], [1.74601986E12, 709.0], [1.74602016E12, 1367.0], [1.74601932E12, 1333.0], [1.74601998E12, 642.5], [1.74602028E12, 88.0], [1.74601962E12, 1309.0], [1.74601992E12, 1097.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74602052E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 8.0, "minX": 1.0, "maxY": 1736.0, "series": [{"data": [[33.0, 706.0], [32.0, 1317.5], [34.0, 1355.0], [35.0, 1403.0], [37.0, 1496.5], [36.0, 90.5], [39.0, 84.0], [38.0, 857.0], [41.0, 1513.0], [40.0, 1540.5], [43.0, 79.0], [42.0, 83.5], [44.0, 772.0], [48.0, 839.0], [3.0, 8.0], [64.0, 1397.5], [7.0, 514.0], [8.0, 65.0], [9.0, 1736.0], [10.0, 910.5], [11.0, 1356.0], [12.0, 519.0], [13.0, 80.5], [14.0, 695.5], [15.0, 78.0], [16.0, 75.0], [1.0, 507.0], [17.0, 1373.0], [18.0, 93.5], [19.0, 85.5], [20.0, 87.0], [21.0, 88.0], [22.0, 1270.0], [23.0, 1393.5], [24.0, 88.5], [25.0, 1215.5], [26.0, 634.0], [27.0, 112.0], [28.0, 1423.5], [29.0, 1346.5], [30.0, 738.5], [31.0, 1382.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 64.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 1736.0, "series": [{"data": [[33.0, 654.5], [32.0, 1317.5], [34.0, 1355.0], [35.0, 1403.0], [37.0, 1496.5], [36.0, 0.0], [39.0, 0.0], [38.0, 811.5], [41.0, 1513.0], [40.0, 1540.5], [43.0, 0.0], [42.0, 0.0], [44.0, 732.0], [48.0, 798.0], [3.0, 0.0], [64.0, 1328.5], [7.0, 514.0], [8.0, 0.0], [9.0, 1736.0], [10.0, 872.0], [11.0, 1356.0], [12.0, 519.0], [13.0, 0.0], [14.0, 651.5], [15.0, 0.0], [16.0, 0.0], [1.0, 507.0], [17.0, 1373.0], [18.0, 0.0], [19.0, 0.0], [20.0, 0.0], [21.0, 0.0], [22.0, 1270.0], [23.0, 1393.5], [24.0, 0.0], [25.0, 1215.5], [26.0, 584.0], [27.0, 0.0], [28.0, 1423.5], [29.0, 1346.5], [30.0, 690.5], [31.0, 1382.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 64.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.7460192E12, "maxY": 25.7, "series": [{"data": [[1.74601974E12, 25.45], [1.74602004E12, 25.15], [1.74602034E12, 25.05], [1.74601938E12, 25.35], [1.74601968E12, 25.483333333333334], [1.74602046E12, 24.183333333333334], [1.7460195E12, 25.466666666666665], [1.7460198E12, 25.416666666666668], [1.74601944E12, 25.7], [1.7460201E12, 25.183333333333334], [1.7460204E12, 25.116666666666667], [1.74602022E12, 24.916666666666668], [1.74601926E12, 25.383333333333333], [1.74601956E12, 25.133333333333333], [1.74602052E12, 0.13333333333333333], [1.7460192E12, 3.35], [1.74601986E12, 25.366666666666667], [1.74602016E12, 25.2], [1.74601932E12, 25.683333333333334], [1.74601998E12, 25.433333333333334], [1.74602028E12, 24.983333333333334], [1.74601962E12, 25.35], [1.74601992E12, 24.85]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74602052E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.7460192E12, "maxY": 12.85, "series": [{"data": [[1.74601974E12, 12.733333333333333], [1.74602004E12, 12.583333333333334], [1.74602034E12, 12.533333333333333], [1.74601938E12, 12.683333333333334], [1.74601968E12, 12.733333333333333], [1.74602046E12, 12.1], [1.7460195E12, 12.733333333333333], [1.7460198E12, 12.716666666666667], [1.74601944E12, 12.85], [1.7460201E12, 12.583333333333334], [1.7460204E12, 12.55], [1.74602022E12, 12.466666666666667], [1.74601926E12, 12.7], [1.74601956E12, 12.566666666666666], [1.74602052E12, 0.06666666666666667], [1.7460192E12, 1.6666666666666667], [1.74601986E12, 12.683333333333334], [1.74602016E12, 12.583333333333334], [1.74601932E12, 12.833333333333334], [1.74601998E12, 12.716666666666667], [1.74602028E12, 12.5], [1.74601962E12, 12.666666666666666], [1.74601992E12, 12.416666666666666]], "isOverall": false, "label": "0", "isController": false}, {"data": [[1.74601974E12, 12.716666666666667], [1.74602004E12, 12.566666666666666], [1.74602034E12, 12.516666666666667], [1.74601938E12, 12.666666666666666], [1.74601968E12, 12.75], [1.74602046E12, 12.566666666666666], [1.7460195E12, 12.733333333333333], [1.7460198E12, 12.7], [1.74601944E12, 12.85], [1.7460201E12, 12.6], [1.7460204E12, 12.566666666666666], [1.74602022E12, 12.45], [1.74601926E12, 12.683333333333334], [1.74601956E12, 12.566666666666666], [1.74602052E12, 0.11666666666666667], [1.7460192E12, 1.15], [1.74601986E12, 12.683333333333334], [1.74602016E12, 12.616666666666667], [1.74601932E12, 12.85], [1.74601998E12, 12.716666666666667], [1.74602028E12, 12.483333333333333], [1.74601962E12, 12.683333333333334], [1.74601992E12, 12.433333333333334]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74602052E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.06666666666666667, "minX": 1.7460192E12, "maxY": 12.85, "series": [{"data": [[1.74601974E12, 12.716666666666667], [1.74602004E12, 12.566666666666666], [1.74602034E12, 12.516666666666667], [1.74601938E12, 12.666666666666666], [1.74601968E12, 12.75], [1.74602046E12, 12.566666666666666], [1.7460195E12, 12.733333333333333], [1.7460198E12, 12.7], [1.74601944E12, 12.85], [1.7460201E12, 12.6], [1.7460204E12, 12.566666666666666], [1.74602022E12, 12.45], [1.74601926E12, 12.683333333333334], [1.74601956E12, 12.566666666666666], [1.74602052E12, 0.11666666666666667], [1.7460192E12, 1.15], [1.74601986E12, 12.683333333333334], [1.74602016E12, 12.616666666666667], [1.74601932E12, 12.85], [1.74601998E12, 12.716666666666667], [1.74602028E12, 12.483333333333333], [1.74601962E12, 12.683333333333334], [1.74601992E12, 12.433333333333334]], "isOverall": false, "label": "HTTP Request - enroll-success", "isController": false}, {"data": [[1.74601974E12, 12.733333333333333], [1.74602004E12, 12.583333333333334], [1.74602034E12, 12.533333333333333], [1.74601938E12, 12.683333333333334], [1.74601968E12, 12.733333333333333], [1.74602046E12, 12.1], [1.7460195E12, 12.733333333333333], [1.7460198E12, 12.716666666666667], [1.74601944E12, 12.85], [1.7460201E12, 12.583333333333334], [1.7460204E12, 12.55], [1.74602022E12, 12.466666666666667], [1.74601926E12, 12.7], [1.74601956E12, 12.566666666666666], [1.74602052E12, 0.06666666666666667], [1.7460192E12, 1.6666666666666667], [1.74601986E12, 12.683333333333334], [1.74602016E12, 12.583333333333334], [1.74601932E12, 12.833333333333334], [1.74601998E12, 12.716666666666667], [1.74602028E12, 12.5], [1.74601962E12, 12.666666666666666], [1.74601992E12, 12.416666666666666]], "isOverall": false, "label": "Create CSR-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74602052E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.18333333333333332, "minX": 1.7460192E12, "maxY": 25.7, "series": [{"data": [[1.74601974E12, 25.45], [1.74602004E12, 25.15], [1.74602034E12, 25.05], [1.74601938E12, 25.35], [1.74601968E12, 25.483333333333334], [1.74602046E12, 24.666666666666668], [1.7460195E12, 25.466666666666665], [1.7460198E12, 25.416666666666668], [1.74601944E12, 25.7], [1.7460201E12, 25.183333333333334], [1.7460204E12, 25.116666666666667], [1.74602022E12, 24.916666666666668], [1.74601926E12, 25.383333333333333], [1.74601956E12, 25.133333333333333], [1.74602052E12, 0.18333333333333332], [1.7460192E12, 2.816666666666667], [1.74601986E12, 25.366666666666667], [1.74602016E12, 25.2], [1.74601932E12, 25.683333333333334], [1.74601998E12, 25.433333333333334], [1.74602028E12, 24.983333333333334], [1.74601962E12, 25.35], [1.74601992E12, 24.85]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74602052E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

