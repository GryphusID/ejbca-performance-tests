/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 7.0, "minX": 0.0, "maxY": 11009.0, "series": [{"data": [[0.0, 7.0], [0.1, 9.0], [0.2, 12.0], [0.3, 17.0], [0.4, 23.0], [0.5, 30.0], [0.6, 32.0], [0.7, 35.0], [0.8, 35.0], [0.9, 36.0], [1.0, 36.0], [1.1, 37.0], [1.2, 38.0], [1.3, 38.0], [1.4, 39.0], [1.5, 39.0], [1.6, 39.0], [1.7, 40.0], [1.8, 40.0], [1.9, 40.0], [2.0, 40.0], [2.1, 40.0], [2.2, 40.0], [2.3, 41.0], [2.4, 41.0], [2.5, 41.0], [2.6, 42.0], [2.7, 42.0], [2.8, 42.0], [2.9, 42.0], [3.0, 43.0], [3.1, 43.0], [3.2, 43.0], [3.3, 43.0], [3.4, 43.0], [3.5, 43.0], [3.6, 43.0], [3.7, 43.0], [3.8, 44.0], [3.9, 44.0], [4.0, 44.0], [4.1, 44.0], [4.2, 44.0], [4.3, 44.0], [4.4, 44.0], [4.5, 44.0], [4.6, 44.0], [4.7, 44.0], [4.8, 44.0], [4.9, 45.0], [5.0, 45.0], [5.1, 45.0], [5.2, 45.0], [5.3, 45.0], [5.4, 45.0], [5.5, 46.0], [5.6, 46.0], [5.7, 46.0], [5.8, 46.0], [5.9, 46.0], [6.0, 46.0], [6.1, 46.0], [6.2, 46.0], [6.3, 46.0], [6.4, 46.0], [6.5, 46.0], [6.6, 47.0], [6.7, 47.0], [6.8, 47.0], [6.9, 47.0], [7.0, 47.0], [7.1, 47.0], [7.2, 47.0], [7.3, 47.0], [7.4, 47.0], [7.5, 47.0], [7.6, 47.0], [7.7, 47.0], [7.8, 47.0], [7.9, 47.0], [8.0, 47.0], [8.1, 47.0], [8.2, 48.0], [8.3, 48.0], [8.4, 48.0], [8.5, 48.0], [8.6, 48.0], [8.7, 48.0], [8.8, 48.0], [8.9, 48.0], [9.0, 48.0], [9.1, 48.0], [9.2, 48.0], [9.3, 48.0], [9.4, 48.0], [9.5, 48.0], [9.6, 48.0], [9.7, 48.0], [9.8, 48.0], [9.9, 48.0], [10.0, 48.0], [10.1, 48.0], [10.2, 48.0], [10.3, 48.0], [10.4, 49.0], [10.5, 49.0], [10.6, 49.0], [10.7, 49.0], [10.8, 49.0], [10.9, 49.0], [11.0, 49.0], [11.1, 49.0], [11.2, 49.0], [11.3, 49.0], [11.4, 49.0], [11.5, 49.0], [11.6, 50.0], [11.7, 50.0], [11.8, 50.0], [11.9, 50.0], [12.0, 50.0], [12.1, 50.0], [12.2, 50.0], [12.3, 50.0], [12.4, 50.0], [12.5, 50.0], [12.6, 50.0], [12.7, 50.0], [12.8, 50.0], [12.9, 50.0], [13.0, 50.0], [13.1, 50.0], [13.2, 50.0], [13.3, 50.0], [13.4, 50.0], [13.5, 51.0], [13.6, 51.0], [13.7, 51.0], [13.8, 51.0], [13.9, 51.0], [14.0, 51.0], [14.1, 51.0], [14.2, 51.0], [14.3, 51.0], [14.4, 51.0], [14.5, 51.0], [14.6, 51.0], [14.7, 51.0], [14.8, 51.0], [14.9, 51.0], [15.0, 51.0], [15.1, 51.0], [15.2, 51.0], [15.3, 51.0], [15.4, 51.0], [15.5, 51.0], [15.6, 51.0], [15.7, 51.0], [15.8, 51.0], [15.9, 51.0], [16.0, 52.0], [16.1, 52.0], [16.2, 52.0], [16.3, 52.0], [16.4, 52.0], [16.5, 52.0], [16.6, 52.0], [16.7, 52.0], [16.8, 52.0], [16.9, 52.0], [17.0, 52.0], [17.1, 52.0], [17.2, 52.0], [17.3, 52.0], [17.4, 52.0], [17.5, 52.0], [17.6, 52.0], [17.7, 52.0], [17.8, 52.0], [17.9, 52.0], [18.0, 52.0], [18.1, 52.0], [18.2, 52.0], [18.3, 52.0], [18.4, 52.0], [18.5, 52.0], [18.6, 52.0], [18.7, 52.0], [18.8, 52.0], [18.9, 52.0], [19.0, 52.0], [19.1, 52.0], [19.2, 52.0], [19.3, 52.0], [19.4, 52.0], [19.5, 52.0], [19.6, 53.0], [19.7, 53.0], [19.8, 53.0], [19.9, 53.0], [20.0, 53.0], [20.1, 53.0], [20.2, 53.0], [20.3, 53.0], [20.4, 53.0], [20.5, 53.0], [20.6, 53.0], [20.7, 53.0], [20.8, 53.0], [20.9, 53.0], [21.0, 53.0], [21.1, 53.0], [21.2, 53.0], [21.3, 53.0], [21.4, 53.0], [21.5, 53.0], [21.6, 54.0], [21.7, 54.0], [21.8, 54.0], [21.9, 54.0], [22.0, 54.0], [22.1, 54.0], [22.2, 54.0], [22.3, 54.0], [22.4, 54.0], [22.5, 54.0], [22.6, 54.0], [22.7, 54.0], [22.8, 54.0], [22.9, 54.0], [23.0, 54.0], [23.1, 54.0], [23.2, 54.0], [23.3, 54.0], [23.4, 54.0], [23.5, 54.0], [23.6, 54.0], [23.7, 54.0], [23.8, 54.0], [23.9, 54.0], [24.0, 54.0], [24.1, 54.0], [24.2, 54.0], [24.3, 55.0], [24.4, 55.0], [24.5, 55.0], [24.6, 55.0], [24.7, 55.0], [24.8, 55.0], [24.9, 55.0], [25.0, 55.0], [25.1, 55.0], [25.2, 55.0], [25.3, 55.0], [25.4, 55.0], [25.5, 55.0], [25.6, 55.0], [25.7, 55.0], [25.8, 55.0], [25.9, 55.0], [26.0, 55.0], [26.1, 55.0], [26.2, 55.0], [26.3, 55.0], [26.4, 55.0], [26.5, 55.0], [26.6, 55.0], [26.7, 55.0], [26.8, 55.0], [26.9, 55.0], [27.0, 55.0], [27.1, 55.0], [27.2, 55.0], [27.3, 55.0], [27.4, 55.0], [27.5, 55.0], [27.6, 55.0], [27.7, 55.0], [27.8, 55.0], [27.9, 56.0], [28.0, 56.0], [28.1, 56.0], [28.2, 56.0], [28.3, 56.0], [28.4, 56.0], [28.5, 56.0], [28.6, 56.0], [28.7, 56.0], [28.8, 56.0], [28.9, 56.0], [29.0, 56.0], [29.1, 56.0], [29.2, 56.0], [29.3, 56.0], [29.4, 56.0], [29.5, 56.0], [29.6, 56.0], [29.7, 56.0], [29.8, 56.0], [29.9, 56.0], [30.0, 56.0], [30.1, 56.0], [30.2, 56.0], [30.3, 56.0], [30.4, 56.0], [30.5, 56.0], [30.6, 56.0], [30.7, 56.0], [30.8, 56.0], [30.9, 56.0], [31.0, 56.0], [31.1, 56.0], [31.2, 56.0], [31.3, 56.0], [31.4, 56.0], [31.5, 56.0], [31.6, 56.0], [31.7, 56.0], [31.8, 56.0], [31.9, 56.0], [32.0, 56.0], [32.1, 56.0], [32.2, 56.0], [32.3, 56.0], [32.4, 56.0], [32.5, 57.0], [32.6, 57.0], [32.7, 57.0], [32.8, 57.0], [32.9, 57.0], [33.0, 57.0], [33.1, 57.0], [33.2, 57.0], [33.3, 57.0], [33.4, 57.0], [33.5, 57.0], [33.6, 57.0], [33.7, 57.0], [33.8, 57.0], [33.9, 57.0], [34.0, 57.0], [34.1, 57.0], [34.2, 57.0], [34.3, 57.0], [34.4, 57.0], [34.5, 57.0], [34.6, 57.0], [34.7, 57.0], [34.8, 57.0], [34.9, 58.0], [35.0, 58.0], [35.1, 58.0], [35.2, 58.0], [35.3, 58.0], [35.4, 58.0], [35.5, 58.0], [35.6, 58.0], [35.7, 58.0], [35.8, 58.0], [35.9, 58.0], [36.0, 58.0], [36.1, 58.0], [36.2, 58.0], [36.3, 58.0], [36.4, 58.0], [36.5, 58.0], [36.6, 58.0], [36.7, 58.0], [36.8, 58.0], [36.9, 58.0], [37.0, 58.0], [37.1, 58.0], [37.2, 58.0], [37.3, 58.0], [37.4, 58.0], [37.5, 58.0], [37.6, 58.0], [37.7, 58.0], [37.8, 58.0], [37.9, 58.0], [38.0, 58.0], [38.1, 58.0], [38.2, 59.0], [38.3, 59.0], [38.4, 59.0], [38.5, 59.0], [38.6, 59.0], [38.7, 59.0], [38.8, 59.0], [38.9, 59.0], [39.0, 59.0], [39.1, 59.0], [39.2, 59.0], [39.3, 59.0], [39.4, 59.0], [39.5, 59.0], [39.6, 59.0], [39.7, 59.0], [39.8, 59.0], [39.9, 59.0], [40.0, 59.0], [40.1, 59.0], [40.2, 59.0], [40.3, 59.0], [40.4, 59.0], [40.5, 59.0], [40.6, 59.0], [40.7, 59.0], [40.8, 59.0], [40.9, 59.0], [41.0, 59.0], [41.1, 59.0], [41.2, 59.0], [41.3, 59.0], [41.4, 59.0], [41.5, 59.0], [41.6, 59.0], [41.7, 59.0], [41.8, 59.0], [41.9, 59.0], [42.0, 59.0], [42.1, 59.0], [42.2, 60.0], [42.3, 60.0], [42.4, 60.0], [42.5, 60.0], [42.6, 60.0], [42.7, 60.0], [42.8, 60.0], [42.9, 60.0], [43.0, 60.0], [43.1, 60.0], [43.2, 60.0], [43.3, 60.0], [43.4, 60.0], [43.5, 60.0], [43.6, 60.0], [43.7, 60.0], [43.8, 60.0], [43.9, 60.0], [44.0, 60.0], [44.1, 60.0], [44.2, 60.0], [44.3, 60.0], [44.4, 60.0], [44.5, 60.0], [44.6, 60.0], [44.7, 60.0], [44.8, 60.0], [44.9, 60.0], [45.0, 60.0], [45.1, 60.0], [45.2, 60.0], [45.3, 60.0], [45.4, 60.0], [45.5, 60.0], [45.6, 60.0], [45.7, 60.0], [45.8, 60.0], [45.9, 60.0], [46.0, 60.0], [46.1, 60.0], [46.2, 60.0], [46.3, 60.0], [46.4, 60.0], [46.5, 60.0], [46.6, 60.0], [46.7, 60.0], [46.8, 60.0], [46.9, 60.0], [47.0, 60.0], [47.1, 60.0], [47.2, 60.0], [47.3, 60.0], [47.4, 60.0], [47.5, 60.0], [47.6, 60.0], [47.7, 61.0], [47.8, 61.0], [47.9, 61.0], [48.0, 61.0], [48.1, 61.0], [48.2, 61.0], [48.3, 61.0], [48.4, 61.0], [48.5, 61.0], [48.6, 61.0], [48.7, 61.0], [48.8, 61.0], [48.9, 61.0], [49.0, 61.0], [49.1, 61.0], [49.2, 61.0], [49.3, 61.0], [49.4, 61.0], [49.5, 61.0], [49.6, 61.0], [49.7, 61.0], [49.8, 61.0], [49.9, 61.0], [50.0, 61.0], [50.1, 62.0], [50.2, 62.0], [50.3, 62.0], [50.4, 62.0], [50.5, 62.0], [50.6, 62.0], [50.7, 62.0], [50.8, 62.0], [50.9, 62.0], [51.0, 62.0], [51.1, 62.0], [51.2, 62.0], [51.3, 62.0], [51.4, 62.0], [51.5, 62.0], [51.6, 62.0], [51.7, 62.0], [51.8, 62.0], [51.9, 62.0], [52.0, 62.0], [52.1, 62.0], [52.2, 62.0], [52.3, 62.0], [52.4, 62.0], [52.5, 62.0], [52.6, 62.0], [52.7, 62.0], [52.8, 62.0], [52.9, 62.0], [53.0, 62.0], [53.1, 62.0], [53.2, 62.0], [53.3, 62.0], [53.4, 62.0], [53.5, 62.0], [53.6, 62.0], [53.7, 63.0], [53.8, 63.0], [53.9, 63.0], [54.0, 63.0], [54.1, 63.0], [54.2, 63.0], [54.3, 63.0], [54.4, 63.0], [54.5, 63.0], [54.6, 63.0], [54.7, 63.0], [54.8, 63.0], [54.9, 63.0], [55.0, 63.0], [55.1, 63.0], [55.2, 63.0], [55.3, 63.0], [55.4, 63.0], [55.5, 63.0], [55.6, 63.0], [55.7, 63.0], [55.8, 63.0], [55.9, 63.0], [56.0, 63.0], [56.1, 63.0], [56.2, 63.0], [56.3, 63.0], [56.4, 63.0], [56.5, 63.0], [56.6, 63.0], [56.7, 63.0], [56.8, 63.0], [56.9, 63.0], [57.0, 63.0], [57.1, 63.0], [57.2, 63.0], [57.3, 63.0], [57.4, 63.0], [57.5, 63.0], [57.6, 63.0], [57.7, 63.0], [57.8, 63.0], [57.9, 63.0], [58.0, 64.0], [58.1, 64.0], [58.2, 64.0], [58.3, 64.0], [58.4, 64.0], [58.5, 64.0], [58.6, 64.0], [58.7, 64.0], [58.8, 64.0], [58.9, 64.0], [59.0, 64.0], [59.1, 64.0], [59.2, 64.0], [59.3, 64.0], [59.4, 64.0], [59.5, 64.0], [59.6, 64.0], [59.7, 64.0], [59.8, 64.0], [59.9, 64.0], [60.0, 64.0], [60.1, 64.0], [60.2, 64.0], [60.3, 64.0], [60.4, 64.0], [60.5, 64.0], [60.6, 64.0], [60.7, 64.0], [60.8, 64.0], [60.9, 64.0], [61.0, 64.0], [61.1, 64.0], [61.2, 64.0], [61.3, 64.0], [61.4, 64.0], [61.5, 64.0], [61.6, 64.0], [61.7, 64.0], [61.8, 64.0], [61.9, 64.0], [62.0, 64.0], [62.1, 64.0], [62.2, 64.0], [62.3, 64.0], [62.4, 64.0], [62.5, 64.0], [62.6, 64.0], [62.7, 64.0], [62.8, 64.0], [62.9, 64.0], [63.0, 64.0], [63.1, 64.0], [63.2, 64.0], [63.3, 64.0], [63.4, 64.0], [63.5, 64.0], [63.6, 65.0], [63.7, 65.0], [63.8, 65.0], [63.9, 65.0], [64.0, 65.0], [64.1, 65.0], [64.2, 65.0], [64.3, 65.0], [64.4, 65.0], [64.5, 65.0], [64.6, 65.0], [64.7, 65.0], [64.8, 65.0], [64.9, 65.0], [65.0, 65.0], [65.1, 65.0], [65.2, 65.0], [65.3, 65.0], [65.4, 65.0], [65.5, 65.0], [65.6, 65.0], [65.7, 66.0], [65.8, 66.0], [65.9, 66.0], [66.0, 66.0], [66.1, 66.0], [66.2, 66.0], [66.3, 66.0], [66.4, 66.0], [66.5, 66.0], [66.6, 66.0], [66.7, 66.0], [66.8, 66.0], [66.9, 66.0], [67.0, 66.0], [67.1, 66.0], [67.2, 66.0], [67.3, 66.0], [67.4, 66.0], [67.5, 66.0], [67.6, 66.0], [67.7, 66.0], [67.8, 66.0], [67.9, 66.0], [68.0, 66.0], [68.1, 66.0], [68.2, 66.0], [68.3, 66.0], [68.4, 66.0], [68.5, 66.0], [68.6, 66.0], [68.7, 67.0], [68.8, 67.0], [68.9, 67.0], [69.0, 67.0], [69.1, 67.0], [69.2, 67.0], [69.3, 67.0], [69.4, 67.0], [69.5, 67.0], [69.6, 67.0], [69.7, 67.0], [69.8, 67.0], [69.9, 67.0], [70.0, 67.0], [70.1, 67.0], [70.2, 67.0], [70.3, 67.0], [70.4, 67.0], [70.5, 67.0], [70.6, 67.0], [70.7, 67.0], [70.8, 67.0], [70.9, 67.0], [71.0, 67.0], [71.1, 67.0], [71.2, 67.0], [71.3, 67.0], [71.4, 67.0], [71.5, 67.0], [71.6, 67.0], [71.7, 67.0], [71.8, 67.0], [71.9, 67.0], [72.0, 67.0], [72.1, 67.0], [72.2, 67.0], [72.3, 67.0], [72.4, 68.0], [72.5, 68.0], [72.6, 68.0], [72.7, 68.0], [72.8, 68.0], [72.9, 68.0], [73.0, 68.0], [73.1, 68.0], [73.2, 68.0], [73.3, 68.0], [73.4, 68.0], [73.5, 68.0], [73.6, 68.0], [73.7, 68.0], [73.8, 68.0], [73.9, 68.0], [74.0, 68.0], [74.1, 68.0], [74.2, 68.0], [74.3, 68.0], [74.4, 68.0], [74.5, 68.0], [74.6, 68.0], [74.7, 68.0], [74.8, 68.0], [74.9, 68.0], [75.0, 68.0], [75.1, 68.0], [75.2, 68.0], [75.3, 68.0], [75.4, 68.0], [75.5, 68.0], [75.6, 68.0], [75.7, 68.0], [75.8, 68.0], [75.9, 68.0], [76.0, 68.0], [76.1, 68.0], [76.2, 68.0], [76.3, 68.0], [76.4, 68.0], [76.5, 68.0], [76.6, 68.0], [76.7, 68.0], [76.8, 68.0], [76.9, 69.0], [77.0, 69.0], [77.1, 69.0], [77.2, 69.0], [77.3, 69.0], [77.4, 69.0], [77.5, 69.0], [77.6, 69.0], [77.7, 69.0], [77.8, 69.0], [77.9, 69.0], [78.0, 69.0], [78.1, 69.0], [78.2, 69.0], [78.3, 69.0], [78.4, 69.0], [78.5, 69.0], [78.6, 70.0], [78.7, 70.0], [78.8, 70.0], [78.9, 70.0], [79.0, 70.0], [79.1, 70.0], [79.2, 70.0], [79.3, 70.0], [79.4, 70.0], [79.5, 70.0], [79.6, 70.0], [79.7, 70.0], [79.8, 70.0], [79.9, 70.0], [80.0, 70.0], [80.1, 70.0], [80.2, 70.0], [80.3, 70.0], [80.4, 70.0], [80.5, 70.0], [80.6, 70.0], [80.7, 70.0], [80.8, 70.0], [80.9, 70.0], [81.0, 71.0], [81.1, 71.0], [81.2, 71.0], [81.3, 71.0], [81.4, 71.0], [81.5, 71.0], [81.6, 71.0], [81.7, 71.0], [81.8, 71.0], [81.9, 71.0], [82.0, 71.0], [82.1, 71.0], [82.2, 71.0], [82.3, 71.0], [82.4, 71.0], [82.5, 71.0], [82.6, 71.0], [82.7, 71.0], [82.8, 71.0], [82.9, 71.0], [83.0, 71.0], [83.1, 71.0], [83.2, 71.0], [83.3, 71.0], [83.4, 71.0], [83.5, 71.0], [83.6, 71.0], [83.7, 71.0], [83.8, 71.0], [83.9, 71.0], [84.0, 71.0], [84.1, 72.0], [84.2, 72.0], [84.3, 72.0], [84.4, 72.0], [84.5, 72.0], [84.6, 72.0], [84.7, 72.0], [84.8, 72.0], [84.9, 72.0], [85.0, 72.0], [85.1, 72.0], [85.2, 72.0], [85.3, 72.0], [85.4, 72.0], [85.5, 72.0], [85.6, 72.0], [85.7, 72.0], [85.8, 72.0], [85.9, 72.0], [86.0, 72.0], [86.1, 72.0], [86.2, 72.0], [86.3, 72.0], [86.4, 72.0], [86.5, 72.0], [86.6, 72.0], [86.7, 72.0], [86.8, 72.0], [86.9, 72.0], [87.0, 72.0], [87.1, 72.0], [87.2, 72.0], [87.3, 72.0], [87.4, 73.0], [87.5, 73.0], [87.6, 73.0], [87.7, 73.0], [87.8, 73.0], [87.9, 73.0], [88.0, 73.0], [88.1, 73.0], [88.2, 73.0], [88.3, 74.0], [88.4, 74.0], [88.5, 74.0], [88.6, 74.0], [88.7, 74.0], [88.8, 74.0], [88.9, 74.0], [89.0, 74.0], [89.1, 74.0], [89.2, 74.0], [89.3, 74.0], [89.4, 74.0], [89.5, 74.0], [89.6, 74.0], [89.7, 74.0], [89.8, 74.0], [89.9, 74.0], [90.0, 75.0], [90.1, 75.0], [90.2, 75.0], [90.3, 75.0], [90.4, 75.0], [90.5, 75.0], [90.6, 75.0], [90.7, 75.0], [90.8, 75.0], [90.9, 75.0], [91.0, 75.0], [91.1, 75.0], [91.2, 75.0], [91.3, 75.0], [91.4, 75.0], [91.5, 75.0], [91.6, 75.0], [91.7, 75.0], [91.8, 75.0], [91.9, 76.0], [92.0, 76.0], [92.1, 76.0], [92.2, 76.0], [92.3, 76.0], [92.4, 76.0], [92.5, 76.0], [92.6, 76.0], [92.7, 76.0], [92.8, 76.0], [92.9, 76.0], [93.0, 76.0], [93.1, 76.0], [93.2, 76.0], [93.3, 76.0], [93.4, 76.0], [93.5, 76.0], [93.6, 76.0], [93.7, 76.0], [93.8, 76.0], [93.9, 76.0], [94.0, 77.0], [94.1, 77.0], [94.2, 77.0], [94.3, 77.0], [94.4, 77.0], [94.5, 77.0], [94.6, 77.0], [94.7, 78.0], [94.8, 78.0], [94.9, 78.0], [95.0, 78.0], [95.1, 78.0], [95.2, 78.0], [95.3, 78.0], [95.4, 78.0], [95.5, 79.0], [95.6, 79.0], [95.7, 79.0], [95.8, 79.0], [95.9, 79.0], [96.0, 79.0], [96.1, 79.0], [96.2, 79.0], [96.3, 79.0], [96.4, 79.0], [96.5, 80.0], [96.6, 80.0], [96.7, 80.0], [96.8, 80.0], [96.9, 80.0], [97.0, 80.0], [97.1, 80.0], [97.2, 80.0], [97.3, 80.0], [97.4, 80.0], [97.5, 80.0], [97.6, 81.0], [97.7, 81.0], [97.8, 82.0], [97.9, 82.0], [98.0, 82.0], [98.1, 82.0], [98.2, 83.0], [98.3, 83.0], [98.4, 83.0], [98.5, 83.0], [98.6, 84.0], [98.7, 84.0], [98.8, 84.0], [98.9, 84.0], [99.0, 85.0], [99.1, 85.0], [99.2, 86.0], [99.3, 87.0], [99.4, 87.0], [99.5, 88.0], [99.6, 91.0], [99.7, 94.0], [99.8, 99.0], [99.9, 107.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 521.0], [0.1, 612.0], [0.2, 800.0], [0.3, 1009.0], [0.4, 1140.0], [0.5, 1226.0], [0.6, 1316.0], [0.7, 1348.0], [0.8, 1388.0], [0.9, 1428.0], [1.0, 1454.0], [1.1, 1467.0], [1.2, 1478.0], [1.3, 1489.0], [1.4, 1507.0], [1.5, 1520.0], [1.6, 1534.0], [1.7, 1545.0], [1.8, 1559.0], [1.9, 1571.0], [2.0, 1579.0], [2.1, 1587.0], [2.2, 1593.0], [2.3, 1600.0], [2.4, 1610.0], [2.5, 1614.0], [2.6, 1623.0], [2.7, 1632.0], [2.8, 1643.0], [2.9, 1649.0], [3.0, 1655.0], [3.1, 1660.0], [3.2, 1665.0], [3.3, 1670.0], [3.4, 1676.0], [3.5, 1684.0], [3.6, 1691.0], [3.7, 1698.0], [3.8, 1700.0], [3.9, 1704.0], [4.0, 1709.0], [4.1, 1714.0], [4.2, 1717.0], [4.3, 1723.0], [4.4, 1729.0], [4.5, 1733.0], [4.6, 1737.0], [4.7, 1740.0], [4.8, 1743.0], [4.9, 1745.0], [5.0, 1748.0], [5.1, 1753.0], [5.2, 1756.0], [5.3, 1760.0], [5.4, 1764.0], [5.5, 1767.0], [5.6, 1771.0], [5.7, 1776.0], [5.8, 1780.0], [5.9, 1784.0], [6.0, 1788.0], [6.1, 1791.0], [6.2, 1794.0], [6.3, 1798.0], [6.4, 1800.0], [6.5, 1806.0], [6.6, 1809.0], [6.7, 1814.0], [6.8, 1816.0], [6.9, 1819.0], [7.0, 1823.0], [7.1, 1827.0], [7.2, 1829.0], [7.3, 1832.0], [7.4, 1835.0], [7.5, 1838.0], [7.6, 1842.0], [7.7, 1845.0], [7.8, 1849.0], [7.9, 1852.0], [8.0, 1856.0], [8.1, 1859.0], [8.2, 1862.0], [8.3, 1864.0], [8.4, 1867.0], [8.5, 1870.0], [8.6, 1872.0], [8.7, 1874.0], [8.8, 1878.0], [8.9, 1880.0], [9.0, 1884.0], [9.1, 1887.0], [9.2, 1890.0], [9.3, 1892.0], [9.4, 1896.0], [9.5, 1897.0], [9.6, 1900.0], [9.7, 1903.0], [9.8, 1905.0], [9.9, 1908.0], [10.0, 1912.0], [10.1, 1915.0], [10.2, 1916.0], [10.3, 1919.0], [10.4, 1921.0], [10.5, 1924.0], [10.6, 1927.0], [10.7, 1930.0], [10.8, 1932.0], [10.9, 1935.0], [11.0, 1937.0], [11.1, 1940.0], [11.2, 1943.0], [11.3, 1944.0], [11.4, 1947.0], [11.5, 1948.0], [11.6, 1950.0], [11.7, 1953.0], [11.8, 1955.0], [11.9, 1957.0], [12.0, 1959.0], [12.1, 1960.0], [12.2, 1964.0], [12.3, 1967.0], [12.4, 1968.0], [12.5, 1971.0], [12.6, 1972.0], [12.7, 1975.0], [12.8, 1976.0], [12.9, 1979.0], [13.0, 1980.0], [13.1, 1983.0], [13.2, 1985.0], [13.3, 1986.0], [13.4, 1988.0], [13.5, 1991.0], [13.6, 1992.0], [13.7, 1994.0], [13.8, 1996.0], [13.9, 1997.0], [14.0, 2000.0], [14.1, 2002.0], [14.2, 2004.0], [14.3, 2007.0], [14.4, 2008.0], [14.5, 2010.0], [14.6, 2012.0], [14.7, 2014.0], [14.8, 2016.0], [14.9, 2019.0], [15.0, 2020.0], [15.1, 2022.0], [15.2, 2025.0], [15.3, 2027.0], [15.4, 2029.0], [15.5, 2032.0], [15.6, 2033.0], [15.7, 2035.0], [15.8, 2036.0], [15.9, 2038.0], [16.0, 2041.0], [16.1, 2044.0], [16.2, 2045.0], [16.3, 2048.0], [16.4, 2048.0], [16.5, 2051.0], [16.6, 2052.0], [16.7, 2054.0], [16.8, 2056.0], [16.9, 2057.0], [17.0, 2060.0], [17.1, 2062.0], [17.2, 2064.0], [17.3, 2066.0], [17.4, 2068.0], [17.5, 2071.0], [17.6, 2072.0], [17.7, 2074.0], [17.8, 2076.0], [17.9, 2077.0], [18.0, 2079.0], [18.1, 2080.0], [18.2, 2081.0], [18.3, 2083.0], [18.4, 2084.0], [18.5, 2086.0], [18.6, 2088.0], [18.7, 2091.0], [18.8, 2093.0], [18.9, 2095.0], [19.0, 2097.0], [19.1, 2099.0], [19.2, 2100.0], [19.3, 2101.0], [19.4, 2103.0], [19.5, 2104.0], [19.6, 2106.0], [19.7, 2108.0], [19.8, 2109.0], [19.9, 2111.0], [20.0, 2112.0], [20.1, 2114.0], [20.2, 2116.0], [20.3, 2118.0], [20.4, 2120.0], [20.5, 2120.0], [20.6, 2123.0], [20.7, 2124.0], [20.8, 2125.0], [20.9, 2127.0], [21.0, 2128.0], [21.1, 2129.0], [21.2, 2131.0], [21.3, 2132.0], [21.4, 2133.0], [21.5, 2136.0], [21.6, 2137.0], [21.7, 2139.0], [21.8, 2140.0], [21.9, 2143.0], [22.0, 2144.0], [22.1, 2146.0], [22.2, 2147.0], [22.3, 2149.0], [22.4, 2151.0], [22.5, 2152.0], [22.6, 2153.0], [22.7, 2155.0], [22.8, 2156.0], [22.9, 2158.0], [23.0, 2160.0], [23.1, 2161.0], [23.2, 2163.0], [23.3, 2164.0], [23.4, 2166.0], [23.5, 2168.0], [23.6, 2169.0], [23.7, 2171.0], [23.8, 2172.0], [23.9, 2173.0], [24.0, 2174.0], [24.1, 2176.0], [24.2, 2177.0], [24.3, 2178.0], [24.4, 2180.0], [24.5, 2180.0], [24.6, 2182.0], [24.7, 2184.0], [24.8, 2186.0], [24.9, 2188.0], [25.0, 2189.0], [25.1, 2191.0], [25.2, 2192.0], [25.3, 2193.0], [25.4, 2195.0], [25.5, 2196.0], [25.6, 2198.0], [25.7, 2200.0], [25.8, 2200.0], [25.9, 2203.0], [26.0, 2204.0], [26.1, 2205.0], [26.2, 2206.0], [26.3, 2208.0], [26.4, 2209.0], [26.5, 2211.0], [26.6, 2212.0], [26.7, 2213.0], [26.8, 2214.0], [26.9, 2216.0], [27.0, 2216.0], [27.1, 2218.0], [27.2, 2220.0], [27.3, 2220.0], [27.4, 2223.0], [27.5, 2223.0], [27.6, 2224.0], [27.7, 2226.0], [27.8, 2227.0], [27.9, 2228.0], [28.0, 2229.0], [28.1, 2231.0], [28.2, 2232.0], [28.3, 2232.0], [28.4, 2234.0], [28.5, 2236.0], [28.6, 2237.0], [28.7, 2239.0], [28.8, 2240.0], [28.9, 2242.0], [29.0, 2244.0], [29.1, 2245.0], [29.2, 2246.0], [29.3, 2248.0], [29.4, 2249.0], [29.5, 2251.0], [29.6, 2252.0], [29.7, 2254.0], [29.8, 2255.0], [29.9, 2256.0], [30.0, 2257.0], [30.1, 2259.0], [30.2, 2260.0], [30.3, 2260.0], [30.4, 2261.0], [30.5, 2263.0], [30.6, 2264.0], [30.7, 2264.0], [30.8, 2266.0], [30.9, 2268.0], [31.0, 2268.0], [31.1, 2270.0], [31.2, 2271.0], [31.3, 2272.0], [31.4, 2273.0], [31.5, 2275.0], [31.6, 2276.0], [31.7, 2277.0], [31.8, 2279.0], [31.9, 2280.0], [32.0, 2282.0], [32.1, 2284.0], [32.2, 2286.0], [32.3, 2287.0], [32.4, 2288.0], [32.5, 2290.0], [32.6, 2292.0], [32.7, 2292.0], [32.8, 2293.0], [32.9, 2295.0], [33.0, 2296.0], [33.1, 2296.0], [33.2, 2297.0], [33.3, 2299.0], [33.4, 2300.0], [33.5, 2300.0], [33.6, 2302.0], [33.7, 2304.0], [33.8, 2304.0], [33.9, 2306.0], [34.0, 2307.0], [34.1, 2308.0], [34.2, 2310.0], [34.3, 2312.0], [34.4, 2312.0], [34.5, 2313.0], [34.6, 2315.0], [34.7, 2316.0], [34.8, 2318.0], [34.9, 2319.0], [35.0, 2320.0], [35.1, 2321.0], [35.2, 2322.0], [35.3, 2324.0], [35.4, 2325.0], [35.5, 2327.0], [35.6, 2328.0], [35.7, 2329.0], [35.8, 2330.0], [35.9, 2331.0], [36.0, 2332.0], [36.1, 2333.0], [36.2, 2335.0], [36.3, 2336.0], [36.4, 2336.0], [36.5, 2338.0], [36.6, 2340.0], [36.7, 2340.0], [36.8, 2342.0], [36.9, 2343.0], [37.0, 2344.0], [37.1, 2345.0], [37.2, 2347.0], [37.3, 2348.0], [37.4, 2349.0], [37.5, 2351.0], [37.6, 2352.0], [37.7, 2353.0], [37.8, 2355.0], [37.9, 2356.0], [38.0, 2357.0], [38.1, 2358.0], [38.2, 2360.0], [38.3, 2361.0], [38.4, 2363.0], [38.5, 2364.0], [38.6, 2365.0], [38.7, 2366.0], [38.8, 2367.0], [38.9, 2368.0], [39.0, 2369.0], [39.1, 2371.0], [39.2, 2372.0], [39.3, 2373.0], [39.4, 2375.0], [39.5, 2376.0], [39.6, 2377.0], [39.7, 2379.0], [39.8, 2380.0], [39.9, 2381.0], [40.0, 2383.0], [40.1, 2384.0], [40.2, 2384.0], [40.3, 2385.0], [40.4, 2387.0], [40.5, 2389.0], [40.6, 2391.0], [40.7, 2392.0], [40.8, 2394.0], [40.9, 2395.0], [41.0, 2396.0], [41.1, 2396.0], [41.2, 2398.0], [41.3, 2399.0], [41.4, 2400.0], [41.5, 2401.0], [41.6, 2402.0], [41.7, 2403.0], [41.8, 2404.0], [41.9, 2406.0], [42.0, 2408.0], [42.1, 2408.0], [42.2, 2410.0], [42.3, 2412.0], [42.4, 2413.0], [42.5, 2415.0], [42.6, 2416.0], [42.7, 2417.0], [42.8, 2419.0], [42.9, 2420.0], [43.0, 2421.0], [43.1, 2422.0], [43.2, 2424.0], [43.3, 2424.0], [43.4, 2425.0], [43.5, 2427.0], [43.6, 2429.0], [43.7, 2431.0], [43.8, 2432.0], [43.9, 2432.0], [44.0, 2434.0], [44.1, 2435.0], [44.2, 2436.0], [44.3, 2437.0], [44.4, 2438.0], [44.5, 2439.0], [44.6, 2440.0], [44.7, 2441.0], [44.8, 2443.0], [44.9, 2444.0], [45.0, 2445.0], [45.1, 2447.0], [45.2, 2448.0], [45.3, 2449.0], [45.4, 2451.0], [45.5, 2452.0], [45.6, 2452.0], [45.7, 2455.0], [45.8, 2456.0], [45.9, 2456.0], [46.0, 2457.0], [46.1, 2459.0], [46.2, 2460.0], [46.3, 2461.0], [46.4, 2463.0], [46.5, 2464.0], [46.6, 2466.0], [46.7, 2467.0], [46.8, 2468.0], [46.9, 2469.0], [47.0, 2471.0], [47.1, 2472.0], [47.2, 2472.0], [47.3, 2474.0], [47.4, 2475.0], [47.5, 2476.0], [47.6, 2477.0], [47.7, 2479.0], [47.8, 2480.0], [47.9, 2481.0], [48.0, 2483.0], [48.1, 2484.0], [48.2, 2485.0], [48.3, 2487.0], [48.4, 2488.0], [48.5, 2489.0], [48.6, 2491.0], [48.7, 2492.0], [48.8, 2493.0], [48.9, 2494.0], [49.0, 2496.0], [49.1, 2497.0], [49.2, 2499.0], [49.3, 2500.0], [49.4, 2501.0], [49.5, 2503.0], [49.6, 2504.0], [49.7, 2506.0], [49.8, 2508.0], [49.9, 2508.0], [50.0, 2510.0], [50.1, 2512.0], [50.2, 2512.0], [50.3, 2514.0], [50.4, 2515.0], [50.5, 2517.0], [50.6, 2518.0], [50.7, 2519.0], [50.8, 2520.0], [50.9, 2521.0], [51.0, 2523.0], [51.1, 2524.0], [51.2, 2525.0], [51.3, 2527.0], [51.4, 2528.0], [51.5, 2529.0], [51.6, 2530.0], [51.7, 2532.0], [51.8, 2532.0], [51.9, 2533.0], [52.0, 2535.0], [52.1, 2536.0], [52.2, 2536.0], [52.3, 2537.0], [52.4, 2539.0], [52.5, 2540.0], [52.6, 2542.0], [52.7, 2543.0], [52.8, 2544.0], [52.9, 2545.0], [53.0, 2546.0], [53.1, 2547.0], [53.2, 2548.0], [53.3, 2549.0], [53.4, 2551.0], [53.5, 2552.0], [53.6, 2553.0], [53.7, 2555.0], [53.8, 2556.0], [53.9, 2557.0], [54.0, 2559.0], [54.1, 2560.0], [54.2, 2561.0], [54.3, 2563.0], [54.4, 2564.0], [54.5, 2565.0], [54.6, 2566.0], [54.7, 2568.0], [54.8, 2569.0], [54.9, 2570.0], [55.0, 2572.0], [55.1, 2572.0], [55.2, 2574.0], [55.3, 2575.0], [55.4, 2576.0], [55.5, 2578.0], [55.6, 2579.0], [55.7, 2580.0], [55.8, 2582.0], [55.9, 2583.0], [56.0, 2584.0], [56.1, 2584.0], [56.2, 2585.0], [56.3, 2587.0], [56.4, 2588.0], [56.5, 2590.0], [56.6, 2591.0], [56.7, 2592.0], [56.8, 2593.0], [56.9, 2593.0], [57.0, 2595.0], [57.1, 2596.0], [57.2, 2597.0], [57.3, 2599.0], [57.4, 2600.0], [57.5, 2601.0], [57.6, 2603.0], [57.7, 2604.0], [57.8, 2606.0], [57.9, 2608.0], [58.0, 2609.0], [58.1, 2610.0], [58.2, 2611.0], [58.3, 2612.0], [58.4, 2614.0], [58.5, 2615.0], [58.6, 2617.0], [58.7, 2619.0], [58.8, 2620.0], [58.9, 2620.0], [59.0, 2622.0], [59.1, 2623.0], [59.2, 2624.0], [59.3, 2626.0], [59.4, 2627.0], [59.5, 2628.0], [59.6, 2630.0], [59.7, 2631.0], [59.8, 2632.0], [59.9, 2634.0], [60.0, 2636.0], [60.1, 2637.0], [60.2, 2639.0], [60.3, 2639.0], [60.4, 2640.0], [60.5, 2641.0], [60.6, 2644.0], [60.7, 2644.0], [60.8, 2645.0], [60.9, 2648.0], [61.0, 2649.0], [61.1, 2651.0], [61.2, 2652.0], [61.3, 2653.0], [61.4, 2655.0], [61.5, 2655.0], [61.6, 2656.0], [61.7, 2658.0], [61.8, 2660.0], [61.9, 2660.0], [62.0, 2662.0], [62.1, 2663.0], [62.2, 2664.0], [62.3, 2666.0], [62.4, 2667.0], [62.5, 2669.0], [62.6, 2670.0], [62.7, 2672.0], [62.8, 2673.0], [62.9, 2675.0], [63.0, 2676.0], [63.1, 2677.0], [63.2, 2679.0], [63.3, 2680.0], [63.4, 2682.0], [63.5, 2683.0], [63.6, 2684.0], [63.7, 2687.0], [63.8, 2688.0], [63.9, 2689.0], [64.0, 2691.0], [64.1, 2692.0], [64.2, 2693.0], [64.3, 2695.0], [64.4, 2695.0], [64.5, 2697.0], [64.6, 2698.0], [64.7, 2700.0], [64.8, 2702.0], [64.9, 2704.0], [65.0, 2705.0], [65.1, 2707.0], [65.2, 2708.0], [65.3, 2711.0], [65.4, 2712.0], [65.5, 2713.0], [65.6, 2715.0], [65.7, 2716.0], [65.8, 2717.0], [65.9, 2720.0], [66.0, 2720.0], [66.1, 2722.0], [66.2, 2723.0], [66.3, 2724.0], [66.4, 2727.0], [66.5, 2728.0], [66.6, 2729.0], [66.7, 2731.0], [66.8, 2732.0], [66.9, 2734.0], [67.0, 2735.0], [67.1, 2736.0], [67.2, 2739.0], [67.3, 2740.0], [67.4, 2742.0], [67.5, 2743.0], [67.6, 2744.0], [67.7, 2746.0], [67.8, 2747.0], [67.9, 2749.0], [68.0, 2751.0], [68.1, 2752.0], [68.2, 2754.0], [68.3, 2756.0], [68.4, 2757.0], [68.5, 2759.0], [68.6, 2760.0], [68.7, 2762.0], [68.8, 2764.0], [68.9, 2764.0], [69.0, 2767.0], [69.1, 2767.0], [69.2, 2768.0], [69.3, 2769.0], [69.4, 2771.0], [69.5, 2772.0], [69.6, 2774.0], [69.7, 2776.0], [69.8, 2778.0], [69.9, 2780.0], [70.0, 2781.0], [70.1, 2783.0], [70.2, 2784.0], [70.3, 2786.0], [70.4, 2787.0], [70.5, 2788.0], [70.6, 2789.0], [70.7, 2792.0], [70.8, 2793.0], [70.9, 2795.0], [71.0, 2796.0], [71.1, 2797.0], [71.2, 2799.0], [71.3, 2800.0], [71.4, 2803.0], [71.5, 2804.0], [71.6, 2805.0], [71.7, 2807.0], [71.8, 2808.0], [71.9, 2810.0], [72.0, 2811.0], [72.1, 2813.0], [72.2, 2815.0], [72.3, 2816.0], [72.4, 2817.0], [72.5, 2819.0], [72.6, 2820.0], [72.7, 2822.0], [72.8, 2824.0], [72.9, 2825.0], [73.0, 2827.0], [73.1, 2829.0], [73.2, 2831.0], [73.3, 2832.0], [73.4, 2833.0], [73.5, 2835.0], [73.6, 2836.0], [73.7, 2838.0], [73.8, 2839.0], [73.9, 2841.0], [74.0, 2843.0], [74.1, 2844.0], [74.2, 2846.0], [74.3, 2847.0], [74.4, 2848.0], [74.5, 2849.0], [74.6, 2851.0], [74.7, 2852.0], [74.8, 2853.0], [74.9, 2855.0], [75.0, 2856.0], [75.1, 2859.0], [75.2, 2861.0], [75.3, 2863.0], [75.4, 2865.0], [75.5, 2868.0], [75.6, 2869.0], [75.7, 2871.0], [75.8, 2872.0], [75.9, 2874.0], [76.0, 2876.0], [76.1, 2877.0], [76.2, 2880.0], [76.3, 2880.0], [76.4, 2881.0], [76.5, 2883.0], [76.6, 2884.0], [76.7, 2885.0], [76.8, 2888.0], [76.9, 2890.0], [77.0, 2891.0], [77.1, 2892.0], [77.2, 2894.0], [77.3, 2897.0], [77.4, 2899.0], [77.5, 2900.0], [77.6, 2903.0], [77.7, 2904.0], [77.8, 2907.0], [77.9, 2908.0], [78.0, 2910.0], [78.1, 2912.0], [78.2, 2914.0], [78.3, 2916.0], [78.4, 2917.0], [78.5, 2919.0], [78.6, 2923.0], [78.7, 2924.0], [78.8, 2925.0], [78.9, 2928.0], [79.0, 2929.0], [79.1, 2931.0], [79.2, 2932.0], [79.3, 2935.0], [79.4, 2936.0], [79.5, 2939.0], [79.6, 2940.0], [79.7, 2943.0], [79.8, 2944.0], [79.9, 2946.0], [80.0, 2948.0], [80.1, 2950.0], [80.2, 2952.0], [80.3, 2953.0], [80.4, 2955.0], [80.5, 2956.0], [80.6, 2959.0], [80.7, 2960.0], [80.8, 2961.0], [80.9, 2963.0], [81.0, 2965.0], [81.1, 2967.0], [81.2, 2968.0], [81.3, 2970.0], [81.4, 2972.0], [81.5, 2974.0], [81.6, 2976.0], [81.7, 2979.0], [81.8, 2980.0], [81.9, 2981.0], [82.0, 2984.0], [82.1, 2985.0], [82.2, 2988.0], [82.3, 2989.0], [82.4, 2991.0], [82.5, 2993.0], [82.6, 2996.0], [82.7, 2997.0], [82.8, 3000.0], [82.9, 3003.0], [83.0, 3004.0], [83.1, 3006.0], [83.2, 3008.0], [83.3, 3010.0], [83.4, 3012.0], [83.5, 3013.0], [83.6, 3015.0], [83.7, 3018.0], [83.8, 3020.0], [83.9, 3020.0], [84.0, 3022.0], [84.1, 3024.0], [84.2, 3027.0], [84.3, 3028.0], [84.4, 3031.0], [84.5, 3034.0], [84.6, 3036.0], [84.7, 3039.0], [84.8, 3041.0], [84.9, 3044.0], [85.0, 3047.0], [85.1, 3049.0], [85.2, 3054.0], [85.3, 3056.0], [85.4, 3060.0], [85.5, 3061.0], [85.6, 3064.0], [85.7, 3067.0], [85.8, 3068.0], [85.9, 3071.0], [86.0, 3072.0], [86.1, 3076.0], [86.2, 3078.0], [86.3, 3080.0], [86.4, 3083.0], [86.5, 3085.0], [86.6, 3088.0], [86.7, 3089.0], [86.8, 3093.0], [86.9, 3094.0], [87.0, 3097.0], [87.1, 3099.0], [87.2, 3100.0], [87.3, 3102.0], [87.4, 3104.0], [87.5, 3107.0], [87.6, 3110.0], [87.7, 3112.0], [87.8, 3115.0], [87.9, 3116.0], [88.0, 3119.0], [88.1, 3121.0], [88.2, 3124.0], [88.3, 3126.0], [88.4, 3129.0], [88.5, 3132.0], [88.6, 3135.0], [88.7, 3138.0], [88.8, 3140.0], [88.9, 3144.0], [89.0, 3147.0], [89.1, 3148.0], [89.2, 3152.0], [89.3, 3155.0], [89.4, 3159.0], [89.5, 3161.0], [89.6, 3165.0], [89.7, 3168.0], [89.8, 3171.0], [89.9, 3172.0], [90.0, 3176.0], [90.1, 3180.0], [90.2, 3182.0], [90.3, 3184.0], [90.4, 3188.0], [90.5, 3192.0], [90.6, 3195.0], [90.7, 3198.0], [90.8, 3200.0], [90.9, 3203.0], [91.0, 3206.0], [91.1, 3208.0], [91.2, 3210.0], [91.3, 3214.0], [91.4, 3216.0], [91.5, 3220.0], [91.6, 3224.0], [91.7, 3228.0], [91.8, 3231.0], [91.9, 3236.0], [92.0, 3240.0], [92.1, 3243.0], [92.2, 3247.0], [92.3, 3251.0], [92.4, 3259.0], [92.5, 3261.0], [92.6, 3267.0], [92.7, 3271.0], [92.8, 3274.0], [92.9, 3279.0], [93.0, 3283.0], [93.1, 3288.0], [93.2, 3290.0], [93.3, 3295.0], [93.4, 3299.0], [93.5, 3305.0], [93.6, 3309.0], [93.7, 3316.0], [93.8, 3318.0], [93.9, 3323.0], [94.0, 3327.0], [94.1, 3329.0], [94.2, 3336.0], [94.3, 3339.0], [94.4, 3345.0], [94.5, 3351.0], [94.6, 3356.0], [94.7, 3360.0], [94.8, 3365.0], [94.9, 3368.0], [95.0, 3374.0], [95.1, 3379.0], [95.2, 3387.0], [95.3, 3392.0], [95.4, 3396.0], [95.5, 3400.0], [95.6, 3407.0], [95.7, 3412.0], [95.8, 3419.0], [95.9, 3425.0], [96.0, 3436.0], [96.1, 3444.0], [96.2, 3450.0], [96.3, 3457.0], [96.4, 3464.0], [96.5, 3472.0], [96.6, 3482.0], [96.7, 3491.0], [96.8, 3496.0], [96.9, 3507.0], [97.0, 3512.0], [97.1, 3518.0], [97.2, 3531.0], [97.3, 3540.0], [97.4, 3553.0], [97.5, 3564.0], [97.6, 3576.0], [97.7, 3584.0], [97.8, 3595.0], [97.9, 3607.0], [98.0, 3616.0], [98.1, 3635.0], [98.2, 3647.0], [98.3, 3657.0], [98.4, 3669.0], [98.5, 3688.0], [98.6, 3702.0], [98.7, 3724.0], [98.8, 3746.0], [98.9, 3772.0], [99.0, 3796.0], [99.1, 3817.0], [99.2, 3857.0], [99.3, 3892.0], [99.4, 3932.0], [99.5, 3970.0], [99.6, 4033.0], [99.7, 4138.0], [99.8, 9757.0], [99.9, 10635.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 15968.0, "series": [{"data": [[0.0, 15968.0], [100.0, 32.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[600.0, 8.0], [700.0, 9.0], [800.0, 10.0], [900.0, 6.0], [1000.0, 14.0], [1100.0, 16.0], [1200.0, 14.0], [1300.0, 39.0], [1400.0, 85.0], [1500.0, 152.0], [1600.0, 232.0], [1700.0, 414.0], [1800.0, 518.0], [1900.0, 708.0], [2000.0, 820.0], [2100.0, 1050.0], [2300.0, 1286.0], [2200.0, 1226.0], [2400.0, 1256.0], [2500.0, 1294.0], [2600.0, 1175.0], [2700.0, 1053.0], [2800.0, 992.0], [2900.0, 853.0], [3000.0, 694.0], [3100.0, 584.0], [3300.0, 329.0], [3200.0, 425.0], [3400.0, 217.0], [3500.0, 162.0], [3600.0, 120.0], [3700.0, 69.0], [3800.0, 46.0], [3900.0, 40.0], [4000.0, 19.0], [4200.0, 6.0], [4100.0, 8.0], [4300.0, 2.0], [4400.0, 2.0], [4600.0, 1.0], [9700.0, 1.0], [9900.0, 2.0], [10100.0, 2.0], [10200.0, 4.0], [10300.0, 1.0], [10400.0, 2.0], [10500.0, 3.0], [10600.0, 8.0], [10700.0, 4.0], [10900.0, 4.0], [11000.0, 1.0], [500.0, 14.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 11000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 218.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 16000.0, "series": [{"data": [[0.0, 16000.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 218.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 15782.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 25.380520951302383, "minX": 1.74602208E12, "maxY": 32.0, "series": [{"data": [[1.7460228E12, 32.0], [1.7460225E12, 32.0], [1.74602316E12, 32.0], [1.7460222E12, 32.0], [1.74602286E12, 32.0], [1.74602304E12, 32.0], [1.74602208E12, 27.799999999999994], [1.74602274E12, 32.0], [1.7460234E12, 25.380520951302383], [1.74602244E12, 32.0], [1.7460231E12, 32.0], [1.74602214E12, 32.0], [1.74602328E12, 32.0], [1.74602232E12, 32.0], [1.74602298E12, 32.0], [1.74602268E12, 32.0], [1.74602334E12, 31.99588194921071], [1.74602238E12, 32.0], [1.74602256E12, 32.0], [1.74602322E12, 32.0], [1.74602226E12, 32.0], [1.74602292E12, 32.0], [1.74602262E12, 32.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7460234E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 7.75, "minX": 1.0, "maxY": 2587.8805031446554, "series": [{"data": [[32.0, 61.573359073358965], [3.0, 7.75], [4.0, 9.0], [5.0, 9.0], [6.0, 9.285714285714285], [7.0, 9.0], [8.0, 10.0], [9.0, 12.2], [10.0, 16.333333333333332], [11.0, 16.636363636363637], [12.0, 19.125], [13.0, 43.8], [14.0, 46.2], [15.0, 40.875], [16.0, 48.24999999999999], [1.0, 8.0], [17.0, 62.625], [18.0, 48.5], [19.0, 56.42857142857143], [20.0, 11.0], [21.0, 39.333333333333336], [22.0, 50.5], [23.0, 56.1], [24.0, 28.5], [25.0, 57.04166666666667], [26.0, 46.666666666666664], [27.0, 10.0], [28.0, 51.9], [29.0, 62.574468085106375], [30.0, 63.29333333333335], [31.0, 60.31210191082803]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[31.805812499999988, 61.34768750000009]], "isOverall": false, "label": "Create CSR-Aggregated", "isController": false}, {"data": [[32.0, 2554.3957528957676], [2.0, 535.0], [3.0, 555.6], [4.0, 580.5], [5.0, 589.0], [6.0, 622.2857142857142], [7.0, 699.0], [8.0, 724.6], [9.0, 785.1666666666667], [10.0, 818.25], [11.0, 944.6666666666667], [12.0, 1158.0], [13.0, 1099.6666666666665], [14.0, 1143.0], [15.0, 1187.9999999999998], [16.0, 1293.8571428571427], [1.0, 525.0], [17.0, 1539.4444444444443], [18.0, 1389.5], [19.0, 1560.7666666666669], [20.0, 2146.0], [21.0, 1911.0], [22.0, 2072.375], [23.0, 1975.875], [24.0, 1845.75], [25.0, 2204.0], [26.0, 2271.2], [27.0, 2342.5], [28.0, 2453.5999999999995], [29.0, 2430.978723404255], [30.0, 2519.9999999999995], [31.0, 2587.8805031446554]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}, {"data": [[31.802250000000022, 2542.0491250000123]], "isOverall": false, "label": "HTTP Request - enroll-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 32.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 482.1, "minX": 1.74602208E12, "maxY": 39253.26666666667, "series": [{"data": [[1.7460228E12, 39253.26666666667], [1.7460225E12, 38716.6], [1.74602316E12, 38295.166666666664], [1.7460222E12, 38785.3], [1.74602286E12, 38612.2], [1.74602304E12, 37519.666666666664], [1.74602208E12, 1983.0333333333333], [1.74602274E12, 39138.26666666667], [1.7460234E12, 23618.3], [1.74602244E12, 38357.666666666664], [1.7460231E12, 38154.933333333334], [1.74602214E12, 38774.5], [1.74602328E12, 37946.816666666666], [1.74602232E12, 38565.833333333336], [1.74602298E12, 38310.583333333336], [1.74602268E12, 38820.916666666664], [1.74602334E12, 37936.166666666664], [1.74602238E12, 37998.7], [1.74602256E12, 38414.78333333333], [1.74602322E12, 37998.9], [1.74602226E12, 38768.9], [1.74602292E12, 38409.48333333333], [1.74602262E12, 38352.316666666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7460228E12, 10383.9], [1.7460225E12, 10246.1], [1.74602316E12, 10136.3], [1.7460222E12, 10260.4], [1.74602286E12, 10218.4], [1.74602304E12, 9929.9], [1.74602208E12, 482.1], [1.74602274E12, 10356.1], [1.7460234E12, 6293.8], [1.74602244E12, 10150.0], [1.7460231E12, 10094.8], [1.74602214E12, 10260.1], [1.74602328E12, 10039.6], [1.74602232E12, 10204.7], [1.74602298E12, 10135.9], [1.74602268E12, 10274.0], [1.74602334E12, 10040.3], [1.74602238E12, 10053.7], [1.74602256E12, 10163.3], [1.74602322E12, 10053.2], [1.74602226E12, 10260.4], [1.74602292E12, 10163.1], [1.74602262E12, 10149.9]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7460234E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 52.72307692307692, "minX": 1.74602208E12, "maxY": 9797.828571428572, "series": [{"data": [[1.7460228E12, 60.570105820105844], [1.7460225E12, 61.83580080753701], [1.74602316E12, 61.23433242506815], [1.7460222E12, 61.67469879518075], [1.74602286E12, 59.80296896086366], [1.74602304E12, 61.99305555555549], [1.74602208E12, 52.72307692307692], [1.74602274E12, 60.47207446808511], [1.7460234E12, 56.01877934272302], [1.74602244E12, 61.77204884667573], [1.7460231E12, 61.39237057220707], [1.74602214E12, 63.660402684563756], [1.74602328E12, 60.79726027397258], [1.74602232E12, 62.7300944669366], [1.74602298E12, 61.09769335142463], [1.74602268E12, 60.36912751677851], [1.74602334E12, 61.68406593406597], [1.74602238E12, 61.852257181942555], [1.74602256E12, 62.8281461434371], [1.74602322E12, 61.00820793433655], [1.74602226E12, 62.14784946236558], [1.74602292E12, 61.55013550135502], [1.74602262E12, 61.68885869565221]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.7460228E12, 2486.999999999999], [1.7460225E12, 2527.1612903225787], [1.74602316E12, 2556.9076086956534], [1.7460222E12, 2515.3798657718116], [1.74602286E12, 2512.7789757412397], [1.74602304E12, 2595.5312066574174], [1.74602208E12, 9797.828571428572], [1.74602274E12, 2511.0744680851035], [1.7460234E12, 2121.5645514223206], [1.74602244E12, 2529.405698778831], [1.7460231E12, 2555.3315143246937], [1.74602214E12, 2532.2201342281896], [1.74602328E12, 2562.36488340192], [1.74602232E12, 2524.4561403508797], [1.74602298E12, 2543.288043478263], [1.74602268E12, 2512.0281501340464], [1.74602334E12, 2573.375857338819], [1.74602238E12, 2570.2863013698616], [1.74602256E12, 2540.0731707317086], [1.74602322E12, 2565.013698630136], [1.74602226E12, 2520.8510067114116], [1.74602292E12, 2539.485094850951], [1.74602262E12, 2530.8141112618737]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7460234E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74602208E12, "maxY": 9797.828571428572, "series": [{"data": [[1.7460228E12, 0.0], [1.7460225E12, 0.0], [1.74602316E12, 0.0], [1.7460222E12, 0.0], [1.74602286E12, 0.0], [1.74602304E12, 0.0], [1.74602208E12, 0.0], [1.74602274E12, 0.0], [1.7460234E12, 0.0], [1.74602244E12, 0.0], [1.7460231E12, 0.0], [1.74602214E12, 0.0], [1.74602328E12, 0.0], [1.74602232E12, 0.0], [1.74602298E12, 0.0], [1.74602268E12, 0.0], [1.74602334E12, 0.0], [1.74602238E12, 0.0], [1.74602256E12, 0.0], [1.74602322E12, 0.0], [1.74602226E12, 0.0], [1.74602292E12, 0.0], [1.74602262E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.7460228E12, 2486.992042440317], [1.7460225E12, 2527.1518817204287], [1.74602316E12, 2556.896739130437], [1.7460222E12, 2515.365100671141], [1.74602286E12, 2512.769541778975], [1.74602304E12, 2595.517337031901], [1.74602208E12, 9797.828571428572], [1.74602274E12, 2511.0731382978697], [1.7460234E12, 2121.555798687089], [1.74602244E12, 2529.390773405699], [1.7460231E12, 2555.3246930422906], [1.74602214E12, 2532.1825503355694], [1.74602328E12, 2562.3580246913566], [1.74602232E12, 2524.4412955465564], [1.74602298E12, 2543.2812500000027], [1.74602268E12, 2512.0187667560294], [1.74602334E12, 2573.3731138545945], [1.74602238E12, 2570.2698630136965], [1.74602256E12, 2540.0691056910587], [1.74602322E12, 2565.0041095890406], [1.74602226E12, 2520.8295302013425], [1.74602292E12, 2539.4783197832003], [1.74602262E12, 2530.812754409774]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7460234E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74602208E12, "maxY": 434.9428571428572, "series": [{"data": [[1.7460228E12, 0.0], [1.7460225E12, 0.0], [1.74602316E12, 0.0], [1.7460222E12, 0.0], [1.74602286E12, 0.0], [1.74602304E12, 0.0], [1.74602208E12, 0.0], [1.74602274E12, 0.0], [1.7460234E12, 0.0], [1.74602244E12, 0.0], [1.7460231E12, 0.0], [1.74602214E12, 0.0], [1.74602328E12, 0.0], [1.74602232E12, 0.0], [1.74602298E12, 0.0], [1.74602268E12, 0.0], [1.74602334E12, 0.0], [1.74602238E12, 0.0], [1.74602256E12, 0.0], [1.74602322E12, 0.0], [1.74602226E12, 0.0], [1.74602292E12, 0.0], [1.74602262E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.7460228E12, 0.19496021220159163], [1.7460225E12, 0.2540322580645162], [1.74602316E12, 0.22146739130434778], [1.7460222E12, 0.3395973154362414], [1.74602286E12, 0.23989218328840986], [1.74602304E12, 0.1927877947295418], [1.74602208E12, 434.9428571428572], [1.74602274E12, 0.28457446808510595], [1.7460234E12, 0.3763676148796502], [1.74602244E12, 0.24830393487109917], [1.7460231E12, 0.24420190995907257], [1.74602214E12, 0.4268456375838921], [1.74602328E12, 0.31138545953360797], [1.74602232E12, 0.290148448043185], [1.74602298E12, 0.24864130434782564], [1.74602268E12, 0.184986595174263], [1.74602334E12, 0.3072702331961596], [1.74602238E12, 0.24520547945205476], [1.74602256E12, 0.2127371273712736], [1.74602322E12, 0.24931506849315058], [1.74602226E12, 0.32483221476510066], [1.74602292E12, 0.22628726287262896], [1.74602262E12, 0.19267299864314816]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7460234E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 7.0, "minX": 1.74602208E12, "maxY": 11009.0, "series": [{"data": [[1.7460228E12, 3958.0], [1.7460225E12, 4018.0], [1.74602316E12, 4070.0], [1.7460222E12, 4205.0], [1.74602286E12, 3984.0], [1.74602304E12, 4680.0], [1.74602208E12, 11009.0], [1.74602274E12, 3813.0], [1.7460234E12, 3845.0], [1.74602244E12, 4075.0], [1.7460231E12, 4100.0], [1.74602214E12, 3957.0], [1.74602328E12, 4169.0], [1.74602232E12, 4207.0], [1.74602298E12, 4204.0], [1.74602268E12, 4248.0], [1.74602334E12, 4398.0], [1.74602238E12, 4250.0], [1.74602256E12, 4080.0], [1.74602322E12, 3942.0], [1.74602226E12, 4167.0], [1.74602292E12, 4306.0], [1.74602262E12, 3971.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7460228E12, 2893.8], [1.7460225E12, 2953.2], [1.74602316E12, 2969.8], [1.7460222E12, 2924.0], [1.74602286E12, 2906.4000000000005], [1.74602304E12, 2974.3999999999996], [1.74602208E12, 10693.8], [1.74602274E12, 2867.0], [1.7460234E12, 2782.4], [1.74602244E12, 2935.5], [1.7460231E12, 2988.0], [1.74602214E12, 2984.6000000000004], [1.74602328E12, 2947.0], [1.74602232E12, 2918.7], [1.74602298E12, 2980.0], [1.74602268E12, 2892.8], [1.74602334E12, 2996.6000000000004], [1.74602238E12, 3033.0], [1.74602256E12, 2972.8], [1.74602322E12, 2973.0], [1.74602226E12, 2952.0], [1.74602292E12, 2964.5], [1.74602262E12, 2940.2000000000003]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7460228E12, 3441.800000000002], [1.7460225E12, 3565.6799999999985], [1.74602316E12, 3545.87], [1.7460222E12, 3663.029999999998], [1.74602286E12, 3391.7200000000057], [1.74602304E12, 3730.199999999997], [1.74602208E12, 11008.619999999999], [1.74602274E12, 3460.700000000002], [1.7460234E12, 3344.16], [1.74602244E12, 3541.0], [1.7460231E12, 3620.159999999999], [1.74602214E12, 3657.18], [1.74602328E12, 3581.8000000000006], [1.74602232E12, 3636.6800000000003], [1.74602298E12, 3545.8599999999997], [1.74602268E12, 3576.7199999999993], [1.74602334E12, 3859.42], [1.74602238E12, 3637.5199999999995], [1.74602256E12, 3630.4400000000014], [1.74602322E12, 3607.38], [1.74602226E12, 3640.5999999999976], [1.74602292E12, 3689.500000000001], [1.74602262E12, 3462.08]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7460228E12, 3088.45], [1.7460225E12, 3152.6], [1.74602316E12, 3205.25], [1.7460222E12, 3156.199999999999], [1.74602286E12, 3112.8], [1.74602304E12, 3207.8999999999996], [1.74602208E12, 10914.099999999999], [1.74602274E12, 3069.5], [1.7460234E12, 3039.8], [1.74602244E12, 3149.5], [1.7460231E12, 3210.1999999999994], [1.74602214E12, 3221.3500000000004], [1.74602328E12, 3177.0], [1.74602232E12, 3188.2499999999995], [1.74602298E12, 3191.0999999999995], [1.74602268E12, 3128.7999999999997], [1.74602334E12, 3251.299999999999], [1.74602238E12, 3247.5999999999995], [1.74602256E12, 3221.5999999999995], [1.74602322E12, 3200.0], [1.74602226E12, 3184.5], [1.74602292E12, 3180.2999999999997], [1.74602262E12, 3127.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7460228E12, 25.0], [1.7460225E12, 32.0], [1.74602316E12, 28.0], [1.7460222E12, 32.0], [1.74602286E12, 23.0], [1.74602304E12, 23.0], [1.74602208E12, 8.0], [1.74602274E12, 34.0], [1.7460234E12, 7.0], [1.74602244E12, 30.0], [1.7460231E12, 31.0], [1.74602214E12, 30.0], [1.74602328E12, 20.0], [1.74602232E12, 29.0], [1.74602298E12, 28.0], [1.74602268E12, 18.0], [1.74602334E12, 30.0], [1.74602238E12, 21.0], [1.74602256E12, 32.0], [1.74602322E12, 22.0], [1.74602226E12, 31.0], [1.74602292E12, 33.0], [1.74602262E12, 32.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7460228E12, 110.5], [1.7460225E12, 1408.0], [1.74602316E12, 1336.0], [1.7460222E12, 98.5], [1.74602286E12, 1226.0], [1.74602304E12, 1194.0], [1.74602208E12, 82.0], [1.74602274E12, 584.5], [1.7460234E12, 612.0], [1.74602244E12, 715.0], [1.7460231E12, 100.0], [1.74602214E12, 668.0], [1.74602328E12, 108.0], [1.74602232E12, 721.5], [1.74602298E12, 96.0], [1.74602268E12, 1354.0], [1.74602334E12, 1348.0], [1.74602238E12, 159.0], [1.74602256E12, 119.0], [1.74602322E12, 93.0], [1.74602226E12, 1293.0], [1.74602292E12, 749.0], [1.74602262E12, 1348.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7460234E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 59.0, "minX": 1.0, "maxY": 1963.0, "series": [{"data": [[32.0, 131.0], [33.0, 125.0], [34.0, 85.5], [35.0, 83.5], [36.0, 83.5], [37.0, 1647.0], [38.0, 1736.5], [39.0, 1516.0], [40.0, 79.5], [41.0, 79.0], [43.0, 82.0], [42.0, 78.5], [44.0, 81.0], [45.0, 72.0], [46.0, 957.5], [4.0, 1963.0], [8.0, 59.0], [9.0, 70.0], [10.0, 532.0], [11.0, 79.0], [12.0, 1632.0], [13.0, 589.0], [14.0, 1625.5], [15.0, 743.5], [16.0, 1621.0], [1.0, 521.0], [17.0, 82.0], [18.0, 1461.0], [19.0, 1458.0], [20.0, 87.0], [21.0, 1259.5], [22.0, 84.0], [23.0, 1491.5], [24.0, 522.5], [25.0, 596.5], [26.0, 990.5], [27.0, 87.5], [28.0, 1448.5], [29.0, 101.5], [30.0, 1363.5], [31.0, 782.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 46.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 1963.0, "series": [{"data": [[32.0, 0.0], [33.0, 0.0], [34.0, 0.0], [35.0, 0.0], [36.0, 0.0], [37.0, 1647.0], [38.0, 1736.5], [39.0, 1516.0], [40.0, 0.0], [41.0, 0.0], [43.0, 0.0], [42.0, 0.0], [44.0, 0.0], [45.0, 0.0], [46.0, 918.0], [4.0, 1963.0], [8.0, 0.0], [9.0, 0.0], [10.0, 532.0], [11.0, 0.0], [12.0, 1632.0], [13.0, 589.0], [14.0, 1625.5], [15.0, 702.0], [16.0, 1621.0], [1.0, 521.0], [17.0, 0.0], [18.0, 1461.0], [19.0, 1458.0], [20.0, 0.0], [21.0, 1259.5], [22.0, 0.0], [23.0, 1491.5], [24.0, 467.5], [25.0, 537.0], [26.0, 990.5], [27.0, 0.0], [28.0, 1448.5], [29.0, 0.0], [30.0, 1363.5], [31.0, 734.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 46.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.2, "minX": 1.74602208E12, "maxY": 25.166666666666668, "series": [{"data": [[1.7460228E12, 25.166666666666668], [1.7460225E12, 24.783333333333335], [1.74602316E12, 24.5], [1.7460222E12, 24.866666666666667], [1.74602286E12, 24.716666666666665], [1.74602304E12, 24.016666666666666], [1.74602208E12, 2.2], [1.74602274E12, 25.066666666666666], [1.7460234E12, 14.2], [1.74602244E12, 24.566666666666666], [1.7460231E12, 24.45], [1.74602214E12, 24.833333333333332], [1.74602328E12, 24.316666666666666], [1.74602232E12, 24.7], [1.74602298E12, 24.55], [1.74602268E12, 24.85], [1.74602334E12, 24.266666666666666], [1.74602238E12, 24.35], [1.74602256E12, 24.616666666666667], [1.74602322E12, 24.35], [1.74602226E12, 24.816666666666666], [1.74602292E12, 24.6], [1.74602262E12, 24.55]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7460234E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.5833333333333334, "minX": 1.74602208E12, "maxY": 12.6, "series": [{"data": [[1.7460228E12, 12.6], [1.7460225E12, 12.383333333333333], [1.74602316E12, 12.233333333333333], [1.7460222E12, 12.45], [1.74602286E12, 12.35], [1.74602304E12, 12.0], [1.74602208E12, 1.0833333333333333], [1.74602274E12, 12.533333333333333], [1.7460234E12, 7.1], [1.74602244E12, 12.283333333333333], [1.7460231E12, 12.233333333333333], [1.74602214E12, 12.416666666666666], [1.74602328E12, 12.166666666666666], [1.74602232E12, 12.35], [1.74602298E12, 12.283333333333333], [1.74602268E12, 12.416666666666666], [1.74602334E12, 12.133333333333333], [1.74602238E12, 12.183333333333334], [1.74602256E12, 12.316666666666666], [1.74602322E12, 12.183333333333334], [1.74602226E12, 12.4], [1.74602292E12, 12.3], [1.74602262E12, 12.266666666666667]], "isOverall": false, "label": "0", "isController": false}, {"data": [[1.7460228E12, 12.566666666666666], [1.7460225E12, 12.4], [1.74602316E12, 12.266666666666667], [1.7460222E12, 12.416666666666666], [1.74602286E12, 12.366666666666667], [1.74602304E12, 12.016666666666667], [1.74602208E12, 0.5833333333333334], [1.74602274E12, 12.533333333333333], [1.7460234E12, 7.616666666666666], [1.74602244E12, 12.283333333333333], [1.7460231E12, 12.216666666666667], [1.74602214E12, 12.416666666666666], [1.74602328E12, 12.15], [1.74602232E12, 12.35], [1.74602298E12, 12.266666666666667], [1.74602268E12, 12.433333333333334], [1.74602334E12, 12.15], [1.74602238E12, 12.166666666666666], [1.74602256E12, 12.3], [1.74602322E12, 12.166666666666666], [1.74602226E12, 12.416666666666666], [1.74602292E12, 12.3], [1.74602262E12, 12.283333333333333]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7460234E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.5833333333333334, "minX": 1.74602208E12, "maxY": 12.6, "series": [{"data": [[1.7460228E12, 12.566666666666666], [1.7460225E12, 12.4], [1.74602316E12, 12.266666666666667], [1.7460222E12, 12.416666666666666], [1.74602286E12, 12.366666666666667], [1.74602304E12, 12.016666666666667], [1.74602208E12, 0.5833333333333334], [1.74602274E12, 12.533333333333333], [1.7460234E12, 7.616666666666666], [1.74602244E12, 12.283333333333333], [1.7460231E12, 12.216666666666667], [1.74602214E12, 12.416666666666666], [1.74602328E12, 12.15], [1.74602232E12, 12.35], [1.74602298E12, 12.266666666666667], [1.74602268E12, 12.433333333333334], [1.74602334E12, 12.15], [1.74602238E12, 12.166666666666666], [1.74602256E12, 12.3], [1.74602322E12, 12.166666666666666], [1.74602226E12, 12.416666666666666], [1.74602292E12, 12.3], [1.74602262E12, 12.283333333333333]], "isOverall": false, "label": "HTTP Request - enroll-success", "isController": false}, {"data": [[1.7460228E12, 12.6], [1.7460225E12, 12.383333333333333], [1.74602316E12, 12.233333333333333], [1.7460222E12, 12.45], [1.74602286E12, 12.35], [1.74602304E12, 12.0], [1.74602208E12, 1.0833333333333333], [1.74602274E12, 12.533333333333333], [1.7460234E12, 7.1], [1.74602244E12, 12.283333333333333], [1.7460231E12, 12.233333333333333], [1.74602214E12, 12.416666666666666], [1.74602328E12, 12.166666666666666], [1.74602232E12, 12.35], [1.74602298E12, 12.283333333333333], [1.74602268E12, 12.416666666666666], [1.74602334E12, 12.133333333333333], [1.74602238E12, 12.183333333333334], [1.74602256E12, 12.316666666666666], [1.74602322E12, 12.183333333333334], [1.74602226E12, 12.4], [1.74602292E12, 12.3], [1.74602262E12, 12.266666666666667]], "isOverall": false, "label": "Create CSR-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7460234E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.6666666666666667, "minX": 1.74602208E12, "maxY": 25.166666666666668, "series": [{"data": [[1.7460228E12, 25.166666666666668], [1.7460225E12, 24.783333333333335], [1.74602316E12, 24.5], [1.7460222E12, 24.866666666666667], [1.74602286E12, 24.716666666666665], [1.74602304E12, 24.016666666666666], [1.74602208E12, 1.6666666666666667], [1.74602274E12, 25.066666666666666], [1.7460234E12, 14.716666666666667], [1.74602244E12, 24.566666666666666], [1.7460231E12, 24.45], [1.74602214E12, 24.833333333333332], [1.74602328E12, 24.316666666666666], [1.74602232E12, 24.7], [1.74602298E12, 24.55], [1.74602268E12, 24.85], [1.74602334E12, 24.283333333333335], [1.74602238E12, 24.35], [1.74602256E12, 24.616666666666667], [1.74602322E12, 24.35], [1.74602226E12, 24.816666666666666], [1.74602292E12, 24.6], [1.74602262E12, 24.55]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7460234E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

