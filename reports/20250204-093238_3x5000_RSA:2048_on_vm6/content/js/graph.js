/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 21.0, "minX": 0.0, "maxY": 3605.0, "series": [{"data": [[0.0, 21.0], [0.1, 25.0], [0.2, 26.0], [0.3, 27.0], [0.4, 28.0], [0.5, 28.0], [0.6, 29.0], [0.7, 29.0], [0.8, 30.0], [0.9, 30.0], [1.0, 31.0], [1.1, 31.0], [1.2, 31.0], [1.3, 32.0], [1.4, 32.0], [1.5, 32.0], [1.6, 33.0], [1.7, 33.0], [1.8, 33.0], [1.9, 34.0], [2.0, 34.0], [2.1, 34.0], [2.2, 34.0], [2.3, 35.0], [2.4, 35.0], [2.5, 35.0], [2.6, 35.0], [2.7, 36.0], [2.8, 36.0], [2.9, 36.0], [3.0, 36.0], [3.1, 36.0], [3.2, 36.0], [3.3, 37.0], [3.4, 37.0], [3.5, 37.0], [3.6, 37.0], [3.7, 37.0], [3.8, 38.0], [3.9, 38.0], [4.0, 38.0], [4.1, 38.0], [4.2, 39.0], [4.3, 39.0], [4.4, 39.0], [4.5, 39.0], [4.6, 39.0], [4.7, 40.0], [4.8, 40.0], [4.9, 40.0], [5.0, 40.0], [5.1, 40.0], [5.2, 41.0], [5.3, 41.0], [5.4, 41.0], [5.5, 41.0], [5.6, 41.0], [5.7, 42.0], [5.8, 42.0], [5.9, 42.0], [6.0, 42.0], [6.1, 42.0], [6.2, 43.0], [6.3, 43.0], [6.4, 43.0], [6.5, 43.0], [6.6, 43.0], [6.7, 43.0], [6.8, 43.0], [6.9, 44.0], [7.0, 44.0], [7.1, 44.0], [7.2, 44.0], [7.3, 44.0], [7.4, 44.0], [7.5, 44.0], [7.6, 45.0], [7.7, 45.0], [7.8, 45.0], [7.9, 45.0], [8.0, 45.0], [8.1, 45.0], [8.2, 46.0], [8.3, 46.0], [8.4, 46.0], [8.5, 46.0], [8.6, 46.0], [8.7, 46.0], [8.8, 46.0], [8.9, 47.0], [9.0, 47.0], [9.1, 47.0], [9.2, 47.0], [9.3, 47.0], [9.4, 47.0], [9.5, 47.0], [9.6, 48.0], [9.7, 48.0], [9.8, 48.0], [9.9, 48.0], [10.0, 48.0], [10.1, 48.0], [10.2, 48.0], [10.3, 49.0], [10.4, 49.0], [10.5, 49.0], [10.6, 49.0], [10.7, 49.0], [10.8, 49.0], [10.9, 49.0], [11.0, 50.0], [11.1, 50.0], [11.2, 50.0], [11.3, 50.0], [11.4, 50.0], [11.5, 50.0], [11.6, 50.0], [11.7, 51.0], [11.8, 51.0], [11.9, 51.0], [12.0, 51.0], [12.1, 51.0], [12.2, 51.0], [12.3, 51.0], [12.4, 51.0], [12.5, 52.0], [12.6, 52.0], [12.7, 52.0], [12.8, 52.0], [12.9, 52.0], [13.0, 52.0], [13.1, 52.0], [13.2, 52.0], [13.3, 53.0], [13.4, 53.0], [13.5, 53.0], [13.6, 53.0], [13.7, 53.0], [13.8, 53.0], [13.9, 53.0], [14.0, 53.0], [14.1, 54.0], [14.2, 54.0], [14.3, 54.0], [14.4, 54.0], [14.5, 54.0], [14.6, 54.0], [14.7, 54.0], [14.8, 54.0], [14.9, 55.0], [15.0, 55.0], [15.1, 55.0], [15.2, 55.0], [15.3, 55.0], [15.4, 55.0], [15.5, 55.0], [15.6, 55.0], [15.7, 55.0], [15.8, 56.0], [15.9, 56.0], [16.0, 56.0], [16.1, 56.0], [16.2, 56.0], [16.3, 56.0], [16.4, 56.0], [16.5, 56.0], [16.6, 57.0], [16.7, 57.0], [16.8, 57.0], [16.9, 57.0], [17.0, 57.0], [17.1, 57.0], [17.2, 57.0], [17.3, 58.0], [17.4, 58.0], [17.5, 58.0], [17.6, 58.0], [17.7, 58.0], [17.8, 58.0], [17.9, 58.0], [18.0, 58.0], [18.1, 58.0], [18.2, 59.0], [18.3, 59.0], [18.4, 59.0], [18.5, 59.0], [18.6, 59.0], [18.7, 59.0], [18.8, 59.0], [18.9, 59.0], [19.0, 60.0], [19.1, 60.0], [19.2, 60.0], [19.3, 60.0], [19.4, 60.0], [19.5, 60.0], [19.6, 60.0], [19.7, 60.0], [19.8, 61.0], [19.9, 61.0], [20.0, 61.0], [20.1, 61.0], [20.2, 61.0], [20.3, 61.0], [20.4, 61.0], [20.5, 61.0], [20.6, 62.0], [20.7, 62.0], [20.8, 62.0], [20.9, 62.0], [21.0, 62.0], [21.1, 62.0], [21.2, 62.0], [21.3, 62.0], [21.4, 63.0], [21.5, 63.0], [21.6, 63.0], [21.7, 63.0], [21.8, 63.0], [21.9, 63.0], [22.0, 63.0], [22.1, 63.0], [22.2, 63.0], [22.3, 64.0], [22.4, 64.0], [22.5, 64.0], [22.6, 64.0], [22.7, 64.0], [22.8, 64.0], [22.9, 64.0], [23.0, 64.0], [23.1, 65.0], [23.2, 65.0], [23.3, 65.0], [23.4, 65.0], [23.5, 65.0], [23.6, 65.0], [23.7, 65.0], [23.8, 65.0], [23.9, 66.0], [24.0, 66.0], [24.1, 66.0], [24.2, 66.0], [24.3, 66.0], [24.4, 66.0], [24.5, 66.0], [24.6, 66.0], [24.7, 66.0], [24.8, 67.0], [24.9, 67.0], [25.0, 67.0], [25.1, 67.0], [25.2, 67.0], [25.3, 67.0], [25.4, 67.0], [25.5, 67.0], [25.6, 67.0], [25.7, 67.0], [25.8, 67.0], [25.9, 68.0], [26.0, 68.0], [26.1, 68.0], [26.2, 68.0], [26.3, 68.0], [26.4, 68.0], [26.5, 68.0], [26.6, 68.0], [26.7, 69.0], [26.8, 69.0], [26.9, 69.0], [27.0, 69.0], [27.1, 69.0], [27.2, 69.0], [27.3, 69.0], [27.4, 69.0], [27.5, 69.0], [27.6, 70.0], [27.7, 70.0], [27.8, 70.0], [27.9, 70.0], [28.0, 70.0], [28.1, 70.0], [28.2, 70.0], [28.3, 70.0], [28.4, 71.0], [28.5, 71.0], [28.6, 71.0], [28.7, 71.0], [28.8, 71.0], [28.9, 71.0], [29.0, 71.0], [29.1, 72.0], [29.2, 72.0], [29.3, 72.0], [29.4, 72.0], [29.5, 72.0], [29.6, 72.0], [29.7, 72.0], [29.8, 72.0], [29.9, 72.0], [30.0, 73.0], [30.1, 73.0], [30.2, 73.0], [30.3, 73.0], [30.4, 73.0], [30.5, 73.0], [30.6, 73.0], [30.7, 73.0], [30.8, 74.0], [30.9, 74.0], [31.0, 74.0], [31.1, 74.0], [31.2, 74.0], [31.3, 74.0], [31.4, 74.0], [31.5, 74.0], [31.6, 74.0], [31.7, 75.0], [31.8, 75.0], [31.9, 75.0], [32.0, 75.0], [32.1, 75.0], [32.2, 75.0], [32.3, 75.0], [32.4, 76.0], [32.5, 76.0], [32.6, 76.0], [32.7, 76.0], [32.8, 76.0], [32.9, 76.0], [33.0, 76.0], [33.1, 77.0], [33.2, 77.0], [33.3, 77.0], [33.4, 77.0], [33.5, 77.0], [33.6, 77.0], [33.7, 77.0], [33.8, 77.0], [33.9, 77.0], [34.0, 78.0], [34.1, 78.0], [34.2, 78.0], [34.3, 78.0], [34.4, 78.0], [34.5, 78.0], [34.6, 78.0], [34.7, 78.0], [34.8, 79.0], [34.9, 79.0], [35.0, 79.0], [35.1, 79.0], [35.2, 79.0], [35.3, 79.0], [35.4, 79.0], [35.5, 79.0], [35.6, 80.0], [35.7, 80.0], [35.8, 80.0], [35.9, 80.0], [36.0, 80.0], [36.1, 80.0], [36.2, 80.0], [36.3, 80.0], [36.4, 80.0], [36.5, 80.0], [36.6, 80.0], [36.7, 81.0], [36.8, 81.0], [36.9, 81.0], [37.0, 81.0], [37.1, 81.0], [37.2, 81.0], [37.3, 81.0], [37.4, 81.0], [37.5, 82.0], [37.6, 82.0], [37.7, 82.0], [37.8, 82.0], [37.9, 82.0], [38.0, 82.0], [38.1, 82.0], [38.2, 82.0], [38.3, 83.0], [38.4, 83.0], [38.5, 83.0], [38.6, 83.0], [38.7, 83.0], [38.8, 83.0], [38.9, 83.0], [39.0, 83.0], [39.1, 84.0], [39.2, 84.0], [39.3, 84.0], [39.4, 84.0], [39.5, 84.0], [39.6, 84.0], [39.7, 84.0], [39.8, 84.0], [39.9, 85.0], [40.0, 85.0], [40.1, 85.0], [40.2, 85.0], [40.3, 85.0], [40.4, 85.0], [40.5, 85.0], [40.6, 85.0], [40.7, 85.0], [40.8, 86.0], [40.9, 86.0], [41.0, 86.0], [41.1, 86.0], [41.2, 86.0], [41.3, 86.0], [41.4, 86.0], [41.5, 86.0], [41.6, 87.0], [41.7, 87.0], [41.8, 87.0], [41.9, 87.0], [42.0, 87.0], [42.1, 87.0], [42.2, 87.0], [42.3, 87.0], [42.4, 88.0], [42.5, 88.0], [42.6, 88.0], [42.7, 88.0], [42.8, 88.0], [42.9, 88.0], [43.0, 88.0], [43.1, 89.0], [43.2, 89.0], [43.3, 89.0], [43.4, 89.0], [43.5, 89.0], [43.6, 89.0], [43.7, 89.0], [43.8, 89.0], [43.9, 90.0], [44.0, 90.0], [44.1, 90.0], [44.2, 90.0], [44.3, 90.0], [44.4, 90.0], [44.5, 90.0], [44.6, 90.0], [44.7, 91.0], [44.8, 91.0], [44.9, 91.0], [45.0, 91.0], [45.1, 91.0], [45.2, 91.0], [45.3, 92.0], [45.4, 92.0], [45.5, 92.0], [45.6, 92.0], [45.7, 92.0], [45.8, 92.0], [45.9, 92.0], [46.0, 92.0], [46.1, 93.0], [46.2, 93.0], [46.3, 93.0], [46.4, 93.0], [46.5, 93.0], [46.6, 93.0], [46.7, 93.0], [46.8, 94.0], [46.9, 94.0], [47.0, 94.0], [47.1, 94.0], [47.2, 94.0], [47.3, 94.0], [47.4, 94.0], [47.5, 95.0], [47.6, 95.0], [47.7, 95.0], [47.8, 95.0], [47.9, 95.0], [48.0, 95.0], [48.1, 95.0], [48.2, 95.0], [48.3, 96.0], [48.4, 96.0], [48.5, 96.0], [48.6, 96.0], [48.7, 96.0], [48.8, 96.0], [48.9, 96.0], [49.0, 96.0], [49.1, 97.0], [49.2, 97.0], [49.3, 97.0], [49.4, 97.0], [49.5, 97.0], [49.6, 97.0], [49.7, 97.0], [49.8, 98.0], [49.9, 98.0], [50.0, 98.0], [50.1, 98.0], [50.2, 98.0], [50.3, 98.0], [50.4, 98.0], [50.5, 99.0], [50.6, 99.0], [50.7, 99.0], [50.8, 99.0], [50.9, 99.0], [51.0, 99.0], [51.1, 99.0], [51.2, 99.0], [51.3, 100.0], [51.4, 100.0], [51.5, 100.0], [51.6, 100.0], [51.7, 100.0], [51.8, 100.0], [51.9, 101.0], [52.0, 101.0], [52.1, 101.0], [52.2, 101.0], [52.3, 101.0], [52.4, 101.0], [52.5, 101.0], [52.6, 102.0], [52.7, 102.0], [52.8, 102.0], [52.9, 102.0], [53.0, 102.0], [53.1, 102.0], [53.2, 102.0], [53.3, 102.0], [53.4, 103.0], [53.5, 103.0], [53.6, 103.0], [53.7, 103.0], [53.8, 103.0], [53.9, 103.0], [54.0, 103.0], [54.1, 104.0], [54.2, 104.0], [54.3, 104.0], [54.4, 104.0], [54.5, 104.0], [54.6, 104.0], [54.7, 104.0], [54.8, 105.0], [54.9, 105.0], [55.0, 105.0], [55.1, 105.0], [55.2, 105.0], [55.3, 105.0], [55.4, 106.0], [55.5, 106.0], [55.6, 106.0], [55.7, 106.0], [55.8, 106.0], [55.9, 106.0], [56.0, 106.0], [56.1, 107.0], [56.2, 107.0], [56.3, 107.0], [56.4, 107.0], [56.5, 107.0], [56.6, 107.0], [56.7, 108.0], [56.8, 108.0], [56.9, 108.0], [57.0, 108.0], [57.1, 108.0], [57.2, 108.0], [57.3, 108.0], [57.4, 109.0], [57.5, 109.0], [57.6, 109.0], [57.7, 109.0], [57.8, 109.0], [57.9, 109.0], [58.0, 110.0], [58.1, 110.0], [58.2, 110.0], [58.3, 110.0], [58.4, 110.0], [58.5, 110.0], [58.6, 111.0], [58.7, 111.0], [58.8, 111.0], [58.9, 111.0], [59.0, 111.0], [59.1, 111.0], [59.2, 112.0], [59.3, 112.0], [59.4, 112.0], [59.5, 112.0], [59.6, 112.0], [59.7, 112.0], [59.8, 112.0], [59.9, 113.0], [60.0, 113.0], [60.1, 113.0], [60.2, 113.0], [60.3, 113.0], [60.4, 113.0], [60.5, 113.0], [60.6, 114.0], [60.7, 114.0], [60.8, 114.0], [60.9, 114.0], [61.0, 114.0], [61.1, 114.0], [61.2, 115.0], [61.3, 115.0], [61.4, 115.0], [61.5, 115.0], [61.6, 115.0], [61.7, 115.0], [61.8, 116.0], [61.9, 116.0], [62.0, 116.0], [62.1, 116.0], [62.2, 116.0], [62.3, 117.0], [62.4, 117.0], [62.5, 117.0], [62.6, 117.0], [62.7, 117.0], [62.8, 117.0], [62.9, 117.0], [63.0, 118.0], [63.1, 118.0], [63.2, 118.0], [63.3, 118.0], [63.4, 118.0], [63.5, 118.0], [63.6, 119.0], [63.7, 119.0], [63.8, 119.0], [63.9, 119.0], [64.0, 119.0], [64.1, 119.0], [64.2, 120.0], [64.3, 120.0], [64.4, 120.0], [64.5, 120.0], [64.6, 120.0], [64.7, 120.0], [64.8, 120.0], [64.9, 121.0], [65.0, 121.0], [65.1, 121.0], [65.2, 121.0], [65.3, 121.0], [65.4, 121.0], [65.5, 121.0], [65.6, 122.0], [65.7, 122.0], [65.8, 122.0], [65.9, 122.0], [66.0, 122.0], [66.1, 123.0], [66.2, 123.0], [66.3, 123.0], [66.4, 123.0], [66.5, 123.0], [66.6, 124.0], [66.7, 124.0], [66.8, 124.0], [66.9, 124.0], [67.0, 124.0], [67.1, 125.0], [67.2, 125.0], [67.3, 125.0], [67.4, 125.0], [67.5, 125.0], [67.6, 125.0], [67.7, 126.0], [67.8, 126.0], [67.9, 126.0], [68.0, 126.0], [68.1, 126.0], [68.2, 127.0], [68.3, 127.0], [68.4, 127.0], [68.5, 127.0], [68.6, 128.0], [68.7, 128.0], [68.8, 128.0], [68.9, 128.0], [69.0, 128.0], [69.1, 129.0], [69.2, 129.0], [69.3, 129.0], [69.4, 129.0], [69.5, 129.0], [69.6, 129.0], [69.7, 130.0], [69.8, 130.0], [69.9, 130.0], [70.0, 130.0], [70.1, 130.0], [70.2, 131.0], [70.3, 131.0], [70.4, 131.0], [70.5, 131.0], [70.6, 132.0], [70.7, 132.0], [70.8, 132.0], [70.9, 132.0], [71.0, 132.0], [71.1, 132.0], [71.2, 133.0], [71.3, 133.0], [71.4, 133.0], [71.5, 133.0], [71.6, 134.0], [71.7, 134.0], [71.8, 134.0], [71.9, 134.0], [72.0, 134.0], [72.1, 134.0], [72.2, 135.0], [72.3, 135.0], [72.4, 135.0], [72.5, 135.0], [72.6, 135.0], [72.7, 136.0], [72.8, 136.0], [72.9, 136.0], [73.0, 136.0], [73.1, 136.0], [73.2, 137.0], [73.3, 137.0], [73.4, 137.0], [73.5, 138.0], [73.6, 138.0], [73.7, 138.0], [73.8, 138.0], [73.9, 138.0], [74.0, 139.0], [74.1, 139.0], [74.2, 139.0], [74.3, 139.0], [74.4, 140.0], [74.5, 140.0], [74.6, 140.0], [74.7, 140.0], [74.8, 140.0], [74.9, 141.0], [75.0, 141.0], [75.1, 141.0], [75.2, 141.0], [75.3, 141.0], [75.4, 142.0], [75.5, 142.0], [75.6, 142.0], [75.7, 142.0], [75.8, 143.0], [75.9, 143.0], [76.0, 143.0], [76.1, 143.0], [76.2, 144.0], [76.3, 144.0], [76.4, 144.0], [76.5, 144.0], [76.6, 145.0], [76.7, 145.0], [76.8, 145.0], [76.9, 145.0], [77.0, 146.0], [77.1, 146.0], [77.2, 146.0], [77.3, 146.0], [77.4, 147.0], [77.5, 147.0], [77.6, 147.0], [77.7, 147.0], [77.8, 148.0], [77.9, 148.0], [78.0, 148.0], [78.1, 149.0], [78.2, 149.0], [78.3, 149.0], [78.4, 149.0], [78.5, 150.0], [78.6, 150.0], [78.7, 150.0], [78.8, 150.0], [78.9, 150.0], [79.0, 151.0], [79.1, 151.0], [79.2, 151.0], [79.3, 151.0], [79.4, 152.0], [79.5, 152.0], [79.6, 152.0], [79.7, 152.0], [79.8, 152.0], [79.9, 153.0], [80.0, 153.0], [80.1, 153.0], [80.2, 154.0], [80.3, 154.0], [80.4, 154.0], [80.5, 154.0], [80.6, 154.0], [80.7, 155.0], [80.8, 155.0], [80.9, 156.0], [81.0, 156.0], [81.1, 156.0], [81.2, 156.0], [81.3, 157.0], [81.4, 157.0], [81.5, 157.0], [81.6, 157.0], [81.7, 158.0], [81.8, 158.0], [81.9, 158.0], [82.0, 159.0], [82.1, 159.0], [82.2, 160.0], [82.3, 160.0], [82.4, 160.0], [82.5, 161.0], [82.6, 161.0], [82.7, 162.0], [82.8, 162.0], [82.9, 162.0], [83.0, 163.0], [83.1, 163.0], [83.2, 163.0], [83.3, 164.0], [83.4, 164.0], [83.5, 164.0], [83.6, 164.0], [83.7, 165.0], [83.8, 165.0], [83.9, 166.0], [84.0, 166.0], [84.1, 166.0], [84.2, 167.0], [84.3, 167.0], [84.4, 167.0], [84.5, 168.0], [84.6, 168.0], [84.7, 168.0], [84.8, 169.0], [84.9, 169.0], [85.0, 170.0], [85.1, 170.0], [85.2, 171.0], [85.3, 171.0], [85.4, 171.0], [85.5, 172.0], [85.6, 172.0], [85.7, 172.0], [85.8, 173.0], [85.9, 173.0], [86.0, 174.0], [86.1, 174.0], [86.2, 174.0], [86.3, 175.0], [86.4, 175.0], [86.5, 176.0], [86.6, 176.0], [86.7, 177.0], [86.8, 177.0], [86.9, 178.0], [87.0, 178.0], [87.1, 178.0], [87.2, 179.0], [87.3, 179.0], [87.4, 180.0], [87.5, 180.0], [87.6, 181.0], [87.7, 181.0], [87.8, 182.0], [87.9, 182.0], [88.0, 182.0], [88.1, 183.0], [88.2, 183.0], [88.3, 184.0], [88.4, 184.0], [88.5, 185.0], [88.6, 185.0], [88.7, 185.0], [88.8, 186.0], [88.9, 186.0], [89.0, 187.0], [89.1, 187.0], [89.2, 188.0], [89.3, 189.0], [89.4, 189.0], [89.5, 189.0], [89.6, 190.0], [89.7, 191.0], [89.8, 191.0], [89.9, 192.0], [90.0, 192.0], [90.1, 193.0], [90.2, 193.0], [90.3, 194.0], [90.4, 194.0], [90.5, 195.0], [90.6, 196.0], [90.7, 196.0], [90.8, 197.0], [90.9, 198.0], [91.0, 198.0], [91.1, 199.0], [91.2, 199.0], [91.3, 199.0], [91.4, 200.0], [91.5, 201.0], [91.6, 201.0], [91.7, 202.0], [91.8, 203.0], [91.9, 204.0], [92.0, 204.0], [92.1, 205.0], [92.2, 206.0], [92.3, 206.0], [92.4, 207.0], [92.5, 208.0], [92.6, 208.0], [92.7, 209.0], [92.8, 210.0], [92.9, 210.0], [93.0, 211.0], [93.1, 211.0], [93.2, 212.0], [93.3, 213.0], [93.4, 214.0], [93.5, 214.0], [93.6, 215.0], [93.7, 216.0], [93.8, 216.0], [93.9, 217.0], [94.0, 218.0], [94.1, 220.0], [94.2, 221.0], [94.3, 221.0], [94.4, 223.0], [94.5, 224.0], [94.6, 225.0], [94.7, 226.0], [94.8, 227.0], [94.9, 228.0], [95.0, 229.0], [95.1, 230.0], [95.2, 231.0], [95.3, 233.0], [95.4, 234.0], [95.5, 235.0], [95.6, 236.0], [95.7, 238.0], [95.8, 239.0], [95.9, 240.0], [96.0, 241.0], [96.1, 243.0], [96.2, 245.0], [96.3, 246.0], [96.4, 247.0], [96.5, 250.0], [96.6, 252.0], [96.7, 254.0], [96.8, 255.0], [96.9, 257.0], [97.0, 258.0], [97.1, 260.0], [97.2, 263.0], [97.3, 265.0], [97.4, 267.0], [97.5, 268.0], [97.6, 270.0], [97.7, 273.0], [97.8, 275.0], [97.9, 279.0], [98.0, 281.0], [98.1, 283.0], [98.2, 286.0], [98.3, 291.0], [98.4, 294.0], [98.5, 298.0], [98.6, 301.0], [98.7, 304.0], [98.8, 309.0], [98.9, 311.0], [99.0, 317.0], [99.1, 321.0], [99.2, 326.0], [99.3, 330.0], [99.4, 336.0], [99.5, 343.0], [99.6, 359.0], [99.7, 371.0], [99.8, 389.0], [99.9, 440.0]], "isOverall": false, "label": "OS Process Sampler", "isController": false}, {"data": [[0.0, 213.0], [0.1, 219.0], [0.2, 223.0], [0.3, 225.0], [0.4, 226.0], [0.5, 227.0], [0.6, 228.0], [0.7, 229.0], [0.8, 230.0], [0.9, 231.0], [1.0, 231.0], [1.1, 232.0], [1.2, 233.0], [1.3, 234.0], [1.4, 234.0], [1.5, 235.0], [1.6, 235.0], [1.7, 236.0], [1.8, 236.0], [1.9, 237.0], [2.0, 238.0], [2.1, 238.0], [2.2, 239.0], [2.3, 239.0], [2.4, 240.0], [2.5, 240.0], [2.6, 241.0], [2.7, 241.0], [2.8, 242.0], [2.9, 242.0], [3.0, 243.0], [3.1, 243.0], [3.2, 243.0], [3.3, 244.0], [3.4, 244.0], [3.5, 244.0], [3.6, 245.0], [3.7, 245.0], [3.8, 245.0], [3.9, 246.0], [4.0, 246.0], [4.1, 246.0], [4.2, 247.0], [4.3, 247.0], [4.4, 248.0], [4.5, 248.0], [4.6, 248.0], [4.7, 248.0], [4.8, 249.0], [4.9, 249.0], [5.0, 249.0], [5.1, 250.0], [5.2, 250.0], [5.3, 250.0], [5.4, 250.0], [5.5, 251.0], [5.6, 251.0], [5.7, 251.0], [5.8, 252.0], [5.9, 252.0], [6.0, 252.0], [6.1, 253.0], [6.2, 253.0], [6.3, 253.0], [6.4, 254.0], [6.5, 254.0], [6.6, 254.0], [6.7, 255.0], [6.8, 255.0], [6.9, 255.0], [7.0, 256.0], [7.1, 256.0], [7.2, 256.0], [7.3, 257.0], [7.4, 257.0], [7.5, 257.0], [7.6, 257.0], [7.7, 258.0], [7.8, 258.0], [7.9, 258.0], [8.0, 258.0], [8.1, 259.0], [8.2, 259.0], [8.3, 259.0], [8.4, 260.0], [8.5, 260.0], [8.6, 260.0], [8.7, 260.0], [8.8, 261.0], [8.9, 261.0], [9.0, 261.0], [9.1, 261.0], [9.2, 262.0], [9.3, 262.0], [9.4, 263.0], [9.5, 263.0], [9.6, 263.0], [9.7, 263.0], [9.8, 264.0], [9.9, 264.0], [10.0, 264.0], [10.1, 264.0], [10.2, 265.0], [10.3, 265.0], [10.4, 265.0], [10.5, 265.0], [10.6, 266.0], [10.7, 266.0], [10.8, 266.0], [10.9, 267.0], [11.0, 267.0], [11.1, 267.0], [11.2, 267.0], [11.3, 267.0], [11.4, 268.0], [11.5, 268.0], [11.6, 268.0], [11.7, 269.0], [11.8, 269.0], [11.9, 269.0], [12.0, 269.0], [12.1, 269.0], [12.2, 270.0], [12.3, 270.0], [12.4, 270.0], [12.5, 270.0], [12.6, 270.0], [12.7, 271.0], [12.8, 271.0], [12.9, 271.0], [13.0, 271.0], [13.1, 271.0], [13.2, 272.0], [13.3, 272.0], [13.4, 272.0], [13.5, 272.0], [13.6, 273.0], [13.7, 273.0], [13.8, 273.0], [13.9, 273.0], [14.0, 273.0], [14.1, 274.0], [14.2, 274.0], [14.3, 274.0], [14.4, 274.0], [14.5, 274.0], [14.6, 274.0], [14.7, 274.0], [14.8, 275.0], [14.9, 275.0], [15.0, 275.0], [15.1, 275.0], [15.2, 276.0], [15.3, 276.0], [15.4, 276.0], [15.5, 276.0], [15.6, 276.0], [15.7, 276.0], [15.8, 277.0], [15.9, 277.0], [16.0, 277.0], [16.1, 277.0], [16.2, 277.0], [16.3, 277.0], [16.4, 278.0], [16.5, 278.0], [16.6, 278.0], [16.7, 278.0], [16.8, 278.0], [16.9, 278.0], [17.0, 279.0], [17.1, 279.0], [17.2, 279.0], [17.3, 279.0], [17.4, 279.0], [17.5, 280.0], [17.6, 280.0], [17.7, 280.0], [17.8, 280.0], [17.9, 280.0], [18.0, 280.0], [18.1, 280.0], [18.2, 281.0], [18.3, 281.0], [18.4, 281.0], [18.5, 281.0], [18.6, 281.0], [18.7, 281.0], [18.8, 281.0], [18.9, 281.0], [19.0, 282.0], [19.1, 282.0], [19.2, 282.0], [19.3, 282.0], [19.4, 282.0], [19.5, 282.0], [19.6, 283.0], [19.7, 283.0], [19.8, 283.0], [19.9, 283.0], [20.0, 283.0], [20.1, 283.0], [20.2, 283.0], [20.3, 284.0], [20.4, 284.0], [20.5, 284.0], [20.6, 284.0], [20.7, 284.0], [20.8, 284.0], [20.9, 284.0], [21.0, 285.0], [21.1, 285.0], [21.2, 285.0], [21.3, 285.0], [21.4, 285.0], [21.5, 285.0], [21.6, 285.0], [21.7, 285.0], [21.8, 286.0], [21.9, 286.0], [22.0, 286.0], [22.1, 286.0], [22.2, 286.0], [22.3, 286.0], [22.4, 286.0], [22.5, 286.0], [22.6, 287.0], [22.7, 287.0], [22.8, 287.0], [22.9, 287.0], [23.0, 287.0], [23.1, 287.0], [23.2, 287.0], [23.3, 287.0], [23.4, 288.0], [23.5, 288.0], [23.6, 288.0], [23.7, 288.0], [23.8, 288.0], [23.9, 288.0], [24.0, 288.0], [24.1, 288.0], [24.2, 289.0], [24.3, 289.0], [24.4, 289.0], [24.5, 289.0], [24.6, 289.0], [24.7, 289.0], [24.8, 289.0], [24.9, 289.0], [25.0, 290.0], [25.1, 290.0], [25.2, 290.0], [25.3, 290.0], [25.4, 290.0], [25.5, 290.0], [25.6, 290.0], [25.7, 290.0], [25.8, 290.0], [25.9, 291.0], [26.0, 291.0], [26.1, 291.0], [26.2, 291.0], [26.3, 291.0], [26.4, 291.0], [26.5, 291.0], [26.6, 291.0], [26.7, 291.0], [26.8, 292.0], [26.9, 292.0], [27.0, 292.0], [27.1, 292.0], [27.2, 292.0], [27.3, 292.0], [27.4, 292.0], [27.5, 292.0], [27.6, 292.0], [27.7, 293.0], [27.8, 293.0], [27.9, 293.0], [28.0, 293.0], [28.1, 293.0], [28.2, 293.0], [28.3, 293.0], [28.4, 293.0], [28.5, 293.0], [28.6, 293.0], [28.7, 294.0], [28.8, 294.0], [28.9, 294.0], [29.0, 294.0], [29.1, 294.0], [29.2, 294.0], [29.3, 294.0], [29.4, 294.0], [29.5, 294.0], [29.6, 294.0], [29.7, 294.0], [29.8, 295.0], [29.9, 295.0], [30.0, 295.0], [30.1, 295.0], [30.2, 295.0], [30.3, 295.0], [30.4, 295.0], [30.5, 295.0], [30.6, 295.0], [30.7, 296.0], [30.8, 296.0], [30.9, 296.0], [31.0, 296.0], [31.1, 296.0], [31.2, 296.0], [31.3, 296.0], [31.4, 296.0], [31.5, 296.0], [31.6, 296.0], [31.7, 297.0], [31.8, 297.0], [31.9, 297.0], [32.0, 297.0], [32.1, 297.0], [32.2, 297.0], [32.3, 297.0], [32.4, 297.0], [32.5, 297.0], [32.6, 298.0], [32.7, 298.0], [32.8, 298.0], [32.9, 298.0], [33.0, 298.0], [33.1, 298.0], [33.2, 298.0], [33.3, 298.0], [33.4, 298.0], [33.5, 299.0], [33.6, 299.0], [33.7, 299.0], [33.8, 299.0], [33.9, 299.0], [34.0, 299.0], [34.1, 299.0], [34.2, 299.0], [34.3, 299.0], [34.4, 299.0], [34.5, 300.0], [34.6, 300.0], [34.7, 300.0], [34.8, 300.0], [34.9, 300.0], [35.0, 300.0], [35.1, 300.0], [35.2, 300.0], [35.3, 300.0], [35.4, 300.0], [35.5, 301.0], [35.6, 301.0], [35.7, 301.0], [35.8, 301.0], [35.9, 301.0], [36.0, 301.0], [36.1, 301.0], [36.2, 301.0], [36.3, 301.0], [36.4, 301.0], [36.5, 301.0], [36.6, 302.0], [36.7, 302.0], [36.8, 302.0], [36.9, 302.0], [37.0, 302.0], [37.1, 302.0], [37.2, 302.0], [37.3, 302.0], [37.4, 302.0], [37.5, 303.0], [37.6, 303.0], [37.7, 303.0], [37.8, 303.0], [37.9, 303.0], [38.0, 303.0], [38.1, 303.0], [38.2, 303.0], [38.3, 303.0], [38.4, 303.0], [38.5, 304.0], [38.6, 304.0], [38.7, 304.0], [38.8, 304.0], [38.9, 304.0], [39.0, 304.0], [39.1, 304.0], [39.2, 304.0], [39.3, 304.0], [39.4, 305.0], [39.5, 305.0], [39.6, 305.0], [39.7, 305.0], [39.8, 305.0], [39.9, 305.0], [40.0, 305.0], [40.1, 305.0], [40.2, 305.0], [40.3, 305.0], [40.4, 305.0], [40.5, 306.0], [40.6, 306.0], [40.7, 306.0], [40.8, 306.0], [40.9, 306.0], [41.0, 306.0], [41.1, 306.0], [41.2, 306.0], [41.3, 306.0], [41.4, 307.0], [41.5, 307.0], [41.6, 307.0], [41.7, 307.0], [41.8, 307.0], [41.9, 307.0], [42.0, 307.0], [42.1, 307.0], [42.2, 307.0], [42.3, 307.0], [42.4, 308.0], [42.5, 308.0], [42.6, 308.0], [42.7, 308.0], [42.8, 308.0], [42.9, 308.0], [43.0, 308.0], [43.1, 308.0], [43.2, 308.0], [43.3, 308.0], [43.4, 309.0], [43.5, 309.0], [43.6, 309.0], [43.7, 309.0], [43.8, 309.0], [43.9, 309.0], [44.0, 309.0], [44.1, 309.0], [44.2, 309.0], [44.3, 310.0], [44.4, 310.0], [44.5, 310.0], [44.6, 310.0], [44.7, 310.0], [44.8, 310.0], [44.9, 310.0], [45.0, 310.0], [45.1, 310.0], [45.2, 310.0], [45.3, 311.0], [45.4, 311.0], [45.5, 311.0], [45.6, 311.0], [45.7, 311.0], [45.8, 311.0], [45.9, 311.0], [46.0, 311.0], [46.1, 311.0], [46.2, 311.0], [46.3, 311.0], [46.4, 312.0], [46.5, 312.0], [46.6, 312.0], [46.7, 312.0], [46.8, 312.0], [46.9, 312.0], [47.0, 312.0], [47.1, 312.0], [47.2, 312.0], [47.3, 312.0], [47.4, 313.0], [47.5, 313.0], [47.6, 313.0], [47.7, 313.0], [47.8, 313.0], [47.9, 313.0], [48.0, 313.0], [48.1, 313.0], [48.2, 313.0], [48.3, 313.0], [48.4, 314.0], [48.5, 314.0], [48.6, 314.0], [48.7, 314.0], [48.8, 314.0], [48.9, 314.0], [49.0, 314.0], [49.1, 314.0], [49.2, 314.0], [49.3, 314.0], [49.4, 315.0], [49.5, 315.0], [49.6, 315.0], [49.7, 315.0], [49.8, 315.0], [49.9, 315.0], [50.0, 315.0], [50.1, 315.0], [50.2, 315.0], [50.3, 315.0], [50.4, 316.0], [50.5, 316.0], [50.6, 316.0], [50.7, 316.0], [50.8, 316.0], [50.9, 316.0], [51.0, 316.0], [51.1, 316.0], [51.2, 316.0], [51.3, 316.0], [51.4, 316.0], [51.5, 317.0], [51.6, 317.0], [51.7, 317.0], [51.8, 317.0], [51.9, 317.0], [52.0, 317.0], [52.1, 317.0], [52.2, 317.0], [52.3, 317.0], [52.4, 318.0], [52.5, 318.0], [52.6, 318.0], [52.7, 318.0], [52.8, 318.0], [52.9, 318.0], [53.0, 318.0], [53.1, 318.0], [53.2, 318.0], [53.3, 319.0], [53.4, 319.0], [53.5, 319.0], [53.6, 319.0], [53.7, 319.0], [53.8, 319.0], [53.9, 319.0], [54.0, 319.0], [54.1, 319.0], [54.2, 319.0], [54.3, 320.0], [54.4, 320.0], [54.5, 320.0], [54.6, 320.0], [54.7, 320.0], [54.8, 320.0], [54.9, 320.0], [55.0, 320.0], [55.1, 320.0], [55.2, 321.0], [55.3, 321.0], [55.4, 321.0], [55.5, 321.0], [55.6, 321.0], [55.7, 321.0], [55.8, 321.0], [55.9, 321.0], [56.0, 321.0], [56.1, 321.0], [56.2, 322.0], [56.3, 322.0], [56.4, 322.0], [56.5, 322.0], [56.6, 322.0], [56.7, 322.0], [56.8, 322.0], [56.9, 322.0], [57.0, 322.0], [57.1, 323.0], [57.2, 323.0], [57.3, 323.0], [57.4, 323.0], [57.5, 323.0], [57.6, 323.0], [57.7, 323.0], [57.8, 323.0], [57.9, 324.0], [58.0, 324.0], [58.1, 324.0], [58.2, 324.0], [58.3, 324.0], [58.4, 324.0], [58.5, 324.0], [58.6, 324.0], [58.7, 324.0], [58.8, 325.0], [58.9, 325.0], [59.0, 325.0], [59.1, 325.0], [59.2, 325.0], [59.3, 325.0], [59.4, 325.0], [59.5, 325.0], [59.6, 326.0], [59.7, 326.0], [59.8, 326.0], [59.9, 326.0], [60.0, 326.0], [60.1, 326.0], [60.2, 326.0], [60.3, 326.0], [60.4, 326.0], [60.5, 326.0], [60.6, 327.0], [60.7, 327.0], [60.8, 327.0], [60.9, 327.0], [61.0, 327.0], [61.1, 327.0], [61.2, 327.0], [61.3, 327.0], [61.4, 327.0], [61.5, 327.0], [61.6, 328.0], [61.7, 328.0], [61.8, 328.0], [61.9, 328.0], [62.0, 328.0], [62.1, 328.0], [62.2, 328.0], [62.3, 328.0], [62.4, 328.0], [62.5, 329.0], [62.6, 329.0], [62.7, 329.0], [62.8, 329.0], [62.9, 329.0], [63.0, 329.0], [63.1, 329.0], [63.2, 329.0], [63.3, 330.0], [63.4, 330.0], [63.5, 330.0], [63.6, 330.0], [63.7, 330.0], [63.8, 330.0], [63.9, 330.0], [64.0, 330.0], [64.1, 331.0], [64.2, 331.0], [64.3, 331.0], [64.4, 331.0], [64.5, 331.0], [64.6, 331.0], [64.7, 331.0], [64.8, 331.0], [64.9, 331.0], [65.0, 331.0], [65.1, 331.0], [65.2, 332.0], [65.3, 332.0], [65.4, 332.0], [65.5, 332.0], [65.6, 332.0], [65.7, 332.0], [65.8, 332.0], [65.9, 332.0], [66.0, 333.0], [66.1, 333.0], [66.2, 333.0], [66.3, 333.0], [66.4, 333.0], [66.5, 333.0], [66.6, 333.0], [66.7, 333.0], [66.8, 333.0], [66.9, 334.0], [67.0, 334.0], [67.1, 334.0], [67.2, 334.0], [67.3, 334.0], [67.4, 334.0], [67.5, 334.0], [67.6, 334.0], [67.7, 334.0], [67.8, 334.0], [67.9, 335.0], [68.0, 335.0], [68.1, 335.0], [68.2, 335.0], [68.3, 335.0], [68.4, 335.0], [68.5, 335.0], [68.6, 335.0], [68.7, 335.0], [68.8, 336.0], [68.9, 336.0], [69.0, 336.0], [69.1, 336.0], [69.2, 336.0], [69.3, 336.0], [69.4, 336.0], [69.5, 337.0], [69.6, 337.0], [69.7, 337.0], [69.8, 337.0], [69.9, 337.0], [70.0, 337.0], [70.1, 337.0], [70.2, 337.0], [70.3, 338.0], [70.4, 338.0], [70.5, 338.0], [70.6, 338.0], [70.7, 338.0], [70.8, 338.0], [70.9, 338.0], [71.0, 338.0], [71.1, 339.0], [71.2, 339.0], [71.3, 339.0], [71.4, 339.0], [71.5, 339.0], [71.6, 339.0], [71.7, 339.0], [71.8, 339.0], [71.9, 339.0], [72.0, 340.0], [72.1, 340.0], [72.2, 340.0], [72.3, 340.0], [72.4, 340.0], [72.5, 340.0], [72.6, 340.0], [72.7, 341.0], [72.8, 341.0], [72.9, 341.0], [73.0, 341.0], [73.1, 341.0], [73.2, 341.0], [73.3, 341.0], [73.4, 341.0], [73.5, 342.0], [73.6, 342.0], [73.7, 342.0], [73.8, 342.0], [73.9, 342.0], [74.0, 342.0], [74.1, 342.0], [74.2, 343.0], [74.3, 343.0], [74.4, 343.0], [74.5, 343.0], [74.6, 343.0], [74.7, 343.0], [74.8, 343.0], [74.9, 343.0], [75.0, 343.0], [75.1, 344.0], [75.2, 344.0], [75.3, 344.0], [75.4, 344.0], [75.5, 344.0], [75.6, 344.0], [75.7, 344.0], [75.8, 344.0], [75.9, 345.0], [76.0, 345.0], [76.1, 345.0], [76.2, 345.0], [76.3, 345.0], [76.4, 345.0], [76.5, 345.0], [76.6, 346.0], [76.7, 346.0], [76.8, 346.0], [76.9, 346.0], [77.0, 346.0], [77.1, 346.0], [77.2, 347.0], [77.3, 347.0], [77.4, 347.0], [77.5, 347.0], [77.6, 347.0], [77.7, 347.0], [77.8, 347.0], [77.9, 348.0], [78.0, 348.0], [78.1, 348.0], [78.2, 348.0], [78.3, 348.0], [78.4, 348.0], [78.5, 348.0], [78.6, 349.0], [78.7, 349.0], [78.8, 349.0], [78.9, 349.0], [79.0, 349.0], [79.1, 349.0], [79.2, 349.0], [79.3, 349.0], [79.4, 350.0], [79.5, 350.0], [79.6, 350.0], [79.7, 350.0], [79.8, 350.0], [79.9, 351.0], [80.0, 351.0], [80.1, 351.0], [80.2, 351.0], [80.3, 351.0], [80.4, 351.0], [80.5, 352.0], [80.6, 352.0], [80.7, 352.0], [80.8, 352.0], [80.9, 352.0], [81.0, 353.0], [81.1, 353.0], [81.2, 353.0], [81.3, 353.0], [81.4, 353.0], [81.5, 354.0], [81.6, 354.0], [81.7, 354.0], [81.8, 354.0], [81.9, 354.0], [82.0, 355.0], [82.1, 355.0], [82.2, 355.0], [82.3, 355.0], [82.4, 355.0], [82.5, 355.0], [82.6, 356.0], [82.7, 356.0], [82.8, 356.0], [82.9, 356.0], [83.0, 356.0], [83.1, 357.0], [83.2, 357.0], [83.3, 357.0], [83.4, 357.0], [83.5, 358.0], [83.6, 358.0], [83.7, 358.0], [83.8, 358.0], [83.9, 358.0], [84.0, 359.0], [84.1, 359.0], [84.2, 359.0], [84.3, 359.0], [84.4, 359.0], [84.5, 360.0], [84.6, 360.0], [84.7, 360.0], [84.8, 361.0], [84.9, 361.0], [85.0, 361.0], [85.1, 361.0], [85.2, 361.0], [85.3, 362.0], [85.4, 362.0], [85.5, 362.0], [85.6, 362.0], [85.7, 363.0], [85.8, 363.0], [85.9, 363.0], [86.0, 363.0], [86.1, 364.0], [86.2, 364.0], [86.3, 364.0], [86.4, 365.0], [86.5, 365.0], [86.6, 365.0], [86.7, 365.0], [86.8, 366.0], [86.9, 366.0], [87.0, 366.0], [87.1, 367.0], [87.2, 367.0], [87.3, 367.0], [87.4, 368.0], [87.5, 368.0], [87.6, 368.0], [87.7, 368.0], [87.8, 369.0], [87.9, 369.0], [88.0, 369.0], [88.1, 370.0], [88.2, 370.0], [88.3, 370.0], [88.4, 371.0], [88.5, 371.0], [88.6, 371.0], [88.7, 372.0], [88.8, 372.0], [88.9, 373.0], [89.0, 373.0], [89.1, 373.0], [89.2, 374.0], [89.3, 374.0], [89.4, 374.0], [89.5, 375.0], [89.6, 375.0], [89.7, 375.0], [89.8, 376.0], [89.9, 376.0], [90.0, 376.0], [90.1, 377.0], [90.2, 377.0], [90.3, 377.0], [90.4, 378.0], [90.5, 378.0], [90.6, 378.0], [90.7, 379.0], [90.8, 379.0], [90.9, 380.0], [91.0, 380.0], [91.1, 381.0], [91.2, 381.0], [91.3, 382.0], [91.4, 382.0], [91.5, 382.0], [91.6, 383.0], [91.7, 383.0], [91.8, 384.0], [91.9, 384.0], [92.0, 385.0], [92.1, 385.0], [92.2, 386.0], [92.3, 387.0], [92.4, 388.0], [92.5, 389.0], [92.6, 389.0], [92.7, 390.0], [92.8, 391.0], [92.9, 391.0], [93.0, 392.0], [93.1, 393.0], [93.2, 393.0], [93.3, 394.0], [93.4, 394.0], [93.5, 395.0], [93.6, 396.0], [93.7, 397.0], [93.8, 398.0], [93.9, 399.0], [94.0, 399.0], [94.1, 400.0], [94.2, 401.0], [94.3, 402.0], [94.4, 403.0], [94.5, 404.0], [94.6, 405.0], [94.7, 406.0], [94.8, 407.0], [94.9, 408.0], [95.0, 409.0], [95.1, 411.0], [95.2, 412.0], [95.3, 413.0], [95.4, 414.0], [95.5, 415.0], [95.6, 416.0], [95.7, 417.0], [95.8, 418.0], [95.9, 419.0], [96.0, 421.0], [96.1, 422.0], [96.2, 423.0], [96.3, 426.0], [96.4, 428.0], [96.5, 431.0], [96.6, 432.0], [96.7, 434.0], [96.8, 436.0], [96.9, 438.0], [97.0, 440.0], [97.1, 443.0], [97.2, 446.0], [97.3, 449.0], [97.4, 451.0], [97.5, 453.0], [97.6, 455.0], [97.7, 458.0], [97.8, 461.0], [97.9, 464.0], [98.0, 467.0], [98.1, 472.0], [98.2, 476.0], [98.3, 481.0], [98.4, 487.0], [98.5, 492.0], [98.6, 502.0], [98.7, 507.0], [98.8, 520.0], [98.9, 527.0], [99.0, 539.0], [99.1, 552.0], [99.2, 571.0], [99.3, 594.0], [99.4, 650.0], [99.5, 722.0], [99.6, 825.0], [99.7, 939.0], [99.8, 1180.0], [99.9, 1692.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 8928.0, "series": [{"data": [[0.0, 7684.0], [300.0, 199.0], [600.0, 3.0], [100.0, 6013.0], [200.0, 1082.0], [400.0, 16.0], [500.0, 3.0]], "isOverall": false, "label": "OS Process Sampler", "isController": false}, {"data": [[2100.0, 3.0], [2200.0, 1.0], [2300.0, 1.0], [600.0, 22.0], [2600.0, 1.0], [2700.0, 1.0], [700.0, 17.0], [200.0, 5175.0], [800.0, 13.0], [3500.0, 1.0], [3600.0, 1.0], [900.0, 10.0], [1000.0, 8.0], [1100.0, 6.0], [300.0, 8928.0], [1200.0, 1.0], [1400.0, 2.0], [1500.0, 3.0], [400.0, 685.0], [1600.0, 7.0], [1900.0, 1.0], [2000.0, 4.0], [500.0, 109.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 3600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 24.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 29782.0, "series": [{"data": [[0.0, 29782.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 194.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 24.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 2.5921052631578942, "minX": 1.73866152E12, "maxY": 3.0, "series": [{"data": [[1.73866236E12, 3.0], [1.73866206E12, 3.0], [1.73866266E12, 3.0], [1.73866296E12, 3.0], [1.73866164E12, 3.0], [1.73866326E12, 3.0], [1.73866356E12, 3.0], [1.73866224E12, 3.0], [1.73866194E12, 3.0], [1.73866254E12, 3.0], [1.73866284E12, 3.0], [1.73866152E12, 2.987804878048782], [1.73866314E12, 3.0], [1.73866344E12, 3.0], [1.73866212E12, 3.0], [1.73866374E12, 2.5921052631578942], [1.73866182E12, 3.0], [1.73866272E12, 3.0], [1.73866242E12, 3.0], [1.73866302E12, 3.0], [1.73866332E12, 3.0], [1.738662E12, 3.0], [1.73866362E12, 3.0], [1.7386617E12, 3.0], [1.7386626E12, 3.0], [1.7386623E12, 3.0], [1.7386629E12, 3.0], [1.7386632E12, 3.0], [1.73866188E12, 3.0], [1.7386635E12, 3.0], [1.73866158E12, 3.0], [1.73866248E12, 3.0], [1.73866218E12, 3.0], [1.73866278E12, 3.0], [1.73866308E12, 3.0], [1.73866176E12, 3.0], [1.73866338E12, 3.0], [1.73866368E12, 3.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73866374E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 105.875, "minX": 1.0, "maxY": 349.0, "series": [{"data": [[2.0, 126.0], [1.0, 105.875], [3.0, 111.41831765726094]], "isOverall": false, "label": "OS Process Sampler", "isController": false}, {"data": [[2.9988666666666637, 111.41633333333269]], "isOverall": false, "label": "OS Process Sampler-Aggregated", "isController": false}, {"data": [[2.0, 349.0], [1.0, 318.375], [3.0, 324.8933360016021]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}, {"data": [[2.9988666666666663, 324.89146666666784]], "isOverall": false, "label": "HTTP Request - enroll-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 3.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 934.05, "minX": 1.73866152E12, "maxY": 53421.666666666664, "series": [{"data": [[1.73866236E12, 50097.416666666664], [1.73866206E12, 51315.683333333334], [1.73866266E12, 52544.0], [1.73866296E12, 48316.7], [1.73866164E12, 52724.916666666664], [1.73866326E12, 47485.88333333333], [1.73866356E12, 45942.48333333333], [1.73866224E12, 50794.45], [1.73866194E12, 50231.71666666667], [1.73866254E12, 48450.96666666667], [1.73866284E12, 48032.816666666666], [1.73866152E12, 14514.05], [1.73866314E12, 46417.583333333336], [1.73866344E12, 47145.13333333333], [1.73866212E12, 51625.433333333334], [1.73866374E12, 4598.883333333333], [1.73866182E12, 51759.5], [1.73866272E12, 50825.316666666666], [1.73866242E12, 49726.03333333333], [1.73866302E12, 48776.26666666667], [1.73866332E12, 43093.316666666666], [1.738662E12, 52203.433333333334], [1.73866362E12, 46773.63333333333], [1.7386617E12, 51609.96666666667], [1.7386626E12, 49504.15], [1.7386623E12, 45483.3], [1.7386629E12, 47398.13333333333], [1.7386632E12, 42634.03333333333], [1.73866188E12, 52858.75], [1.7386635E12, 46401.833333333336], [1.73866158E12, 53421.666666666664], [1.73866248E12, 51759.5], [1.73866218E12, 52250.05], [1.73866278E12, 46923.21666666667], [1.73866308E12, 45720.71666666667], [1.73866176E12, 48776.316666666666], [1.73866338E12, 47470.416666666664], [1.73866368E12, 45111.53333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.73866236E12, 10106.9], [1.73866206E12, 10346.4], [1.73866266E12, 10609.85], [1.73866296E12, 9747.65], [1.73866164E12, 10633.8], [1.73866326E12, 9580.0], [1.73866356E12, 9268.65], [1.73866224E12, 10250.6], [1.73866194E12, 10130.85], [1.73866254E12, 9771.6], [1.73866284E12, 9699.75], [1.73866152E12, 2921.9], [1.73866314E12, 9364.45], [1.73866344E12, 9508.15], [1.73866212E12, 10418.25], [1.73866374E12, 934.05], [1.73866182E12, 10442.2], [1.73866272E12, 10250.6], [1.73866242E12, 10035.05], [1.73866302E12, 9843.45], [1.73866332E12, 8693.85], [1.738662E12, 10538.0], [1.73866362E12, 9436.3], [1.7386617E12, 10418.25], [1.7386626E12, 9987.15], [1.7386623E12, 9172.85], [1.7386629E12, 9556.05], [1.7386632E12, 8598.05], [1.73866188E12, 10657.75], [1.7386635E12, 9364.45], [1.73866158E12, 10777.5], [1.73866248E12, 10442.2], [1.73866218E12, 10538.0], [1.73866278E12, 9460.25], [1.73866308E12, 9220.75], [1.73866176E12, 9843.45], [1.73866338E12, 9580.0], [1.73866368E12, 9101.0]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73866374E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 103.6658354114713, "minX": 1.73866152E12, "maxY": 379.7134986225894, "series": [{"data": [[1.73866236E12, 112.87677725118478], [1.73866206E12, 111.72119815668204], [1.73866266E12, 104.49545454545449], [1.73866296E12, 109.34152334152323], [1.73866164E12, 115.15505617977517], [1.73866326E12, 110.48249999999996], [1.73866356E12, 105.12661498708016], [1.73866224E12, 114.70023419203748], [1.73866194E12, 109.89858490566039], [1.73866254E12, 114.68215158924205], [1.73866284E12, 109.89552238805976], [1.73866152E12, 121.95967741935483], [1.73866314E12, 111.2199488491049], [1.73866344E12, 108.63316582914572], [1.73866212E12, 109.05299539170507], [1.73866374E12, 107.64864864864866], [1.73866182E12, 113.31192660550465], [1.73866272E12, 113.94405594405595], [1.73866242E12, 115.16267942583731], [1.73866302E12, 108.08048780487806], [1.73866332E12, 115.53168044077132], [1.738662E12, 105.97260273972601], [1.73866362E12, 108.72081218274106], [1.7386617E12, 109.03695150115476], [1.7386626E12, 112.46522781774576], [1.7386623E12, 125.17187500000001], [1.7386629E12, 103.6658354114713], [1.7386632E12, 122.67222222222213], [1.73866188E12, 111.63758389261741], [1.7386635E12, 107.79487179487172], [1.73866158E12, 111.62444444444448], [1.73866248E12, 114.76146788990825], [1.73866218E12, 110.73696145124714], [1.73866278E12, 109.85642317380348], [1.73866308E12, 105.16580310880835], [1.73866176E12, 117.75121951219506], [1.73866338E12, 110.37343358395985], [1.73866368E12, 108.69473684210529]], "isOverall": false, "label": "OS Process Sampler", "isController": false}, {"data": [[1.73866236E12, 312.175355450237], [1.73866206E12, 303.32638888888886], [1.73866266E12, 301.979683972912], [1.73866296E12, 332.8746928746927], [1.73866164E12, 288.4504504504503], [1.73866326E12, 337.9774999999998], [1.73866356E12, 359.79328165374716], [1.73866224E12, 305.34345794392505], [1.73866194E12, 313.981087470449], [1.73866254E12, 326.0857843137254], [1.73866284E12, 335.92839506172845], [1.73866152E12, 332.155737704918], [1.73866314E12, 348.9590792838876], [1.73866344E12, 342.6901763224181], [1.73866212E12, 304.3287356321839], [1.73866374E12, 355.0769230769229], [1.73866182E12, 298.8371559633029], [1.73866272E12, 305.9299065420559], [1.73866242E12, 314.80190930787586], [1.73866302E12, 330.4647201946473], [1.73866332E12, 379.7134986225894], [1.738662E12, 303.9795454545454], [1.73866362E12, 347.28680203045667], [1.7386617E12, 305.54252873563206], [1.7386626E12, 318.62350119904113], [1.7386623E12, 343.83812010443864], [1.7386629E12, 345.6140350877193], [1.7386632E12, 378.1142061281338], [1.73866188E12, 291.5348314606746], [1.7386635E12, 353.1764705882354], [1.73866158E12, 287.0844444444443], [1.73866248E12, 298.06651376146834], [1.73866218E12, 297.6659090909087], [1.73866278E12, 343.73417721518996], [1.73866308E12, 360.76883116883107], [1.73866176E12, 320.1386861313867], [1.73866338E12, 340.10750000000013], [1.73866368E12, 363.8973684210528]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73866374E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.73866152E12, "maxY": 379.6914600550965, "series": [{"data": [[1.73866236E12, 0.0], [1.73866206E12, 0.0], [1.73866266E12, 0.0], [1.73866296E12, 0.0], [1.73866164E12, 0.0], [1.73866326E12, 0.0], [1.73866356E12, 0.0], [1.73866224E12, 0.0], [1.73866194E12, 0.0], [1.73866254E12, 0.0], [1.73866284E12, 0.0], [1.73866152E12, 0.0], [1.73866314E12, 0.0], [1.73866344E12, 0.0], [1.73866212E12, 0.0], [1.73866374E12, 0.0], [1.73866182E12, 0.0], [1.73866272E12, 0.0], [1.73866242E12, 0.0], [1.73866302E12, 0.0], [1.73866332E12, 0.0], [1.738662E12, 0.0], [1.73866362E12, 0.0], [1.7386617E12, 0.0], [1.7386626E12, 0.0], [1.7386623E12, 0.0], [1.7386629E12, 0.0], [1.7386632E12, 0.0], [1.73866188E12, 0.0], [1.7386635E12, 0.0], [1.73866158E12, 0.0], [1.73866248E12, 0.0], [1.73866218E12, 0.0], [1.73866278E12, 0.0], [1.73866308E12, 0.0], [1.73866176E12, 0.0], [1.73866338E12, 0.0], [1.73866368E12, 0.0]], "isOverall": false, "label": "OS Process Sampler", "isController": false}, {"data": [[1.73866236E12, 312.1611374407584], [1.73866206E12, 303.30324074074036], [1.73866266E12, 301.9593679458236], [1.73866296E12, 332.862407862408], [1.73866164E12, 288.40540540540553], [1.73866326E12, 337.9625], [1.73866356E12, 359.7829457364341], [1.73866224E12, 305.3177570093455], [1.73866194E12, 313.9574468085108], [1.73866254E12, 326.07352941176487], [1.73866284E12, 335.9185185185186], [1.73866152E12, 331.9098360655738], [1.73866314E12, 348.9437340153452], [1.73866344E12, 342.67002518891684], [1.73866212E12, 304.31264367816055], [1.73866374E12, 355.0769230769229], [1.73866182E12, 298.80733944954136], [1.73866272E12, 305.92289719626183], [1.73866242E12, 314.7947494033414], [1.73866302E12, 330.45012165450095], [1.73866332E12, 379.6914600550965], [1.738662E12, 303.9522727272728], [1.73866362E12, 347.26903553299525], [1.7386617E12, 305.5080459770117], [1.7386626E12, 318.6091127098322], [1.7386623E12, 343.8224543080941], [1.7386629E12, 345.5989974937341], [1.7386632E12, 378.09192200557106], [1.73866188E12, 291.51011235955076], [1.7386635E12, 353.1739130434779], [1.73866158E12, 287.03555555555505], [1.73866248E12, 298.06192660550454], [1.73866218E12, 297.6431818181819], [1.73866278E12, 343.71645569620244], [1.73866308E12, 360.7324675324676], [1.73866176E12, 320.09732360097325], [1.73866338E12, 340.08999999999975], [1.73866368E12, 363.8842105263157]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73866374E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.73866152E12, "maxY": 14.401639344262298, "series": [{"data": [[1.73866236E12, 0.0], [1.73866206E12, 0.0], [1.73866266E12, 0.0], [1.73866296E12, 0.0], [1.73866164E12, 0.0], [1.73866326E12, 0.0], [1.73866356E12, 0.0], [1.73866224E12, 0.0], [1.73866194E12, 0.0], [1.73866254E12, 0.0], [1.73866284E12, 0.0], [1.73866152E12, 0.0], [1.73866314E12, 0.0], [1.73866344E12, 0.0], [1.73866212E12, 0.0], [1.73866374E12, 0.0], [1.73866182E12, 0.0], [1.73866272E12, 0.0], [1.73866242E12, 0.0], [1.73866302E12, 0.0], [1.73866332E12, 0.0], [1.738662E12, 0.0], [1.73866362E12, 0.0], [1.7386617E12, 0.0], [1.7386626E12, 0.0], [1.7386623E12, 0.0], [1.7386629E12, 0.0], [1.7386632E12, 0.0], [1.73866188E12, 0.0], [1.7386635E12, 0.0], [1.73866158E12, 0.0], [1.73866248E12, 0.0], [1.73866218E12, 0.0], [1.73866278E12, 0.0], [1.73866308E12, 0.0], [1.73866176E12, 0.0], [1.73866338E12, 0.0], [1.73866368E12, 0.0]], "isOverall": false, "label": "OS Process Sampler", "isController": false}, {"data": [[1.73866236E12, 0.07819905213270145], [1.73866206E12, 0.06018518518518514], [1.73866266E12, 0.08577878103837475], [1.73866296E12, 0.06633906633906628], [1.73866164E12, 0.12162162162162149], [1.73866326E12, 0.1175], [1.73866356E12, 0.051679586563307504], [1.73866224E12, 0.10747663551401869], [1.73866194E12, 0.08747044917257683], [1.73866254E12, 0.07352941176470597], [1.73866284E12, 0.07160493827160491], [1.73866152E12, 14.401639344262298], [1.73866314E12, 0.06649616368286439], [1.73866344E12, 0.0680100755667506], [1.73866212E12, 0.06436781609195404], [1.73866374E12, 0.0], [1.73866182E12, 0.07568807339449544], [1.73866272E12, 0.10046728971962614], [1.73866242E12, 0.1050119331742244], [1.73866302E12, 0.03892944038929441], [1.73866332E12, 0.049586776859504134], [1.738662E12, 0.0613636363636363], [1.73866362E12, 0.0736040609137056], [1.7386617E12, 0.10574712643678162], [1.7386626E12, 0.059952038369304475], [1.7386623E12, 0.06266318537859004], [1.7386629E12, 0.08270676691729327], [1.7386632E12, 0.058495821727019504], [1.73866188E12, 0.15505617977528094], [1.7386635E12, 0.06649616368286439], [1.73866158E12, 0.16444444444444437], [1.73866248E12, 0.07798165137614682], [1.73866218E12, 0.11363636363636351], [1.73866278E12, 0.04556962025316456], [1.73866308E12, 0.049350649350649346], [1.73866176E12, 0.10705596107055969], [1.73866338E12, 0.07], [1.73866368E12, 0.06052631578947371]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73866374E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 21.0, "minX": 1.73866152E12, "maxY": 3605.0, "series": [{"data": [[1.73866236E12, 502.0], [1.73866206E12, 533.0], [1.73866266E12, 464.0], [1.73866296E12, 475.0], [1.73866164E12, 479.0], [1.73866326E12, 803.0], [1.73866356E12, 818.0], [1.73866224E12, 825.0], [1.73866194E12, 2242.0], [1.73866254E12, 1651.0], [1.73866284E12, 619.0], [1.73866152E12, 2010.0], [1.73866314E12, 550.0], [1.73866344E12, 650.0], [1.73866212E12, 560.0], [1.73866374E12, 532.0], [1.73866182E12, 604.0], [1.73866272E12, 399.0], [1.73866242E12, 701.0], [1.73866302E12, 1072.0], [1.73866332E12, 1167.0], [1.738662E12, 531.0], [1.73866362E12, 984.0], [1.7386617E12, 471.0], [1.7386626E12, 552.0], [1.7386623E12, 2660.0], [1.7386629E12, 639.0], [1.7386632E12, 1692.0], [1.73866188E12, 570.0], [1.7386635E12, 1180.0], [1.73866158E12, 401.0], [1.73866248E12, 522.0], [1.73866218E12, 523.0], [1.73866278E12, 2110.0], [1.73866308E12, 786.0], [1.73866176E12, 3605.0], [1.73866338E12, 671.0], [1.73866368E12, 1621.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.73866236E12, 338.0], [1.73866206E12, 328.0], [1.73866266E12, 324.20000000000005], [1.73866296E12, 361.0], [1.73866164E12, 313.0], [1.73866326E12, 358.0], [1.73866356E12, 392.5], [1.73866224E12, 327.4], [1.73866194E12, 326.0], [1.73866254E12, 344.20000000000005], [1.73866284E12, 361.20000000000005], [1.73866152E12, 319.0], [1.73866314E12, 377.70000000000005], [1.73866344E12, 366.0], [1.73866212E12, 330.0], [1.73866374E12, 378.3], [1.73866182E12, 316.0], [1.73866272E12, 330.20000000000005], [1.73866242E12, 336.20000000000005], [1.73866302E12, 349.0], [1.73866332E12, 414.60000000000014], [1.738662E12, 330.1], [1.73866362E12, 368.1], [1.7386617E12, 338.1], [1.7386626E12, 342.0], [1.7386623E12, 344.20000000000005], [1.7386629E12, 376.0], [1.7386632E12, 373.0], [1.73866188E12, 315.0], [1.7386635E12, 374.0], [1.73866158E12, 314.0], [1.73866248E12, 322.70000000000005], [1.73866218E12, 321.0], [1.73866278E12, 363.70000000000005], [1.73866308E12, 400.0], [1.73866176E12, 326.0], [1.73866338E12, 362.0], [1.73866368E12, 377.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.73866236E12, 427.54999999999995], [1.73866206E12, 442.33000000000004], [1.73866266E12, 383.79999999999984], [1.73866296E12, 411.55000000000007], [1.73866164E12, 392.1], [1.73866326E12, 478.9000000000001], [1.73866356E12, 499.0], [1.73866224E12, 481.95999999999947], [1.73866194E12, 473.0799999999995], [1.73866254E12, 454.73999999999955], [1.73866284E12, 448.91999999999996], [1.73866152E12, 2009.0], [1.73866314E12, 475.3399999999999], [1.73866344E12, 504.1199999999999], [1.73866212E12, 435.89999999999986], [1.73866374E12, 532.0], [1.73866182E12, 491.39999999999964], [1.73866272E12, 362.8399999999999], [1.73866242E12, 443.48], [1.73866302E12, 460.7799999999986], [1.73866332E12, 773.8300000000013], [1.738662E12, 464.21000000000004], [1.73866362E12, 463.55000000000007], [1.7386617E12, 423.8599999999997], [1.7386626E12, 466.65], [1.7386623E12, 981.9599999999887], [1.7386629E12, 480.8700000000001], [1.7386632E12, 1099.1999999999941], [1.73866188E12, 403.119999999999], [1.7386635E12, 546.2599999999996], [1.73866158E12, 367.99], [1.73866248E12, 381.0799999999999], [1.73866218E12, 375.3599999999999], [1.73866278E12, 547.0], [1.73866308E12, 529.56], [1.73866176E12, 392.78], [1.73866338E12, 455.0], [1.73866368E12, 520.0699999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.73866236E12, 362.75], [1.73866206E12, 357.29999999999995], [1.73866266E12, 339.0], [1.73866296E12, 375.0], [1.73866164E12, 329.5], [1.73866326E12, 374.94999999999993], [1.73866356E12, 419.5], [1.73866224E12, 346.19999999999993], [1.73866194E12, 345.5999999999999], [1.73866254E12, 368.0999999999999], [1.73866284E12, 395.1999999999998], [1.73866152E12, 340.65], [1.73866314E12, 420.8499999999999], [1.73866344E12, 386.99999999999966], [1.73866212E12, 356.5], [1.73866374E12, 414.19999999999976], [1.73866182E12, 344.0], [1.73866272E12, 339.0999999999999], [1.73866242E12, 357.0], [1.73866302E12, 364.79999999999995], [1.73866332E12, 474.2499999999999], [1.738662E12, 351.0], [1.73866362E12, 390.0], [1.7386617E12, 363.0], [1.7386626E12, 371.25], [1.7386623E12, 370.0], [1.7386629E12, 401.89999999999986], [1.7386632E12, 413.0], [1.73866188E12, 329.3499999999999], [1.7386635E12, 403.0], [1.73866158E12, 327.0], [1.73866248E12, 336.0], [1.73866218E12, 334.0], [1.73866278E12, 389.6999999999998], [1.73866308E12, 452.4], [1.73866176E12, 342.9], [1.73866338E12, 382.0], [1.73866368E12, 395.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.73866236E12, 28.0], [1.73866206E12, 26.0], [1.73866266E12, 28.0], [1.73866296E12, 29.0], [1.73866164E12, 24.0], [1.73866326E12, 24.0], [1.73866356E12, 23.0], [1.73866224E12, 28.0], [1.73866194E12, 24.0], [1.73866254E12, 25.0], [1.73866284E12, 26.0], [1.73866152E12, 27.0], [1.73866314E12, 27.0], [1.73866344E12, 21.0], [1.73866212E12, 29.0], [1.73866374E12, 33.0], [1.73866182E12, 29.0], [1.73866272E12, 29.0], [1.73866242E12, 25.0], [1.73866302E12, 26.0], [1.73866332E12, 28.0], [1.738662E12, 26.0], [1.73866362E12, 27.0], [1.7386617E12, 26.0], [1.7386626E12, 26.0], [1.7386623E12, 24.0], [1.7386629E12, 27.0], [1.7386632E12, 23.0], [1.73866188E12, 28.0], [1.7386635E12, 26.0], [1.73866158E12, 23.0], [1.73866248E12, 29.0], [1.73866218E12, 26.0], [1.73866278E12, 21.0], [1.73866308E12, 25.0], [1.73866176E12, 25.0], [1.73866338E12, 24.0], [1.73866368E12, 24.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.73866236E12, 245.0], [1.73866206E12, 238.0], [1.73866266E12, 243.0], [1.73866296E12, 263.5], [1.73866164E12, 235.0], [1.73866326E12, 269.5], [1.73866356E12, 272.5], [1.73866224E12, 247.0], [1.73866194E12, 240.0], [1.73866254E12, 253.0], [1.73866284E12, 262.0], [1.73866152E12, 243.0], [1.73866314E12, 274.0], [1.73866344E12, 261.0], [1.73866212E12, 238.0], [1.73866374E12, 279.5], [1.73866182E12, 236.0], [1.73866272E12, 247.0], [1.73866242E12, 251.0], [1.73866302E12, 263.0], [1.73866332E12, 274.0], [1.738662E12, 238.0], [1.73866362E12, 276.0], [1.7386617E12, 236.0], [1.7386626E12, 253.0], [1.7386623E12, 247.0], [1.7386629E12, 265.5], [1.7386632E12, 282.0], [1.73866188E12, 234.0], [1.7386635E12, 275.0], [1.73866158E12, 231.0], [1.73866248E12, 238.0], [1.73866218E12, 238.0], [1.73866278E12, 254.5], [1.73866308E12, 264.0], [1.73866176E12, 238.0], [1.73866338E12, 272.0], [1.73866368E12, 281.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73866374E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 158.5, "minX": 1.0, "maxY": 1479.5, "series": [{"data": [[2.0, 158.5], [8.0, 161.5], [9.0, 267.0], [10.0, 294.0], [11.0, 279.0], [12.0, 262.0], [3.0, 359.0], [13.0, 251.0], [14.0, 244.5], [15.0, 244.0], [1.0, 409.5], [16.0, 235.0], [4.0, 1479.5], [17.0, 233.0], [18.0, 226.5], [5.0, 359.0], [6.0, 262.5], [7.0, 251.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 18.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 1479.5, "series": [{"data": [[2.0, 0.0], [8.0, 0.0], [9.0, 0.0], [10.0, 273.0], [11.0, 263.0], [12.0, 111.0], [3.0, 0.0], [13.0, 0.0], [14.0, 0.0], [15.0, 231.0], [1.0, 0.0], [16.0, 228.0], [4.0, 1479.5], [17.0, 229.0], [18.0, 110.0], [5.0, 308.5], [6.0, 142.0], [7.0, 251.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 18.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 1.2166666666666666, "minX": 1.73866152E12, "maxY": 15.0, "series": [{"data": [[1.73866236E12, 14.066666666666666], [1.73866206E12, 14.433333333333334], [1.73866266E12, 14.716666666666667], [1.73866296E12, 13.566666666666666], [1.73866164E12, 14.816666666666666], [1.73866326E12, 13.333333333333334], [1.73866356E12, 12.9], [1.73866224E12, 14.25], [1.73866194E12, 14.116666666666667], [1.73866254E12, 13.616666666666667], [1.73866284E12, 13.45], [1.73866152E12, 4.15], [1.73866314E12, 13.033333333333333], [1.73866344E12, 13.25], [1.73866212E12, 14.483333333333333], [1.73866374E12, 1.2166666666666666], [1.73866182E12, 14.533333333333333], [1.73866272E12, 14.283333333333333], [1.73866242E12, 13.95], [1.73866302E12, 13.683333333333334], [1.73866332E12, 12.1], [1.738662E12, 14.633333333333333], [1.73866362E12, 13.133333333333333], [1.7386617E12, 14.466666666666667], [1.7386626E12, 13.9], [1.7386623E12, 12.783333333333333], [1.7386629E12, 13.333333333333334], [1.7386632E12, 11.983333333333333], [1.73866188E12, 14.866666666666667], [1.7386635E12, 13.016666666666667], [1.73866158E12, 15.0], [1.73866248E12, 14.533333333333333], [1.73866218E12, 14.683333333333334], [1.73866278E12, 13.2], [1.73866308E12, 12.85], [1.73866176E12, 13.683333333333334], [1.73866338E12, 13.316666666666666], [1.73866368E12, 12.666666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73866374E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.6166666666666667, "minX": 1.73866152E12, "maxY": 7.5, "series": [{"data": [[1.73866236E12, 7.033333333333333], [1.73866206E12, 7.233333333333333], [1.73866266E12, 7.333333333333333], [1.73866296E12, 6.783333333333333], [1.73866164E12, 7.416666666666667], [1.73866326E12, 6.666666666666667], [1.73866356E12, 6.45], [1.73866224E12, 7.116666666666666], [1.73866194E12, 7.066666666666666], [1.73866254E12, 6.816666666666666], [1.73866284E12, 6.7], [1.73866152E12, 2.066666666666667], [1.73866314E12, 6.516666666666667], [1.73866344E12, 6.633333333333334], [1.73866212E12, 7.233333333333333], [1.73866374E12, 0.6166666666666667], [1.73866182E12, 7.266666666666667], [1.73866272E12, 7.15], [1.73866242E12, 6.966666666666667], [1.73866302E12, 6.833333333333333], [1.73866332E12, 6.05], [1.738662E12, 7.3], [1.73866362E12, 6.566666666666666], [1.7386617E12, 7.216666666666667], [1.7386626E12, 6.95], [1.7386623E12, 6.4], [1.7386629E12, 6.683333333333334], [1.7386632E12, 6.0], [1.73866188E12, 7.45], [1.7386635E12, 6.5], [1.73866158E12, 7.5], [1.73866248E12, 7.266666666666667], [1.73866218E12, 7.35], [1.73866278E12, 6.616666666666666], [1.73866308E12, 6.433333333333334], [1.73866176E12, 6.833333333333333], [1.73866338E12, 6.65], [1.73866368E12, 6.333333333333333]], "isOverall": false, "label": "0", "isController": false}, {"data": [[1.73866236E12, 7.033333333333333], [1.73866206E12, 7.2], [1.73866266E12, 7.383333333333334], [1.73866296E12, 6.783333333333333], [1.73866164E12, 7.4], [1.73866326E12, 6.666666666666667], [1.73866356E12, 6.45], [1.73866224E12, 7.133333333333334], [1.73866194E12, 7.05], [1.73866254E12, 6.8], [1.73866284E12, 6.75], [1.73866152E12, 2.033333333333333], [1.73866314E12, 6.516666666666667], [1.73866344E12, 6.616666666666666], [1.73866212E12, 7.25], [1.73866374E12, 0.65], [1.73866182E12, 7.266666666666667], [1.73866272E12, 7.133333333333334], [1.73866242E12, 6.983333333333333], [1.73866302E12, 6.85], [1.73866332E12, 6.05], [1.738662E12, 7.333333333333333], [1.73866362E12, 6.566666666666666], [1.7386617E12, 7.25], [1.7386626E12, 6.95], [1.7386623E12, 6.383333333333334], [1.7386629E12, 6.65], [1.7386632E12, 5.983333333333333], [1.73866188E12, 7.416666666666667], [1.7386635E12, 6.516666666666667], [1.73866158E12, 7.5], [1.73866248E12, 7.266666666666667], [1.73866218E12, 7.333333333333333], [1.73866278E12, 6.583333333333333], [1.73866308E12, 6.416666666666667], [1.73866176E12, 6.85], [1.73866338E12, 6.666666666666667], [1.73866368E12, 6.333333333333333]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.73866374E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.6166666666666667, "minX": 1.73866152E12, "maxY": 7.5, "series": [{"data": [[1.73866236E12, 7.033333333333333], [1.73866206E12, 7.233333333333333], [1.73866266E12, 7.333333333333333], [1.73866296E12, 6.783333333333333], [1.73866164E12, 7.416666666666667], [1.73866326E12, 6.666666666666667], [1.73866356E12, 6.45], [1.73866224E12, 7.116666666666666], [1.73866194E12, 7.066666666666666], [1.73866254E12, 6.816666666666666], [1.73866284E12, 6.7], [1.73866152E12, 2.066666666666667], [1.73866314E12, 6.516666666666667], [1.73866344E12, 6.633333333333334], [1.73866212E12, 7.233333333333333], [1.73866374E12, 0.6166666666666667], [1.73866182E12, 7.266666666666667], [1.73866272E12, 7.15], [1.73866242E12, 6.966666666666667], [1.73866302E12, 6.833333333333333], [1.73866332E12, 6.05], [1.738662E12, 7.3], [1.73866362E12, 6.566666666666666], [1.7386617E12, 7.216666666666667], [1.7386626E12, 6.95], [1.7386623E12, 6.4], [1.7386629E12, 6.683333333333334], [1.7386632E12, 6.0], [1.73866188E12, 7.45], [1.7386635E12, 6.5], [1.73866158E12, 7.5], [1.73866248E12, 7.266666666666667], [1.73866218E12, 7.35], [1.73866278E12, 6.616666666666666], [1.73866308E12, 6.433333333333334], [1.73866176E12, 6.833333333333333], [1.73866338E12, 6.65], [1.73866368E12, 6.333333333333333]], "isOverall": false, "label": "OS Process Sampler-success", "isController": false}, {"data": [[1.73866236E12, 7.033333333333333], [1.73866206E12, 7.2], [1.73866266E12, 7.383333333333334], [1.73866296E12, 6.783333333333333], [1.73866164E12, 7.4], [1.73866326E12, 6.666666666666667], [1.73866356E12, 6.45], [1.73866224E12, 7.133333333333334], [1.73866194E12, 7.05], [1.73866254E12, 6.8], [1.73866284E12, 6.75], [1.73866152E12, 2.033333333333333], [1.73866314E12, 6.516666666666667], [1.73866344E12, 6.616666666666666], [1.73866212E12, 7.25], [1.73866374E12, 0.65], [1.73866182E12, 7.266666666666667], [1.73866272E12, 7.133333333333334], [1.73866242E12, 6.983333333333333], [1.73866302E12, 6.85], [1.73866332E12, 6.05], [1.738662E12, 7.333333333333333], [1.73866362E12, 6.566666666666666], [1.7386617E12, 7.25], [1.7386626E12, 6.95], [1.7386623E12, 6.383333333333334], [1.7386629E12, 6.65], [1.7386632E12, 5.983333333333333], [1.73866188E12, 7.416666666666667], [1.7386635E12, 6.516666666666667], [1.73866158E12, 7.5], [1.73866248E12, 7.266666666666667], [1.73866218E12, 7.333333333333333], [1.73866278E12, 6.583333333333333], [1.73866308E12, 6.416666666666667], [1.73866176E12, 6.85], [1.73866338E12, 6.666666666666667], [1.73866368E12, 6.333333333333333]], "isOverall": false, "label": "HTTP Request - enroll-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73866374E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 1.2666666666666666, "minX": 1.73866152E12, "maxY": 15.0, "series": [{"data": [[1.73866236E12, 14.066666666666666], [1.73866206E12, 14.433333333333334], [1.73866266E12, 14.716666666666667], [1.73866296E12, 13.566666666666666], [1.73866164E12, 14.816666666666666], [1.73866326E12, 13.333333333333334], [1.73866356E12, 12.9], [1.73866224E12, 14.25], [1.73866194E12, 14.116666666666667], [1.73866254E12, 13.616666666666667], [1.73866284E12, 13.45], [1.73866152E12, 4.1], [1.73866314E12, 13.033333333333333], [1.73866344E12, 13.25], [1.73866212E12, 14.483333333333333], [1.73866374E12, 1.2666666666666666], [1.73866182E12, 14.533333333333333], [1.73866272E12, 14.283333333333333], [1.73866242E12, 13.95], [1.73866302E12, 13.683333333333334], [1.73866332E12, 12.1], [1.738662E12, 14.633333333333333], [1.73866362E12, 13.133333333333333], [1.7386617E12, 14.466666666666667], [1.7386626E12, 13.9], [1.7386623E12, 12.783333333333333], [1.7386629E12, 13.333333333333334], [1.7386632E12, 11.983333333333333], [1.73866188E12, 14.866666666666667], [1.7386635E12, 13.016666666666667], [1.73866158E12, 15.0], [1.73866248E12, 14.533333333333333], [1.73866218E12, 14.683333333333334], [1.73866278E12, 13.2], [1.73866308E12, 12.85], [1.73866176E12, 13.683333333333334], [1.73866338E12, 13.316666666666666], [1.73866368E12, 12.666666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.73866374E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 0);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

