/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 24.0, "minX": 0.0, "maxY": 1967.0, "series": [{"data": [[0.0, 116.0], [0.1, 123.0], [0.2, 125.0], [0.3, 127.0], [0.4, 130.0], [0.5, 132.0], [0.6, 134.0], [0.7, 135.0], [0.8, 138.0], [0.9, 138.0], [1.0, 140.0], [1.1, 141.0], [1.2, 143.0], [1.3, 144.0], [1.4, 145.0], [1.5, 147.0], [1.6, 148.0], [1.7, 149.0], [1.8, 150.0], [1.9, 151.0], [2.0, 151.0], [2.1, 152.0], [2.2, 153.0], [2.3, 154.0], [2.4, 155.0], [2.5, 155.0], [2.6, 157.0], [2.7, 158.0], [2.8, 159.0], [2.9, 160.0], [3.0, 160.0], [3.1, 161.0], [3.2, 162.0], [3.3, 162.0], [3.4, 164.0], [3.5, 164.0], [3.6, 165.0], [3.7, 166.0], [3.8, 167.0], [3.9, 168.0], [4.0, 169.0], [4.1, 170.0], [4.2, 170.0], [4.3, 171.0], [4.4, 171.0], [4.5, 172.0], [4.6, 173.0], [4.7, 173.0], [4.8, 174.0], [4.9, 174.0], [5.0, 175.0], [5.1, 176.0], [5.2, 177.0], [5.3, 177.0], [5.4, 178.0], [5.5, 178.0], [5.6, 179.0], [5.7, 179.0], [5.8, 180.0], [5.9, 180.0], [6.0, 181.0], [6.1, 182.0], [6.2, 182.0], [6.3, 183.0], [6.4, 184.0], [6.5, 184.0], [6.6, 185.0], [6.7, 185.0], [6.8, 186.0], [6.9, 187.0], [7.0, 187.0], [7.1, 188.0], [7.2, 189.0], [7.3, 190.0], [7.4, 190.0], [7.5, 190.0], [7.6, 191.0], [7.7, 191.0], [7.8, 192.0], [7.9, 193.0], [8.0, 193.0], [8.1, 194.0], [8.2, 194.0], [8.3, 195.0], [8.4, 196.0], [8.5, 196.0], [8.6, 196.0], [8.7, 197.0], [8.8, 198.0], [8.9, 198.0], [9.0, 199.0], [9.1, 200.0], [9.2, 200.0], [9.3, 201.0], [9.4, 201.0], [9.5, 201.0], [9.6, 202.0], [9.7, 203.0], [9.8, 203.0], [9.9, 204.0], [10.0, 204.0], [10.1, 205.0], [10.2, 205.0], [10.3, 206.0], [10.4, 206.0], [10.5, 207.0], [10.6, 207.0], [10.7, 208.0], [10.8, 209.0], [10.9, 209.0], [11.0, 210.0], [11.1, 210.0], [11.2, 211.0], [11.3, 211.0], [11.4, 212.0], [11.5, 212.0], [11.6, 213.0], [11.7, 213.0], [11.8, 214.0], [11.9, 214.0], [12.0, 215.0], [12.1, 215.0], [12.2, 216.0], [12.3, 216.0], [12.4, 217.0], [12.5, 217.0], [12.6, 218.0], [12.7, 218.0], [12.8, 219.0], [12.9, 219.0], [13.0, 220.0], [13.1, 220.0], [13.2, 220.0], [13.3, 221.0], [13.4, 221.0], [13.5, 222.0], [13.6, 222.0], [13.7, 223.0], [13.8, 224.0], [13.9, 225.0], [14.0, 225.0], [14.1, 225.0], [14.2, 226.0], [14.3, 227.0], [14.4, 227.0], [14.5, 228.0], [14.6, 228.0], [14.7, 229.0], [14.8, 230.0], [14.9, 230.0], [15.0, 230.0], [15.1, 231.0], [15.2, 231.0], [15.3, 232.0], [15.4, 232.0], [15.5, 233.0], [15.6, 234.0], [15.7, 234.0], [15.8, 235.0], [15.9, 235.0], [16.0, 235.0], [16.1, 236.0], [16.2, 236.0], [16.3, 237.0], [16.4, 237.0], [16.5, 238.0], [16.6, 238.0], [16.7, 239.0], [16.8, 239.0], [16.9, 240.0], [17.0, 240.0], [17.1, 241.0], [17.2, 241.0], [17.3, 241.0], [17.4, 242.0], [17.5, 243.0], [17.6, 243.0], [17.7, 243.0], [17.8, 244.0], [17.9, 244.0], [18.0, 245.0], [18.1, 245.0], [18.2, 246.0], [18.3, 246.0], [18.4, 247.0], [18.5, 247.0], [18.6, 248.0], [18.7, 248.0], [18.8, 249.0], [18.9, 249.0], [19.0, 250.0], [19.1, 250.0], [19.2, 251.0], [19.3, 251.0], [19.4, 251.0], [19.5, 252.0], [19.6, 252.0], [19.7, 253.0], [19.8, 253.0], [19.9, 253.0], [20.0, 254.0], [20.1, 254.0], [20.2, 254.0], [20.3, 255.0], [20.4, 255.0], [20.5, 256.0], [20.6, 256.0], [20.7, 257.0], [20.8, 257.0], [20.9, 258.0], [21.0, 259.0], [21.1, 259.0], [21.2, 260.0], [21.3, 260.0], [21.4, 260.0], [21.5, 261.0], [21.6, 261.0], [21.7, 262.0], [21.8, 263.0], [21.9, 263.0], [22.0, 263.0], [22.1, 264.0], [22.2, 264.0], [22.3, 265.0], [22.4, 265.0], [22.5, 266.0], [22.6, 266.0], [22.7, 266.0], [22.8, 267.0], [22.9, 267.0], [23.0, 268.0], [23.1, 268.0], [23.2, 269.0], [23.3, 269.0], [23.4, 270.0], [23.5, 270.0], [23.6, 271.0], [23.7, 271.0], [23.8, 272.0], [23.9, 272.0], [24.0, 273.0], [24.1, 273.0], [24.2, 273.0], [24.3, 274.0], [24.4, 274.0], [24.5, 275.0], [24.6, 275.0], [24.7, 276.0], [24.8, 276.0], [24.9, 277.0], [25.0, 277.0], [25.1, 277.0], [25.2, 278.0], [25.3, 278.0], [25.4, 279.0], [25.5, 279.0], [25.6, 280.0], [25.7, 280.0], [25.8, 281.0], [25.9, 281.0], [26.0, 281.0], [26.1, 282.0], [26.2, 283.0], [26.3, 283.0], [26.4, 284.0], [26.5, 284.0], [26.6, 285.0], [26.7, 285.0], [26.8, 285.0], [26.9, 286.0], [27.0, 286.0], [27.1, 287.0], [27.2, 288.0], [27.3, 288.0], [27.4, 288.0], [27.5, 289.0], [27.6, 289.0], [27.7, 290.0], [27.8, 290.0], [27.9, 290.0], [28.0, 291.0], [28.1, 292.0], [28.2, 292.0], [28.3, 292.0], [28.4, 293.0], [28.5, 293.0], [28.6, 294.0], [28.7, 295.0], [28.8, 295.0], [28.9, 296.0], [29.0, 296.0], [29.1, 297.0], [29.2, 297.0], [29.3, 298.0], [29.4, 298.0], [29.5, 298.0], [29.6, 299.0], [29.7, 299.0], [29.8, 300.0], [29.9, 300.0], [30.0, 301.0], [30.1, 301.0], [30.2, 301.0], [30.3, 302.0], [30.4, 302.0], [30.5, 302.0], [30.6, 303.0], [30.7, 303.0], [30.8, 304.0], [30.9, 304.0], [31.0, 305.0], [31.1, 305.0], [31.2, 306.0], [31.3, 307.0], [31.4, 307.0], [31.5, 308.0], [31.6, 308.0], [31.7, 309.0], [31.8, 309.0], [31.9, 310.0], [32.0, 310.0], [32.1, 311.0], [32.2, 311.0], [32.3, 312.0], [32.4, 312.0], [32.5, 313.0], [32.6, 313.0], [32.7, 314.0], [32.8, 314.0], [32.9, 314.0], [33.0, 315.0], [33.1, 315.0], [33.2, 316.0], [33.3, 316.0], [33.4, 317.0], [33.5, 318.0], [33.6, 318.0], [33.7, 319.0], [33.8, 319.0], [33.9, 319.0], [34.0, 320.0], [34.1, 320.0], [34.2, 321.0], [34.3, 321.0], [34.4, 321.0], [34.5, 322.0], [34.6, 323.0], [34.7, 323.0], [34.8, 324.0], [34.9, 324.0], [35.0, 325.0], [35.1, 325.0], [35.2, 326.0], [35.3, 326.0], [35.4, 327.0], [35.5, 327.0], [35.6, 328.0], [35.7, 328.0], [35.8, 329.0], [35.9, 329.0], [36.0, 330.0], [36.1, 330.0], [36.2, 330.0], [36.3, 331.0], [36.4, 331.0], [36.5, 332.0], [36.6, 332.0], [36.7, 333.0], [36.8, 333.0], [36.9, 334.0], [37.0, 334.0], [37.1, 335.0], [37.2, 335.0], [37.3, 335.0], [37.4, 336.0], [37.5, 336.0], [37.6, 337.0], [37.7, 337.0], [37.8, 338.0], [37.9, 338.0], [38.0, 338.0], [38.1, 339.0], [38.2, 339.0], [38.3, 340.0], [38.4, 341.0], [38.5, 341.0], [38.6, 341.0], [38.7, 342.0], [38.8, 342.0], [38.9, 343.0], [39.0, 343.0], [39.1, 344.0], [39.2, 344.0], [39.3, 344.0], [39.4, 345.0], [39.5, 345.0], [39.6, 346.0], [39.7, 346.0], [39.8, 347.0], [39.9, 347.0], [40.0, 348.0], [40.1, 348.0], [40.2, 349.0], [40.3, 350.0], [40.4, 350.0], [40.5, 350.0], [40.6, 351.0], [40.7, 351.0], [40.8, 351.0], [40.9, 352.0], [41.0, 352.0], [41.1, 353.0], [41.2, 354.0], [41.3, 354.0], [41.4, 355.0], [41.5, 355.0], [41.6, 356.0], [41.7, 357.0], [41.8, 357.0], [41.9, 358.0], [42.0, 359.0], [42.1, 359.0], [42.2, 360.0], [42.3, 360.0], [42.4, 361.0], [42.5, 361.0], [42.6, 362.0], [42.7, 362.0], [42.8, 362.0], [42.9, 363.0], [43.0, 363.0], [43.1, 364.0], [43.2, 364.0], [43.3, 365.0], [43.4, 366.0], [43.5, 367.0], [43.6, 367.0], [43.7, 367.0], [43.8, 368.0], [43.9, 368.0], [44.0, 368.0], [44.1, 369.0], [44.2, 370.0], [44.3, 370.0], [44.4, 370.0], [44.5, 371.0], [44.6, 371.0], [44.7, 372.0], [44.8, 372.0], [44.9, 373.0], [45.0, 374.0], [45.1, 374.0], [45.2, 375.0], [45.3, 375.0], [45.4, 376.0], [45.5, 376.0], [45.6, 377.0], [45.7, 377.0], [45.8, 378.0], [45.9, 378.0], [46.0, 379.0], [46.1, 380.0], [46.2, 381.0], [46.3, 381.0], [46.4, 382.0], [46.5, 382.0], [46.6, 383.0], [46.7, 383.0], [46.8, 383.0], [46.9, 384.0], [47.0, 385.0], [47.1, 385.0], [47.2, 386.0], [47.3, 386.0], [47.4, 387.0], [47.5, 387.0], [47.6, 388.0], [47.7, 388.0], [47.8, 389.0], [47.9, 389.0], [48.0, 390.0], [48.1, 390.0], [48.2, 391.0], [48.3, 391.0], [48.4, 392.0], [48.5, 393.0], [48.6, 393.0], [48.7, 394.0], [48.8, 394.0], [48.9, 395.0], [49.0, 396.0], [49.1, 396.0], [49.2, 396.0], [49.3, 397.0], [49.4, 397.0], [49.5, 398.0], [49.6, 398.0], [49.7, 399.0], [49.8, 400.0], [49.9, 400.0], [50.0, 401.0], [50.1, 401.0], [50.2, 402.0], [50.3, 403.0], [50.4, 403.0], [50.5, 404.0], [50.6, 405.0], [50.7, 405.0], [50.8, 406.0], [50.9, 406.0], [51.0, 407.0], [51.1, 407.0], [51.2, 408.0], [51.3, 408.0], [51.4, 409.0], [51.5, 410.0], [51.6, 410.0], [51.7, 411.0], [51.8, 412.0], [51.9, 412.0], [52.0, 413.0], [52.1, 413.0], [52.2, 414.0], [52.3, 414.0], [52.4, 415.0], [52.5, 415.0], [52.6, 416.0], [52.7, 417.0], [52.8, 417.0], [52.9, 418.0], [53.0, 419.0], [53.1, 419.0], [53.2, 420.0], [53.3, 421.0], [53.4, 421.0], [53.5, 422.0], [53.6, 422.0], [53.7, 423.0], [53.8, 423.0], [53.9, 424.0], [54.0, 424.0], [54.1, 424.0], [54.2, 425.0], [54.3, 426.0], [54.4, 426.0], [54.5, 427.0], [54.6, 428.0], [54.7, 428.0], [54.8, 428.0], [54.9, 429.0], [55.0, 429.0], [55.1, 430.0], [55.2, 431.0], [55.3, 431.0], [55.4, 432.0], [55.5, 432.0], [55.6, 433.0], [55.7, 434.0], [55.8, 434.0], [55.9, 435.0], [56.0, 435.0], [56.1, 436.0], [56.2, 436.0], [56.3, 437.0], [56.4, 437.0], [56.5, 438.0], [56.6, 439.0], [56.7, 440.0], [56.8, 441.0], [56.9, 441.0], [57.0, 442.0], [57.1, 442.0], [57.2, 443.0], [57.3, 444.0], [57.4, 444.0], [57.5, 445.0], [57.6, 445.0], [57.7, 446.0], [57.8, 447.0], [57.9, 448.0], [58.0, 449.0], [58.1, 449.0], [58.2, 450.0], [58.3, 451.0], [58.4, 451.0], [58.5, 452.0], [58.6, 452.0], [58.7, 453.0], [58.8, 453.0], [58.9, 454.0], [59.0, 455.0], [59.1, 455.0], [59.2, 456.0], [59.3, 456.0], [59.4, 457.0], [59.5, 458.0], [59.6, 459.0], [59.7, 459.0], [59.8, 460.0], [59.9, 460.0], [60.0, 460.0], [60.1, 461.0], [60.2, 462.0], [60.3, 462.0], [60.4, 463.0], [60.5, 464.0], [60.6, 465.0], [60.7, 466.0], [60.8, 467.0], [60.9, 468.0], [61.0, 468.0], [61.1, 469.0], [61.2, 469.0], [61.3, 470.0], [61.4, 470.0], [61.5, 471.0], [61.6, 471.0], [61.7, 472.0], [61.8, 473.0], [61.9, 473.0], [62.0, 474.0], [62.1, 474.0], [62.2, 475.0], [62.3, 476.0], [62.4, 476.0], [62.5, 477.0], [62.6, 477.0], [62.7, 478.0], [62.8, 479.0], [62.9, 479.0], [63.0, 480.0], [63.1, 481.0], [63.2, 482.0], [63.3, 482.0], [63.4, 483.0], [63.5, 483.0], [63.6, 484.0], [63.7, 484.0], [63.8, 485.0], [63.9, 486.0], [64.0, 486.0], [64.1, 487.0], [64.2, 487.0], [64.3, 488.0], [64.4, 488.0], [64.5, 489.0], [64.6, 490.0], [64.7, 490.0], [64.8, 491.0], [64.9, 492.0], [65.0, 492.0], [65.1, 493.0], [65.2, 494.0], [65.3, 495.0], [65.4, 495.0], [65.5, 496.0], [65.6, 496.0], [65.7, 497.0], [65.8, 497.0], [65.9, 498.0], [66.0, 498.0], [66.1, 499.0], [66.2, 500.0], [66.3, 501.0], [66.4, 502.0], [66.5, 502.0], [66.6, 504.0], [66.7, 505.0], [66.8, 505.0], [66.9, 506.0], [67.0, 507.0], [67.1, 508.0], [67.2, 509.0], [67.3, 511.0], [67.4, 512.0], [67.5, 513.0], [67.6, 514.0], [67.7, 515.0], [67.8, 515.0], [67.9, 516.0], [68.0, 517.0], [68.1, 517.0], [68.2, 518.0], [68.3, 519.0], [68.4, 520.0], [68.5, 520.0], [68.6, 521.0], [68.7, 522.0], [68.8, 523.0], [68.9, 523.0], [69.0, 524.0], [69.1, 525.0], [69.2, 526.0], [69.3, 526.0], [69.4, 527.0], [69.5, 528.0], [69.6, 529.0], [69.7, 530.0], [69.8, 531.0], [69.9, 532.0], [70.0, 533.0], [70.1, 534.0], [70.2, 535.0], [70.3, 536.0], [70.4, 536.0], [70.5, 537.0], [70.6, 538.0], [70.7, 538.0], [70.8, 539.0], [70.9, 540.0], [71.0, 541.0], [71.1, 542.0], [71.2, 542.0], [71.3, 543.0], [71.4, 544.0], [71.5, 545.0], [71.6, 546.0], [71.7, 547.0], [71.8, 547.0], [71.9, 549.0], [72.0, 550.0], [72.1, 550.0], [72.2, 551.0], [72.3, 552.0], [72.4, 553.0], [72.5, 553.0], [72.6, 554.0], [72.7, 556.0], [72.8, 557.0], [72.9, 558.0], [73.0, 559.0], [73.1, 560.0], [73.2, 561.0], [73.3, 562.0], [73.4, 563.0], [73.5, 564.0], [73.6, 565.0], [73.7, 567.0], [73.8, 568.0], [73.9, 569.0], [74.0, 570.0], [74.1, 570.0], [74.2, 571.0], [74.3, 572.0], [74.4, 574.0], [74.5, 575.0], [74.6, 575.0], [74.7, 577.0], [74.8, 577.0], [74.9, 578.0], [75.0, 579.0], [75.1, 580.0], [75.2, 580.0], [75.3, 581.0], [75.4, 582.0], [75.5, 583.0], [75.6, 584.0], [75.7, 586.0], [75.8, 587.0], [75.9, 587.0], [76.0, 589.0], [76.1, 591.0], [76.2, 592.0], [76.3, 594.0], [76.4, 595.0], [76.5, 597.0], [76.6, 597.0], [76.7, 598.0], [76.8, 600.0], [76.9, 600.0], [77.0, 601.0], [77.1, 602.0], [77.2, 604.0], [77.3, 604.0], [77.4, 605.0], [77.5, 606.0], [77.6, 606.0], [77.7, 607.0], [77.8, 608.0], [77.9, 610.0], [78.0, 611.0], [78.1, 612.0], [78.2, 613.0], [78.3, 615.0], [78.4, 616.0], [78.5, 617.0], [78.6, 618.0], [78.7, 620.0], [78.8, 621.0], [78.9, 623.0], [79.0, 623.0], [79.1, 624.0], [79.2, 625.0], [79.3, 626.0], [79.4, 628.0], [79.5, 629.0], [79.6, 630.0], [79.7, 632.0], [79.8, 633.0], [79.9, 634.0], [80.0, 635.0], [80.1, 637.0], [80.2, 638.0], [80.3, 640.0], [80.4, 641.0], [80.5, 642.0], [80.6, 644.0], [80.7, 645.0], [80.8, 646.0], [80.9, 647.0], [81.0, 649.0], [81.1, 650.0], [81.2, 651.0], [81.3, 652.0], [81.4, 653.0], [81.5, 654.0], [81.6, 655.0], [81.7, 657.0], [81.8, 658.0], [81.9, 660.0], [82.0, 662.0], [82.1, 663.0], [82.2, 665.0], [82.3, 666.0], [82.4, 667.0], [82.5, 668.0], [82.6, 669.0], [82.7, 670.0], [82.8, 672.0], [82.9, 673.0], [83.0, 675.0], [83.1, 676.0], [83.2, 677.0], [83.3, 679.0], [83.4, 680.0], [83.5, 682.0], [83.6, 684.0], [83.7, 686.0], [83.8, 687.0], [83.9, 690.0], [84.0, 691.0], [84.1, 693.0], [84.2, 694.0], [84.3, 696.0], [84.4, 696.0], [84.5, 698.0], [84.6, 699.0], [84.7, 700.0], [84.8, 702.0], [84.9, 705.0], [85.0, 707.0], [85.1, 708.0], [85.2, 710.0], [85.3, 711.0], [85.4, 712.0], [85.5, 714.0], [85.6, 714.0], [85.7, 715.0], [85.8, 717.0], [85.9, 719.0], [86.0, 720.0], [86.1, 723.0], [86.2, 724.0], [86.3, 725.0], [86.4, 726.0], [86.5, 727.0], [86.6, 730.0], [86.7, 731.0], [86.8, 733.0], [86.9, 735.0], [87.0, 736.0], [87.1, 738.0], [87.2, 740.0], [87.3, 741.0], [87.4, 743.0], [87.5, 743.0], [87.6, 745.0], [87.7, 747.0], [87.8, 749.0], [87.9, 751.0], [88.0, 753.0], [88.1, 755.0], [88.2, 757.0], [88.3, 758.0], [88.4, 761.0], [88.5, 763.0], [88.6, 764.0], [88.7, 767.0], [88.8, 768.0], [88.9, 769.0], [89.0, 772.0], [89.1, 774.0], [89.2, 776.0], [89.3, 779.0], [89.4, 780.0], [89.5, 782.0], [89.6, 783.0], [89.7, 785.0], [89.8, 787.0], [89.9, 789.0], [90.0, 790.0], [90.1, 792.0], [90.2, 794.0], [90.3, 797.0], [90.4, 799.0], [90.5, 801.0], [90.6, 802.0], [90.7, 804.0], [90.8, 807.0], [90.9, 808.0], [91.0, 809.0], [91.1, 812.0], [91.2, 816.0], [91.3, 819.0], [91.4, 821.0], [91.5, 826.0], [91.6, 828.0], [91.7, 830.0], [91.8, 833.0], [91.9, 836.0], [92.0, 839.0], [92.1, 841.0], [92.2, 845.0], [92.3, 850.0], [92.4, 851.0], [92.5, 854.0], [92.6, 855.0], [92.7, 858.0], [92.8, 860.0], [92.9, 862.0], [93.0, 866.0], [93.1, 869.0], [93.2, 871.0], [93.3, 874.0], [93.4, 879.0], [93.5, 882.0], [93.6, 885.0], [93.7, 889.0], [93.8, 891.0], [93.9, 894.0], [94.0, 898.0], [94.1, 904.0], [94.2, 909.0], [94.3, 913.0], [94.4, 915.0], [94.5, 917.0], [94.6, 919.0], [94.7, 922.0], [94.8, 924.0], [94.9, 927.0], [95.0, 931.0], [95.1, 937.0], [95.2, 943.0], [95.3, 946.0], [95.4, 950.0], [95.5, 955.0], [95.6, 962.0], [95.7, 969.0], [95.8, 971.0], [95.9, 975.0], [96.0, 980.0], [96.1, 984.0], [96.2, 987.0], [96.3, 992.0], [96.4, 998.0], [96.5, 1009.0], [96.6, 1014.0], [96.7, 1022.0], [96.8, 1029.0], [96.9, 1033.0], [97.0, 1041.0], [97.1, 1046.0], [97.2, 1062.0], [97.3, 1070.0], [97.4, 1077.0], [97.5, 1083.0], [97.6, 1096.0], [97.7, 1106.0], [97.8, 1113.0], [97.9, 1123.0], [98.0, 1130.0], [98.1, 1138.0], [98.2, 1156.0], [98.3, 1167.0], [98.4, 1184.0], [98.5, 1199.0], [98.6, 1208.0], [98.7, 1227.0], [98.8, 1236.0], [98.9, 1250.0], [99.0, 1289.0], [99.1, 1306.0], [99.2, 1317.0], [99.3, 1336.0], [99.4, 1367.0], [99.5, 1402.0], [99.6, 1428.0], [99.7, 1466.0], [99.8, 1522.0], [99.9, 1604.0], [100.0, 1967.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 24.0], [0.1, 25.0], [0.2, 26.0], [0.3, 26.0], [0.4, 26.0], [0.5, 26.0], [0.6, 26.0], [0.7, 26.0], [0.8, 26.0], [0.9, 26.0], [1.0, 26.0], [1.1, 26.0], [1.2, 26.0], [1.3, 26.0], [1.4, 26.0], [1.5, 26.0], [1.6, 26.0], [1.7, 26.0], [1.8, 26.0], [1.9, 26.0], [2.0, 26.0], [2.1, 26.0], [2.2, 26.0], [2.3, 26.0], [2.4, 26.0], [2.5, 26.0], [2.6, 26.0], [2.7, 26.0], [2.8, 26.0], [2.9, 26.0], [3.0, 26.0], [3.1, 26.0], [3.2, 26.0], [3.3, 26.0], [3.4, 26.0], [3.5, 26.0], [3.6, 26.0], [3.7, 26.0], [3.8, 26.0], [3.9, 26.0], [4.0, 26.0], [4.1, 26.0], [4.2, 27.0], [4.3, 27.0], [4.4, 27.0], [4.5, 27.0], [4.6, 27.0], [4.7, 27.0], [4.8, 27.0], [4.9, 27.0], [5.0, 27.0], [5.1, 27.0], [5.2, 27.0], [5.3, 27.0], [5.4, 27.0], [5.5, 27.0], [5.6, 27.0], [5.7, 27.0], [5.8, 27.0], [5.9, 27.0], [6.0, 27.0], [6.1, 27.0], [6.2, 27.0], [6.3, 27.0], [6.4, 27.0], [6.5, 27.0], [6.6, 27.0], [6.7, 27.0], [6.8, 27.0], [6.9, 27.0], [7.0, 27.0], [7.1, 27.0], [7.2, 27.0], [7.3, 27.0], [7.4, 27.0], [7.5, 27.0], [7.6, 27.0], [7.7, 27.0], [7.8, 27.0], [7.9, 27.0], [8.0, 27.0], [8.1, 27.0], [8.2, 27.0], [8.3, 27.0], [8.4, 27.0], [8.5, 27.0], [8.6, 27.0], [8.7, 27.0], [8.8, 27.0], [8.9, 27.0], [9.0, 27.0], [9.1, 27.0], [9.2, 27.0], [9.3, 27.0], [9.4, 27.0], [9.5, 27.0], [9.6, 27.0], [9.7, 27.0], [9.8, 27.0], [9.9, 27.0], [10.0, 27.0], [10.1, 27.0], [10.2, 27.0], [10.3, 27.0], [10.4, 27.0], [10.5, 27.0], [10.6, 27.0], [10.7, 27.0], [10.8, 27.0], [10.9, 27.0], [11.0, 27.0], [11.1, 27.0], [11.2, 27.0], [11.3, 27.0], [11.4, 27.0], [11.5, 27.0], [11.6, 27.0], [11.7, 27.0], [11.8, 27.0], [11.9, 27.0], [12.0, 27.0], [12.1, 27.0], [12.2, 27.0], [12.3, 27.0], [12.4, 27.0], [12.5, 27.0], [12.6, 27.0], [12.7, 27.0], [12.8, 27.0], [12.9, 27.0], [13.0, 27.0], [13.1, 27.0], [13.2, 27.0], [13.3, 27.0], [13.4, 27.0], [13.5, 27.0], [13.6, 27.0], [13.7, 27.0], [13.8, 27.0], [13.9, 27.0], [14.0, 27.0], [14.1, 27.0], [14.2, 27.0], [14.3, 27.0], [14.4, 27.0], [14.5, 27.0], [14.6, 27.0], [14.7, 27.0], [14.8, 27.0], [14.9, 27.0], [15.0, 27.0], [15.1, 27.0], [15.2, 27.0], [15.3, 27.0], [15.4, 27.0], [15.5, 27.0], [15.6, 27.0], [15.7, 27.0], [15.8, 27.0], [15.9, 27.0], [16.0, 27.0], [16.1, 27.0], [16.2, 27.0], [16.3, 27.0], [16.4, 27.0], [16.5, 27.0], [16.6, 27.0], [16.7, 27.0], [16.8, 27.0], [16.9, 27.0], [17.0, 27.0], [17.1, 27.0], [17.2, 27.0], [17.3, 27.0], [17.4, 27.0], [17.5, 27.0], [17.6, 27.0], [17.7, 27.0], [17.8, 27.0], [17.9, 27.0], [18.0, 27.0], [18.1, 27.0], [18.2, 27.0], [18.3, 27.0], [18.4, 27.0], [18.5, 27.0], [18.6, 27.0], [18.7, 27.0], [18.8, 27.0], [18.9, 27.0], [19.0, 27.0], [19.1, 27.0], [19.2, 27.0], [19.3, 27.0], [19.4, 27.0], [19.5, 27.0], [19.6, 27.0], [19.7, 27.0], [19.8, 27.0], [19.9, 27.0], [20.0, 27.0], [20.1, 27.0], [20.2, 27.0], [20.3, 27.0], [20.4, 27.0], [20.5, 27.0], [20.6, 27.0], [20.7, 27.0], [20.8, 27.0], [20.9, 27.0], [21.0, 27.0], [21.1, 27.0], [21.2, 27.0], [21.3, 27.0], [21.4, 27.0], [21.5, 27.0], [21.6, 27.0], [21.7, 27.0], [21.8, 27.0], [21.9, 27.0], [22.0, 27.0], [22.1, 27.0], [22.2, 27.0], [22.3, 27.0], [22.4, 27.0], [22.5, 27.0], [22.6, 27.0], [22.7, 27.0], [22.8, 27.0], [22.9, 27.0], [23.0, 27.0], [23.1, 27.0], [23.2, 27.0], [23.3, 27.0], [23.4, 27.0], [23.5, 27.0], [23.6, 27.0], [23.7, 27.0], [23.8, 27.0], [23.9, 27.0], [24.0, 27.0], [24.1, 27.0], [24.2, 27.0], [24.3, 27.0], [24.4, 27.0], [24.5, 27.0], [24.6, 27.0], [24.7, 27.0], [24.8, 27.0], [24.9, 27.0], [25.0, 27.0], [25.1, 27.0], [25.2, 27.0], [25.3, 28.0], [25.4, 28.0], [25.5, 28.0], [25.6, 28.0], [25.7, 28.0], [25.8, 28.0], [25.9, 28.0], [26.0, 28.0], [26.1, 28.0], [26.2, 28.0], [26.3, 28.0], [26.4, 28.0], [26.5, 28.0], [26.6, 28.0], [26.7, 28.0], [26.8, 28.0], [26.9, 28.0], [27.0, 28.0], [27.1, 28.0], [27.2, 28.0], [27.3, 28.0], [27.4, 28.0], [27.5, 28.0], [27.6, 28.0], [27.7, 28.0], [27.8, 28.0], [27.9, 28.0], [28.0, 28.0], [28.1, 28.0], [28.2, 28.0], [28.3, 28.0], [28.4, 28.0], [28.5, 28.0], [28.6, 28.0], [28.7, 28.0], [28.8, 28.0], [28.9, 28.0], [29.0, 28.0], [29.1, 28.0], [29.2, 28.0], [29.3, 28.0], [29.4, 28.0], [29.5, 28.0], [29.6, 28.0], [29.7, 28.0], [29.8, 28.0], [29.9, 28.0], [30.0, 28.0], [30.1, 28.0], [30.2, 28.0], [30.3, 28.0], [30.4, 28.0], [30.5, 28.0], [30.6, 28.0], [30.7, 28.0], [30.8, 28.0], [30.9, 28.0], [31.0, 28.0], [31.1, 28.0], [31.2, 28.0], [31.3, 28.0], [31.4, 28.0], [31.5, 28.0], [31.6, 28.0], [31.7, 28.0], [31.8, 28.0], [31.9, 28.0], [32.0, 28.0], [32.1, 28.0], [32.2, 28.0], [32.3, 28.0], [32.4, 28.0], [32.5, 28.0], [32.6, 28.0], [32.7, 28.0], [32.8, 28.0], [32.9, 28.0], [33.0, 28.0], [33.1, 28.0], [33.2, 28.0], [33.3, 28.0], [33.4, 28.0], [33.5, 28.0], [33.6, 28.0], [33.7, 28.0], [33.8, 28.0], [33.9, 28.0], [34.0, 28.0], [34.1, 28.0], [34.2, 28.0], [34.3, 28.0], [34.4, 28.0], [34.5, 28.0], [34.6, 28.0], [34.7, 28.0], [34.8, 28.0], [34.9, 28.0], [35.0, 28.0], [35.1, 28.0], [35.2, 28.0], [35.3, 28.0], [35.4, 28.0], [35.5, 28.0], [35.6, 28.0], [35.7, 28.0], [35.8, 28.0], [35.9, 28.0], [36.0, 28.0], [36.1, 28.0], [36.2, 28.0], [36.3, 28.0], [36.4, 28.0], [36.5, 28.0], [36.6, 28.0], [36.7, 28.0], [36.8, 28.0], [36.9, 28.0], [37.0, 28.0], [37.1, 28.0], [37.2, 28.0], [37.3, 28.0], [37.4, 28.0], [37.5, 28.0], [37.6, 28.0], [37.7, 28.0], [37.8, 28.0], [37.9, 28.0], [38.0, 28.0], [38.1, 28.0], [38.2, 28.0], [38.3, 28.0], [38.4, 28.0], [38.5, 28.0], [38.6, 28.0], [38.7, 28.0], [38.8, 28.0], [38.9, 28.0], [39.0, 28.0], [39.1, 28.0], [39.2, 28.0], [39.3, 28.0], [39.4, 28.0], [39.5, 28.0], [39.6, 28.0], [39.7, 28.0], [39.8, 28.0], [39.9, 28.0], [40.0, 28.0], [40.1, 28.0], [40.2, 28.0], [40.3, 28.0], [40.4, 28.0], [40.5, 28.0], [40.6, 28.0], [40.7, 28.0], [40.8, 28.0], [40.9, 28.0], [41.0, 28.0], [41.1, 28.0], [41.2, 28.0], [41.3, 28.0], [41.4, 28.0], [41.5, 28.0], [41.6, 28.0], [41.7, 28.0], [41.8, 28.0], [41.9, 28.0], [42.0, 28.0], [42.1, 28.0], [42.2, 28.0], [42.3, 28.0], [42.4, 28.0], [42.5, 28.0], [42.6, 28.0], [42.7, 28.0], [42.8, 28.0], [42.9, 28.0], [43.0, 28.0], [43.1, 28.0], [43.2, 28.0], [43.3, 28.0], [43.4, 28.0], [43.5, 28.0], [43.6, 28.0], [43.7, 28.0], [43.8, 28.0], [43.9, 28.0], [44.0, 28.0], [44.1, 28.0], [44.2, 28.0], [44.3, 28.0], [44.4, 28.0], [44.5, 28.0], [44.6, 28.0], [44.7, 28.0], [44.8, 28.0], [44.9, 28.0], [45.0, 28.0], [45.1, 28.0], [45.2, 28.0], [45.3, 28.0], [45.4, 28.0], [45.5, 28.0], [45.6, 28.0], [45.7, 28.0], [45.8, 28.0], [45.9, 28.0], [46.0, 28.0], [46.1, 28.0], [46.2, 28.0], [46.3, 28.0], [46.4, 28.0], [46.5, 28.0], [46.6, 28.0], [46.7, 28.0], [46.8, 28.0], [46.9, 28.0], [47.0, 28.0], [47.1, 28.0], [47.2, 28.0], [47.3, 28.0], [47.4, 28.0], [47.5, 28.0], [47.6, 28.0], [47.7, 28.0], [47.8, 28.0], [47.9, 28.0], [48.0, 28.0], [48.1, 28.0], [48.2, 28.0], [48.3, 28.0], [48.4, 28.0], [48.5, 28.0], [48.6, 28.0], [48.7, 28.0], [48.8, 28.0], [48.9, 28.0], [49.0, 28.0], [49.1, 28.0], [49.2, 28.0], [49.3, 28.0], [49.4, 28.0], [49.5, 28.0], [49.6, 28.0], [49.7, 28.0], [49.8, 28.0], [49.9, 28.0], [50.0, 28.0], [50.1, 28.0], [50.2, 28.0], [50.3, 28.0], [50.4, 28.0], [50.5, 28.0], [50.6, 28.0], [50.7, 28.0], [50.8, 28.0], [50.9, 28.0], [51.0, 28.0], [51.1, 28.0], [51.2, 28.0], [51.3, 28.0], [51.4, 28.0], [51.5, 28.0], [51.6, 28.0], [51.7, 28.0], [51.8, 28.0], [51.9, 28.0], [52.0, 28.0], [52.1, 28.0], [52.2, 28.0], [52.3, 28.0], [52.4, 28.0], [52.5, 28.0], [52.6, 28.0], [52.7, 28.0], [52.8, 28.0], [52.9, 28.0], [53.0, 28.0], [53.1, 28.0], [53.2, 28.0], [53.3, 28.0], [53.4, 28.0], [53.5, 28.0], [53.6, 28.0], [53.7, 28.0], [53.8, 28.0], [53.9, 28.0], [54.0, 28.0], [54.1, 28.0], [54.2, 28.0], [54.3, 28.0], [54.4, 28.0], [54.5, 28.0], [54.6, 28.0], [54.7, 28.0], [54.8, 28.0], [54.9, 28.0], [55.0, 28.0], [55.1, 28.0], [55.2, 28.0], [55.3, 28.0], [55.4, 28.0], [55.5, 28.0], [55.6, 28.0], [55.7, 28.0], [55.8, 28.0], [55.9, 28.0], [56.0, 28.0], [56.1, 28.0], [56.2, 28.0], [56.3, 28.0], [56.4, 28.0], [56.5, 28.0], [56.6, 28.0], [56.7, 28.0], [56.8, 28.0], [56.9, 28.0], [57.0, 28.0], [57.1, 28.0], [57.2, 28.0], [57.3, 28.0], [57.4, 28.0], [57.5, 28.0], [57.6, 28.0], [57.7, 28.0], [57.8, 28.0], [57.9, 28.0], [58.0, 28.0], [58.1, 28.0], [58.2, 28.0], [58.3, 28.0], [58.4, 28.0], [58.5, 28.0], [58.6, 28.0], [58.7, 28.0], [58.8, 28.0], [58.9, 28.0], [59.0, 28.0], [59.1, 28.0], [59.2, 28.0], [59.3, 28.0], [59.4, 29.0], [59.5, 29.0], [59.6, 29.0], [59.7, 29.0], [59.8, 29.0], [59.9, 29.0], [60.0, 29.0], [60.1, 29.0], [60.2, 29.0], [60.3, 29.0], [60.4, 29.0], [60.5, 29.0], [60.6, 29.0], [60.7, 29.0], [60.8, 29.0], [60.9, 29.0], [61.0, 29.0], [61.1, 29.0], [61.2, 29.0], [61.3, 29.0], [61.4, 29.0], [61.5, 29.0], [61.6, 29.0], [61.7, 29.0], [61.8, 29.0], [61.9, 29.0], [62.0, 29.0], [62.1, 29.0], [62.2, 29.0], [62.3, 29.0], [62.4, 29.0], [62.5, 29.0], [62.6, 29.0], [62.7, 29.0], [62.8, 29.0], [62.9, 29.0], [63.0, 29.0], [63.1, 29.0], [63.2, 29.0], [63.3, 29.0], [63.4, 29.0], [63.5, 29.0], [63.6, 29.0], [63.7, 29.0], [63.8, 29.0], [63.9, 29.0], [64.0, 29.0], [64.1, 29.0], [64.2, 29.0], [64.3, 29.0], [64.4, 29.0], [64.5, 29.0], [64.6, 29.0], [64.7, 29.0], [64.8, 29.0], [64.9, 29.0], [65.0, 29.0], [65.1, 29.0], [65.2, 29.0], [65.3, 29.0], [65.4, 29.0], [65.5, 29.0], [65.6, 29.0], [65.7, 29.0], [65.8, 29.0], [65.9, 29.0], [66.0, 29.0], [66.1, 29.0], [66.2, 29.0], [66.3, 29.0], [66.4, 29.0], [66.5, 29.0], [66.6, 29.0], [66.7, 29.0], [66.8, 29.0], [66.9, 29.0], [67.0, 29.0], [67.1, 29.0], [67.2, 29.0], [67.3, 29.0], [67.4, 29.0], [67.5, 29.0], [67.6, 29.0], [67.7, 29.0], [67.8, 29.0], [67.9, 29.0], [68.0, 29.0], [68.1, 29.0], [68.2, 29.0], [68.3, 29.0], [68.4, 29.0], [68.5, 29.0], [68.6, 29.0], [68.7, 29.0], [68.8, 29.0], [68.9, 29.0], [69.0, 29.0], [69.1, 29.0], [69.2, 29.0], [69.3, 29.0], [69.4, 29.0], [69.5, 29.0], [69.6, 29.0], [69.7, 29.0], [69.8, 29.0], [69.9, 29.0], [70.0, 29.0], [70.1, 29.0], [70.2, 29.0], [70.3, 29.0], [70.4, 29.0], [70.5, 29.0], [70.6, 29.0], [70.7, 29.0], [70.8, 29.0], [70.9, 29.0], [71.0, 29.0], [71.1, 29.0], [71.2, 29.0], [71.3, 29.0], [71.4, 29.0], [71.5, 29.0], [71.6, 29.0], [71.7, 29.0], [71.8, 29.0], [71.9, 29.0], [72.0, 29.0], [72.1, 29.0], [72.2, 29.0], [72.3, 29.0], [72.4, 29.0], [72.5, 29.0], [72.6, 29.0], [72.7, 29.0], [72.8, 29.0], [72.9, 29.0], [73.0, 29.0], [73.1, 29.0], [73.2, 29.0], [73.3, 29.0], [73.4, 29.0], [73.5, 29.0], [73.6, 29.0], [73.7, 29.0], [73.8, 29.0], [73.9, 29.0], [74.0, 29.0], [74.1, 29.0], [74.2, 29.0], [74.3, 29.0], [74.4, 29.0], [74.5, 29.0], [74.6, 29.0], [74.7, 29.0], [74.8, 29.0], [74.9, 29.0], [75.0, 29.0], [75.1, 29.0], [75.2, 29.0], [75.3, 29.0], [75.4, 29.0], [75.5, 29.0], [75.6, 29.0], [75.7, 29.0], [75.8, 29.0], [75.9, 29.0], [76.0, 29.0], [76.1, 29.0], [76.2, 29.0], [76.3, 29.0], [76.4, 29.0], [76.5, 29.0], [76.6, 29.0], [76.7, 29.0], [76.8, 29.0], [76.9, 29.0], [77.0, 29.0], [77.1, 29.0], [77.2, 29.0], [77.3, 29.0], [77.4, 29.0], [77.5, 29.0], [77.6, 29.0], [77.7, 29.0], [77.8, 29.0], [77.9, 29.0], [78.0, 29.0], [78.1, 29.0], [78.2, 29.0], [78.3, 29.0], [78.4, 29.0], [78.5, 29.0], [78.6, 29.0], [78.7, 29.0], [78.8, 29.0], [78.9, 29.0], [79.0, 29.0], [79.1, 29.0], [79.2, 29.0], [79.3, 29.0], [79.4, 29.0], [79.5, 29.0], [79.6, 29.0], [79.7, 29.0], [79.8, 29.0], [79.9, 29.0], [80.0, 29.0], [80.1, 29.0], [80.2, 29.0], [80.3, 29.0], [80.4, 29.0], [80.5, 29.0], [80.6, 29.0], [80.7, 29.0], [80.8, 29.0], [80.9, 29.0], [81.0, 29.0], [81.1, 29.0], [81.2, 29.0], [81.3, 29.0], [81.4, 29.0], [81.5, 29.0], [81.6, 29.0], [81.7, 29.0], [81.8, 29.0], [81.9, 29.0], [82.0, 29.0], [82.1, 29.0], [82.2, 29.0], [82.3, 29.0], [82.4, 29.0], [82.5, 29.0], [82.6, 29.0], [82.7, 29.0], [82.8, 29.0], [82.9, 29.0], [83.0, 29.0], [83.1, 29.0], [83.2, 29.0], [83.3, 29.0], [83.4, 29.0], [83.5, 29.0], [83.6, 29.0], [83.7, 29.0], [83.8, 29.0], [83.9, 29.0], [84.0, 29.0], [84.1, 29.0], [84.2, 29.0], [84.3, 29.0], [84.4, 29.0], [84.5, 29.0], [84.6, 29.0], [84.7, 29.0], [84.8, 29.0], [84.9, 29.0], [85.0, 29.0], [85.1, 29.0], [85.2, 29.0], [85.3, 30.0], [85.4, 30.0], [85.5, 30.0], [85.6, 30.0], [85.7, 30.0], [85.8, 30.0], [85.9, 30.0], [86.0, 30.0], [86.1, 30.0], [86.2, 30.0], [86.3, 30.0], [86.4, 30.0], [86.5, 30.0], [86.6, 30.0], [86.7, 30.0], [86.8, 30.0], [86.9, 30.0], [87.0, 30.0], [87.1, 30.0], [87.2, 30.0], [87.3, 30.0], [87.4, 30.0], [87.5, 30.0], [87.6, 30.0], [87.7, 30.0], [87.8, 30.0], [87.9, 30.0], [88.0, 30.0], [88.1, 30.0], [88.2, 30.0], [88.3, 30.0], [88.4, 30.0], [88.5, 30.0], [88.6, 30.0], [88.7, 30.0], [88.8, 30.0], [88.9, 30.0], [89.0, 30.0], [89.1, 30.0], [89.2, 30.0], [89.3, 30.0], [89.4, 30.0], [89.5, 30.0], [89.6, 30.0], [89.7, 30.0], [89.8, 30.0], [89.9, 30.0], [90.0, 30.0], [90.1, 30.0], [90.2, 30.0], [90.3, 30.0], [90.4, 30.0], [90.5, 30.0], [90.6, 30.0], [90.7, 30.0], [90.8, 30.0], [90.9, 30.0], [91.0, 30.0], [91.1, 30.0], [91.2, 30.0], [91.3, 30.0], [91.4, 30.0], [91.5, 30.0], [91.6, 30.0], [91.7, 30.0], [91.8, 30.0], [91.9, 30.0], [92.0, 30.0], [92.1, 30.0], [92.2, 30.0], [92.3, 30.0], [92.4, 30.0], [92.5, 30.0], [92.6, 30.0], [92.7, 30.0], [92.8, 30.0], [92.9, 30.0], [93.0, 30.0], [93.1, 30.0], [93.2, 30.0], [93.3, 30.0], [93.4, 30.0], [93.5, 30.0], [93.6, 30.0], [93.7, 30.0], [93.8, 30.0], [93.9, 30.0], [94.0, 30.0], [94.1, 30.0], [94.2, 30.0], [94.3, 30.0], [94.4, 30.0], [94.5, 30.0], [94.6, 30.0], [94.7, 30.0], [94.8, 30.0], [94.9, 30.0], [95.0, 30.0], [95.1, 30.0], [95.2, 30.0], [95.3, 30.0], [95.4, 30.0], [95.5, 30.0], [95.6, 30.0], [95.7, 30.0], [95.8, 30.0], [95.9, 30.0], [96.0, 31.0], [96.1, 31.0], [96.2, 31.0], [96.3, 31.0], [96.4, 31.0], [96.5, 31.0], [96.6, 31.0], [96.7, 31.0], [96.8, 31.0], [96.9, 31.0], [97.0, 31.0], [97.1, 31.0], [97.2, 31.0], [97.3, 31.0], [97.4, 31.0], [97.5, 31.0], [97.6, 31.0], [97.7, 31.0], [97.8, 31.0], [97.9, 31.0], [98.0, 31.0], [98.1, 31.0], [98.2, 31.0], [98.3, 31.0], [98.4, 31.0], [98.5, 31.0], [98.6, 32.0], [98.7, 32.0], [98.8, 32.0], [98.9, 32.0], [99.0, 32.0], [99.1, 32.0], [99.2, 32.0], [99.3, 32.0], [99.4, 33.0], [99.5, 33.0], [99.6, 33.0], [99.7, 34.0], [99.8, 35.0], [99.9, 38.0], [100.0, 235.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 9998.0, "series": [{"data": [[600.0, 783.0], [700.0, 581.0], [200.0, 2067.0], [800.0, 358.0], [900.0, 239.0], [1000.0, 122.0], [1100.0, 90.0], [300.0, 2005.0], [1200.0, 55.0], [1300.0, 41.0], [1400.0, 28.0], [1500.0, 12.0], [400.0, 1638.0], [100.0, 903.0], [1600.0, 7.0], [1700.0, 2.0], [1800.0, 2.0], [1900.0, 1.0], [500.0, 1066.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 9998.0], [200.0, 1.0], [100.0, 1.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1900.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 24.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 16621.0, "series": [{"data": [[0.0, 16621.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 3355.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 24.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.74757044E12, "maxY": 1.0, "series": [{"data": [[1.7475744E12, 1.0], [1.7475726E12, 1.0], [1.7475738E12, 1.0], [1.74757098E12, 1.0], [1.7475732E12, 1.0], [1.74757158E12, 1.0], [1.74757482E12, 1.0], [1.74757056E12, 1.0], [1.74757218E12, 1.0], [1.74757422E12, 1.0], [1.74757182E12, 1.0], [1.74757362E12, 1.0], [1.7475708E12, 1.0], [1.74757524E12, 1.0], [1.74757242E12, 1.0], [1.7475714E12, 1.0], [1.74757302E12, 1.0], [1.74757464E12, 1.0], [1.74757404E12, 1.0], [1.747572E12, 1.0], [1.74757326E12, 1.0], [1.74757506E12, 1.0], [1.74757164E12, 1.0], [1.74757224E12, 1.0], [1.74757446E12, 1.0], [1.74757062E12, 1.0], [1.74757284E12, 1.0], [1.74757386E12, 1.0], [1.74757122E12, 1.0], [1.74757344E12, 1.0], [1.74757488E12, 1.0], [1.74757086E12, 1.0], [1.74757308E12, 1.0], [1.74757146E12, 1.0], [1.74757428E12, 1.0], [1.74757044E12, 1.0], [1.74757206E12, 1.0], [1.74757368E12, 1.0], [1.7475753E12, 1.0], [1.74757104E12, 1.0], [1.74757266E12, 1.0], [1.7475747E12, 1.0], [1.74757068E12, 1.0], [1.7475723E12, 1.0], [1.7475741E12, 1.0], [1.74757128E12, 1.0], [1.7475729E12, 1.0], [1.7475735E12, 1.0], [1.74757512E12, 1.0], [1.74757188E12, 1.0], [1.74757452E12, 1.0], [1.74757248E12, 1.0], [1.74757392E12, 1.0], [1.74757212E12, 1.0], [1.7475705E12, 1.0], [1.74757272E12, 1.0], [1.74757494E12, 1.0], [1.7475711E12, 1.0], [1.74757332E12, 1.0], [1.74757434E12, 1.0], [1.7475717E12, 1.0], [1.74757374E12, 1.0], [1.74757134E12, 1.0], [1.74757476E12, 1.0], [1.74757194E12, 1.0], [1.74757092E12, 1.0], [1.74757254E12, 1.0], [1.74757416E12, 1.0], [1.74757314E12, 1.0], [1.74757356E12, 1.0], [1.74757518E12, 1.0], [1.74757152E12, 1.0], [1.74757116E12, 1.0], [1.74757278E12, 1.0], [1.74757458E12, 1.0], [1.74757338E12, 1.0], [1.74757176E12, 1.0], [1.74757398E12, 1.0], [1.74757236E12, 1.0], [1.747575E12, 1.0], [1.74757074E12, 1.0], [1.74757296E12, 1.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7475753E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 28.368200000000066, "minX": 1.0, "maxY": 458.57449999999994, "series": [{"data": [[1.0, 458.57449999999994]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.0, 458.57449999999994]], "isOverall": false, "label": "Create CSR-Aggregated", "isController": false}, {"data": [[1.0, 28.368200000000066]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}, {"data": [[1.0, 28.368200000000066]], "isOverall": false, "label": "HTTP Request - enroll-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2043.55, "minX": 1.74757044E12, "maxY": 19995.533333333333, "series": [{"data": [[1.7475744E12, 17661.583333333332], [1.7475726E12, 19007.616666666665], [1.7475738E12, 17956.1], [1.74757098E12, 17241.366666666665], [1.7475732E12, 17220.166666666668], [1.74757158E12, 19280.733333333334], [1.74757482E12, 18250.433333333334], [1.74757056E12, 18103.2], [1.74757218E12, 18839.166666666668], [1.74757422E12, 19722.366666666665], [1.74757182E12, 17956.183333333334], [1.74757362E12, 18397.733333333334], [1.7475708E12, 17661.833333333332], [1.74757524E12, 17535.833333333332], [1.74757242E12, 18544.8], [1.7475714E12, 19722.416666666668], [1.74757302E12, 17367.416666666668], [1.74757464E12, 18818.2], [1.74757404E12, 16925.9], [1.747572E12, 17220.15], [1.74757326E12, 16925.866666666665], [1.74757506E12, 17808.966666666667], [1.74757164E12, 19133.716666666667], [1.74757224E12, 16778.633333333335], [1.74757446E12, 18986.333333333332], [1.74757062E12, 17367.45], [1.74757284E12, 19406.6], [1.74757386E12, 19869.466666666667], [1.74757122E12, 17535.733333333334], [1.74757344E12, 18397.65], [1.74757488E12, 17956.083333333332], [1.74757086E12, 17514.533333333333], [1.74757308E12, 16925.866666666665], [1.74757146E12, 17808.85], [1.74757428E12, 18544.783333333333], [1.74757044E12, 13835.0], [1.74757206E12, 19722.3], [1.74757368E12, 17220.15], [1.7475753E12, 10134.416666666666], [1.74757104E12, 16757.616666666665], [1.74757266E12, 17346.3], [1.7475747E12, 18986.333333333332], [1.74757068E12, 17661.733333333334], [1.7475723E12, 18839.166666666668], [1.7475741E12, 19890.666666666668], [1.74757128E12, 17514.533333333333], [1.7475729E12, 19133.616666666665], [1.7475735E12, 18692.083333333332], [1.74757512E12, 17514.45], [1.74757188E12, 17367.366666666665], [1.74757452E12, 17514.5], [1.74757248E12, 18544.966666666667], [1.74757392E12, 18544.933333333334], [1.74757212E12, 18397.583333333332], [1.7475705E12, 17367.4], [1.74757272E12, 18544.866666666665], [1.74757494E12, 18839.216666666667], [1.7475711E12, 16042.733333333334], [1.74757332E12, 18250.55], [1.74757434E12, 17955.933333333334], [1.7475717E12, 16925.866666666665], [1.74757374E12, 19575.15], [1.74757134E12, 18082.216666666667], [1.74757476E12, 16925.883333333335], [1.74757194E12, 17808.833333333332], [1.74757092E12, 17073.066666666666], [1.74757254E12, 17514.616666666665], [1.74757416E12, 19995.533333333333], [1.74757314E12, 19280.783333333333], [1.74757356E12, 17956.15], [1.74757518E12, 17661.8], [1.74757152E12, 17661.75], [1.74757116E12, 17956.0], [1.74757278E12, 18418.883333333335], [1.74757458E12, 18418.766666666666], [1.74757338E12, 19133.733333333334], [1.74757176E12, 17956.1], [1.74757398E12, 15895.6], [1.74757236E12, 17956.166666666668], [1.747575E12, 18544.85], [1.74757074E12, 18250.333333333332], [1.74757296E12, 17808.916666666668]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7475744E12, 3554.0], [1.7475726E12, 3820.55], [1.7475738E12, 3613.233333333333], [1.74757098E12, 3465.15], [1.7475732E12, 3465.15], [1.74757158E12, 3879.7833333333333], [1.74757482E12, 3672.4666666666667], [1.74757056E12, 3642.85], [1.74757218E12, 3790.9333333333334], [1.74757422E12, 3968.633333333333], [1.74757182E12, 3613.233333333333], [1.74757362E12, 3702.0833333333335], [1.7475708E12, 3554.0], [1.74757524E12, 3524.383333333333], [1.74757242E12, 3731.7], [1.7475714E12, 3968.633333333333], [1.74757302E12, 3494.766666666667], [1.74757464E12, 3790.9333333333334], [1.74757404E12, 3405.9166666666665], [1.747572E12, 3465.15], [1.74757326E12, 3405.9166666666665], [1.74757506E12, 3583.616666666667], [1.74757164E12, 3850.1666666666665], [1.74757224E12, 3376.3], [1.74757446E12, 3820.55], [1.74757062E12, 3494.766666666667], [1.74757284E12, 3909.4], [1.74757386E12, 3998.25], [1.74757122E12, 3524.383333333333], [1.74757344E12, 3702.0833333333335], [1.74757488E12, 3613.233333333333], [1.74757086E12, 3524.383333333333], [1.74757308E12, 3405.9166666666665], [1.74757146E12, 3583.616666666667], [1.74757428E12, 3731.7], [1.74757044E12, 2783.9666666666667], [1.74757206E12, 3968.633333333333], [1.74757368E12, 3465.15], [1.7475753E12, 2043.55], [1.74757104E12, 3376.3], [1.74757266E12, 3494.766666666667], [1.7475747E12, 3820.55], [1.74757068E12, 3554.0], [1.7475723E12, 3790.9333333333334], [1.7475741E12, 3998.25], [1.74757128E12, 3524.383333333333], [1.7475729E12, 3850.1666666666665], [1.7475735E12, 3761.3166666666666], [1.74757512E12, 3524.383333333333], [1.74757188E12, 3494.766666666667], [1.74757452E12, 3524.383333333333], [1.74757248E12, 3731.7], [1.74757392E12, 3731.7], [1.74757212E12, 3702.0833333333335], [1.7475705E12, 3494.766666666667], [1.74757272E12, 3731.7], [1.74757494E12, 3790.9333333333334], [1.7475711E12, 3228.2166666666667], [1.74757332E12, 3672.4666666666667], [1.74757434E12, 3613.233333333333], [1.7475717E12, 3405.9166666666665], [1.74757374E12, 3939.016666666667], [1.74757134E12, 3642.85], [1.74757476E12, 3405.9166666666665], [1.74757194E12, 3583.616666666667], [1.74757092E12, 3435.5333333333333], [1.74757254E12, 3524.383333333333], [1.74757416E12, 4027.866666666667], [1.74757314E12, 3879.7833333333333], [1.74757356E12, 3613.233333333333], [1.74757518E12, 3554.0], [1.74757152E12, 3554.0], [1.74757116E12, 3613.233333333333], [1.74757278E12, 3702.0833333333335], [1.74757458E12, 3702.0833333333335], [1.74757338E12, 3850.1666666666665], [1.74757176E12, 3613.233333333333], [1.74757398E12, 3198.6], [1.74757236E12, 3613.233333333333], [1.747575E12, 3731.7], [1.74757074E12, 3672.4666666666667], [1.74757296E12, 3583.616666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7475753E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 27.47540983606557, "minX": 1.74757044E12, "maxY": 526.6388888888885, "series": [{"data": [[1.7475744E12, 471.4083333333335], [1.7475726E12, 434.05384615384605], [1.7475738E12, 456.34426229508205], [1.74757098E12, 481.237288135593], [1.7475732E12, 491.3589743589742], [1.74757158E12, 428.06870229007626], [1.74757482E12, 456.5887096774195], [1.74757056E12, 455.211382113821], [1.74757218E12, 441.4296875], [1.74757422E12, 420.93283582089543], [1.74757182E12, 463.2295081967214], [1.74757362E12, 451.22400000000016], [1.7475708E12, 467.7666666666667], [1.74757524E12, 473.35000000000014], [1.74757242E12, 444.25396825396837], [1.7475714E12, 419.2164179104478], [1.74757302E12, 479.52542372881356], [1.74757464E12, 442.92125984251976], [1.74757404E12, 497.7043478260873], [1.747572E12, 486.22222222222223], [1.74757326E12, 492.4956521739129], [1.74757506E12, 469.2231404958677], [1.74757164E12, 423.1769230769231], [1.74757224E12, 493.49122807017545], [1.74757446E12, 436.8294573643413], [1.74757062E12, 476.27118644067775], [1.74757284E12, 428.52671755725197], [1.74757386E12, 418.1555555555555], [1.74757122E12, 477.0666666666666], [1.74757344E12, 450.19200000000006], [1.74757488E12, 465.81967213114746], [1.74757086E12, 477.6554621848738], [1.74757308E12, 492.64347826086964], [1.74757146E12, 460.8842975206612], [1.74757428E12, 446.1031746031745], [1.74757044E12, 448.84042553191483], [1.74757206E12, 416.2910447761195], [1.74757368E12, 482.940170940171], [1.7475753E12, 431.485294117647], [1.74757104E12, 499.7610619469026], [1.74757266E12, 482.14529914529896], [1.7475747E12, 433.8217054263565], [1.74757068E12, 473.5333333333334], [1.7475723E12, 437.6718749999999], [1.7475741E12, 412.8455882352941], [1.74757128E12, 475.1848739495798], [1.7475729E12, 432.276923076923], [1.7475735E12, 443.7874015748032], [1.74757512E12, 474.0588235294117], [1.74757188E12, 478.864406779661], [1.74757452E12, 473.98319327731076], [1.74757248E12, 451.2539682539682], [1.74757392E12, 447.49206349206366], [1.74757212E12, 453.03999999999996], [1.7475705E12, 476.4745762711864], [1.74757272E12, 448.0873015873017], [1.74757494E12, 433.2109375], [1.7475711E12, 522.3944954128438], [1.74757332E12, 455.3629032258064], [1.74757434E12, 465.0081967213114], [1.7475717E12, 501.7130434782609], [1.74757374E12, 423.33834586466156], [1.74757134E12, 458.4836065573771], [1.74757476E12, 489.1739130434783], [1.74757194E12, 464.93388429752076], [1.74757092E12, 487.18965517241384], [1.74757254E12, 474.50420168067234], [1.74757416E12, 413.4222222222223], [1.74757314E12, 425.9999999999999], [1.74757356E12, 464.0081967213113], [1.74757518E12, 470.47499999999997], [1.74757152E12, 479.2500000000001], [1.74757116E12, 456.4508196721311], [1.74757278E12, 447.95238095238085], [1.74757458E12, 449.54761904761904], [1.74757338E12, 433.31538461538463], [1.74757176E12, 463.33606557377044], [1.74757398E12, 526.6388888888885], [1.74757236E12, 467.1475409836065], [1.747575E12, 452.43650793650795], [1.74757074E12, 452.8951612903226], [1.74757296E12, 463.5041322314049]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.7475744E12, 27.90833333333334], [1.7475726E12, 27.868217054263578], [1.7475738E12, 27.622950819672127], [1.74757098E12, 28.70085470085471], [1.7475732E12, 28.299145299145312], [1.74757158E12, 28.61832061068703], [1.74757482E12, 28.84677419354839], [1.74757056E12, 29.317073170731703], [1.74757218E12, 27.984375], [1.74757422E12, 28.17164179104476], [1.74757182E12, 28.319672131147534], [1.74757362E12, 28.104000000000006], [1.7475708E12, 28.666666666666668], [1.74757524E12, 28.655462184873947], [1.74757242E12, 28.16666666666667], [1.7475714E12, 28.514925373134332], [1.74757302E12, 28.398305084745758], [1.74757464E12, 28.468749999999996], [1.74757404E12, 28.078260869565213], [1.747572E12, 28.410256410256405], [1.74757326E12, 28.199999999999992], [1.74757506E12, 28.347107438016526], [1.74757164E12, 28.030769230769224], [1.74757224E12, 27.982456140350887], [1.74757446E12, 27.503875968992244], [1.74757062E12, 29.23728813559323], [1.74757284E12, 28.34848484848485], [1.74757386E12, 27.977777777777778], [1.74757122E12, 28.58823529411764], [1.74757344E12, 28.160000000000004], [1.74757488E12, 28.336065573770497], [1.74757086E12, 28.28571428571429], [1.74757308E12, 28.460869565217383], [1.74757146E12, 28.512396694214882], [1.74757428E12, 28.238095238095255], [1.74757044E12, 32.723404255319146], [1.74757206E12, 28.126865671641777], [1.74757368E12, 28.45299145299146], [1.7475753E12, 28.31884057971014], [1.74757104E12, 28.63157894736842], [1.74757266E12, 28.42372881355932], [1.7475747E12, 28.68217054263567], [1.74757068E12, 29.000000000000004], [1.7475723E12, 28.609375000000007], [1.7475741E12, 28.081481481481475], [1.74757128E12, 28.344537815126056], [1.7475729E12, 28.02307692307692], [1.7475735E12, 28.228346456692922], [1.74757512E12, 28.04201680672268], [1.74757188E12, 28.525423728813553], [1.74757452E12, 28.327731092436977], [1.74757248E12, 28.436507936507933], [1.74757392E12, 28.222222222222225], [1.74757212E12, 28.064000000000004], [1.7475705E12, 29.62711864406778], [1.74757272E12, 28.03968253968255], [1.74757494E12, 28.179687499999986], [1.7475711E12, 28.46788990825688], [1.74757332E12, 28.314516129032256], [1.74757434E12, 27.47540983606557], [1.7475717E12, 28.582608695652166], [1.74757374E12, 27.954887218045116], [1.74757134E12, 28.90243902439024], [1.74757476E12, 28.539130434782617], [1.74757194E12, 28.495867768595037], [1.74757092E12, 28.663793103448278], [1.74757254E12, 28.235294117647058], [1.74757416E12, 27.889705882352942], [1.74757314E12, 28.458015267175576], [1.74757356E12, 28.131147540983598], [1.74757518E12, 28.05833333333332], [1.74757152E12, 28.133333333333322], [1.74757116E12, 28.57377049180328], [1.74757278E12, 28.176000000000005], [1.74757458E12, 28.464], [1.74757338E12, 28.092307692307685], [1.74757176E12, 28.18032786885246], [1.74757398E12, 27.925925925925927], [1.74757236E12, 28.36065573770491], [1.747575E12, 28.09523809523809], [1.74757074E12, 28.814516129032263], [1.74757296E12, 28.140495867768603]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7475753E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74757044E12, "maxY": 32.670212765957444, "series": [{"data": [[1.7475744E12, 0.0], [1.7475726E12, 0.0], [1.7475738E12, 0.0], [1.74757098E12, 0.0], [1.7475732E12, 0.0], [1.74757158E12, 0.0], [1.74757482E12, 0.0], [1.74757056E12, 0.0], [1.74757218E12, 0.0], [1.74757422E12, 0.0], [1.74757182E12, 0.0], [1.74757362E12, 0.0], [1.7475708E12, 0.0], [1.74757524E12, 0.0], [1.74757242E12, 0.0], [1.7475714E12, 0.0], [1.74757302E12, 0.0], [1.74757464E12, 0.0], [1.74757404E12, 0.0], [1.747572E12, 0.0], [1.74757326E12, 0.0], [1.74757506E12, 0.0], [1.74757164E12, 0.0], [1.74757224E12, 0.0], [1.74757446E12, 0.0], [1.74757062E12, 0.0], [1.74757284E12, 0.0], [1.74757386E12, 0.0], [1.74757122E12, 0.0], [1.74757344E12, 0.0], [1.74757488E12, 0.0], [1.74757086E12, 0.0], [1.74757308E12, 0.0], [1.74757146E12, 0.0], [1.74757428E12, 0.0], [1.74757044E12, 0.0], [1.74757206E12, 0.0], [1.74757368E12, 0.0], [1.7475753E12, 0.0], [1.74757104E12, 0.0], [1.74757266E12, 0.0], [1.7475747E12, 0.0], [1.74757068E12, 0.0], [1.7475723E12, 0.0], [1.7475741E12, 0.0], [1.74757128E12, 0.0], [1.7475729E12, 0.0], [1.7475735E12, 0.0], [1.74757512E12, 0.0], [1.74757188E12, 0.0], [1.74757452E12, 0.0], [1.74757248E12, 0.0], [1.74757392E12, 0.0], [1.74757212E12, 0.0], [1.7475705E12, 0.0], [1.74757272E12, 0.0], [1.74757494E12, 0.0], [1.7475711E12, 0.0], [1.74757332E12, 0.0], [1.74757434E12, 0.0], [1.7475717E12, 0.0], [1.74757374E12, 0.0], [1.74757134E12, 0.0], [1.74757476E12, 0.0], [1.74757194E12, 0.0], [1.74757092E12, 0.0], [1.74757254E12, 0.0], [1.74757416E12, 0.0], [1.74757314E12, 0.0], [1.74757356E12, 0.0], [1.74757518E12, 0.0], [1.74757152E12, 0.0], [1.74757116E12, 0.0], [1.74757278E12, 0.0], [1.74757458E12, 0.0], [1.74757338E12, 0.0], [1.74757176E12, 0.0], [1.74757398E12, 0.0], [1.74757236E12, 0.0], [1.747575E12, 0.0], [1.74757074E12, 0.0], [1.74757296E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.7475744E12, 27.891666666666662], [1.7475726E12, 27.860465116279077], [1.7475738E12, 27.606557377049192], [1.74757098E12, 28.692307692307686], [1.7475732E12, 28.273504273504262], [1.74757158E12, 28.595419847328245], [1.74757482E12, 28.84677419354839], [1.74757056E12, 29.27642276422764], [1.74757218E12, 27.976562500000007], [1.74757422E12, 28.15671641791045], [1.74757182E12, 28.319672131147534], [1.74757362E12, 28.08799999999999], [1.7475708E12, 28.65], [1.74757524E12, 28.647058823529413], [1.74757242E12, 28.15873015873015], [1.7475714E12, 28.470149253731343], [1.74757302E12, 28.398305084745758], [1.74757464E12, 28.468749999999996], [1.74757404E12, 28.078260869565213], [1.747572E12, 28.401709401709414], [1.74757326E12, 28.199999999999992], [1.74757506E12, 28.347107438016526], [1.74757164E12, 27.992307692307698], [1.74757224E12, 27.97368421052631], [1.74757446E12, 27.488372093023266], [1.74757062E12, 29.22033898305084], [1.74757284E12, 28.340909090909093], [1.74757386E12, 27.962962962962962], [1.74757122E12, 28.58823529411764], [1.74757344E12, 28.160000000000004], [1.74757488E12, 28.336065573770497], [1.74757086E12, 28.277310924369743], [1.74757308E12, 28.452173913043485], [1.74757146E12, 28.512396694214882], [1.74757428E12, 28.21428571428571], [1.74757044E12, 32.670212765957444], [1.74757206E12, 28.119402985074622], [1.74757368E12, 28.44444444444445], [1.7475753E12, 28.31884057971014], [1.74757104E12, 28.622807017543856], [1.74757266E12, 28.42372881355932], [1.7475747E12, 28.674418604651162], [1.74757068E12, 28.966666666666665], [1.7475723E12, 28.609375000000007], [1.7475741E12, 28.04444444444444], [1.74757128E12, 28.31092436974791], [1.7475729E12, 28.0], [1.7475735E12, 28.228346456692922], [1.74757512E12, 28.033613445378148], [1.74757188E12, 28.50847457627119], [1.74757452E12, 28.319327731092432], [1.74757248E12, 28.436507936507933], [1.74757392E12, 28.222222222222225], [1.74757212E12, 28.064000000000004], [1.7475705E12, 29.601694915254253], [1.74757272E12, 28.031746031746035], [1.74757494E12, 28.171874999999996], [1.7475711E12, 28.46788990825688], [1.74757332E12, 28.306451612903217], [1.74757434E12, 27.467213114754095], [1.7475717E12, 28.573913043478267], [1.74757374E12, 27.947368421052637], [1.74757134E12, 28.90243902439024], [1.74757476E12, 28.53043478260871], [1.74757194E12, 28.4793388429752], [1.74757092E12, 28.646551724137932], [1.74757254E12, 28.22689075630251], [1.74757416E12, 27.875000000000007], [1.74757314E12, 28.450381679389317], [1.74757356E12, 28.131147540983598], [1.74757518E12, 28.05], [1.74757152E12, 28.133333333333322], [1.74757116E12, 28.5655737704918], [1.74757278E12, 28.160000000000004], [1.74757458E12, 28.464], [1.74757338E12, 28.069230769230767], [1.74757176E12, 28.172131147540984], [1.74757398E12, 27.91666666666668], [1.74757236E12, 28.36065573770491], [1.747575E12, 28.087301587301585], [1.74757074E12, 28.77419354838709], [1.74757296E12, 28.140495867768603]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7475753E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74757044E12, "maxY": 2.106382978723406, "series": [{"data": [[1.7475744E12, 0.0], [1.7475726E12, 0.0], [1.7475738E12, 0.0], [1.74757098E12, 0.0], [1.7475732E12, 0.0], [1.74757158E12, 0.0], [1.74757482E12, 0.0], [1.74757056E12, 0.0], [1.74757218E12, 0.0], [1.74757422E12, 0.0], [1.74757182E12, 0.0], [1.74757362E12, 0.0], [1.7475708E12, 0.0], [1.74757524E12, 0.0], [1.74757242E12, 0.0], [1.7475714E12, 0.0], [1.74757302E12, 0.0], [1.74757464E12, 0.0], [1.74757404E12, 0.0], [1.747572E12, 0.0], [1.74757326E12, 0.0], [1.74757506E12, 0.0], [1.74757164E12, 0.0], [1.74757224E12, 0.0], [1.74757446E12, 0.0], [1.74757062E12, 0.0], [1.74757284E12, 0.0], [1.74757386E12, 0.0], [1.74757122E12, 0.0], [1.74757344E12, 0.0], [1.74757488E12, 0.0], [1.74757086E12, 0.0], [1.74757308E12, 0.0], [1.74757146E12, 0.0], [1.74757428E12, 0.0], [1.74757044E12, 0.0], [1.74757206E12, 0.0], [1.74757368E12, 0.0], [1.7475753E12, 0.0], [1.74757104E12, 0.0], [1.74757266E12, 0.0], [1.7475747E12, 0.0], [1.74757068E12, 0.0], [1.7475723E12, 0.0], [1.7475741E12, 0.0], [1.74757128E12, 0.0], [1.7475729E12, 0.0], [1.7475735E12, 0.0], [1.74757512E12, 0.0], [1.74757188E12, 0.0], [1.74757452E12, 0.0], [1.74757248E12, 0.0], [1.74757392E12, 0.0], [1.74757212E12, 0.0], [1.7475705E12, 0.0], [1.74757272E12, 0.0], [1.74757494E12, 0.0], [1.7475711E12, 0.0], [1.74757332E12, 0.0], [1.74757434E12, 0.0], [1.7475717E12, 0.0], [1.74757374E12, 0.0], [1.74757134E12, 0.0], [1.74757476E12, 0.0], [1.74757194E12, 0.0], [1.74757092E12, 0.0], [1.74757254E12, 0.0], [1.74757416E12, 0.0], [1.74757314E12, 0.0], [1.74757356E12, 0.0], [1.74757518E12, 0.0], [1.74757152E12, 0.0], [1.74757116E12, 0.0], [1.74757278E12, 0.0], [1.74757458E12, 0.0], [1.74757338E12, 0.0], [1.74757176E12, 0.0], [1.74757398E12, 0.0], [1.74757236E12, 0.0], [1.747575E12, 0.0], [1.74757074E12, 0.0], [1.74757296E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.7475744E12, 0.03333333333333334], [1.7475726E12, 0.03100775193798451], [1.7475738E12, 0.02459016393442623], [1.74757098E12, 0.03418803418803419], [1.7475732E12, 0.03418803418803419], [1.74757158E12, 0.03053435114503818], [1.74757482E12, 0.024193548387096774], [1.74757056E12, 0.04065040650406502], [1.74757218E12, 0.023437500000000003], [1.74757422E12, 0.022388059701492543], [1.74757182E12, 0.03278688524590165], [1.74757362E12, 0.024], [1.7475708E12, 0.04166666666666664], [1.74757524E12, 0.025210084033613446], [1.74757242E12, 0.03174603174603176], [1.7475714E12, 0.02985074626865673], [1.74757302E12, 0.02542372881355933], [1.74757464E12, 0.03125000000000001], [1.74757404E12, 0.026086956521739132], [1.747572E12, 0.03418803418803419], [1.74757326E12, 0.026086956521739132], [1.74757506E12, 0.024793388429752067], [1.74757164E12, 0.02307692307692308], [1.74757224E12, 0.026315789473684213], [1.74757446E12, 0.023255813953488375], [1.74757062E12, 0.03389830508474577], [1.74757284E12, 0.030303030303030314], [1.74757386E12, 0.022222222222222227], [1.74757122E12, 0.033613445378151266], [1.74757344E12, 0.024], [1.74757488E12, 0.03278688524590165], [1.74757086E12, 0.042016806722689044], [1.74757308E12, 0.03478260869565218], [1.74757146E12, 0.03305785123966943], [1.74757428E12, 0.03174603174603175], [1.74757044E12, 2.106382978723406], [1.74757206E12, 0.022388059701492543], [1.74757368E12, 0.025641025641025644], [1.7475753E12, 0.0], [1.74757104E12, 0.035087719298245626], [1.74757266E12, 0.025423728813559324], [1.7475747E12, 0.023255813953488375], [1.74757068E12, 0.05000000000000003], [1.7475723E12, 0.023437500000000003], [1.7475741E12, 0.022222222222222227], [1.74757128E12, 0.033613445378151266], [1.7475729E12, 0.02307692307692308], [1.7475735E12, 0.02362204724409449], [1.74757512E12, 0.025210084033613446], [1.74757188E12, 0.03389830508474577], [1.74757452E12, 0.025210084033613446], [1.74757248E12, 0.02380952380952382], [1.74757392E12, 0.03174603174603176], [1.74757212E12, 0.024000000000000007], [1.7475705E12, 0.05932203389830507], [1.74757272E12, 0.02380952380952381], [1.74757494E12, 0.023437500000000003], [1.7475711E12, 0.03669724770642202], [1.74757332E12, 0.032258064516129045], [1.74757434E12, 0.02459016393442623], [1.7475717E12, 0.026086956521739132], [1.74757374E12, 0.022556390977443615], [1.74757134E12, 0.03252032520325204], [1.74757476E12, 0.026086956521739132], [1.74757194E12, 0.024793388429752067], [1.74757092E12, 0.03448275862068966], [1.74757254E12, 0.033613445378151266], [1.74757416E12, 0.02205882352941177], [1.74757314E12, 0.02290076335877863], [1.74757356E12, 0.03278688524590165], [1.74757518E12, 0.025], [1.74757152E12, 0.03333333333333334], [1.74757116E12, 0.03278688524590165], [1.74757278E12, 0.032000000000000015], [1.74757458E12, 0.024], [1.74757338E12, 0.02307692307692308], [1.74757176E12, 0.02459016393442623], [1.74757398E12, 0.02777777777777778], [1.74757236E12, 0.03278688524590165], [1.747575E12, 0.03174603174603176], [1.74757074E12, 0.032258064516129045], [1.74757296E12, 0.024793388429752067]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7475753E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 24.0, "minX": 1.74757044E12, "maxY": 1967.0, "series": [{"data": [[1.7475744E12, 1694.0], [1.7475726E12, 1429.0], [1.7475738E12, 1606.0], [1.74757098E12, 1755.0], [1.7475732E12, 1456.0], [1.74757158E12, 1164.0], [1.74757482E12, 1398.0], [1.74757056E12, 1432.0], [1.74757218E12, 1358.0], [1.74757422E12, 1190.0], [1.74757182E12, 1133.0], [1.74757362E12, 1367.0], [1.7475708E12, 1320.0], [1.74757524E12, 1602.0], [1.74757242E12, 1345.0], [1.7475714E12, 1289.0], [1.74757302E12, 1547.0], [1.74757464E12, 1235.0], [1.74757404E12, 1498.0], [1.747572E12, 1189.0], [1.74757326E12, 1292.0], [1.74757506E12, 1210.0], [1.74757164E12, 1123.0], [1.74757224E12, 1316.0], [1.74757446E12, 1044.0], [1.74757062E12, 1238.0], [1.74757284E12, 1604.0], [1.74757386E12, 980.0], [1.74757122E12, 1622.0], [1.74757344E12, 1452.0], [1.74757488E12, 1425.0], [1.74757086E12, 1531.0], [1.74757308E12, 1527.0], [1.74757146E12, 1127.0], [1.74757428E12, 1159.0], [1.74757044E12, 1325.0], [1.74757206E12, 1046.0], [1.74757368E12, 1162.0], [1.7475753E12, 1302.0], [1.74757104E12, 1669.0], [1.74757266E12, 1418.0], [1.7475747E12, 1499.0], [1.74757068E12, 1455.0], [1.7475723E12, 1446.0], [1.7475741E12, 1317.0], [1.74757128E12, 1879.0], [1.7475729E12, 1235.0], [1.7475735E12, 1516.0], [1.74757512E12, 1326.0], [1.74757188E12, 1287.0], [1.74757452E12, 1318.0], [1.74757248E12, 1236.0], [1.74757392E12, 1544.0], [1.74757212E12, 1403.0], [1.7475705E12, 1533.0], [1.74757272E12, 1286.0], [1.74757494E12, 983.0], [1.7475711E12, 1402.0], [1.74757332E12, 1482.0], [1.74757434E12, 1353.0], [1.7475717E12, 1498.0], [1.74757374E12, 1104.0], [1.74757134E12, 1514.0], [1.74757476E12, 1435.0], [1.74757194E12, 1622.0], [1.74757092E12, 1248.0], [1.74757254E12, 1505.0], [1.74757416E12, 1123.0], [1.74757314E12, 1330.0], [1.74757356E12, 1340.0], [1.74757518E12, 1239.0], [1.74757152E12, 1382.0], [1.74757116E12, 1389.0], [1.74757278E12, 1323.0], [1.74757458E12, 1122.0], [1.74757338E12, 1768.0], [1.74757176E12, 1471.0], [1.74757398E12, 1967.0], [1.74757236E12, 1527.0], [1.747575E12, 1414.0], [1.74757074E12, 1466.0], [1.74757296E12, 1859.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7475744E12, 667.7000000000002], [1.7475726E12, 623.0], [1.7475738E12, 620.0], [1.74757098E12, 647.2], [1.7475732E12, 672.5], [1.74757158E12, 571.4000000000003], [1.74757482E12, 641.5999999999999], [1.74757056E12, 606.9000000000001], [1.74757218E12, 646.5], [1.74757422E12, 639.5999999999999], [1.74757182E12, 695.0], [1.74757362E12, 693.9000000000001], [1.7475708E12, 683.5], [1.74757524E12, 629.0], [1.74757242E12, 607.0], [1.7475714E12, 533.4], [1.74757302E12, 666.0000000000001], [1.74757464E12, 633.2], [1.74757404E12, 730.6], [1.747572E12, 732.0], [1.74757326E12, 663.8], [1.74757506E12, 624.7000000000002], [1.74757164E12, 576.1], [1.74757224E12, 700.3], [1.74757446E12, 581.4], [1.74757062E12, 702.9000000000001], [1.74757284E12, 577.4], [1.74757386E12, 581.8], [1.74757122E12, 637.0], [1.74757344E12, 620.4000000000001], [1.74757488E12, 656.0], [1.74757086E12, 640.9], [1.74757308E12, 733.6000000000001], [1.74757146E12, 667.0], [1.74757428E12, 613.7000000000002], [1.74757044E12, 583.1999999999999], [1.74757206E12, 575.5999999999999], [1.74757368E12, 691.5], [1.7475753E12, 631.6000000000001], [1.74757104E12, 707.6], [1.74757266E12, 689.6000000000001], [1.7475747E12, 576.5999999999999], [1.74757068E12, 680.7000000000002], [1.7475723E12, 603.1000000000001], [1.7475741E12, 580.4000000000001], [1.74757128E12, 710.4], [1.7475729E12, 595.9000000000001], [1.7475735E12, 623.5], [1.74757512E12, 686.4], [1.74757188E12, 668.1000000000001], [1.74757452E12, 644.5999999999998], [1.74757248E12, 654.3000000000003], [1.74757392E12, 585.4000000000001], [1.74757212E12, 649.4000000000001], [1.7475705E12, 701.6], [1.74757272E12, 639.6000000000001], [1.74757494E12, 592.9000000000001], [1.7475711E12, 740.9], [1.74757332E12, 640.6999999999999], [1.74757434E12, 644.0], [1.7475717E12, 672.9], [1.74757374E12, 591.0000000000001], [1.74757134E12, 625.0000000000001], [1.74757476E12, 677.0], [1.74757194E12, 600.0], [1.74757092E12, 609.5000000000001], [1.74757254E12, 671.0], [1.74757416E12, 566.8000000000001], [1.74757314E12, 532.7], [1.74757356E12, 611.5], [1.74757518E12, 664.9], [1.74757152E12, 650.9000000000001], [1.74757116E12, 606.0], [1.74757278E12, 594.6000000000001], [1.74757458E12, 681.4000000000002], [1.74757338E12, 581.5], [1.74757176E12, 654.5], [1.74757398E12, 756.6], [1.74757236E12, 669.5], [1.747575E12, 616.7], [1.74757074E12, 649.4], [1.74757296E12, 642.4000000000002]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7475744E12, 1338.3300000000006], [1.7475726E12, 1334.1999999999975], [1.7475738E12, 1363.2500000000018], [1.74757098E12, 1299.1599999999953], [1.7475732E12, 1300.8500000000001], [1.74757158E12, 945.7200000000003], [1.74757482E12, 1125.8099999999997], [1.74757056E12, 1235.3], [1.74757218E12, 1063.9100000000017], [1.74757422E12, 994.51], [1.74757182E12, 1099.9500000000003], [1.74757362E12, 1225.3400000000015], [1.7475708E12, 1288.75], [1.74757524E12, 1434.399999999998], [1.74757242E12, 1186.8299999999997], [1.7475714E12, 1135.31], [1.74757302E12, 1313.52], [1.74757464E12, 1004.6799999999998], [1.74757404E12, 1313.76], [1.747572E12, 1011.5000000000002], [1.74757326E12, 1246.69], [1.74757506E12, 1105.3499999999997], [1.74757164E12, 950.0099999999992], [1.74757224E12, 1045.2500000000007], [1.74757446E12, 1007.3200000000013], [1.74757062E12, 1185.4499999999994], [1.74757284E12, 1191.0400000000009], [1.74757386E12, 943.9000000000002], [1.74757122E12, 1501.599999999999], [1.74757344E12, 1189.9600000000019], [1.74757488E12, 1195.4000000000003], [1.74757086E12, 1506.0099999999993], [1.74757308E12, 1060.3899999999999], [1.74757146E12, 1100.9399999999996], [1.74757428E12, 1135.88], [1.74757044E12, 1182.5999999999976], [1.74757206E12, 938.0400000000002], [1.74757368E12, 1138.25], [1.7475753E12, 1238.5400000000009], [1.74757104E12, 1312.8399999999997], [1.74757266E12, 1188.9599999999996], [1.7475747E12, 1322.8200000000002], [1.74757068E12, 1338.95], [1.7475723E12, 1236.8000000000018], [1.7475741E12, 970.7999999999977], [1.74757128E12, 1259.6199999999978], [1.7475729E12, 988.4299999999995], [1.7475735E12, 1151.0999999999967], [1.74757512E12, 1152.6399999999996], [1.74757188E12, 1146.3799999999999], [1.74757452E12, 1203.5899999999997], [1.74757248E12, 1023.4], [1.74757392E12, 1155.58], [1.74757212E12, 1150.0900000000022], [1.7475705E12, 1309.1999999999994], [1.74757272E12, 1149.9499999999998], [1.74757494E12, 947.9400000000004], [1.7475711E12, 1268.7600000000004], [1.74757332E12, 1210.6999999999985], [1.74757434E12, 1333.1000000000004], [1.7475717E12, 1390.08], [1.74757374E12, 1038.499999999999], [1.74757134E12, 1140.3799999999997], [1.74757476E12, 1317.8099999999993], [1.74757194E12, 1353.6899999999985], [1.74757092E12, 1144.6999999999998], [1.74757254E12, 1310.4499999999978], [1.74757416E12, 1083.6399999999996], [1.74757314E12, 1258.5100000000002], [1.74757356E12, 1173.1500000000008], [1.74757518E12, 1167.2300000000002], [1.74757152E12, 1273.9300000000005], [1.74757116E12, 1266.7500000000027], [1.74757278E12, 1099.3999999999987], [1.74757458E12, 1088.0799999999997], [1.74757338E12, 1236.4599999999957], [1.74757176E12, 1254.8500000000022], [1.74757398E12, 1371.2899999999975], [1.74757236E12, 1123.1500000000003], [1.747575E12, 1196.28], [1.74757074E12, 1187.2399999999989], [1.74757296E12, 1112.85]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7475744E12, 851.8999999999997], [1.7475726E12, 792.0], [1.7475738E12, 805.75], [1.74757098E12, 786.4], [1.7475732E12, 827.5], [1.74757158E12, 787.85], [1.74757482E12, 752.2999999999995], [1.74757056E12, 828.5999999999999], [1.74757218E12, 766.5999999999995], [1.74757422E12, 793.2499999999994], [1.74757182E12, 925.25], [1.74757362E12, 787.5999999999997], [1.7475708E12, 876.4999999999992], [1.74757524E12, 835.0], [1.74757242E12, 726.5999999999999], [1.7475714E12, 678.7999999999997], [1.74757302E12, 770.5999999999999], [1.74757464E12, 817.9999999999995], [1.74757404E12, 927.8999999999997], [1.747572E12, 833.75], [1.74757326E12, 851.9999999999998], [1.74757506E12, 785.2499999999999], [1.74757164E12, 690.75], [1.74757224E12, 817.3499999999997], [1.74757446E12, 707.3499999999999], [1.74757062E12, 839.15], [1.74757284E12, 693.1999999999999], [1.74757386E12, 707.4999999999997], [1.74757122E12, 834.0], [1.74757344E12, 752.9499999999998], [1.74757488E12, 773.5], [1.74757086E12, 826.3], [1.74757308E12, 913.45], [1.74757146E12, 820.85], [1.74757428E12, 766.9999999999998], [1.74757044E12, 841.4499999999983], [1.74757206E12, 733.7499999999999], [1.74757368E12, 809.25], [1.7475753E12, 862.1999999999998], [1.74757104E12, 827.8], [1.74757266E12, 827.3999999999999], [1.7475747E12, 722.15], [1.74757068E12, 846.1999999999994], [1.7475723E12, 761.3999999999996], [1.7475741E12, 743.9999999999998], [1.74757128E12, 868.6999999999998], [1.7475729E12, 729.75], [1.7475735E12, 794.25], [1.74757512E12, 782.7999999999987], [1.74757188E12, 818.9499999999997], [1.74757452E12, 850.3], [1.74757248E12, 779.0], [1.74757392E12, 772.5999999999999], [1.74757212E12, 790.4499999999998], [1.7475705E12, 817.9999999999995], [1.74757272E12, 789.3], [1.74757494E12, 751.4499999999999], [1.7475711E12, 916.1999999999999], [1.74757332E12, 785.6999999999998], [1.74757434E12, 831.25], [1.7475717E12, 804.0], [1.74757374E12, 731.65], [1.74757134E12, 801.6999999999998], [1.74757476E12, 830.6999999999997], [1.74757194E12, 776.7], [1.74757092E12, 853.1499999999999], [1.74757254E12, 798.5999999999991], [1.74757416E12, 717.3999999999996], [1.74757314E12, 788.05], [1.74757356E12, 826.5], [1.74757518E12, 827.3999999999999], [1.74757152E12, 891.2999999999996], [1.74757116E12, 763.25], [1.74757278E12, 792.7999999999996], [1.74757458E12, 826.1999999999998], [1.74757338E12, 795.1999999999994], [1.74757176E12, 809.0], [1.74757398E12, 916.7999999999997], [1.74757236E12, 764.0], [1.747575E12, 763.6999999999998], [1.74757074E12, 778.55], [1.74757296E12, 876.1499999999999]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7475744E12, 25.0], [1.7475726E12, 26.0], [1.7475738E12, 26.0], [1.74757098E12, 26.0], [1.7475732E12, 26.0], [1.74757158E12, 26.0], [1.74757482E12, 26.0], [1.74757056E12, 27.0], [1.74757218E12, 26.0], [1.74757422E12, 26.0], [1.74757182E12, 26.0], [1.74757362E12, 26.0], [1.7475708E12, 24.0], [1.74757524E12, 26.0], [1.74757242E12, 25.0], [1.7475714E12, 26.0], [1.74757302E12, 26.0], [1.74757464E12, 26.0], [1.74757404E12, 26.0], [1.747572E12, 26.0], [1.74757326E12, 26.0], [1.74757506E12, 26.0], [1.74757164E12, 26.0], [1.74757224E12, 26.0], [1.74757446E12, 25.0], [1.74757062E12, 26.0], [1.74757284E12, 26.0], [1.74757386E12, 26.0], [1.74757122E12, 26.0], [1.74757344E12, 26.0], [1.74757488E12, 26.0], [1.74757086E12, 26.0], [1.74757308E12, 26.0], [1.74757146E12, 26.0], [1.74757428E12, 26.0], [1.74757044E12, 27.0], [1.74757206E12, 26.0], [1.74757368E12, 26.0], [1.7475753E12, 25.0], [1.74757104E12, 26.0], [1.74757266E12, 26.0], [1.7475747E12, 26.0], [1.74757068E12, 27.0], [1.7475723E12, 25.0], [1.7475741E12, 26.0], [1.74757128E12, 26.0], [1.7475729E12, 26.0], [1.7475735E12, 25.0], [1.74757512E12, 26.0], [1.74757188E12, 26.0], [1.74757452E12, 26.0], [1.74757248E12, 26.0], [1.74757392E12, 26.0], [1.74757212E12, 26.0], [1.7475705E12, 27.0], [1.74757272E12, 26.0], [1.74757494E12, 26.0], [1.7475711E12, 26.0], [1.74757332E12, 26.0], [1.74757434E12, 25.0], [1.7475717E12, 26.0], [1.74757374E12, 25.0], [1.74757134E12, 26.0], [1.74757476E12, 26.0], [1.74757194E12, 26.0], [1.74757092E12, 26.0], [1.74757254E12, 26.0], [1.74757416E12, 25.0], [1.74757314E12, 26.0], [1.74757356E12, 26.0], [1.74757518E12, 26.0], [1.74757152E12, 26.0], [1.74757116E12, 26.0], [1.74757278E12, 26.0], [1.74757458E12, 25.0], [1.74757338E12, 26.0], [1.74757176E12, 26.0], [1.74757398E12, 26.0], [1.74757236E12, 26.0], [1.747575E12, 26.0], [1.74757074E12, 26.0], [1.74757296E12, 25.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7475744E12, 82.5], [1.7475726E12, 133.0], [1.7475738E12, 76.0], [1.74757098E12, 164.0], [1.7475732E12, 92.5], [1.74757158E12, 84.0], [1.74757482E12, 80.0], [1.74757056E12, 92.0], [1.74757218E12, 90.5], [1.74757422E12, 85.5], [1.74757182E12, 85.5], [1.74757362E12, 80.0], [1.7475708E12, 81.5], [1.74757524E12, 123.0], [1.74757242E12, 94.5], [1.7475714E12, 86.5], [1.74757302E12, 94.0], [1.74757464E12, 32.0], [1.74757404E12, 76.5], [1.747572E12, 87.5], [1.74757326E12, 98.5], [1.74757506E12, 91.0], [1.74757164E12, 77.0], [1.74757224E12, 84.5], [1.74757446E12, 80.0], [1.74757062E12, 78.0], [1.74757284E12, 31.0], [1.74757386E12, 82.5], [1.74757122E12, 132.0], [1.74757344E12, 83.5], [1.74757488E12, 78.0], [1.74757086E12, 81.5], [1.74757308E12, 83.0], [1.74757146E12, 86.0], [1.74757428E12, 84.0], [1.74757044E12, 135.0], [1.74757206E12, 83.5], [1.74757368E12, 94.0], [1.7475753E12, 32.0], [1.74757104E12, 33.0], [1.74757266E12, 35.0], [1.7475747E12, 86.5], [1.74757068E12, 91.0], [1.7475723E12, 84.5], [1.7475741E12, 128.0], [1.74757128E12, 75.5], [1.7475729E12, 87.5], [1.7475735E12, 78.5], [1.74757512E12, 78.0], [1.74757188E12, 92.0], [1.74757452E12, 95.0], [1.74757248E12, 81.0], [1.74757392E12, 78.5], [1.74757212E12, 89.0], [1.7475705E12, 79.0], [1.74757272E12, 79.0], [1.74757494E12, 90.5], [1.7475711E12, 91.5], [1.74757332E12, 83.5], [1.74757434E12, 76.5], [1.7475717E12, 81.5], [1.74757374E12, 85.0], [1.74757134E12, 36.0], [1.74757476E12, 81.0], [1.74757194E12, 84.5], [1.74757092E12, 86.5], [1.74757254E12, 92.0], [1.74757416E12, 38.0], [1.74757314E12, 90.0], [1.74757356E12, 74.5], [1.74757518E12, 91.0], [1.74757152E12, 102.0], [1.74757116E12, 75.5], [1.74757278E12, 126.0], [1.74757458E12, 125.0], [1.74757338E12, 83.0], [1.74757176E12, 89.5], [1.74757398E12, 86.5], [1.74757236E12, 79.0], [1.747575E12, 87.5], [1.74757074E12, 80.0], [1.74757296E12, 89.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7475753E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 31.0, "minX": 1.0, "maxY": 216.0, "series": [{"data": [[1.0, 31.0], [2.0, 96.0], [4.0, 84.0], [8.0, 75.5], [9.0, 89.0], [5.0, 32.0], [10.0, 78.5], [3.0, 216.0], [6.0, 114.0], [7.0, 31.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 10.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 27.0, "series": [{"data": [[1.0, 27.0], [2.0, 12.5], [4.0, 12.5], [8.0, 12.0], [9.0, 13.5], [5.0, 26.0], [10.0, 13.0], [3.0, 0.0], [6.0, 12.5], [7.0, 26.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 10.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 2.2666666666666666, "minX": 1.74757044E12, "maxY": 4.516666666666667, "series": [{"data": [[1.7475744E12, 4.0], [1.7475726E12, 4.316666666666666], [1.7475738E12, 4.066666666666666], [1.74757098E12, 3.9166666666666665], [1.7475732E12, 3.9], [1.74757158E12, 4.366666666666666], [1.74757482E12, 4.133333333333334], [1.74757056E12, 4.1], [1.74757218E12, 4.266666666666667], [1.74757422E12, 4.466666666666667], [1.74757182E12, 4.066666666666666], [1.74757362E12, 4.166666666666667], [1.7475708E12, 4.0], [1.74757524E12, 3.9833333333333334], [1.74757242E12, 4.2], [1.7475714E12, 4.466666666666667], [1.74757302E12, 3.933333333333333], [1.74757464E12, 4.25], [1.74757404E12, 3.8333333333333335], [1.747572E12, 3.9], [1.74757326E12, 3.8333333333333335], [1.74757506E12, 4.033333333333333], [1.74757164E12, 4.333333333333333], [1.74757224E12, 3.8], [1.74757446E12, 4.3], [1.74757062E12, 3.933333333333333], [1.74757284E12, 4.383333333333334], [1.74757386E12, 4.5], [1.74757122E12, 3.9833333333333334], [1.74757344E12, 4.166666666666667], [1.74757488E12, 4.066666666666666], [1.74757086E12, 3.966666666666667], [1.74757308E12, 3.8333333333333335], [1.74757146E12, 4.033333333333333], [1.74757428E12, 4.2], [1.74757044E12, 3.15], [1.74757206E12, 4.466666666666667], [1.74757368E12, 3.9], [1.7475753E12, 2.2666666666666666], [1.74757104E12, 3.783333333333333], [1.74757266E12, 3.9166666666666665], [1.7475747E12, 4.3], [1.74757068E12, 4.0], [1.7475723E12, 4.266666666666667], [1.7475741E12, 4.516666666666667], [1.74757128E12, 3.966666666666667], [1.7475729E12, 4.333333333333333], [1.7475735E12, 4.233333333333333], [1.74757512E12, 3.966666666666667], [1.74757188E12, 3.933333333333333], [1.74757452E12, 3.966666666666667], [1.74757248E12, 4.2], [1.74757392E12, 4.2], [1.74757212E12, 4.166666666666667], [1.7475705E12, 3.933333333333333], [1.74757272E12, 4.2], [1.74757494E12, 4.266666666666667], [1.7475711E12, 3.6333333333333333], [1.74757332E12, 4.133333333333334], [1.74757434E12, 4.066666666666666], [1.7475717E12, 3.8333333333333335], [1.74757374E12, 4.433333333333334], [1.74757134E12, 4.083333333333333], [1.74757476E12, 3.8333333333333335], [1.74757194E12, 4.033333333333333], [1.74757092E12, 3.8666666666666667], [1.74757254E12, 3.966666666666667], [1.74757416E12, 4.516666666666667], [1.74757314E12, 4.366666666666666], [1.74757356E12, 4.066666666666666], [1.74757518E12, 4.0], [1.74757152E12, 4.0], [1.74757116E12, 4.066666666666666], [1.74757278E12, 4.183333333333334], [1.74757458E12, 4.183333333333334], [1.74757338E12, 4.333333333333333], [1.74757176E12, 4.066666666666666], [1.74757398E12, 3.6], [1.74757236E12, 4.066666666666666], [1.747575E12, 4.2], [1.74757074E12, 4.133333333333334], [1.74757296E12, 4.033333333333333]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7475753E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 1.1333333333333333, "minX": 1.74757044E12, "maxY": 2.2666666666666666, "series": [{"data": [[1.7475744E12, 2.0], [1.7475726E12, 2.1666666666666665], [1.7475738E12, 2.033333333333333], [1.74757098E12, 1.9666666666666666], [1.7475732E12, 1.95], [1.74757158E12, 2.183333333333333], [1.74757482E12, 2.066666666666667], [1.74757056E12, 2.05], [1.74757218E12, 2.1333333333333333], [1.74757422E12, 2.2333333333333334], [1.74757182E12, 2.033333333333333], [1.74757362E12, 2.0833333333333335], [1.7475708E12, 2.0], [1.74757524E12, 2.0], [1.74757242E12, 2.1], [1.7475714E12, 2.2333333333333334], [1.74757302E12, 1.9666666666666666], [1.74757464E12, 2.1166666666666667], [1.74757404E12, 1.9166666666666667], [1.747572E12, 1.95], [1.74757326E12, 1.9166666666666667], [1.74757506E12, 2.0166666666666666], [1.74757164E12, 2.1666666666666665], [1.74757224E12, 1.9], [1.74757446E12, 2.15], [1.74757062E12, 1.9666666666666666], [1.74757284E12, 2.183333333333333], [1.74757386E12, 2.25], [1.74757122E12, 2.0], [1.74757344E12, 2.0833333333333335], [1.74757488E12, 2.033333333333333], [1.74757086E12, 1.9833333333333334], [1.74757308E12, 1.9166666666666667], [1.74757146E12, 2.0166666666666666], [1.74757428E12, 2.1], [1.74757044E12, 1.5666666666666667], [1.74757206E12, 2.2333333333333334], [1.74757368E12, 1.95], [1.7475753E12, 1.1333333333333333], [1.74757104E12, 1.8833333333333333], [1.74757266E12, 1.95], [1.7475747E12, 2.15], [1.74757068E12, 2.0], [1.7475723E12, 2.1333333333333333], [1.7475741E12, 2.2666666666666666], [1.74757128E12, 1.9833333333333334], [1.7475729E12, 2.1666666666666665], [1.7475735E12, 2.1166666666666667], [1.74757512E12, 1.9833333333333334], [1.74757188E12, 1.9666666666666666], [1.74757452E12, 1.9833333333333334], [1.74757248E12, 2.1], [1.74757392E12, 2.1], [1.74757212E12, 2.0833333333333335], [1.7475705E12, 1.9666666666666666], [1.74757272E12, 2.1], [1.74757494E12, 2.1333333333333333], [1.7475711E12, 1.8166666666666667], [1.74757332E12, 2.066666666666667], [1.74757434E12, 2.033333333333333], [1.7475717E12, 1.9166666666666667], [1.74757374E12, 2.216666666666667], [1.74757134E12, 2.033333333333333], [1.74757476E12, 1.9166666666666667], [1.74757194E12, 2.0166666666666666], [1.74757092E12, 1.9333333333333333], [1.74757254E12, 1.9833333333333334], [1.74757416E12, 2.25], [1.74757314E12, 2.183333333333333], [1.74757356E12, 2.033333333333333], [1.74757518E12, 2.0], [1.74757152E12, 2.0], [1.74757116E12, 2.033333333333333], [1.74757278E12, 2.1], [1.74757458E12, 2.1], [1.74757338E12, 2.1666666666666665], [1.74757176E12, 2.033333333333333], [1.74757398E12, 1.8], [1.74757236E12, 2.033333333333333], [1.747575E12, 2.1], [1.74757074E12, 2.066666666666667], [1.74757296E12, 2.0166666666666666]], "isOverall": false, "label": "0", "isController": false}, {"data": [[1.7475744E12, 2.0], [1.7475726E12, 2.15], [1.7475738E12, 2.033333333333333], [1.74757098E12, 1.95], [1.7475732E12, 1.95], [1.74757158E12, 2.183333333333333], [1.74757482E12, 2.066666666666667], [1.74757056E12, 2.05], [1.74757218E12, 2.1333333333333333], [1.74757422E12, 2.2333333333333334], [1.74757182E12, 2.033333333333333], [1.74757362E12, 2.0833333333333335], [1.7475708E12, 2.0], [1.74757524E12, 1.9833333333333334], [1.74757242E12, 2.1], [1.7475714E12, 2.2333333333333334], [1.74757302E12, 1.9666666666666666], [1.74757464E12, 2.1333333333333333], [1.74757404E12, 1.9166666666666667], [1.747572E12, 1.95], [1.74757326E12, 1.9166666666666667], [1.74757506E12, 2.0166666666666666], [1.74757164E12, 2.1666666666666665], [1.74757224E12, 1.9], [1.74757446E12, 2.15], [1.74757062E12, 1.9666666666666666], [1.74757284E12, 2.2], [1.74757386E12, 2.25], [1.74757122E12, 1.9833333333333334], [1.74757344E12, 2.0833333333333335], [1.74757488E12, 2.033333333333333], [1.74757086E12, 1.9833333333333334], [1.74757308E12, 1.9166666666666667], [1.74757146E12, 2.0166666666666666], [1.74757428E12, 2.1], [1.74757044E12, 1.5666666666666667], [1.74757206E12, 2.2333333333333334], [1.74757368E12, 1.95], [1.7475753E12, 1.15], [1.74757104E12, 1.9], [1.74757266E12, 1.9666666666666666], [1.7475747E12, 2.15], [1.74757068E12, 2.0], [1.7475723E12, 2.1333333333333333], [1.7475741E12, 2.25], [1.74757128E12, 1.9833333333333334], [1.7475729E12, 2.1666666666666665], [1.7475735E12, 2.1166666666666667], [1.74757512E12, 1.9833333333333334], [1.74757188E12, 1.9666666666666666], [1.74757452E12, 1.9833333333333334], [1.74757248E12, 2.1], [1.74757392E12, 2.1], [1.74757212E12, 2.0833333333333335], [1.7475705E12, 1.9666666666666666], [1.74757272E12, 2.1], [1.74757494E12, 2.1333333333333333], [1.7475711E12, 1.8166666666666667], [1.74757332E12, 2.066666666666667], [1.74757434E12, 2.033333333333333], [1.7475717E12, 1.9166666666666667], [1.74757374E12, 2.216666666666667], [1.74757134E12, 2.05], [1.74757476E12, 1.9166666666666667], [1.74757194E12, 2.0166666666666666], [1.74757092E12, 1.9333333333333333], [1.74757254E12, 1.9833333333333334], [1.74757416E12, 2.2666666666666666], [1.74757314E12, 2.183333333333333], [1.74757356E12, 2.033333333333333], [1.74757518E12, 2.0], [1.74757152E12, 2.0], [1.74757116E12, 2.033333333333333], [1.74757278E12, 2.0833333333333335], [1.74757458E12, 2.0833333333333335], [1.74757338E12, 2.1666666666666665], [1.74757176E12, 2.033333333333333], [1.74757398E12, 1.8], [1.74757236E12, 2.033333333333333], [1.747575E12, 2.1], [1.74757074E12, 2.066666666666667], [1.74757296E12, 2.0166666666666666]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7475753E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.1333333333333333, "minX": 1.74757044E12, "maxY": 2.2666666666666666, "series": [{"data": [[1.7475744E12, 2.0], [1.7475726E12, 2.15], [1.7475738E12, 2.033333333333333], [1.74757098E12, 1.95], [1.7475732E12, 1.95], [1.74757158E12, 2.183333333333333], [1.74757482E12, 2.066666666666667], [1.74757056E12, 2.05], [1.74757218E12, 2.1333333333333333], [1.74757422E12, 2.2333333333333334], [1.74757182E12, 2.033333333333333], [1.74757362E12, 2.0833333333333335], [1.7475708E12, 2.0], [1.74757524E12, 1.9833333333333334], [1.74757242E12, 2.1], [1.7475714E12, 2.2333333333333334], [1.74757302E12, 1.9666666666666666], [1.74757464E12, 2.1333333333333333], [1.74757404E12, 1.9166666666666667], [1.747572E12, 1.95], [1.74757326E12, 1.9166666666666667], [1.74757506E12, 2.0166666666666666], [1.74757164E12, 2.1666666666666665], [1.74757224E12, 1.9], [1.74757446E12, 2.15], [1.74757062E12, 1.9666666666666666], [1.74757284E12, 2.2], [1.74757386E12, 2.25], [1.74757122E12, 1.9833333333333334], [1.74757344E12, 2.0833333333333335], [1.74757488E12, 2.033333333333333], [1.74757086E12, 1.9833333333333334], [1.74757308E12, 1.9166666666666667], [1.74757146E12, 2.0166666666666666], [1.74757428E12, 2.1], [1.74757044E12, 1.5666666666666667], [1.74757206E12, 2.2333333333333334], [1.74757368E12, 1.95], [1.7475753E12, 1.15], [1.74757104E12, 1.9], [1.74757266E12, 1.9666666666666666], [1.7475747E12, 2.15], [1.74757068E12, 2.0], [1.7475723E12, 2.1333333333333333], [1.7475741E12, 2.25], [1.74757128E12, 1.9833333333333334], [1.7475729E12, 2.1666666666666665], [1.7475735E12, 2.1166666666666667], [1.74757512E12, 1.9833333333333334], [1.74757188E12, 1.9666666666666666], [1.74757452E12, 1.9833333333333334], [1.74757248E12, 2.1], [1.74757392E12, 2.1], [1.74757212E12, 2.0833333333333335], [1.7475705E12, 1.9666666666666666], [1.74757272E12, 2.1], [1.74757494E12, 2.1333333333333333], [1.7475711E12, 1.8166666666666667], [1.74757332E12, 2.066666666666667], [1.74757434E12, 2.033333333333333], [1.7475717E12, 1.9166666666666667], [1.74757374E12, 2.216666666666667], [1.74757134E12, 2.05], [1.74757476E12, 1.9166666666666667], [1.74757194E12, 2.0166666666666666], [1.74757092E12, 1.9333333333333333], [1.74757254E12, 1.9833333333333334], [1.74757416E12, 2.2666666666666666], [1.74757314E12, 2.183333333333333], [1.74757356E12, 2.033333333333333], [1.74757518E12, 2.0], [1.74757152E12, 2.0], [1.74757116E12, 2.033333333333333], [1.74757278E12, 2.0833333333333335], [1.74757458E12, 2.0833333333333335], [1.74757338E12, 2.1666666666666665], [1.74757176E12, 2.033333333333333], [1.74757398E12, 1.8], [1.74757236E12, 2.033333333333333], [1.747575E12, 2.1], [1.74757074E12, 2.066666666666667], [1.74757296E12, 2.0166666666666666]], "isOverall": false, "label": "HTTP Request - enroll-success", "isController": false}, {"data": [[1.7475744E12, 2.0], [1.7475726E12, 2.1666666666666665], [1.7475738E12, 2.033333333333333], [1.74757098E12, 1.9666666666666666], [1.7475732E12, 1.95], [1.74757158E12, 2.183333333333333], [1.74757482E12, 2.066666666666667], [1.74757056E12, 2.05], [1.74757218E12, 2.1333333333333333], [1.74757422E12, 2.2333333333333334], [1.74757182E12, 2.033333333333333], [1.74757362E12, 2.0833333333333335], [1.7475708E12, 2.0], [1.74757524E12, 2.0], [1.74757242E12, 2.1], [1.7475714E12, 2.2333333333333334], [1.74757302E12, 1.9666666666666666], [1.74757464E12, 2.1166666666666667], [1.74757404E12, 1.9166666666666667], [1.747572E12, 1.95], [1.74757326E12, 1.9166666666666667], [1.74757506E12, 2.0166666666666666], [1.74757164E12, 2.1666666666666665], [1.74757224E12, 1.9], [1.74757446E12, 2.15], [1.74757062E12, 1.9666666666666666], [1.74757284E12, 2.183333333333333], [1.74757386E12, 2.25], [1.74757122E12, 2.0], [1.74757344E12, 2.0833333333333335], [1.74757488E12, 2.033333333333333], [1.74757086E12, 1.9833333333333334], [1.74757308E12, 1.9166666666666667], [1.74757146E12, 2.0166666666666666], [1.74757428E12, 2.1], [1.74757044E12, 1.5666666666666667], [1.74757206E12, 2.2333333333333334], [1.74757368E12, 1.95], [1.7475753E12, 1.1333333333333333], [1.74757104E12, 1.8833333333333333], [1.74757266E12, 1.95], [1.7475747E12, 2.15], [1.74757068E12, 2.0], [1.7475723E12, 2.1333333333333333], [1.7475741E12, 2.2666666666666666], [1.74757128E12, 1.9833333333333334], [1.7475729E12, 2.1666666666666665], [1.7475735E12, 2.1166666666666667], [1.74757512E12, 1.9833333333333334], [1.74757188E12, 1.9666666666666666], [1.74757452E12, 1.9833333333333334], [1.74757248E12, 2.1], [1.74757392E12, 2.1], [1.74757212E12, 2.0833333333333335], [1.7475705E12, 1.9666666666666666], [1.74757272E12, 2.1], [1.74757494E12, 2.1333333333333333], [1.7475711E12, 1.8166666666666667], [1.74757332E12, 2.066666666666667], [1.74757434E12, 2.033333333333333], [1.7475717E12, 1.9166666666666667], [1.74757374E12, 2.216666666666667], [1.74757134E12, 2.033333333333333], [1.74757476E12, 1.9166666666666667], [1.74757194E12, 2.0166666666666666], [1.74757092E12, 1.9333333333333333], [1.74757254E12, 1.9833333333333334], [1.74757416E12, 2.25], [1.74757314E12, 2.183333333333333], [1.74757356E12, 2.033333333333333], [1.74757518E12, 2.0], [1.74757152E12, 2.0], [1.74757116E12, 2.033333333333333], [1.74757278E12, 2.1], [1.74757458E12, 2.1], [1.74757338E12, 2.1666666666666665], [1.74757176E12, 2.033333333333333], [1.74757398E12, 1.8], [1.74757236E12, 2.033333333333333], [1.747575E12, 2.1], [1.74757074E12, 2.066666666666667], [1.74757296E12, 2.0166666666666666]], "isOverall": false, "label": "Create CSR-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7475753E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 2.283333333333333, "minX": 1.74757044E12, "maxY": 4.516666666666667, "series": [{"data": [[1.7475744E12, 4.0], [1.7475726E12, 4.316666666666666], [1.7475738E12, 4.066666666666666], [1.74757098E12, 3.9166666666666665], [1.7475732E12, 3.9], [1.74757158E12, 4.366666666666666], [1.74757482E12, 4.133333333333334], [1.74757056E12, 4.1], [1.74757218E12, 4.266666666666667], [1.74757422E12, 4.466666666666667], [1.74757182E12, 4.066666666666666], [1.74757362E12, 4.166666666666667], [1.7475708E12, 4.0], [1.74757524E12, 3.9833333333333334], [1.74757242E12, 4.2], [1.7475714E12, 4.466666666666667], [1.74757302E12, 3.933333333333333], [1.74757464E12, 4.25], [1.74757404E12, 3.8333333333333335], [1.747572E12, 3.9], [1.74757326E12, 3.8333333333333335], [1.74757506E12, 4.033333333333333], [1.74757164E12, 4.333333333333333], [1.74757224E12, 3.8], [1.74757446E12, 4.3], [1.74757062E12, 3.933333333333333], [1.74757284E12, 4.383333333333334], [1.74757386E12, 4.5], [1.74757122E12, 3.9833333333333334], [1.74757344E12, 4.166666666666667], [1.74757488E12, 4.066666666666666], [1.74757086E12, 3.966666666666667], [1.74757308E12, 3.8333333333333335], [1.74757146E12, 4.033333333333333], [1.74757428E12, 4.2], [1.74757044E12, 3.1333333333333333], [1.74757206E12, 4.466666666666667], [1.74757368E12, 3.9], [1.7475753E12, 2.283333333333333], [1.74757104E12, 3.783333333333333], [1.74757266E12, 3.9166666666666665], [1.7475747E12, 4.3], [1.74757068E12, 4.0], [1.7475723E12, 4.266666666666667], [1.7475741E12, 4.516666666666667], [1.74757128E12, 3.966666666666667], [1.7475729E12, 4.333333333333333], [1.7475735E12, 4.233333333333333], [1.74757512E12, 3.966666666666667], [1.74757188E12, 3.933333333333333], [1.74757452E12, 3.966666666666667], [1.74757248E12, 4.2], [1.74757392E12, 4.2], [1.74757212E12, 4.166666666666667], [1.7475705E12, 3.933333333333333], [1.74757272E12, 4.2], [1.74757494E12, 4.266666666666667], [1.7475711E12, 3.6333333333333333], [1.74757332E12, 4.133333333333334], [1.74757434E12, 4.066666666666666], [1.7475717E12, 3.8333333333333335], [1.74757374E12, 4.433333333333334], [1.74757134E12, 4.083333333333333], [1.74757476E12, 3.8333333333333335], [1.74757194E12, 4.033333333333333], [1.74757092E12, 3.8666666666666667], [1.74757254E12, 3.966666666666667], [1.74757416E12, 4.516666666666667], [1.74757314E12, 4.366666666666666], [1.74757356E12, 4.066666666666666], [1.74757518E12, 4.0], [1.74757152E12, 4.0], [1.74757116E12, 4.066666666666666], [1.74757278E12, 4.183333333333334], [1.74757458E12, 4.183333333333334], [1.74757338E12, 4.333333333333333], [1.74757176E12, 4.066666666666666], [1.74757398E12, 3.6], [1.74757236E12, 4.066666666666666], [1.747575E12, 4.2], [1.74757074E12, 4.133333333333334], [1.74757296E12, 4.033333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7475753E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

