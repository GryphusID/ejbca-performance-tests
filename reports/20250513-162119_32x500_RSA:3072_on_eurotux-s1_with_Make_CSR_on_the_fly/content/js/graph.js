/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 27.0, "minX": 0.0, "maxY": 14034.0, "series": [{"data": [[0.0, 121.0], [0.1, 261.0], [0.2, 339.0], [0.3, 388.0], [0.4, 428.0], [0.5, 446.0], [0.6, 465.0], [0.7, 480.0], [0.8, 499.0], [0.9, 510.0], [1.0, 521.0], [1.1, 531.0], [1.2, 541.0], [1.3, 550.0], [1.4, 557.0], [1.5, 563.0], [1.6, 570.0], [1.7, 576.0], [1.8, 584.0], [1.9, 591.0], [2.0, 595.0], [2.1, 603.0], [2.2, 609.0], [2.3, 614.0], [2.4, 619.0], [2.5, 625.0], [2.6, 629.0], [2.7, 634.0], [2.8, 638.0], [2.9, 644.0], [3.0, 648.0], [3.1, 654.0], [3.2, 659.0], [3.3, 661.0], [3.4, 666.0], [3.5, 669.0], [3.6, 674.0], [3.7, 679.0], [3.8, 684.0], [3.9, 689.0], [4.0, 693.0], [4.1, 697.0], [4.2, 701.0], [4.3, 704.0], [4.4, 708.0], [4.5, 711.0], [4.6, 714.0], [4.7, 718.0], [4.8, 721.0], [4.9, 726.0], [5.0, 732.0], [5.1, 737.0], [5.2, 741.0], [5.3, 745.0], [5.4, 749.0], [5.5, 752.0], [5.6, 756.0], [5.7, 760.0], [5.8, 766.0], [5.9, 770.0], [6.0, 773.0], [6.1, 776.0], [6.2, 780.0], [6.3, 783.0], [6.4, 787.0], [6.5, 790.0], [6.6, 793.0], [6.7, 796.0], [6.8, 798.0], [6.9, 802.0], [7.0, 804.0], [7.1, 806.0], [7.2, 809.0], [7.3, 811.0], [7.4, 814.0], [7.5, 817.0], [7.6, 821.0], [7.7, 824.0], [7.8, 827.0], [7.9, 831.0], [8.0, 836.0], [8.1, 839.0], [8.2, 843.0], [8.3, 845.0], [8.4, 848.0], [8.5, 852.0], [8.6, 855.0], [8.7, 860.0], [8.8, 863.0], [8.9, 865.0], [9.0, 869.0], [9.1, 871.0], [9.2, 875.0], [9.3, 878.0], [9.4, 881.0], [9.5, 885.0], [9.6, 888.0], [9.7, 890.0], [9.8, 892.0], [9.9, 896.0], [10.0, 899.0], [10.1, 903.0], [10.2, 907.0], [10.3, 909.0], [10.4, 911.0], [10.5, 914.0], [10.6, 917.0], [10.7, 919.0], [10.8, 922.0], [10.9, 926.0], [11.0, 928.0], [11.1, 930.0], [11.2, 933.0], [11.3, 937.0], [11.4, 939.0], [11.5, 944.0], [11.6, 947.0], [11.7, 950.0], [11.8, 951.0], [11.9, 954.0], [12.0, 957.0], [12.1, 961.0], [12.2, 963.0], [12.3, 966.0], [12.4, 971.0], [12.5, 973.0], [12.6, 975.0], [12.7, 979.0], [12.8, 982.0], [12.9, 985.0], [13.0, 988.0], [13.1, 990.0], [13.2, 994.0], [13.3, 996.0], [13.4, 998.0], [13.5, 1000.0], [13.6, 1003.0], [13.7, 1006.0], [13.8, 1009.0], [13.9, 1014.0], [14.0, 1017.0], [14.1, 1020.0], [14.2, 1025.0], [14.3, 1027.0], [14.4, 1030.0], [14.5, 1033.0], [14.6, 1035.0], [14.7, 1039.0], [14.8, 1041.0], [14.9, 1043.0], [15.0, 1046.0], [15.1, 1049.0], [15.2, 1052.0], [15.3, 1056.0], [15.4, 1060.0], [15.5, 1063.0], [15.6, 1066.0], [15.7, 1069.0], [15.8, 1071.0], [15.9, 1075.0], [16.0, 1077.0], [16.1, 1079.0], [16.2, 1082.0], [16.3, 1084.0], [16.4, 1087.0], [16.5, 1089.0], [16.6, 1092.0], [16.7, 1094.0], [16.8, 1097.0], [16.9, 1098.0], [17.0, 1102.0], [17.1, 1105.0], [17.2, 1108.0], [17.3, 1111.0], [17.4, 1115.0], [17.5, 1117.0], [17.6, 1119.0], [17.7, 1122.0], [17.8, 1125.0], [17.9, 1127.0], [18.0, 1130.0], [18.1, 1134.0], [18.2, 1137.0], [18.3, 1140.0], [18.4, 1143.0], [18.5, 1145.0], [18.6, 1148.0], [18.7, 1151.0], [18.8, 1154.0], [18.9, 1157.0], [19.0, 1159.0], [19.1, 1162.0], [19.2, 1163.0], [19.3, 1166.0], [19.4, 1169.0], [19.5, 1172.0], [19.6, 1174.0], [19.7, 1176.0], [19.8, 1178.0], [19.9, 1182.0], [20.0, 1185.0], [20.1, 1186.0], [20.2, 1188.0], [20.3, 1192.0], [20.4, 1194.0], [20.5, 1197.0], [20.6, 1200.0], [20.7, 1203.0], [20.8, 1205.0], [20.9, 1208.0], [21.0, 1210.0], [21.1, 1213.0], [21.2, 1215.0], [21.3, 1218.0], [21.4, 1220.0], [21.5, 1223.0], [21.6, 1225.0], [21.7, 1227.0], [21.8, 1230.0], [21.9, 1233.0], [22.0, 1237.0], [22.1, 1239.0], [22.2, 1242.0], [22.3, 1245.0], [22.4, 1247.0], [22.5, 1249.0], [22.6, 1252.0], [22.7, 1254.0], [22.8, 1257.0], [22.9, 1259.0], [23.0, 1261.0], [23.1, 1264.0], [23.2, 1266.0], [23.3, 1268.0], [23.4, 1271.0], [23.5, 1275.0], [23.6, 1278.0], [23.7, 1279.0], [23.8, 1282.0], [23.9, 1284.0], [24.0, 1287.0], [24.1, 1290.0], [24.2, 1292.0], [24.3, 1294.0], [24.4, 1296.0], [24.5, 1298.0], [24.6, 1300.0], [24.7, 1303.0], [24.8, 1306.0], [24.9, 1308.0], [25.0, 1311.0], [25.1, 1313.0], [25.2, 1317.0], [25.3, 1319.0], [25.4, 1324.0], [25.5, 1326.0], [25.6, 1329.0], [25.7, 1331.0], [25.8, 1334.0], [25.9, 1336.0], [26.0, 1338.0], [26.1, 1341.0], [26.2, 1344.0], [26.3, 1347.0], [26.4, 1350.0], [26.5, 1352.0], [26.6, 1355.0], [26.7, 1357.0], [26.8, 1359.0], [26.9, 1361.0], [27.0, 1363.0], [27.1, 1366.0], [27.2, 1368.0], [27.3, 1371.0], [27.4, 1374.0], [27.5, 1376.0], [27.6, 1378.0], [27.7, 1381.0], [27.8, 1385.0], [27.9, 1388.0], [28.0, 1390.0], [28.1, 1392.0], [28.2, 1395.0], [28.3, 1398.0], [28.4, 1401.0], [28.5, 1405.0], [28.6, 1408.0], [28.7, 1411.0], [28.8, 1414.0], [28.9, 1416.0], [29.0, 1418.0], [29.1, 1421.0], [29.2, 1425.0], [29.3, 1428.0], [29.4, 1431.0], [29.5, 1433.0], [29.6, 1436.0], [29.7, 1438.0], [29.8, 1441.0], [29.9, 1443.0], [30.0, 1446.0], [30.1, 1449.0], [30.2, 1451.0], [30.3, 1453.0], [30.4, 1457.0], [30.5, 1460.0], [30.6, 1462.0], [30.7, 1464.0], [30.8, 1468.0], [30.9, 1471.0], [31.0, 1473.0], [31.1, 1474.0], [31.2, 1477.0], [31.3, 1479.0], [31.4, 1482.0], [31.5, 1487.0], [31.6, 1488.0], [31.7, 1490.0], [31.8, 1493.0], [31.9, 1495.0], [32.0, 1499.0], [32.1, 1501.0], [32.2, 1504.0], [32.3, 1506.0], [32.4, 1509.0], [32.5, 1512.0], [32.6, 1516.0], [32.7, 1520.0], [32.8, 1521.0], [32.9, 1524.0], [33.0, 1527.0], [33.1, 1529.0], [33.2, 1533.0], [33.3, 1536.0], [33.4, 1539.0], [33.5, 1540.0], [33.6, 1543.0], [33.7, 1545.0], [33.8, 1548.0], [33.9, 1551.0], [34.0, 1554.0], [34.1, 1559.0], [34.2, 1562.0], [34.3, 1563.0], [34.4, 1567.0], [34.5, 1570.0], [34.6, 1572.0], [34.7, 1574.0], [34.8, 1576.0], [34.9, 1579.0], [35.0, 1582.0], [35.1, 1585.0], [35.2, 1587.0], [35.3, 1590.0], [35.4, 1592.0], [35.5, 1594.0], [35.6, 1596.0], [35.7, 1600.0], [35.8, 1603.0], [35.9, 1605.0], [36.0, 1607.0], [36.1, 1611.0], [36.2, 1613.0], [36.3, 1615.0], [36.4, 1617.0], [36.5, 1619.0], [36.6, 1621.0], [36.7, 1624.0], [36.8, 1626.0], [36.9, 1630.0], [37.0, 1632.0], [37.1, 1634.0], [37.2, 1636.0], [37.3, 1640.0], [37.4, 1643.0], [37.5, 1646.0], [37.6, 1648.0], [37.7, 1650.0], [37.8, 1653.0], [37.9, 1654.0], [38.0, 1657.0], [38.1, 1660.0], [38.2, 1663.0], [38.3, 1666.0], [38.4, 1669.0], [38.5, 1672.0], [38.6, 1675.0], [38.7, 1676.0], [38.8, 1678.0], [38.9, 1680.0], [39.0, 1682.0], [39.1, 1686.0], [39.2, 1689.0], [39.3, 1690.0], [39.4, 1693.0], [39.5, 1696.0], [39.6, 1699.0], [39.7, 1702.0], [39.8, 1705.0], [39.9, 1708.0], [40.0, 1711.0], [40.1, 1715.0], [40.2, 1718.0], [40.3, 1723.0], [40.4, 1727.0], [40.5, 1730.0], [40.6, 1733.0], [40.7, 1737.0], [40.8, 1739.0], [40.9, 1742.0], [41.0, 1744.0], [41.1, 1747.0], [41.2, 1750.0], [41.3, 1751.0], [41.4, 1755.0], [41.5, 1758.0], [41.6, 1762.0], [41.7, 1765.0], [41.8, 1769.0], [41.9, 1772.0], [42.0, 1774.0], [42.1, 1777.0], [42.2, 1779.0], [42.3, 1783.0], [42.4, 1786.0], [42.5, 1790.0], [42.6, 1795.0], [42.7, 1798.0], [42.8, 1801.0], [42.9, 1803.0], [43.0, 1806.0], [43.1, 1808.0], [43.2, 1810.0], [43.3, 1813.0], [43.4, 1816.0], [43.5, 1818.0], [43.6, 1821.0], [43.7, 1826.0], [43.8, 1828.0], [43.9, 1831.0], [44.0, 1834.0], [44.1, 1837.0], [44.2, 1840.0], [44.3, 1844.0], [44.4, 1847.0], [44.5, 1851.0], [44.6, 1853.0], [44.7, 1857.0], [44.8, 1861.0], [44.9, 1863.0], [45.0, 1867.0], [45.1, 1868.0], [45.2, 1871.0], [45.3, 1876.0], [45.4, 1878.0], [45.5, 1882.0], [45.6, 1884.0], [45.7, 1888.0], [45.8, 1890.0], [45.9, 1894.0], [46.0, 1897.0], [46.1, 1901.0], [46.2, 1904.0], [46.3, 1906.0], [46.4, 1909.0], [46.5, 1913.0], [46.6, 1915.0], [46.7, 1918.0], [46.8, 1921.0], [46.9, 1924.0], [47.0, 1926.0], [47.1, 1929.0], [47.2, 1933.0], [47.3, 1935.0], [47.4, 1940.0], [47.5, 1943.0], [47.6, 1946.0], [47.7, 1950.0], [47.8, 1953.0], [47.9, 1957.0], [48.0, 1960.0], [48.1, 1964.0], [48.2, 1967.0], [48.3, 1970.0], [48.4, 1973.0], [48.5, 1976.0], [48.6, 1979.0], [48.7, 1983.0], [48.8, 1986.0], [48.9, 1989.0], [49.0, 1992.0], [49.1, 1995.0], [49.2, 1998.0], [49.3, 2000.0], [49.4, 2003.0], [49.5, 2008.0], [49.6, 2011.0], [49.7, 2015.0], [49.8, 2019.0], [49.9, 2023.0], [50.0, 2026.0], [50.1, 2028.0], [50.2, 2031.0], [50.3, 2036.0], [50.4, 2039.0], [50.5, 2041.0], [50.6, 2045.0], [50.7, 2048.0], [50.8, 2050.0], [50.9, 2053.0], [51.0, 2056.0], [51.1, 2059.0], [51.2, 2063.0], [51.3, 2066.0], [51.4, 2069.0], [51.5, 2071.0], [51.6, 2074.0], [51.7, 2077.0], [51.8, 2083.0], [51.9, 2087.0], [52.0, 2091.0], [52.1, 2095.0], [52.2, 2098.0], [52.3, 2102.0], [52.4, 2104.0], [52.5, 2107.0], [52.6, 2110.0], [52.7, 2114.0], [52.8, 2117.0], [52.9, 2120.0], [53.0, 2124.0], [53.1, 2126.0], [53.2, 2129.0], [53.3, 2132.0], [53.4, 2136.0], [53.5, 2140.0], [53.6, 2144.0], [53.7, 2146.0], [53.8, 2149.0], [53.9, 2154.0], [54.0, 2156.0], [54.1, 2159.0], [54.2, 2162.0], [54.3, 2164.0], [54.4, 2167.0], [54.5, 2170.0], [54.6, 2175.0], [54.7, 2179.0], [54.8, 2185.0], [54.9, 2188.0], [55.0, 2193.0], [55.1, 2198.0], [55.2, 2200.0], [55.3, 2204.0], [55.4, 2207.0], [55.5, 2209.0], [55.6, 2212.0], [55.7, 2217.0], [55.8, 2219.0], [55.9, 2224.0], [56.0, 2229.0], [56.1, 2231.0], [56.2, 2235.0], [56.3, 2238.0], [56.4, 2242.0], [56.5, 2244.0], [56.6, 2248.0], [56.7, 2251.0], [56.8, 2256.0], [56.9, 2260.0], [57.0, 2264.0], [57.1, 2267.0], [57.2, 2270.0], [57.3, 2274.0], [57.4, 2278.0], [57.5, 2281.0], [57.6, 2284.0], [57.7, 2287.0], [57.8, 2290.0], [57.9, 2294.0], [58.0, 2297.0], [58.1, 2301.0], [58.2, 2304.0], [58.3, 2307.0], [58.4, 2311.0], [58.5, 2313.0], [58.6, 2316.0], [58.7, 2320.0], [58.8, 2324.0], [58.9, 2327.0], [59.0, 2331.0], [59.1, 2335.0], [59.2, 2338.0], [59.3, 2342.0], [59.4, 2345.0], [59.5, 2347.0], [59.6, 2349.0], [59.7, 2353.0], [59.8, 2358.0], [59.9, 2361.0], [60.0, 2366.0], [60.1, 2370.0], [60.2, 2372.0], [60.3, 2377.0], [60.4, 2381.0], [60.5, 2383.0], [60.6, 2389.0], [60.7, 2393.0], [60.8, 2397.0], [60.9, 2402.0], [61.0, 2406.0], [61.1, 2410.0], [61.2, 2413.0], [61.3, 2417.0], [61.4, 2421.0], [61.5, 2424.0], [61.6, 2430.0], [61.7, 2432.0], [61.8, 2436.0], [61.9, 2439.0], [62.0, 2445.0], [62.1, 2451.0], [62.2, 2455.0], [62.3, 2459.0], [62.4, 2463.0], [62.5, 2467.0], [62.6, 2472.0], [62.7, 2474.0], [62.8, 2479.0], [62.9, 2485.0], [63.0, 2491.0], [63.1, 2494.0], [63.2, 2499.0], [63.3, 2502.0], [63.4, 2508.0], [63.5, 2511.0], [63.6, 2516.0], [63.7, 2521.0], [63.8, 2526.0], [63.9, 2529.0], [64.0, 2533.0], [64.1, 2536.0], [64.2, 2540.0], [64.3, 2543.0], [64.4, 2546.0], [64.5, 2550.0], [64.6, 2553.0], [64.7, 2557.0], [64.8, 2562.0], [64.9, 2566.0], [65.0, 2569.0], [65.1, 2571.0], [65.2, 2576.0], [65.3, 2579.0], [65.4, 2585.0], [65.5, 2589.0], [65.6, 2593.0], [65.7, 2598.0], [65.8, 2603.0], [65.9, 2606.0], [66.0, 2610.0], [66.1, 2613.0], [66.2, 2618.0], [66.3, 2623.0], [66.4, 2629.0], [66.5, 2633.0], [66.6, 2638.0], [66.7, 2641.0], [66.8, 2647.0], [66.9, 2649.0], [67.0, 2652.0], [67.1, 2658.0], [67.2, 2662.0], [67.3, 2667.0], [67.4, 2671.0], [67.5, 2676.0], [67.6, 2679.0], [67.7, 2684.0], [67.8, 2690.0], [67.9, 2695.0], [68.0, 2700.0], [68.1, 2704.0], [68.2, 2708.0], [68.3, 2711.0], [68.4, 2716.0], [68.5, 2719.0], [68.6, 2724.0], [68.7, 2728.0], [68.8, 2733.0], [68.9, 2741.0], [69.0, 2746.0], [69.1, 2749.0], [69.2, 2755.0], [69.3, 2758.0], [69.4, 2762.0], [69.5, 2769.0], [69.6, 2772.0], [69.7, 2779.0], [69.8, 2783.0], [69.9, 2789.0], [70.0, 2796.0], [70.1, 2800.0], [70.2, 2804.0], [70.3, 2809.0], [70.4, 2816.0], [70.5, 2822.0], [70.6, 2826.0], [70.7, 2830.0], [70.8, 2835.0], [70.9, 2838.0], [71.0, 2842.0], [71.1, 2848.0], [71.2, 2852.0], [71.3, 2855.0], [71.4, 2859.0], [71.5, 2862.0], [71.6, 2867.0], [71.7, 2871.0], [71.8, 2876.0], [71.9, 2881.0], [72.0, 2885.0], [72.1, 2891.0], [72.2, 2895.0], [72.3, 2900.0], [72.4, 2906.0], [72.5, 2910.0], [72.6, 2916.0], [72.7, 2920.0], [72.8, 2925.0], [72.9, 2930.0], [73.0, 2933.0], [73.1, 2938.0], [73.2, 2944.0], [73.3, 2950.0], [73.4, 2960.0], [73.5, 2966.0], [73.6, 2971.0], [73.7, 2976.0], [73.8, 2980.0], [73.9, 2985.0], [74.0, 2990.0], [74.1, 2996.0], [74.2, 3001.0], [74.3, 3007.0], [74.4, 3012.0], [74.5, 3022.0], [74.6, 3027.0], [74.7, 3032.0], [74.8, 3038.0], [74.9, 3043.0], [75.0, 3048.0], [75.1, 3053.0], [75.2, 3056.0], [75.3, 3060.0], [75.4, 3066.0], [75.5, 3073.0], [75.6, 3077.0], [75.7, 3081.0], [75.8, 3088.0], [75.9, 3095.0], [76.0, 3100.0], [76.1, 3104.0], [76.2, 3112.0], [76.3, 3121.0], [76.4, 3128.0], [76.5, 3133.0], [76.6, 3139.0], [76.7, 3144.0], [76.8, 3150.0], [76.9, 3153.0], [77.0, 3162.0], [77.1, 3167.0], [77.2, 3176.0], [77.3, 3182.0], [77.4, 3189.0], [77.5, 3195.0], [77.6, 3202.0], [77.7, 3209.0], [77.8, 3217.0], [77.9, 3225.0], [78.0, 3233.0], [78.1, 3241.0], [78.2, 3246.0], [78.3, 3250.0], [78.4, 3257.0], [78.5, 3264.0], [78.6, 3272.0], [78.7, 3276.0], [78.8, 3284.0], [78.9, 3290.0], [79.0, 3297.0], [79.1, 3306.0], [79.2, 3311.0], [79.3, 3318.0], [79.4, 3325.0], [79.5, 3332.0], [79.6, 3338.0], [79.7, 3345.0], [79.8, 3351.0], [79.9, 3357.0], [80.0, 3364.0], [80.1, 3368.0], [80.2, 3374.0], [80.3, 3379.0], [80.4, 3384.0], [80.5, 3392.0], [80.6, 3399.0], [80.7, 3406.0], [80.8, 3411.0], [80.9, 3418.0], [81.0, 3427.0], [81.1, 3436.0], [81.2, 3442.0], [81.3, 3451.0], [81.4, 3461.0], [81.5, 3470.0], [81.6, 3475.0], [81.7, 3484.0], [81.8, 3492.0], [81.9, 3500.0], [82.0, 3508.0], [82.1, 3516.0], [82.2, 3523.0], [82.3, 3530.0], [82.4, 3541.0], [82.5, 3548.0], [82.6, 3558.0], [82.7, 3565.0], [82.8, 3573.0], [82.9, 3580.0], [83.0, 3588.0], [83.1, 3596.0], [83.2, 3609.0], [83.3, 3617.0], [83.4, 3627.0], [83.5, 3643.0], [83.6, 3651.0], [83.7, 3661.0], [83.8, 3671.0], [83.9, 3678.0], [84.0, 3693.0], [84.1, 3700.0], [84.2, 3711.0], [84.3, 3722.0], [84.4, 3730.0], [84.5, 3738.0], [84.6, 3744.0], [84.7, 3750.0], [84.8, 3756.0], [84.9, 3766.0], [85.0, 3780.0], [85.1, 3788.0], [85.2, 3796.0], [85.3, 3809.0], [85.4, 3815.0], [85.5, 3826.0], [85.6, 3835.0], [85.7, 3847.0], [85.8, 3854.0], [85.9, 3867.0], [86.0, 3876.0], [86.1, 3883.0], [86.2, 3895.0], [86.3, 3904.0], [86.4, 3915.0], [86.5, 3923.0], [86.6, 3936.0], [86.7, 3942.0], [86.8, 3956.0], [86.9, 3966.0], [87.0, 3974.0], [87.1, 3987.0], [87.2, 4000.0], [87.3, 4009.0], [87.4, 4021.0], [87.5, 4031.0], [87.6, 4042.0], [87.7, 4050.0], [87.8, 4062.0], [87.9, 4075.0], [88.0, 4087.0], [88.1, 4098.0], [88.2, 4112.0], [88.3, 4127.0], [88.4, 4138.0], [88.5, 4146.0], [88.6, 4158.0], [88.7, 4169.0], [88.8, 4178.0], [88.9, 4187.0], [89.0, 4201.0], [89.1, 4212.0], [89.2, 4222.0], [89.3, 4237.0], [89.4, 4246.0], [89.5, 4256.0], [89.6, 4264.0], [89.7, 4274.0], [89.8, 4289.0], [89.9, 4304.0], [90.0, 4316.0], [90.1, 4324.0], [90.2, 4339.0], [90.3, 4352.0], [90.4, 4372.0], [90.5, 4390.0], [90.6, 4407.0], [90.7, 4428.0], [90.8, 4443.0], [90.9, 4462.0], [91.0, 4485.0], [91.1, 4504.0], [91.2, 4518.0], [91.3, 4537.0], [91.4, 4550.0], [91.5, 4565.0], [91.6, 4575.0], [91.7, 4597.0], [91.8, 4618.0], [91.9, 4635.0], [92.0, 4649.0], [92.1, 4673.0], [92.2, 4692.0], [92.3, 4708.0], [92.4, 4723.0], [92.5, 4742.0], [92.6, 4752.0], [92.7, 4770.0], [92.8, 4792.0], [92.9, 4802.0], [93.0, 4820.0], [93.1, 4839.0], [93.2, 4851.0], [93.3, 4869.0], [93.4, 4886.0], [93.5, 4911.0], [93.6, 4926.0], [93.7, 4954.0], [93.8, 4975.0], [93.9, 4994.0], [94.0, 5014.0], [94.1, 5041.0], [94.2, 5061.0], [94.3, 5090.0], [94.4, 5106.0], [94.5, 5127.0], [94.6, 5164.0], [94.7, 5184.0], [94.8, 5211.0], [94.9, 5235.0], [95.0, 5261.0], [95.1, 5296.0], [95.2, 5329.0], [95.3, 5360.0], [95.4, 5375.0], [95.5, 5400.0], [95.6, 5416.0], [95.7, 5439.0], [95.8, 5469.0], [95.9, 5503.0], [96.0, 5543.0], [96.1, 5571.0], [96.2, 5603.0], [96.3, 5622.0], [96.4, 5663.0], [96.5, 5703.0], [96.6, 5742.0], [96.7, 5772.0], [96.8, 5811.0], [96.9, 5854.0], [97.0, 5913.0], [97.1, 5961.0], [97.2, 5997.0], [97.3, 6035.0], [97.4, 6072.0], [97.5, 6122.0], [97.6, 6164.0], [97.7, 6231.0], [97.8, 6286.0], [97.9, 6362.0], [98.0, 6437.0], [98.1, 6524.0], [98.2, 6599.0], [98.3, 6687.0], [98.4, 6756.0], [98.5, 6815.0], [98.6, 6863.0], [98.7, 7016.0], [98.8, 7114.0], [98.9, 7213.0], [99.0, 7323.0], [99.1, 7448.0], [99.2, 7640.0], [99.3, 7851.0], [99.4, 8002.0], [99.5, 8149.0], [99.6, 8375.0], [99.7, 8617.0], [99.8, 9063.0], [99.9, 9632.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 27.0], [0.1, 30.0], [0.2, 33.0], [0.3, 35.0], [0.4, 36.0], [0.5, 36.0], [0.6, 36.0], [0.7, 37.0], [0.8, 37.0], [0.9, 37.0], [1.0, 37.0], [1.1, 37.0], [1.2, 37.0], [1.3, 37.0], [1.4, 37.0], [1.5, 38.0], [1.6, 38.0], [1.7, 38.0], [1.8, 38.0], [1.9, 38.0], [2.0, 38.0], [2.1, 38.0], [2.2, 38.0], [2.3, 38.0], [2.4, 38.0], [2.5, 38.0], [2.6, 38.0], [2.7, 38.0], [2.8, 38.0], [2.9, 38.0], [3.0, 38.0], [3.1, 38.0], [3.2, 38.0], [3.3, 38.0], [3.4, 38.0], [3.5, 38.0], [3.6, 38.0], [3.7, 39.0], [3.8, 39.0], [3.9, 39.0], [4.0, 39.0], [4.1, 39.0], [4.2, 39.0], [4.3, 39.0], [4.4, 39.0], [4.5, 39.0], [4.6, 39.0], [4.7, 39.0], [4.8, 39.0], [4.9, 39.0], [5.0, 39.0], [5.1, 39.0], [5.2, 39.0], [5.3, 39.0], [5.4, 39.0], [5.5, 39.0], [5.6, 39.0], [5.7, 39.0], [5.8, 39.0], [5.9, 39.0], [6.0, 39.0], [6.1, 39.0], [6.2, 39.0], [6.3, 39.0], [6.4, 39.0], [6.5, 39.0], [6.6, 40.0], [6.7, 40.0], [6.8, 40.0], [6.9, 40.0], [7.0, 40.0], [7.1, 40.0], [7.2, 40.0], [7.3, 40.0], [7.4, 40.0], [7.5, 40.0], [7.6, 40.0], [7.7, 40.0], [7.8, 40.0], [7.9, 40.0], [8.0, 40.0], [8.1, 40.0], [8.2, 40.0], [8.3, 40.0], [8.4, 40.0], [8.5, 40.0], [8.6, 40.0], [8.7, 40.0], [8.8, 40.0], [8.9, 40.0], [9.0, 40.0], [9.1, 40.0], [9.2, 40.0], [9.3, 40.0], [9.4, 40.0], [9.5, 40.0], [9.6, 40.0], [9.7, 40.0], [9.8, 40.0], [9.9, 40.0], [10.0, 40.0], [10.1, 40.0], [10.2, 40.0], [10.3, 40.0], [10.4, 41.0], [10.5, 41.0], [10.6, 41.0], [10.7, 41.0], [10.8, 41.0], [10.9, 41.0], [11.0, 41.0], [11.1, 41.0], [11.2, 41.0], [11.3, 41.0], [11.4, 41.0], [11.5, 41.0], [11.6, 41.0], [11.7, 41.0], [11.8, 41.0], [11.9, 41.0], [12.0, 41.0], [12.1, 41.0], [12.2, 41.0], [12.3, 41.0], [12.4, 41.0], [12.5, 41.0], [12.6, 41.0], [12.7, 41.0], [12.8, 41.0], [12.9, 41.0], [13.0, 41.0], [13.1, 41.0], [13.2, 41.0], [13.3, 41.0], [13.4, 41.0], [13.5, 41.0], [13.6, 41.0], [13.7, 41.0], [13.8, 41.0], [13.9, 41.0], [14.0, 41.0], [14.1, 41.0], [14.2, 41.0], [14.3, 41.0], [14.4, 41.0], [14.5, 41.0], [14.6, 41.0], [14.7, 42.0], [14.8, 42.0], [14.9, 42.0], [15.0, 42.0], [15.1, 42.0], [15.2, 42.0], [15.3, 42.0], [15.4, 42.0], [15.5, 42.0], [15.6, 42.0], [15.7, 42.0], [15.8, 42.0], [15.9, 42.0], [16.0, 42.0], [16.1, 42.0], [16.2, 42.0], [16.3, 42.0], [16.4, 42.0], [16.5, 42.0], [16.6, 42.0], [16.7, 42.0], [16.8, 42.0], [16.9, 42.0], [17.0, 42.0], [17.1, 42.0], [17.2, 42.0], [17.3, 42.0], [17.4, 42.0], [17.5, 42.0], [17.6, 42.0], [17.7, 42.0], [17.8, 42.0], [17.9, 42.0], [18.0, 42.0], [18.1, 42.0], [18.2, 42.0], [18.3, 42.0], [18.4, 42.0], [18.5, 42.0], [18.6, 42.0], [18.7, 42.0], [18.8, 42.0], [18.9, 42.0], [19.0, 42.0], [19.1, 42.0], [19.2, 42.0], [19.3, 42.0], [19.4, 42.0], [19.5, 43.0], [19.6, 43.0], [19.7, 43.0], [19.8, 43.0], [19.9, 43.0], [20.0, 43.0], [20.1, 43.0], [20.2, 43.0], [20.3, 43.0], [20.4, 43.0], [20.5, 43.0], [20.6, 43.0], [20.7, 43.0], [20.8, 43.0], [20.9, 43.0], [21.0, 43.0], [21.1, 43.0], [21.2, 43.0], [21.3, 43.0], [21.4, 43.0], [21.5, 43.0], [21.6, 43.0], [21.7, 43.0], [21.8, 43.0], [21.9, 43.0], [22.0, 43.0], [22.1, 43.0], [22.2, 43.0], [22.3, 43.0], [22.4, 43.0], [22.5, 43.0], [22.6, 43.0], [22.7, 43.0], [22.8, 43.0], [22.9, 43.0], [23.0, 43.0], [23.1, 43.0], [23.2, 43.0], [23.3, 43.0], [23.4, 43.0], [23.5, 43.0], [23.6, 43.0], [23.7, 43.0], [23.8, 43.0], [23.9, 43.0], [24.0, 43.0], [24.1, 43.0], [24.2, 43.0], [24.3, 43.0], [24.4, 43.0], [24.5, 43.0], [24.6, 43.0], [24.7, 43.0], [24.8, 44.0], [24.9, 44.0], [25.0, 44.0], [25.1, 44.0], [25.2, 44.0], [25.3, 44.0], [25.4, 44.0], [25.5, 44.0], [25.6, 44.0], [25.7, 44.0], [25.8, 44.0], [25.9, 44.0], [26.0, 44.0], [26.1, 44.0], [26.2, 44.0], [26.3, 44.0], [26.4, 44.0], [26.5, 44.0], [26.6, 44.0], [26.7, 44.0], [26.8, 44.0], [26.9, 44.0], [27.0, 44.0], [27.1, 44.0], [27.2, 44.0], [27.3, 44.0], [27.4, 44.0], [27.5, 44.0], [27.6, 44.0], [27.7, 44.0], [27.8, 44.0], [27.9, 44.0], [28.0, 44.0], [28.1, 44.0], [28.2, 44.0], [28.3, 44.0], [28.4, 44.0], [28.5, 44.0], [28.6, 44.0], [28.7, 44.0], [28.8, 44.0], [28.9, 44.0], [29.0, 44.0], [29.1, 44.0], [29.2, 44.0], [29.3, 44.0], [29.4, 44.0], [29.5, 44.0], [29.6, 44.0], [29.7, 44.0], [29.8, 44.0], [29.9, 44.0], [30.0, 44.0], [30.1, 44.0], [30.2, 44.0], [30.3, 44.0], [30.4, 44.0], [30.5, 44.0], [30.6, 44.0], [30.7, 44.0], [30.8, 44.0], [30.9, 44.0], [31.0, 45.0], [31.1, 45.0], [31.2, 45.0], [31.3, 45.0], [31.4, 45.0], [31.5, 45.0], [31.6, 45.0], [31.7, 45.0], [31.8, 45.0], [31.9, 45.0], [32.0, 45.0], [32.1, 45.0], [32.2, 45.0], [32.3, 45.0], [32.4, 45.0], [32.5, 45.0], [32.6, 45.0], [32.7, 45.0], [32.8, 45.0], [32.9, 45.0], [33.0, 45.0], [33.1, 45.0], [33.2, 45.0], [33.3, 45.0], [33.4, 45.0], [33.5, 45.0], [33.6, 45.0], [33.7, 45.0], [33.8, 45.0], [33.9, 45.0], [34.0, 45.0], [34.1, 45.0], [34.2, 45.0], [34.3, 45.0], [34.4, 45.0], [34.5, 45.0], [34.6, 45.0], [34.7, 45.0], [34.8, 45.0], [34.9, 45.0], [35.0, 45.0], [35.1, 45.0], [35.2, 45.0], [35.3, 45.0], [35.4, 45.0], [35.5, 45.0], [35.6, 45.0], [35.7, 45.0], [35.8, 45.0], [35.9, 45.0], [36.0, 45.0], [36.1, 45.0], [36.2, 45.0], [36.3, 45.0], [36.4, 45.0], [36.5, 45.0], [36.6, 45.0], [36.7, 45.0], [36.8, 45.0], [36.9, 45.0], [37.0, 45.0], [37.1, 46.0], [37.2, 46.0], [37.3, 46.0], [37.4, 46.0], [37.5, 46.0], [37.6, 46.0], [37.7, 46.0], [37.8, 46.0], [37.9, 46.0], [38.0, 46.0], [38.1, 46.0], [38.2, 46.0], [38.3, 46.0], [38.4, 46.0], [38.5, 46.0], [38.6, 46.0], [38.7, 46.0], [38.8, 46.0], [38.9, 46.0], [39.0, 46.0], [39.1, 46.0], [39.2, 46.0], [39.3, 46.0], [39.4, 46.0], [39.5, 46.0], [39.6, 46.0], [39.7, 46.0], [39.8, 46.0], [39.9, 46.0], [40.0, 46.0], [40.1, 46.0], [40.2, 46.0], [40.3, 46.0], [40.4, 46.0], [40.5, 46.0], [40.6, 46.0], [40.7, 46.0], [40.8, 46.0], [40.9, 46.0], [41.0, 46.0], [41.1, 46.0], [41.2, 46.0], [41.3, 46.0], [41.4, 46.0], [41.5, 47.0], [41.6, 47.0], [41.7, 47.0], [41.8, 47.0], [41.9, 47.0], [42.0, 47.0], [42.1, 47.0], [42.2, 47.0], [42.3, 47.0], [42.4, 47.0], [42.5, 47.0], [42.6, 47.0], [42.7, 47.0], [42.8, 47.0], [42.9, 47.0], [43.0, 47.0], [43.1, 47.0], [43.2, 47.0], [43.3, 47.0], [43.4, 47.0], [43.5, 47.0], [43.6, 47.0], [43.7, 47.0], [43.8, 47.0], [43.9, 47.0], [44.0, 47.0], [44.1, 47.0], [44.2, 47.0], [44.3, 47.0], [44.4, 47.0], [44.5, 47.0], [44.6, 47.0], [44.7, 47.0], [44.8, 47.0], [44.9, 47.0], [45.0, 47.0], [45.1, 47.0], [45.2, 47.0], [45.3, 47.0], [45.4, 47.0], [45.5, 47.0], [45.6, 48.0], [45.7, 48.0], [45.8, 48.0], [45.9, 48.0], [46.0, 48.0], [46.1, 48.0], [46.2, 48.0], [46.3, 48.0], [46.4, 48.0], [46.5, 48.0], [46.6, 48.0], [46.7, 48.0], [46.8, 48.0], [46.9, 48.0], [47.0, 48.0], [47.1, 48.0], [47.2, 48.0], [47.3, 48.0], [47.4, 48.0], [47.5, 48.0], [47.6, 48.0], [47.7, 48.0], [47.8, 48.0], [47.9, 48.0], [48.0, 48.0], [48.1, 48.0], [48.2, 48.0], [48.3, 48.0], [48.4, 48.0], [48.5, 48.0], [48.6, 48.0], [48.7, 48.0], [48.8, 48.0], [48.9, 48.0], [49.0, 48.0], [49.1, 48.0], [49.2, 48.0], [49.3, 48.0], [49.4, 48.0], [49.5, 48.0], [49.6, 48.0], [49.7, 49.0], [49.8, 49.0], [49.9, 49.0], [50.0, 49.0], [50.1, 49.0], [50.2, 49.0], [50.3, 49.0], [50.4, 49.0], [50.5, 49.0], [50.6, 49.0], [50.7, 49.0], [50.8, 49.0], [50.9, 49.0], [51.0, 49.0], [51.1, 49.0], [51.2, 49.0], [51.3, 49.0], [51.4, 49.0], [51.5, 49.0], [51.6, 49.0], [51.7, 49.0], [51.8, 49.0], [51.9, 49.0], [52.0, 49.0], [52.1, 49.0], [52.2, 49.0], [52.3, 49.0], [52.4, 49.0], [52.5, 49.0], [52.6, 49.0], [52.7, 49.0], [52.8, 49.0], [52.9, 49.0], [53.0, 49.0], [53.1, 49.0], [53.2, 49.0], [53.3, 49.0], [53.4, 49.0], [53.5, 49.0], [53.6, 49.0], [53.7, 49.0], [53.8, 49.0], [53.9, 49.0], [54.0, 49.0], [54.1, 49.0], [54.2, 49.0], [54.3, 49.0], [54.4, 49.0], [54.5, 49.0], [54.6, 49.0], [54.7, 49.0], [54.8, 49.0], [54.9, 49.0], [55.0, 49.0], [55.1, 49.0], [55.2, 49.0], [55.3, 49.0], [55.4, 49.0], [55.5, 49.0], [55.6, 49.0], [55.7, 50.0], [55.8, 50.0], [55.9, 50.0], [56.0, 50.0], [56.1, 50.0], [56.2, 50.0], [56.3, 50.0], [56.4, 50.0], [56.5, 50.0], [56.6, 50.0], [56.7, 50.0], [56.8, 50.0], [56.9, 50.0], [57.0, 50.0], [57.1, 50.0], [57.2, 50.0], [57.3, 50.0], [57.4, 50.0], [57.5, 50.0], [57.6, 50.0], [57.7, 50.0], [57.8, 50.0], [57.9, 50.0], [58.0, 50.0], [58.1, 50.0], [58.2, 50.0], [58.3, 50.0], [58.4, 50.0], [58.5, 50.0], [58.6, 50.0], [58.7, 50.0], [58.8, 50.0], [58.9, 50.0], [59.0, 50.0], [59.1, 50.0], [59.2, 50.0], [59.3, 50.0], [59.4, 50.0], [59.5, 50.0], [59.6, 50.0], [59.7, 50.0], [59.8, 50.0], [59.9, 50.0], [60.0, 50.0], [60.1, 50.0], [60.2, 50.0], [60.3, 50.0], [60.4, 50.0], [60.5, 50.0], [60.6, 50.0], [60.7, 50.0], [60.8, 50.0], [60.9, 50.0], [61.0, 50.0], [61.1, 50.0], [61.2, 50.0], [61.3, 50.0], [61.4, 50.0], [61.5, 50.0], [61.6, 50.0], [61.7, 50.0], [61.8, 50.0], [61.9, 50.0], [62.0, 50.0], [62.1, 50.0], [62.2, 50.0], [62.3, 50.0], [62.4, 50.0], [62.5, 50.0], [62.6, 50.0], [62.7, 50.0], [62.8, 51.0], [62.9, 51.0], [63.0, 51.0], [63.1, 51.0], [63.2, 51.0], [63.3, 51.0], [63.4, 51.0], [63.5, 51.0], [63.6, 51.0], [63.7, 51.0], [63.8, 51.0], [63.9, 51.0], [64.0, 51.0], [64.1, 51.0], [64.2, 51.0], [64.3, 51.0], [64.4, 51.0], [64.5, 51.0], [64.6, 51.0], [64.7, 51.0], [64.8, 51.0], [64.9, 51.0], [65.0, 51.0], [65.1, 51.0], [65.2, 51.0], [65.3, 51.0], [65.4, 51.0], [65.5, 51.0], [65.6, 51.0], [65.7, 51.0], [65.8, 51.0], [65.9, 51.0], [66.0, 51.0], [66.1, 51.0], [66.2, 51.0], [66.3, 51.0], [66.4, 51.0], [66.5, 51.0], [66.6, 51.0], [66.7, 51.0], [66.8, 51.0], [66.9, 51.0], [67.0, 51.0], [67.1, 51.0], [67.2, 51.0], [67.3, 51.0], [67.4, 51.0], [67.5, 51.0], [67.6, 51.0], [67.7, 51.0], [67.8, 51.0], [67.9, 51.0], [68.0, 51.0], [68.1, 51.0], [68.2, 51.0], [68.3, 51.0], [68.4, 51.0], [68.5, 51.0], [68.6, 51.0], [68.7, 51.0], [68.8, 51.0], [68.9, 51.0], [69.0, 51.0], [69.1, 51.0], [69.2, 52.0], [69.3, 52.0], [69.4, 52.0], [69.5, 52.0], [69.6, 52.0], [69.7, 52.0], [69.8, 52.0], [69.9, 52.0], [70.0, 52.0], [70.1, 52.0], [70.2, 52.0], [70.3, 52.0], [70.4, 52.0], [70.5, 52.0], [70.6, 52.0], [70.7, 52.0], [70.8, 52.0], [70.9, 52.0], [71.0, 52.0], [71.1, 52.0], [71.2, 52.0], [71.3, 52.0], [71.4, 52.0], [71.5, 52.0], [71.6, 52.0], [71.7, 52.0], [71.8, 52.0], [71.9, 52.0], [72.0, 52.0], [72.1, 52.0], [72.2, 52.0], [72.3, 52.0], [72.4, 52.0], [72.5, 52.0], [72.6, 52.0], [72.7, 52.0], [72.8, 52.0], [72.9, 52.0], [73.0, 52.0], [73.1, 52.0], [73.2, 52.0], [73.3, 52.0], [73.4, 52.0], [73.5, 52.0], [73.6, 52.0], [73.7, 52.0], [73.8, 52.0], [73.9, 52.0], [74.0, 52.0], [74.1, 52.0], [74.2, 52.0], [74.3, 52.0], [74.4, 52.0], [74.5, 52.0], [74.6, 53.0], [74.7, 53.0], [74.8, 53.0], [74.9, 53.0], [75.0, 53.0], [75.1, 53.0], [75.2, 53.0], [75.3, 53.0], [75.4, 53.0], [75.5, 53.0], [75.6, 53.0], [75.7, 53.0], [75.8, 53.0], [75.9, 53.0], [76.0, 53.0], [76.1, 53.0], [76.2, 53.0], [76.3, 53.0], [76.4, 53.0], [76.5, 53.0], [76.6, 53.0], [76.7, 53.0], [76.8, 53.0], [76.9, 53.0], [77.0, 53.0], [77.1, 53.0], [77.2, 53.0], [77.3, 53.0], [77.4, 53.0], [77.5, 53.0], [77.6, 53.0], [77.7, 53.0], [77.8, 53.0], [77.9, 53.0], [78.0, 53.0], [78.1, 53.0], [78.2, 53.0], [78.3, 53.0], [78.4, 53.0], [78.5, 53.0], [78.6, 53.0], [78.7, 53.0], [78.8, 53.0], [78.9, 53.0], [79.0, 53.0], [79.1, 53.0], [79.2, 54.0], [79.3, 54.0], [79.4, 54.0], [79.5, 54.0], [79.6, 54.0], [79.7, 54.0], [79.8, 54.0], [79.9, 54.0], [80.0, 54.0], [80.1, 54.0], [80.2, 54.0], [80.3, 54.0], [80.4, 54.0], [80.5, 54.0], [80.6, 54.0], [80.7, 54.0], [80.8, 54.0], [80.9, 54.0], [81.0, 54.0], [81.1, 54.0], [81.2, 54.0], [81.3, 54.0], [81.4, 54.0], [81.5, 54.0], [81.6, 54.0], [81.7, 54.0], [81.8, 54.0], [81.9, 54.0], [82.0, 54.0], [82.1, 54.0], [82.2, 54.0], [82.3, 54.0], [82.4, 54.0], [82.5, 54.0], [82.6, 54.0], [82.7, 54.0], [82.8, 54.0], [82.9, 54.0], [83.0, 54.0], [83.1, 54.0], [83.2, 54.0], [83.3, 55.0], [83.4, 55.0], [83.5, 55.0], [83.6, 55.0], [83.7, 55.0], [83.8, 55.0], [83.9, 55.0], [84.0, 55.0], [84.1, 55.0], [84.2, 55.0], [84.3, 55.0], [84.4, 55.0], [84.5, 55.0], [84.6, 55.0], [84.7, 55.0], [84.8, 55.0], [84.9, 55.0], [85.0, 55.0], [85.1, 55.0], [85.2, 55.0], [85.3, 55.0], [85.4, 55.0], [85.5, 55.0], [85.6, 56.0], [85.7, 56.0], [85.8, 56.0], [85.9, 56.0], [86.0, 56.0], [86.1, 56.0], [86.2, 56.0], [86.3, 56.0], [86.4, 56.0], [86.5, 56.0], [86.6, 56.0], [86.7, 56.0], [86.8, 56.0], [86.9, 56.0], [87.0, 56.0], [87.1, 56.0], [87.2, 56.0], [87.3, 56.0], [87.4, 57.0], [87.5, 57.0], [87.6, 57.0], [87.7, 57.0], [87.8, 57.0], [87.9, 57.0], [88.0, 57.0], [88.1, 57.0], [88.2, 57.0], [88.3, 57.0], [88.4, 57.0], [88.5, 57.0], [88.6, 57.0], [88.7, 58.0], [88.8, 58.0], [88.9, 58.0], [89.0, 58.0], [89.1, 58.0], [89.2, 58.0], [89.3, 58.0], [89.4, 58.0], [89.5, 58.0], [89.6, 58.0], [89.7, 58.0], [89.8, 58.0], [89.9, 59.0], [90.0, 59.0], [90.1, 59.0], [90.2, 59.0], [90.3, 59.0], [90.4, 59.0], [90.5, 59.0], [90.6, 59.0], [90.7, 60.0], [90.8, 60.0], [90.9, 60.0], [91.0, 60.0], [91.1, 60.0], [91.2, 60.0], [91.3, 60.0], [91.4, 61.0], [91.5, 61.0], [91.6, 61.0], [91.7, 61.0], [91.8, 61.0], [91.9, 61.0], [92.0, 62.0], [92.1, 62.0], [92.2, 62.0], [92.3, 62.0], [92.4, 62.0], [92.5, 62.0], [92.6, 63.0], [92.7, 63.0], [92.8, 63.0], [92.9, 63.0], [93.0, 63.0], [93.1, 64.0], [93.2, 64.0], [93.3, 64.0], [93.4, 64.0], [93.5, 65.0], [93.6, 65.0], [93.7, 65.0], [93.8, 65.0], [93.9, 65.0], [94.0, 66.0], [94.1, 66.0], [94.2, 66.0], [94.3, 67.0], [94.4, 67.0], [94.5, 67.0], [94.6, 68.0], [94.7, 68.0], [94.8, 68.0], [94.9, 69.0], [95.0, 69.0], [95.1, 69.0], [95.2, 70.0], [95.3, 70.0], [95.4, 70.0], [95.5, 71.0], [95.6, 71.0], [95.7, 71.0], [95.8, 72.0], [95.9, 72.0], [96.0, 73.0], [96.1, 73.0], [96.2, 74.0], [96.3, 74.0], [96.4, 75.0], [96.5, 75.0], [96.6, 76.0], [96.7, 76.0], [96.8, 77.0], [96.9, 77.0], [97.0, 78.0], [97.1, 78.0], [97.2, 79.0], [97.3, 80.0], [97.4, 80.0], [97.5, 81.0], [97.6, 82.0], [97.7, 83.0], [97.8, 84.0], [97.9, 85.0], [98.0, 86.0], [98.1, 87.0], [98.2, 88.0], [98.3, 90.0], [98.4, 91.0], [98.5, 93.0], [98.6, 94.0], [98.7, 97.0], [98.8, 99.0], [98.9, 103.0], [99.0, 105.0], [99.1, 108.0], [99.2, 113.0], [99.3, 116.0], [99.4, 121.0], [99.5, 128.0], [99.6, 138.0], [99.7, 149.0], [99.8, 260.0], [99.9, 865.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 15811.0, "series": [{"data": [[100.0, 6.0], [200.0, 16.0], [300.0, 32.0], [400.0, 75.0], [500.0, 201.0], [600.0, 338.0], [700.0, 426.0], [800.0, 509.0], [900.0, 556.0], [1000.0, 549.0], [1100.0, 585.0], [1200.0, 639.0], [1300.0, 605.0], [1400.0, 590.0], [1500.0, 583.0], [1600.0, 627.0], [1700.0, 505.0], [1800.0, 530.0], [1900.0, 510.0], [2000.0, 476.0], [2100.0, 466.0], [2300.0, 449.0], [2200.0, 465.0], [2400.0, 376.0], [2500.0, 402.0], [2600.0, 362.0], [2700.0, 335.0], [2800.0, 353.0], [2900.0, 299.0], [3000.0, 292.0], [3100.0, 253.0], [3200.0, 232.0], [3300.0, 254.0], [3400.0, 207.0], [3500.0, 195.0], [3700.0, 181.0], [3600.0, 158.0], [3800.0, 164.0], [3900.0, 150.0], [4000.0, 148.0], [4200.0, 142.0], [4300.0, 113.0], [4100.0, 138.0], [4600.0, 81.0], [4500.0, 100.0], [4400.0, 84.0], [4700.0, 105.0], [4800.0, 92.0], [5100.0, 62.0], [5000.0, 68.0], [4900.0, 76.0], [5200.0, 60.0], [5300.0, 60.0], [5500.0, 48.0], [5600.0, 49.0], [5400.0, 61.0], [5700.0, 44.0], [5800.0, 35.0], [6100.0, 36.0], [5900.0, 38.0], [6000.0, 35.0], [6200.0, 29.0], [6300.0, 17.0], [6600.0, 19.0], [6400.0, 22.0], [6500.0, 19.0], [6700.0, 21.0], [6800.0, 28.0], [6900.0, 8.0], [7100.0, 17.0], [7000.0, 16.0], [7300.0, 15.0], [7400.0, 7.0], [7200.0, 15.0], [7600.0, 6.0], [7500.0, 11.0], [7700.0, 7.0], [7900.0, 11.0], [7800.0, 10.0], [8000.0, 14.0], [8100.0, 10.0], [8300.0, 6.0], [8500.0, 6.0], [8700.0, 3.0], [8400.0, 8.0], [8600.0, 4.0], [8200.0, 4.0], [8900.0, 7.0], [9200.0, 3.0], [9000.0, 2.0], [8800.0, 2.0], [9100.0, 2.0], [9300.0, 3.0], [9400.0, 3.0], [9600.0, 3.0], [9500.0, 2.0], [10100.0, 4.0], [9900.0, 1.0], [10400.0, 1.0], [10300.0, 2.0], [10700.0, 1.0], [11200.0, 1.0], [11700.0, 1.0], [11900.0, 2.0], [14000.0, 1.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 15811.0], [600.0, 2.0], [700.0, 2.0], [800.0, 2.0], [200.0, 3.0], [900.0, 4.0], [1000.0, 4.0], [300.0, 1.0], [1200.0, 1.0], [1600.0, 1.0], [400.0, 6.0], [100.0, 155.0], [1700.0, 1.0], [1800.0, 2.0], [1900.0, 1.0], [500.0, 4.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 14000.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 5023.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 16106.0, "series": [{"data": [[0.0, 16106.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 5023.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 10871.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 21.428987618353972, "minX": 1.74714966E12, "maxY": 32.0, "series": [{"data": [[1.74715068E12, 32.0], [1.74715038E12, 32.0], [1.74715032E12, 32.0], [1.74714972E12, 32.0], [1.74715002E12, 32.0], [1.74714996E12, 32.0], [1.74715062E12, 32.0], [1.74714966E12, 31.989247311827942], [1.74715056E12, 32.0], [1.74715026E12, 32.0], [1.7471502E12, 32.0], [1.74714984E12, 32.0], [1.74715086E12, 21.428987618353972], [1.7471499E12, 32.0], [1.7471508E12, 32.0], [1.7471505E12, 32.0], [1.74714978E12, 32.0], [1.74715044E12, 32.0], [1.74715014E12, 32.0], [1.74715008E12, 32.0], [1.74715074E12, 32.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74715086E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 29.333333333333332, "minX": 1.0, "maxY": 2535.4374999999995, "series": [{"data": [[32.0, 2408.5336375488946], [2.0, 425.66666666666663], [3.0, 436.6666666666667], [4.0, 461.54545454545456], [5.0, 479.8888888888889], [6.0, 363.00000000000006], [7.0, 673.3333333333333], [8.0, 635.1428571428571], [9.0, 849.5999999999999], [10.0, 761.6666666666666], [11.0, 936.8055555555557], [12.0, 778.3333333333334], [13.0, 982.9705882352939], [14.0, 1203.6666666666667], [15.0, 1007.2499999999999], [16.0, 1287.75], [1.0, 526.5], [17.0, 1169.1], [18.0, 1543.3125], [19.0, 1370.0000000000002], [20.0, 1282.1538461538464], [21.0, 1353.1000000000004], [22.0, 1654.1818181818185], [23.0, 1972.8260869565217], [25.0, 2028.75], [26.0, 1705.976470588235], [27.0, 2281.3333333333335], [28.0, 2246.911764705883], [29.0, 2461.7058823529405], [30.0, 2415.194444444445], [31.0, 2535.4374999999995]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[31.546249999999908, 2375.818375000003]], "isOverall": false, "label": "Create CSR-Aggregated", "isController": false}, {"data": [[32.0, 51.84505573300281], [2.0, 34.16666666666667], [3.0, 29.333333333333332], [4.0, 34.09090909090909], [5.0, 33.4], [6.0, 37.125], [7.0, 36.58333333333334], [8.0, 36.5], [9.0, 38.72727272727273], [10.0, 37.6], [11.0, 38.27027027027027], [12.0, 38.75], [13.0, 42.11428571428571], [14.0, 44.0], [15.0, 45.0], [16.0, 41.92307692307692], [1.0, 33.33333333333333], [17.0, 55.81818181818182], [18.0, 57.06250000000001], [19.0, 49.28571428571429], [20.0, 42.81818181818182], [21.0, 45.46478873239437], [22.0, 43.285714285714285], [23.0, 42.875], [24.0, 41.0], [25.0, 42.0], [26.0, 47.02325581395348], [27.0, 51.55555555555556], [28.0, 50.19402985074628], [29.0, 52.323529411764696], [30.0, 49.351351351351354], [31.0, 53.634920634920626]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}, {"data": [[31.545875000000006, 51.59568749999982]], "isOverall": false, "label": "HTTP Request - enroll-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 32.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 16566.8, "minX": 1.74714966E12, "maxY": 128994.48333333334, "series": [{"data": [[1.74715068E12, 123817.9], [1.74715038E12, 111930.23333333334], [1.74715032E12, 107977.11666666667], [1.74714972E12, 128446.13333333333], [1.74715002E12, 108983.35], [1.74714996E12, 108059.2], [1.74715062E12, 124618.06666666667], [1.74714966E12, 82181.56666666667], [1.74715056E12, 107513.28333333334], [1.74715026E12, 111320.96666666666], [1.7471502E12, 110332.45], [1.74714984E12, 103240.06666666667], [1.74715086E12, 101155.21666666666], [1.7471499E12, 107385.2], [1.7471508E12, 109299.81666666667], [1.7471505E12, 128593.56666666667], [1.74714978E12, 105304.05], [1.74715044E12, 128994.48333333334], [1.74715014E12, 116308.65], [1.74715008E12, 122430.33333333333], [1.74715074E12, 108542.08333333333]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74715068E12, 24968.116666666665], [1.74715038E12, 22563.166666666668], [1.74715032E12, 21762.916666666668], [1.74714972E12, 25888.233333333334], [1.74715002E12, 21968.233333333334], [1.74714996E12, 21791.633333333335], [1.74715062E12, 25117.0], [1.74714966E12, 16566.8], [1.74715056E12, 21673.366666666665], [1.74715026E12, 22445.0], [1.7471502E12, 22237.283333333333], [1.74714984E12, 20810.883333333335], [1.74715086E12, 20393.65], [1.7471499E12, 21642.35], [1.7471508E12, 22028.066666666666], [1.7471505E12, 25917.65], [1.74714978E12, 21227.916666666668], [1.74715044E12, 26007.7], [1.74715014E12, 23455.366666666665], [1.74715008E12, 24671.55], [1.74715074E12, 21879.783333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74715086E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 45.99272197962155, "minX": 1.74714966E12, "maxY": 2672.188302425109, "series": [{"data": [[1.74715068E12, 2195.266984505366], [1.74715038E12, 2479.1289473684237], [1.74715032E12, 2588.1485013623997], [1.74714972E12, 2131.2302405498276], [1.74715002E12, 2543.3337837837826], [1.74714996E12, 2565.8797814207655], [1.74715062E12, 2246.8689492325843], [1.74714966E12, 2066.8064516129034], [1.74715056E12, 2574.6904109589045], [1.74715026E12, 2465.8198675496665], [1.7471502E12, 2517.6200000000003], [1.74714984E12, 2672.188302425109], [1.74715086E12, 1658.6239067055403], [1.7471499E12, 2588.978082191779], [1.7471508E12, 2547.4939434724092], [1.7471505E12, 2169.3146453089234], [1.74714978E12, 2648.734265734267], [1.74715044E12, 2110.613714285715], [1.74715014E12, 2374.232233502539], [1.74715008E12, 2266.5654261704685], [1.74715074E12, 2566.4084124830397]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74715068E12, 48.11177170035674], [1.74715038E12, 51.763157894736835], [1.74715032E12, 49.93997271487037], [1.74714972E12, 48.07454128440367], [1.74715002E12, 51.158108108108095], [1.74714996E12, 51.59264305177112], [1.74715062E12, 46.57801418439718], [1.74714966E12, 96.51792114695334], [1.74715056E12, 51.000000000000064], [1.74715026E12, 52.11772486772492], [1.7471502E12, 52.724966622162896], [1.74714984E12, 53.34664764621973], [1.74715086E12, 45.99272197962155], [1.7471499E12, 52.466392318244154], [1.7471508E12, 51.13477088948791], [1.7471505E12, 47.256586483390564], [1.74714978E12, 54.48811188811188], [1.74715044E12, 46.34018264840182], [1.74715014E12, 49.19620253164559], [1.74715008E12, 46.88808664259933], [1.74715074E12, 51.92944369063777]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74715086E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74714966E12, "maxY": 96.48566308243733, "series": [{"data": [[1.74715068E12, 0.0], [1.74715038E12, 0.0], [1.74715032E12, 0.0], [1.74714972E12, 0.0], [1.74715002E12, 0.0], [1.74714996E12, 0.0], [1.74715062E12, 0.0], [1.74714966E12, 0.0], [1.74715056E12, 0.0], [1.74715026E12, 0.0], [1.7471502E12, 0.0], [1.74714984E12, 0.0], [1.74715086E12, 0.0], [1.7471499E12, 0.0], [1.7471508E12, 0.0], [1.7471505E12, 0.0], [1.74714978E12, 0.0], [1.74715044E12, 0.0], [1.74715014E12, 0.0], [1.74715008E12, 0.0], [1.74715074E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74715068E12, 48.10225921521996], [1.74715038E12, 51.761842105263156], [1.74715032E12, 49.933151432469295], [1.74714972E12, 48.06192660550459], [1.74715002E12, 51.14864864864861], [1.74714996E12, 51.57765667574933], [1.74715062E12, 46.57565011820324], [1.74714966E12, 96.48566308243733], [1.74715056E12, 50.995890410958886], [1.74715026E12, 52.11507936507935], [1.7471502E12, 52.724966622162896], [1.74714984E12, 53.320970042796006], [1.74715086E12, 45.989810771470154], [1.7471499E12, 52.448559670781904], [1.7471508E12, 51.13207547169812], [1.7471505E12, 47.25085910652918], [1.74714978E12, 54.47972027972029], [1.74715044E12, 46.333333333333364], [1.74715014E12, 49.19240506329114], [1.74715008E12, 46.880866425992814], [1.74715074E12, 51.92672998643145]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74715086E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74714966E12, "maxY": 23.02688172043012, "series": [{"data": [[1.74715068E12, 0.0], [1.74715038E12, 0.0], [1.74715032E12, 0.0], [1.74714972E12, 0.0], [1.74715002E12, 0.0], [1.74714996E12, 0.0], [1.74715062E12, 0.0], [1.74714966E12, 0.0], [1.74715056E12, 0.0], [1.74715026E12, 0.0], [1.7471502E12, 0.0], [1.74714984E12, 0.0], [1.74715086E12, 0.0], [1.7471499E12, 0.0], [1.7471508E12, 0.0], [1.7471505E12, 0.0], [1.74714978E12, 0.0], [1.74715044E12, 0.0], [1.74715014E12, 0.0], [1.74715008E12, 0.0], [1.74715074E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74715068E12, 0.11890606420927466], [1.74715038E12, 0.14605263157894727], [1.74715032E12, 0.13915416098226463], [1.74714972E12, 0.2305045871559633], [1.74715002E12, 0.18648648648648672], [1.74714996E12, 0.167574931880109], [1.74715062E12, 0.1323877068557921], [1.74714966E12, 23.02688172043012], [1.74715056E12, 0.16027397260273982], [1.74715026E12, 0.1402116402116402], [1.7471502E12, 0.20427236315086766], [1.74714984E12, 0.23252496433666173], [1.74715086E12, 0.05094614264919941], [1.7471499E12, 0.23045267489711946], [1.7471508E12, 0.19002695417789758], [1.7471505E12, 0.1134020618556701], [1.74714978E12, 0.223776223776224], [1.74715044E12, 0.11757990867579907], [1.74715014E12, 0.13544303797468343], [1.74715008E12, 0.16004813477737673], [1.74715074E12, 0.11940298507462689]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74715086E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 27.0, "minX": 1.74714966E12, "maxY": 14034.0, "series": [{"data": [[1.74715068E12, 8912.0], [1.74715038E12, 14034.0], [1.74715032E12, 11920.0], [1.74714972E12, 9341.0], [1.74715002E12, 9063.0], [1.74714996E12, 9217.0], [1.74715062E12, 9106.0], [1.74714966E12, 8307.0], [1.74715056E12, 10191.0], [1.74715026E12, 9539.0], [1.7471502E12, 9139.0], [1.74714984E12, 11289.0], [1.74715086E12, 8079.0], [1.7471499E12, 9691.0], [1.7471508E12, 10105.0], [1.7471505E12, 11792.0], [1.74714978E12, 9448.0], [1.74715044E12, 8079.0], [1.74715014E12, 10758.0], [1.74715008E12, 7957.0], [1.74715074E12, 11986.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.74715068E12, 3003.6000000000004], [1.74715038E12, 3612.4000000000005], [1.74715032E12, 3745.4], [1.74714972E12, 2972.8000000000006], [1.74715002E12, 3632.000000000001], [1.74714996E12, 3627.499999999999], [1.74715062E12, 3207.4000000000015], [1.74714966E12, 2865.2000000000003], [1.74715056E12, 3733.5000000000005], [1.74715026E12, 3502.199999999999], [1.7471502E12, 3560.0], [1.74714984E12, 3788.2000000000003], [1.74715086E12, 2374.2000000000007], [1.7471499E12, 3675.0], [1.7471508E12, 3531.8000000000015], [1.7471505E12, 3063.6000000000004], [1.74714978E12, 3746.9], [1.74715044E12, 2973.8], [1.74715014E12, 3342.900000000004], [1.74715008E12, 3251.5], [1.74715074E12, 3580.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.74715068E12, 5880.600000000002], [1.74715038E12, 6118.219999999999], [1.74715032E12, 6551.519999999995], [1.74714972E12, 5768.78], [1.74715002E12, 6774.950000000001], [1.74714996E12, 7107.719999999994], [1.74715062E12, 6041.45999999999], [1.74714966E12, 6082.599999999991], [1.74715056E12, 6596.6700000000355], [1.74715026E12, 6515.999999999967], [1.7471502E12, 6719.0], [1.74714984E12, 7206.600000000002], [1.74715086E12, 5547.12], [1.7471499E12, 6817.400000000001], [1.7471508E12, 7129.9800000000005], [1.7471505E12, 5640.639999999999], [1.74714978E12, 7472.640000000003], [1.74715044E12, 5459.68], [1.74715014E12, 6324.440000000006], [1.74715008E12, 5710.999999999996], [1.74715074E12, 6608.5]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.74715068E12, 4002.9999999999964], [1.74715038E12, 4488.200000000001], [1.74715032E12, 4823.999999999996], [1.74714972E12, 3796.8999999999987], [1.74715002E12, 4665.4000000000015], [1.74714996E12, 4691.9999999999945], [1.74715062E12, 4144.2], [1.74714966E12, 3660.4999999999905], [1.74715056E12, 4793.1500000000015], [1.74715026E12, 4518.399999999996], [1.7471502E12, 4575.0], [1.74714984E12, 4900.749999999998], [1.74715086E12, 3157.0999999999995], [1.7471499E12, 4634.0], [1.7471508E12, 4658.700000000001], [1.7471505E12, 3884.399999999998], [1.74714978E12, 4902.850000000002], [1.74715044E12, 3722.3999999999987], [1.74715014E12, 4325.299999999997], [1.74715008E12, 4224.5], [1.74715074E12, 4632.75]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.74715068E12, 36.0], [1.74715038E12, 36.0], [1.74715032E12, 35.0], [1.74714972E12, 35.0], [1.74715002E12, 37.0], [1.74714996E12, 36.0], [1.74715062E12, 37.0], [1.74714966E12, 38.0], [1.74715056E12, 35.0], [1.74715026E12, 34.0], [1.7471502E12, 36.0], [1.74714984E12, 35.0], [1.74715086E12, 27.0], [1.7471499E12, 35.0], [1.7471508E12, 35.0], [1.7471505E12, 36.0], [1.74714978E12, 33.0], [1.74715044E12, 37.0], [1.74715014E12, 36.0], [1.74715008E12, 35.0], [1.74715074E12, 35.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.74715068E12, 139.0], [1.74715038E12, 306.5], [1.74715032E12, 544.0], [1.74714972E12, 440.0], [1.74715002E12, 314.0], [1.74714996E12, 143.5], [1.74715062E12, 385.0], [1.74714966E12, 605.0], [1.74715056E12, 271.5], [1.74715026E12, 151.0], [1.7471502E12, 376.0], [1.74714984E12, 305.5], [1.74715086E12, 121.0], [1.7471499E12, 325.0], [1.7471508E12, 406.0], [1.7471505E12, 429.0], [1.74714978E12, 290.0], [1.74715044E12, 116.0], [1.74715014E12, 119.0], [1.74715008E12, 440.0], [1.74715074E12, 287.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74715086E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 42.0, "minX": 1.0, "maxY": 758.0, "series": [{"data": [[32.0, 449.0], [33.0, 583.0], [2.0, 428.5], [34.0, 450.5], [35.0, 501.0], [36.0, 108.0], [37.0, 104.0], [39.0, 613.0], [38.0, 139.0], [40.0, 430.5], [41.0, 588.0], [42.0, 71.5], [43.0, 113.0], [45.0, 311.5], [44.0, 385.0], [4.0, 143.0], [7.0, 56.0], [9.0, 758.0], [10.0, 620.5], [11.0, 42.0], [12.0, 54.0], [13.0, 692.0], [14.0, 107.5], [15.0, 107.5], [1.0, 279.0], [16.0, 666.0], [17.0, 77.0], [18.0, 117.0], [19.0, 558.0], [20.0, 692.5], [21.0, 114.5], [22.0, 307.5], [23.0, 201.0], [24.0, 117.5], [25.0, 141.5], [26.0, 551.5], [27.0, 477.5], [28.0, 93.5], [29.0, 108.0], [30.0, 98.0], [31.0, 551.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 45.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 43.5, "series": [{"data": [[32.0, 0.0], [33.0, 0.0], [2.0, 17.5], [34.0, 0.0], [35.0, 0.0], [36.0, 37.0], [37.0, 37.0], [39.0, 40.0], [38.0, 38.0], [40.0, 0.0], [41.0, 0.0], [42.0, 39.5], [43.0, 38.0], [45.0, 19.0], [44.0, 19.5], [4.0, 15.5], [7.0, 43.5], [9.0, 0.0], [10.0, 23.0], [11.0, 31.0], [12.0, 28.5], [13.0, 0.0], [14.0, 13.5], [15.0, 36.0], [1.0, 0.0], [16.0, 0.0], [17.0, 40.0], [18.0, 37.0], [19.0, 0.0], [20.0, 0.0], [21.0, 37.5], [22.0, 0.0], [23.0, 30.0], [24.0, 36.0], [25.0, 29.5], [26.0, 0.0], [27.0, 0.0], [28.0, 38.0], [29.0, 37.0], [30.0, 35.5], [31.0, 0.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 45.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 19.133333333333333, "minX": 1.74714966E12, "maxY": 29.183333333333334, "series": [{"data": [[1.74715068E12, 28.0], [1.74715038E12, 25.333333333333332], [1.74715032E12, 24.45], [1.74714972E12, 29.083333333333332], [1.74715002E12, 24.666666666666668], [1.74714996E12, 24.433333333333334], [1.74715062E12, 28.216666666666665], [1.74714966E12, 19.133333333333333], [1.74715056E12, 24.333333333333332], [1.74715026E12, 25.183333333333334], [1.7471502E12, 24.983333333333334], [1.74714984E12, 23.366666666666667], [1.74715086E12, 22.35], [1.7471499E12, 24.316666666666666], [1.7471508E12, 24.75], [1.7471505E12, 29.116666666666667], [1.74714978E12, 23.833333333333332], [1.74715044E12, 29.183333333333334], [1.74715014E12, 26.3], [1.74715008E12, 27.733333333333334], [1.74715074E12, 24.566666666666666]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74715086E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 9.3, "minX": 1.74714966E12, "maxY": 14.6, "series": [{"data": [[1.74715068E12, 13.983333333333333], [1.74715038E12, 12.666666666666666], [1.74715032E12, 12.233333333333333], [1.74714972E12, 14.55], [1.74715002E12, 12.333333333333334], [1.74714996E12, 12.2], [1.74715062E12, 14.116666666666667], [1.74714966E12, 9.3], [1.74715056E12, 12.166666666666666], [1.74715026E12, 12.583333333333334], [1.7471502E12, 12.5], [1.74714984E12, 11.683333333333334], [1.74715086E12, 11.433333333333334], [1.7471499E12, 12.166666666666666], [1.7471508E12, 12.383333333333333], [1.7471505E12, 14.566666666666666], [1.74714978E12, 11.916666666666666], [1.74715044E12, 14.583333333333334], [1.74715014E12, 13.133333333333333], [1.74715008E12, 13.883333333333333], [1.74715074E12, 12.283333333333333]], "isOverall": false, "label": "0", "isController": false}, {"data": [[1.74715068E12, 14.016666666666667], [1.74715038E12, 12.666666666666666], [1.74715032E12, 12.216666666666667], [1.74714972E12, 14.533333333333333], [1.74715002E12, 12.333333333333334], [1.74714996E12, 12.233333333333333], [1.74715062E12, 14.1], [1.74714966E12, 9.3], [1.74715056E12, 12.166666666666666], [1.74715026E12, 12.6], [1.7471502E12, 12.483333333333333], [1.74714984E12, 11.683333333333334], [1.74715086E12, 11.45], [1.7471499E12, 12.15], [1.7471508E12, 12.366666666666667], [1.7471505E12, 14.55], [1.74714978E12, 11.916666666666666], [1.74715044E12, 14.6], [1.74715014E12, 13.166666666666666], [1.74715008E12, 13.85], [1.74715074E12, 12.283333333333333]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74715086E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 9.3, "minX": 1.74714966E12, "maxY": 14.6, "series": [{"data": [[1.74715068E12, 14.016666666666667], [1.74715038E12, 12.666666666666666], [1.74715032E12, 12.216666666666667], [1.74714972E12, 14.533333333333333], [1.74715002E12, 12.333333333333334], [1.74714996E12, 12.233333333333333], [1.74715062E12, 14.1], [1.74714966E12, 9.3], [1.74715056E12, 12.166666666666666], [1.74715026E12, 12.6], [1.7471502E12, 12.483333333333333], [1.74714984E12, 11.683333333333334], [1.74715086E12, 11.45], [1.7471499E12, 12.15], [1.7471508E12, 12.366666666666667], [1.7471505E12, 14.55], [1.74714978E12, 11.916666666666666], [1.74715044E12, 14.6], [1.74715014E12, 13.166666666666666], [1.74715008E12, 13.85], [1.74715074E12, 12.283333333333333]], "isOverall": false, "label": "HTTP Request - enroll-success", "isController": false}, {"data": [[1.74715068E12, 13.983333333333333], [1.74715038E12, 12.666666666666666], [1.74715032E12, 12.233333333333333], [1.74714972E12, 14.55], [1.74715002E12, 12.333333333333334], [1.74714996E12, 12.2], [1.74715062E12, 14.116666666666667], [1.74714966E12, 9.3], [1.74715056E12, 12.166666666666666], [1.74715026E12, 12.583333333333334], [1.7471502E12, 12.5], [1.74714984E12, 11.683333333333334], [1.74715086E12, 11.433333333333334], [1.7471499E12, 12.166666666666666], [1.7471508E12, 12.383333333333333], [1.7471505E12, 14.566666666666666], [1.74714978E12, 11.916666666666666], [1.74715044E12, 14.583333333333334], [1.74715014E12, 13.133333333333333], [1.74715008E12, 13.883333333333333], [1.74715074E12, 12.283333333333333]], "isOverall": false, "label": "Create CSR-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74715086E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 18.6, "minX": 1.74714966E12, "maxY": 29.183333333333334, "series": [{"data": [[1.74715068E12, 28.0], [1.74715038E12, 25.333333333333332], [1.74715032E12, 24.45], [1.74714972E12, 29.083333333333332], [1.74715002E12, 24.666666666666668], [1.74714996E12, 24.433333333333334], [1.74715062E12, 28.216666666666665], [1.74714966E12, 18.6], [1.74715056E12, 24.333333333333332], [1.74715026E12, 25.183333333333334], [1.7471502E12, 24.983333333333334], [1.74714984E12, 23.366666666666667], [1.74715086E12, 22.883333333333333], [1.7471499E12, 24.316666666666666], [1.7471508E12, 24.75], [1.7471505E12, 29.116666666666667], [1.74714978E12, 23.833333333333332], [1.74715044E12, 29.183333333333334], [1.74715014E12, 26.3], [1.74715008E12, 27.733333333333334], [1.74715074E12, 24.566666666666666]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74715086E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

