/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 27.0, "minX": 0.0, "maxY": 8528.0, "series": [{"data": [[0.0, 144.0], [0.1, 216.0], [0.2, 254.0], [0.3, 286.0], [0.4, 324.0], [0.5, 366.0], [0.6, 379.0], [0.7, 396.0], [0.8, 406.0], [0.9, 416.0], [1.0, 423.0], [1.1, 430.0], [1.2, 440.0], [1.3, 447.0], [1.4, 452.0], [1.5, 455.0], [1.6, 460.0], [1.7, 464.0], [1.8, 467.0], [1.9, 473.0], [2.0, 476.0], [2.1, 481.0], [2.2, 488.0], [2.3, 490.0], [2.4, 496.0], [2.5, 500.0], [2.6, 504.0], [2.7, 508.0], [2.8, 510.0], [2.9, 514.0], [3.0, 517.0], [3.1, 520.0], [3.2, 525.0], [3.3, 529.0], [3.4, 532.0], [3.5, 538.0], [3.6, 541.0], [3.7, 543.0], [3.8, 546.0], [3.9, 549.0], [4.0, 552.0], [4.1, 554.0], [4.2, 557.0], [4.3, 560.0], [4.4, 563.0], [4.5, 565.0], [4.6, 566.0], [4.7, 570.0], [4.8, 573.0], [4.9, 576.0], [5.0, 579.0], [5.1, 582.0], [5.2, 585.0], [5.3, 587.0], [5.4, 589.0], [5.5, 592.0], [5.6, 595.0], [5.7, 597.0], [5.8, 600.0], [5.9, 602.0], [6.0, 605.0], [6.1, 608.0], [6.2, 609.0], [6.3, 612.0], [6.4, 615.0], [6.5, 618.0], [6.6, 620.0], [6.7, 624.0], [6.8, 626.0], [6.9, 627.0], [7.0, 629.0], [7.1, 631.0], [7.2, 633.0], [7.3, 635.0], [7.4, 636.0], [7.5, 638.0], [7.6, 640.0], [7.7, 642.0], [7.8, 644.0], [7.9, 646.0], [8.0, 649.0], [8.1, 650.0], [8.2, 653.0], [8.3, 655.0], [8.4, 657.0], [8.5, 660.0], [8.6, 662.0], [8.7, 663.0], [8.8, 665.0], [8.9, 667.0], [9.0, 670.0], [9.1, 671.0], [9.2, 672.0], [9.3, 674.0], [9.4, 677.0], [9.5, 679.0], [9.6, 681.0], [9.7, 683.0], [9.8, 686.0], [9.9, 687.0], [10.0, 688.0], [10.1, 691.0], [10.2, 694.0], [10.3, 696.0], [10.4, 698.0], [10.5, 700.0], [10.6, 702.0], [10.7, 704.0], [10.8, 706.0], [10.9, 708.0], [11.0, 710.0], [11.1, 712.0], [11.2, 713.0], [11.3, 715.0], [11.4, 717.0], [11.5, 719.0], [11.6, 721.0], [11.7, 723.0], [11.8, 724.0], [11.9, 727.0], [12.0, 729.0], [12.1, 731.0], [12.2, 733.0], [12.3, 735.0], [12.4, 736.0], [12.5, 738.0], [12.6, 740.0], [12.7, 741.0], [12.8, 743.0], [12.9, 744.0], [13.0, 746.0], [13.1, 748.0], [13.2, 750.0], [13.3, 752.0], [13.4, 753.0], [13.5, 756.0], [13.6, 757.0], [13.7, 760.0], [13.8, 762.0], [13.9, 764.0], [14.0, 766.0], [14.1, 768.0], [14.2, 770.0], [14.3, 772.0], [14.4, 773.0], [14.5, 775.0], [14.6, 776.0], [14.7, 778.0], [14.8, 779.0], [14.9, 781.0], [15.0, 783.0], [15.1, 785.0], [15.2, 787.0], [15.3, 789.0], [15.4, 790.0], [15.5, 792.0], [15.6, 794.0], [15.7, 796.0], [15.8, 797.0], [15.9, 799.0], [16.0, 801.0], [16.1, 803.0], [16.2, 804.0], [16.3, 805.0], [16.4, 808.0], [16.5, 811.0], [16.6, 812.0], [16.7, 814.0], [16.8, 816.0], [16.9, 817.0], [17.0, 819.0], [17.1, 821.0], [17.2, 823.0], [17.3, 824.0], [17.4, 826.0], [17.5, 827.0], [17.6, 829.0], [17.7, 830.0], [17.8, 832.0], [17.9, 833.0], [18.0, 835.0], [18.1, 836.0], [18.2, 838.0], [18.3, 840.0], [18.4, 841.0], [18.5, 843.0], [18.6, 844.0], [18.7, 846.0], [18.8, 847.0], [18.9, 849.0], [19.0, 851.0], [19.1, 853.0], [19.2, 854.0], [19.3, 856.0], [19.4, 858.0], [19.5, 860.0], [19.6, 861.0], [19.7, 863.0], [19.8, 864.0], [19.9, 866.0], [20.0, 869.0], [20.1, 871.0], [20.2, 873.0], [20.3, 875.0], [20.4, 876.0], [20.5, 878.0], [20.6, 879.0], [20.7, 881.0], [20.8, 883.0], [20.9, 885.0], [21.0, 887.0], [21.1, 888.0], [21.2, 890.0], [21.3, 892.0], [21.4, 894.0], [21.5, 895.0], [21.6, 897.0], [21.7, 898.0], [21.8, 901.0], [21.9, 903.0], [22.0, 905.0], [22.1, 907.0], [22.2, 908.0], [22.3, 910.0], [22.4, 912.0], [22.5, 913.0], [22.6, 915.0], [22.7, 916.0], [22.8, 918.0], [22.9, 920.0], [23.0, 922.0], [23.1, 924.0], [23.2, 925.0], [23.3, 927.0], [23.4, 928.0], [23.5, 929.0], [23.6, 931.0], [23.7, 933.0], [23.8, 935.0], [23.9, 936.0], [24.0, 937.0], [24.1, 938.0], [24.2, 939.0], [24.3, 941.0], [24.4, 944.0], [24.5, 945.0], [24.6, 946.0], [24.7, 947.0], [24.8, 948.0], [24.9, 950.0], [25.0, 951.0], [25.1, 954.0], [25.2, 955.0], [25.3, 957.0], [25.4, 958.0], [25.5, 960.0], [25.6, 962.0], [25.7, 963.0], [25.8, 965.0], [25.9, 966.0], [26.0, 967.0], [26.1, 969.0], [26.2, 970.0], [26.3, 971.0], [26.4, 973.0], [26.5, 975.0], [26.6, 976.0], [26.7, 977.0], [26.8, 980.0], [26.9, 981.0], [27.0, 983.0], [27.1, 984.0], [27.2, 986.0], [27.3, 987.0], [27.4, 988.0], [27.5, 989.0], [27.6, 991.0], [27.7, 993.0], [27.8, 995.0], [27.9, 998.0], [28.0, 999.0], [28.1, 999.0], [28.2, 1001.0], [28.3, 1003.0], [28.4, 1004.0], [28.5, 1006.0], [28.6, 1008.0], [28.7, 1009.0], [28.8, 1011.0], [28.9, 1013.0], [29.0, 1014.0], [29.1, 1016.0], [29.2, 1017.0], [29.3, 1019.0], [29.4, 1021.0], [29.5, 1022.0], [29.6, 1024.0], [29.7, 1025.0], [29.8, 1027.0], [29.9, 1028.0], [30.0, 1030.0], [30.1, 1032.0], [30.2, 1034.0], [30.3, 1036.0], [30.4, 1037.0], [30.5, 1038.0], [30.6, 1040.0], [30.7, 1040.0], [30.8, 1042.0], [30.9, 1045.0], [31.0, 1046.0], [31.1, 1048.0], [31.2, 1050.0], [31.3, 1052.0], [31.4, 1054.0], [31.5, 1055.0], [31.6, 1057.0], [31.7, 1059.0], [31.8, 1061.0], [31.9, 1063.0], [32.0, 1065.0], [32.1, 1068.0], [32.2, 1069.0], [32.3, 1071.0], [32.4, 1074.0], [32.5, 1075.0], [32.6, 1076.0], [32.7, 1078.0], [32.8, 1080.0], [32.9, 1082.0], [33.0, 1084.0], [33.1, 1085.0], [33.2, 1087.0], [33.3, 1088.0], [33.4, 1091.0], [33.5, 1092.0], [33.6, 1094.0], [33.7, 1095.0], [33.8, 1096.0], [33.9, 1097.0], [34.0, 1099.0], [34.1, 1101.0], [34.2, 1102.0], [34.3, 1103.0], [34.4, 1105.0], [34.5, 1106.0], [34.6, 1109.0], [34.7, 1111.0], [34.8, 1112.0], [34.9, 1114.0], [35.0, 1117.0], [35.1, 1120.0], [35.2, 1121.0], [35.3, 1123.0], [35.4, 1124.0], [35.5, 1125.0], [35.6, 1127.0], [35.7, 1129.0], [35.8, 1131.0], [35.9, 1132.0], [36.0, 1134.0], [36.1, 1136.0], [36.2, 1139.0], [36.3, 1140.0], [36.4, 1143.0], [36.5, 1144.0], [36.6, 1146.0], [36.7, 1147.0], [36.8, 1148.0], [36.9, 1150.0], [37.0, 1152.0], [37.1, 1153.0], [37.2, 1155.0], [37.3, 1157.0], [37.4, 1159.0], [37.5, 1160.0], [37.6, 1161.0], [37.7, 1163.0], [37.8, 1165.0], [37.9, 1167.0], [38.0, 1169.0], [38.1, 1171.0], [38.2, 1172.0], [38.3, 1173.0], [38.4, 1175.0], [38.5, 1176.0], [38.6, 1177.0], [38.7, 1180.0], [38.8, 1182.0], [38.9, 1185.0], [39.0, 1187.0], [39.1, 1188.0], [39.2, 1190.0], [39.3, 1191.0], [39.4, 1195.0], [39.5, 1196.0], [39.6, 1199.0], [39.7, 1200.0], [39.8, 1201.0], [39.9, 1205.0], [40.0, 1206.0], [40.1, 1207.0], [40.2, 1209.0], [40.3, 1210.0], [40.4, 1211.0], [40.5, 1212.0], [40.6, 1213.0], [40.7, 1215.0], [40.8, 1216.0], [40.9, 1218.0], [41.0, 1220.0], [41.1, 1223.0], [41.2, 1225.0], [41.3, 1227.0], [41.4, 1228.0], [41.5, 1231.0], [41.6, 1232.0], [41.7, 1234.0], [41.8, 1235.0], [41.9, 1236.0], [42.0, 1237.0], [42.1, 1238.0], [42.2, 1240.0], [42.3, 1242.0], [42.4, 1243.0], [42.5, 1246.0], [42.6, 1247.0], [42.7, 1249.0], [42.8, 1251.0], [42.9, 1253.0], [43.0, 1255.0], [43.1, 1257.0], [43.2, 1259.0], [43.3, 1260.0], [43.4, 1262.0], [43.5, 1265.0], [43.6, 1268.0], [43.7, 1269.0], [43.8, 1271.0], [43.9, 1273.0], [44.0, 1274.0], [44.1, 1276.0], [44.2, 1277.0], [44.3, 1279.0], [44.4, 1282.0], [44.5, 1284.0], [44.6, 1285.0], [44.7, 1288.0], [44.8, 1290.0], [44.9, 1291.0], [45.0, 1293.0], [45.1, 1295.0], [45.2, 1297.0], [45.3, 1300.0], [45.4, 1301.0], [45.5, 1304.0], [45.6, 1305.0], [45.7, 1307.0], [45.8, 1309.0], [45.9, 1310.0], [46.0, 1312.0], [46.1, 1313.0], [46.2, 1315.0], [46.3, 1316.0], [46.4, 1318.0], [46.5, 1319.0], [46.6, 1322.0], [46.7, 1324.0], [46.8, 1325.0], [46.9, 1327.0], [47.0, 1328.0], [47.1, 1330.0], [47.2, 1332.0], [47.3, 1334.0], [47.4, 1335.0], [47.5, 1337.0], [47.6, 1339.0], [47.7, 1340.0], [47.8, 1341.0], [47.9, 1343.0], [48.0, 1345.0], [48.1, 1348.0], [48.2, 1350.0], [48.3, 1352.0], [48.4, 1354.0], [48.5, 1356.0], [48.6, 1358.0], [48.7, 1360.0], [48.8, 1362.0], [48.9, 1364.0], [49.0, 1365.0], [49.1, 1366.0], [49.2, 1368.0], [49.3, 1369.0], [49.4, 1371.0], [49.5, 1373.0], [49.6, 1375.0], [49.7, 1378.0], [49.8, 1379.0], [49.9, 1382.0], [50.0, 1384.0], [50.1, 1387.0], [50.2, 1388.0], [50.3, 1391.0], [50.4, 1392.0], [50.5, 1394.0], [50.6, 1397.0], [50.7, 1399.0], [50.8, 1402.0], [50.9, 1403.0], [51.0, 1405.0], [51.1, 1408.0], [51.2, 1410.0], [51.3, 1414.0], [51.4, 1417.0], [51.5, 1419.0], [51.6, 1420.0], [51.7, 1423.0], [51.8, 1426.0], [51.9, 1427.0], [52.0, 1429.0], [52.1, 1432.0], [52.2, 1433.0], [52.3, 1435.0], [52.4, 1437.0], [52.5, 1439.0], [52.6, 1441.0], [52.7, 1443.0], [52.8, 1444.0], [52.9, 1446.0], [53.0, 1449.0], [53.1, 1451.0], [53.2, 1452.0], [53.3, 1454.0], [53.4, 1455.0], [53.5, 1457.0], [53.6, 1458.0], [53.7, 1460.0], [53.8, 1462.0], [53.9, 1466.0], [54.0, 1467.0], [54.1, 1470.0], [54.2, 1472.0], [54.3, 1474.0], [54.4, 1476.0], [54.5, 1477.0], [54.6, 1480.0], [54.7, 1482.0], [54.8, 1483.0], [54.9, 1486.0], [55.0, 1488.0], [55.1, 1490.0], [55.2, 1493.0], [55.3, 1496.0], [55.4, 1498.0], [55.5, 1499.0], [55.6, 1501.0], [55.7, 1503.0], [55.8, 1504.0], [55.9, 1506.0], [56.0, 1507.0], [56.1, 1510.0], [56.2, 1511.0], [56.3, 1513.0], [56.4, 1516.0], [56.5, 1520.0], [56.6, 1522.0], [56.7, 1525.0], [56.8, 1528.0], [56.9, 1529.0], [57.0, 1532.0], [57.1, 1534.0], [57.2, 1537.0], [57.3, 1539.0], [57.4, 1541.0], [57.5, 1543.0], [57.6, 1547.0], [57.7, 1549.0], [57.8, 1552.0], [57.9, 1555.0], [58.0, 1557.0], [58.1, 1558.0], [58.2, 1561.0], [58.3, 1563.0], [58.4, 1565.0], [58.5, 1568.0], [58.6, 1570.0], [58.7, 1574.0], [58.8, 1577.0], [58.9, 1579.0], [59.0, 1582.0], [59.1, 1583.0], [59.2, 1586.0], [59.3, 1588.0], [59.4, 1589.0], [59.5, 1591.0], [59.6, 1593.0], [59.7, 1596.0], [59.8, 1598.0], [59.9, 1601.0], [60.0, 1604.0], [60.1, 1606.0], [60.2, 1609.0], [60.3, 1611.0], [60.4, 1615.0], [60.5, 1618.0], [60.6, 1621.0], [60.7, 1625.0], [60.8, 1628.0], [60.9, 1631.0], [61.0, 1632.0], [61.1, 1636.0], [61.2, 1638.0], [61.3, 1643.0], [61.4, 1645.0], [61.5, 1648.0], [61.6, 1650.0], [61.7, 1653.0], [61.8, 1657.0], [61.9, 1659.0], [62.0, 1662.0], [62.1, 1664.0], [62.2, 1666.0], [62.3, 1670.0], [62.4, 1672.0], [62.5, 1673.0], [62.6, 1675.0], [62.7, 1678.0], [62.8, 1681.0], [62.9, 1683.0], [63.0, 1685.0], [63.1, 1689.0], [63.2, 1692.0], [63.3, 1694.0], [63.4, 1695.0], [63.5, 1697.0], [63.6, 1699.0], [63.7, 1702.0], [63.8, 1705.0], [63.9, 1707.0], [64.0, 1710.0], [64.1, 1712.0], [64.2, 1713.0], [64.3, 1715.0], [64.4, 1718.0], [64.5, 1721.0], [64.6, 1724.0], [64.7, 1727.0], [64.8, 1730.0], [64.9, 1733.0], [65.0, 1737.0], [65.1, 1740.0], [65.2, 1741.0], [65.3, 1744.0], [65.4, 1747.0], [65.5, 1750.0], [65.6, 1753.0], [65.7, 1755.0], [65.8, 1757.0], [65.9, 1759.0], [66.0, 1761.0], [66.1, 1763.0], [66.2, 1766.0], [66.3, 1768.0], [66.4, 1770.0], [66.5, 1772.0], [66.6, 1775.0], [66.7, 1777.0], [66.8, 1780.0], [66.9, 1782.0], [67.0, 1784.0], [67.1, 1787.0], [67.2, 1789.0], [67.3, 1790.0], [67.4, 1793.0], [67.5, 1795.0], [67.6, 1798.0], [67.7, 1800.0], [67.8, 1803.0], [67.9, 1805.0], [68.0, 1807.0], [68.1, 1810.0], [68.2, 1812.0], [68.3, 1815.0], [68.4, 1816.0], [68.5, 1820.0], [68.6, 1823.0], [68.7, 1826.0], [68.8, 1829.0], [68.9, 1832.0], [69.0, 1835.0], [69.1, 1837.0], [69.2, 1840.0], [69.3, 1843.0], [69.4, 1845.0], [69.5, 1847.0], [69.6, 1852.0], [69.7, 1855.0], [69.8, 1858.0], [69.9, 1861.0], [70.0, 1866.0], [70.1, 1867.0], [70.2, 1870.0], [70.3, 1873.0], [70.4, 1876.0], [70.5, 1878.0], [70.6, 1883.0], [70.7, 1883.0], [70.8, 1887.0], [70.9, 1889.0], [71.0, 1891.0], [71.1, 1894.0], [71.2, 1896.0], [71.3, 1899.0], [71.4, 1903.0], [71.5, 1905.0], [71.6, 1910.0], [71.7, 1913.0], [71.8, 1916.0], [71.9, 1918.0], [72.0, 1921.0], [72.1, 1925.0], [72.2, 1928.0], [72.3, 1931.0], [72.4, 1933.0], [72.5, 1936.0], [72.6, 1939.0], [72.7, 1942.0], [72.8, 1946.0], [72.9, 1950.0], [73.0, 1953.0], [73.1, 1956.0], [73.2, 1959.0], [73.3, 1962.0], [73.4, 1966.0], [73.5, 1969.0], [73.6, 1971.0], [73.7, 1974.0], [73.8, 1977.0], [73.9, 1979.0], [74.0, 1980.0], [74.1, 1984.0], [74.2, 1986.0], [74.3, 1988.0], [74.4, 1991.0], [74.5, 1994.0], [74.6, 1996.0], [74.7, 1999.0], [74.8, 2003.0], [74.9, 2007.0], [75.0, 2009.0], [75.1, 2014.0], [75.2, 2019.0], [75.3, 2021.0], [75.4, 2024.0], [75.5, 2026.0], [75.6, 2028.0], [75.7, 2031.0], [75.8, 2034.0], [75.9, 2038.0], [76.0, 2042.0], [76.1, 2047.0], [76.2, 2050.0], [76.3, 2054.0], [76.4, 2057.0], [76.5, 2061.0], [76.6, 2064.0], [76.7, 2067.0], [76.8, 2070.0], [76.9, 2075.0], [77.0, 2077.0], [77.1, 2082.0], [77.2, 2088.0], [77.3, 2091.0], [77.4, 2096.0], [77.5, 2099.0], [77.6, 2102.0], [77.7, 2104.0], [77.8, 2107.0], [77.9, 2111.0], [78.0, 2118.0], [78.1, 2122.0], [78.2, 2127.0], [78.3, 2132.0], [78.4, 2136.0], [78.5, 2140.0], [78.6, 2142.0], [78.7, 2145.0], [78.8, 2149.0], [78.9, 2153.0], [79.0, 2157.0], [79.1, 2160.0], [79.2, 2164.0], [79.3, 2170.0], [79.4, 2174.0], [79.5, 2179.0], [79.6, 2182.0], [79.7, 2185.0], [79.8, 2188.0], [79.9, 2192.0], [80.0, 2197.0], [80.1, 2199.0], [80.2, 2202.0], [80.3, 2204.0], [80.4, 2208.0], [80.5, 2213.0], [80.6, 2215.0], [80.7, 2219.0], [80.8, 2224.0], [80.9, 2229.0], [81.0, 2234.0], [81.1, 2238.0], [81.2, 2242.0], [81.3, 2246.0], [81.4, 2249.0], [81.5, 2253.0], [81.6, 2256.0], [81.7, 2262.0], [81.8, 2266.0], [81.9, 2269.0], [82.0, 2273.0], [82.1, 2276.0], [82.2, 2280.0], [82.3, 2284.0], [82.4, 2289.0], [82.5, 2292.0], [82.6, 2298.0], [82.7, 2303.0], [82.8, 2306.0], [82.9, 2312.0], [83.0, 2317.0], [83.1, 2320.0], [83.2, 2326.0], [83.3, 2330.0], [83.4, 2335.0], [83.5, 2338.0], [83.6, 2343.0], [83.7, 2349.0], [83.8, 2355.0], [83.9, 2360.0], [84.0, 2367.0], [84.1, 2373.0], [84.2, 2377.0], [84.3, 2382.0], [84.4, 2387.0], [84.5, 2393.0], [84.6, 2399.0], [84.7, 2404.0], [84.8, 2413.0], [84.9, 2417.0], [85.0, 2423.0], [85.1, 2432.0], [85.2, 2436.0], [85.3, 2440.0], [85.4, 2450.0], [85.5, 2455.0], [85.6, 2459.0], [85.7, 2463.0], [85.8, 2471.0], [85.9, 2477.0], [86.0, 2484.0], [86.1, 2490.0], [86.2, 2493.0], [86.3, 2499.0], [86.4, 2503.0], [86.5, 2508.0], [86.6, 2514.0], [86.7, 2520.0], [86.8, 2525.0], [86.9, 2533.0], [87.0, 2539.0], [87.1, 2548.0], [87.2, 2555.0], [87.3, 2559.0], [87.4, 2564.0], [87.5, 2572.0], [87.6, 2576.0], [87.7, 2583.0], [87.8, 2587.0], [87.9, 2593.0], [88.0, 2599.0], [88.1, 2604.0], [88.2, 2610.0], [88.3, 2616.0], [88.4, 2622.0], [88.5, 2631.0], [88.6, 2638.0], [88.7, 2643.0], [88.8, 2655.0], [88.9, 2663.0], [89.0, 2671.0], [89.1, 2679.0], [89.2, 2684.0], [89.3, 2694.0], [89.4, 2704.0], [89.5, 2711.0], [89.6, 2719.0], [89.7, 2724.0], [89.8, 2736.0], [89.9, 2742.0], [90.0, 2755.0], [90.1, 2760.0], [90.2, 2767.0], [90.3, 2775.0], [90.4, 2780.0], [90.5, 2787.0], [90.6, 2795.0], [90.7, 2804.0], [90.8, 2813.0], [90.9, 2819.0], [91.0, 2829.0], [91.1, 2836.0], [91.2, 2846.0], [91.3, 2853.0], [91.4, 2861.0], [91.5, 2871.0], [91.6, 2877.0], [91.7, 2887.0], [91.8, 2901.0], [91.9, 2917.0], [92.0, 2926.0], [92.1, 2934.0], [92.2, 2945.0], [92.3, 2955.0], [92.4, 2969.0], [92.5, 2978.0], [92.6, 2984.0], [92.7, 2995.0], [92.8, 3006.0], [92.9, 3013.0], [93.0, 3023.0], [93.1, 3044.0], [93.2, 3055.0], [93.3, 3062.0], [93.4, 3079.0], [93.5, 3088.0], [93.6, 3096.0], [93.7, 3111.0], [93.8, 3126.0], [93.9, 3137.0], [94.0, 3159.0], [94.1, 3172.0], [94.2, 3188.0], [94.3, 3198.0], [94.4, 3214.0], [94.5, 3229.0], [94.6, 3252.0], [94.7, 3264.0], [94.8, 3285.0], [94.9, 3302.0], [95.0, 3318.0], [95.1, 3339.0], [95.2, 3357.0], [95.3, 3372.0], [95.4, 3388.0], [95.5, 3417.0], [95.6, 3432.0], [95.7, 3443.0], [95.8, 3458.0], [95.9, 3477.0], [96.0, 3493.0], [96.1, 3519.0], [96.2, 3535.0], [96.3, 3556.0], [96.4, 3575.0], [96.5, 3608.0], [96.6, 3632.0], [96.7, 3658.0], [96.8, 3684.0], [96.9, 3715.0], [97.0, 3740.0], [97.1, 3763.0], [97.2, 3784.0], [97.3, 3826.0], [97.4, 3870.0], [97.5, 3909.0], [97.6, 3934.0], [97.7, 3974.0], [97.8, 4004.0], [97.9, 4046.0], [98.0, 4075.0], [98.1, 4107.0], [98.2, 4144.0], [98.3, 4182.0], [98.4, 4244.0], [98.5, 4287.0], [98.6, 4330.0], [98.7, 4381.0], [98.8, 4423.0], [98.9, 4466.0], [99.0, 4509.0], [99.1, 4554.0], [99.2, 4614.0], [99.3, 4677.0], [99.4, 4738.0], [99.5, 4853.0], [99.6, 5076.0], [99.7, 5256.0], [99.8, 5467.0], [99.9, 6048.0], [100.0, 8528.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 27.0], [0.1, 28.0], [0.2, 29.0], [0.3, 29.0], [0.4, 30.0], [0.5, 34.0], [0.6, 35.0], [0.7, 35.0], [0.8, 36.0], [0.9, 36.0], [1.0, 36.0], [1.1, 36.0], [1.2, 36.0], [1.3, 36.0], [1.4, 36.0], [1.5, 36.0], [1.6, 36.0], [1.7, 37.0], [1.8, 37.0], [1.9, 37.0], [2.0, 37.0], [2.1, 37.0], [2.2, 37.0], [2.3, 37.0], [2.4, 37.0], [2.5, 37.0], [2.6, 37.0], [2.7, 37.0], [2.8, 37.0], [2.9, 37.0], [3.0, 37.0], [3.1, 37.0], [3.2, 37.0], [3.3, 37.0], [3.4, 37.0], [3.5, 37.0], [3.6, 37.0], [3.7, 37.0], [3.8, 37.0], [3.9, 37.0], [4.0, 37.0], [4.1, 37.0], [4.2, 37.0], [4.3, 38.0], [4.4, 38.0], [4.5, 38.0], [4.6, 38.0], [4.7, 38.0], [4.8, 38.0], [4.9, 38.0], [5.0, 38.0], [5.1, 38.0], [5.2, 38.0], [5.3, 38.0], [5.4, 38.0], [5.5, 38.0], [5.6, 38.0], [5.7, 38.0], [5.8, 38.0], [5.9, 38.0], [6.0, 38.0], [6.1, 38.0], [6.2, 38.0], [6.3, 38.0], [6.4, 38.0], [6.5, 38.0], [6.6, 38.0], [6.7, 38.0], [6.8, 38.0], [6.9, 38.0], [7.0, 38.0], [7.1, 38.0], [7.2, 38.0], [7.3, 38.0], [7.4, 38.0], [7.5, 38.0], [7.6, 38.0], [7.7, 38.0], [7.8, 38.0], [7.9, 38.0], [8.0, 38.0], [8.1, 38.0], [8.2, 38.0], [8.3, 38.0], [8.4, 38.0], [8.5, 38.0], [8.6, 39.0], [8.7, 39.0], [8.8, 39.0], [8.9, 39.0], [9.0, 39.0], [9.1, 39.0], [9.2, 39.0], [9.3, 39.0], [9.4, 39.0], [9.5, 39.0], [9.6, 39.0], [9.7, 39.0], [9.8, 39.0], [9.9, 39.0], [10.0, 39.0], [10.1, 39.0], [10.2, 39.0], [10.3, 39.0], [10.4, 39.0], [10.5, 39.0], [10.6, 39.0], [10.7, 39.0], [10.8, 39.0], [10.9, 39.0], [11.0, 39.0], [11.1, 39.0], [11.2, 39.0], [11.3, 39.0], [11.4, 39.0], [11.5, 39.0], [11.6, 39.0], [11.7, 39.0], [11.8, 39.0], [11.9, 39.0], [12.0, 39.0], [12.1, 39.0], [12.2, 39.0], [12.3, 39.0], [12.4, 39.0], [12.5, 39.0], [12.6, 39.0], [12.7, 39.0], [12.8, 39.0], [12.9, 39.0], [13.0, 39.0], [13.1, 39.0], [13.2, 39.0], [13.3, 39.0], [13.4, 39.0], [13.5, 39.0], [13.6, 39.0], [13.7, 39.0], [13.8, 39.0], [13.9, 40.0], [14.0, 40.0], [14.1, 40.0], [14.2, 40.0], [14.3, 40.0], [14.4, 40.0], [14.5, 40.0], [14.6, 40.0], [14.7, 40.0], [14.8, 40.0], [14.9, 40.0], [15.0, 40.0], [15.1, 40.0], [15.2, 40.0], [15.3, 40.0], [15.4, 40.0], [15.5, 40.0], [15.6, 40.0], [15.7, 40.0], [15.8, 40.0], [15.9, 40.0], [16.0, 40.0], [16.1, 40.0], [16.2, 40.0], [16.3, 40.0], [16.4, 40.0], [16.5, 40.0], [16.6, 40.0], [16.7, 40.0], [16.8, 40.0], [16.9, 40.0], [17.0, 40.0], [17.1, 40.0], [17.2, 40.0], [17.3, 40.0], [17.4, 40.0], [17.5, 40.0], [17.6, 40.0], [17.7, 40.0], [17.8, 40.0], [17.9, 40.0], [18.0, 40.0], [18.1, 40.0], [18.2, 40.0], [18.3, 40.0], [18.4, 40.0], [18.5, 40.0], [18.6, 40.0], [18.7, 40.0], [18.8, 40.0], [18.9, 40.0], [19.0, 40.0], [19.1, 40.0], [19.2, 40.0], [19.3, 40.0], [19.4, 40.0], [19.5, 40.0], [19.6, 40.0], [19.7, 40.0], [19.8, 40.0], [19.9, 40.0], [20.0, 40.0], [20.1, 40.0], [20.2, 40.0], [20.3, 40.0], [20.4, 40.0], [20.5, 40.0], [20.6, 40.0], [20.7, 40.0], [20.8, 40.0], [20.9, 40.0], [21.0, 40.0], [21.1, 40.0], [21.2, 40.0], [21.3, 40.0], [21.4, 40.0], [21.5, 40.0], [21.6, 41.0], [21.7, 41.0], [21.8, 41.0], [21.9, 41.0], [22.0, 41.0], [22.1, 41.0], [22.2, 41.0], [22.3, 41.0], [22.4, 41.0], [22.5, 41.0], [22.6, 41.0], [22.7, 41.0], [22.8, 41.0], [22.9, 41.0], [23.0, 41.0], [23.1, 41.0], [23.2, 41.0], [23.3, 41.0], [23.4, 41.0], [23.5, 41.0], [23.6, 41.0], [23.7, 41.0], [23.8, 41.0], [23.9, 41.0], [24.0, 41.0], [24.1, 41.0], [24.2, 41.0], [24.3, 41.0], [24.4, 41.0], [24.5, 41.0], [24.6, 41.0], [24.7, 41.0], [24.8, 41.0], [24.9, 41.0], [25.0, 41.0], [25.1, 41.0], [25.2, 41.0], [25.3, 41.0], [25.4, 41.0], [25.5, 41.0], [25.6, 41.0], [25.7, 41.0], [25.8, 41.0], [25.9, 41.0], [26.0, 41.0], [26.1, 41.0], [26.2, 41.0], [26.3, 41.0], [26.4, 41.0], [26.5, 41.0], [26.6, 41.0], [26.7, 41.0], [26.8, 41.0], [26.9, 41.0], [27.0, 41.0], [27.1, 41.0], [27.2, 41.0], [27.3, 41.0], [27.4, 41.0], [27.5, 41.0], [27.6, 41.0], [27.7, 41.0], [27.8, 41.0], [27.9, 41.0], [28.0, 41.0], [28.1, 41.0], [28.2, 41.0], [28.3, 41.0], [28.4, 41.0], [28.5, 41.0], [28.6, 41.0], [28.7, 41.0], [28.8, 41.0], [28.9, 41.0], [29.0, 41.0], [29.1, 41.0], [29.2, 41.0], [29.3, 41.0], [29.4, 41.0], [29.5, 41.0], [29.6, 41.0], [29.7, 41.0], [29.8, 41.0], [29.9, 41.0], [30.0, 41.0], [30.1, 41.0], [30.2, 41.0], [30.3, 41.0], [30.4, 41.0], [30.5, 41.0], [30.6, 41.0], [30.7, 41.0], [30.8, 41.0], [30.9, 41.0], [31.0, 42.0], [31.1, 42.0], [31.2, 42.0], [31.3, 42.0], [31.4, 42.0], [31.5, 42.0], [31.6, 42.0], [31.7, 42.0], [31.8, 42.0], [31.9, 42.0], [32.0, 42.0], [32.1, 42.0], [32.2, 42.0], [32.3, 42.0], [32.4, 42.0], [32.5, 42.0], [32.6, 42.0], [32.7, 42.0], [32.8, 42.0], [32.9, 42.0], [33.0, 42.0], [33.1, 42.0], [33.2, 42.0], [33.3, 42.0], [33.4, 42.0], [33.5, 42.0], [33.6, 42.0], [33.7, 42.0], [33.8, 42.0], [33.9, 42.0], [34.0, 42.0], [34.1, 42.0], [34.2, 42.0], [34.3, 42.0], [34.4, 42.0], [34.5, 42.0], [34.6, 42.0], [34.7, 42.0], [34.8, 42.0], [34.9, 42.0], [35.0, 42.0], [35.1, 42.0], [35.2, 42.0], [35.3, 42.0], [35.4, 42.0], [35.5, 42.0], [35.6, 42.0], [35.7, 42.0], [35.8, 42.0], [35.9, 42.0], [36.0, 42.0], [36.1, 42.0], [36.2, 42.0], [36.3, 42.0], [36.4, 42.0], [36.5, 42.0], [36.6, 42.0], [36.7, 42.0], [36.8, 42.0], [36.9, 42.0], [37.0, 42.0], [37.1, 42.0], [37.2, 42.0], [37.3, 42.0], [37.4, 42.0], [37.5, 42.0], [37.6, 42.0], [37.7, 42.0], [37.8, 42.0], [37.9, 42.0], [38.0, 42.0], [38.1, 42.0], [38.2, 42.0], [38.3, 42.0], [38.4, 42.0], [38.5, 42.0], [38.6, 42.0], [38.7, 42.0], [38.8, 42.0], [38.9, 42.0], [39.0, 42.0], [39.1, 42.0], [39.2, 42.0], [39.3, 42.0], [39.4, 42.0], [39.5, 42.0], [39.6, 42.0], [39.7, 42.0], [39.8, 42.0], [39.9, 42.0], [40.0, 42.0], [40.1, 42.0], [40.2, 42.0], [40.3, 42.0], [40.4, 42.0], [40.5, 42.0], [40.6, 42.0], [40.7, 42.0], [40.8, 42.0], [40.9, 42.0], [41.0, 42.0], [41.1, 42.0], [41.2, 42.0], [41.3, 42.0], [41.4, 42.0], [41.5, 42.0], [41.6, 42.0], [41.7, 42.0], [41.8, 42.0], [41.9, 42.0], [42.0, 42.0], [42.1, 42.0], [42.2, 42.0], [42.3, 42.0], [42.4, 42.0], [42.5, 42.0], [42.6, 43.0], [42.7, 43.0], [42.8, 43.0], [42.9, 43.0], [43.0, 43.0], [43.1, 43.0], [43.2, 43.0], [43.3, 43.0], [43.4, 43.0], [43.5, 43.0], [43.6, 43.0], [43.7, 43.0], [43.8, 43.0], [43.9, 43.0], [44.0, 43.0], [44.1, 43.0], [44.2, 43.0], [44.3, 43.0], [44.4, 43.0], [44.5, 43.0], [44.6, 43.0], [44.7, 43.0], [44.8, 43.0], [44.9, 43.0], [45.0, 43.0], [45.1, 43.0], [45.2, 43.0], [45.3, 43.0], [45.4, 43.0], [45.5, 43.0], [45.6, 43.0], [45.7, 43.0], [45.8, 43.0], [45.9, 43.0], [46.0, 43.0], [46.1, 43.0], [46.2, 43.0], [46.3, 43.0], [46.4, 43.0], [46.5, 43.0], [46.6, 43.0], [46.7, 43.0], [46.8, 43.0], [46.9, 43.0], [47.0, 43.0], [47.1, 43.0], [47.2, 43.0], [47.3, 43.0], [47.4, 43.0], [47.5, 43.0], [47.6, 43.0], [47.7, 43.0], [47.8, 43.0], [47.9, 43.0], [48.0, 43.0], [48.1, 43.0], [48.2, 43.0], [48.3, 43.0], [48.4, 43.0], [48.5, 43.0], [48.6, 43.0], [48.7, 43.0], [48.8, 43.0], [48.9, 43.0], [49.0, 43.0], [49.1, 43.0], [49.2, 43.0], [49.3, 43.0], [49.4, 43.0], [49.5, 43.0], [49.6, 43.0], [49.7, 43.0], [49.8, 43.0], [49.9, 43.0], [50.0, 43.0], [50.1, 43.0], [50.2, 43.0], [50.3, 43.0], [50.4, 43.0], [50.5, 43.0], [50.6, 43.0], [50.7, 43.0], [50.8, 43.0], [50.9, 43.0], [51.0, 43.0], [51.1, 43.0], [51.2, 43.0], [51.3, 43.0], [51.4, 43.0], [51.5, 43.0], [51.6, 43.0], [51.7, 43.0], [51.8, 43.0], [51.9, 43.0], [52.0, 43.0], [52.1, 43.0], [52.2, 43.0], [52.3, 43.0], [52.4, 43.0], [52.5, 43.0], [52.6, 43.0], [52.7, 43.0], [52.8, 43.0], [52.9, 43.0], [53.0, 43.0], [53.1, 43.0], [53.2, 43.0], [53.3, 43.0], [53.4, 43.0], [53.5, 43.0], [53.6, 43.0], [53.7, 43.0], [53.8, 43.0], [53.9, 43.0], [54.0, 43.0], [54.1, 43.0], [54.2, 43.0], [54.3, 43.0], [54.4, 43.0], [54.5, 43.0], [54.6, 43.0], [54.7, 43.0], [54.8, 44.0], [54.9, 44.0], [55.0, 44.0], [55.1, 44.0], [55.2, 44.0], [55.3, 44.0], [55.4, 44.0], [55.5, 44.0], [55.6, 44.0], [55.7, 44.0], [55.8, 44.0], [55.9, 44.0], [56.0, 44.0], [56.1, 44.0], [56.2, 44.0], [56.3, 44.0], [56.4, 44.0], [56.5, 44.0], [56.6, 44.0], [56.7, 44.0], [56.8, 44.0], [56.9, 44.0], [57.0, 44.0], [57.1, 44.0], [57.2, 44.0], [57.3, 44.0], [57.4, 44.0], [57.5, 44.0], [57.6, 44.0], [57.7, 44.0], [57.8, 44.0], [57.9, 44.0], [58.0, 44.0], [58.1, 44.0], [58.2, 44.0], [58.3, 44.0], [58.4, 44.0], [58.5, 44.0], [58.6, 44.0], [58.7, 44.0], [58.8, 44.0], [58.9, 44.0], [59.0, 44.0], [59.1, 44.0], [59.2, 44.0], [59.3, 44.0], [59.4, 44.0], [59.5, 44.0], [59.6, 44.0], [59.7, 44.0], [59.8, 44.0], [59.9, 44.0], [60.0, 44.0], [60.1, 44.0], [60.2, 44.0], [60.3, 44.0], [60.4, 44.0], [60.5, 44.0], [60.6, 44.0], [60.7, 44.0], [60.8, 44.0], [60.9, 44.0], [61.0, 44.0], [61.1, 44.0], [61.2, 44.0], [61.3, 44.0], [61.4, 44.0], [61.5, 44.0], [61.6, 44.0], [61.7, 44.0], [61.8, 44.0], [61.9, 44.0], [62.0, 44.0], [62.1, 44.0], [62.2, 44.0], [62.3, 44.0], [62.4, 44.0], [62.5, 44.0], [62.6, 44.0], [62.7, 44.0], [62.8, 44.0], [62.9, 44.0], [63.0, 44.0], [63.1, 44.0], [63.2, 44.0], [63.3, 44.0], [63.4, 44.0], [63.5, 44.0], [63.6, 44.0], [63.7, 44.0], [63.8, 44.0], [63.9, 44.0], [64.0, 44.0], [64.1, 44.0], [64.2, 44.0], [64.3, 44.0], [64.4, 44.0], [64.5, 44.0], [64.6, 44.0], [64.7, 44.0], [64.8, 44.0], [64.9, 44.0], [65.0, 44.0], [65.1, 44.0], [65.2, 44.0], [65.3, 44.0], [65.4, 44.0], [65.5, 44.0], [65.6, 44.0], [65.7, 44.0], [65.8, 44.0], [65.9, 44.0], [66.0, 44.0], [66.1, 44.0], [66.2, 44.0], [66.3, 44.0], [66.4, 44.0], [66.5, 45.0], [66.6, 45.0], [66.7, 45.0], [66.8, 45.0], [66.9, 45.0], [67.0, 45.0], [67.1, 45.0], [67.2, 45.0], [67.3, 45.0], [67.4, 45.0], [67.5, 45.0], [67.6, 45.0], [67.7, 45.0], [67.8, 45.0], [67.9, 45.0], [68.0, 45.0], [68.1, 45.0], [68.2, 45.0], [68.3, 45.0], [68.4, 45.0], [68.5, 45.0], [68.6, 45.0], [68.7, 45.0], [68.8, 45.0], [68.9, 45.0], [69.0, 45.0], [69.1, 45.0], [69.2, 45.0], [69.3, 45.0], [69.4, 45.0], [69.5, 45.0], [69.6, 45.0], [69.7, 45.0], [69.8, 45.0], [69.9, 45.0], [70.0, 45.0], [70.1, 45.0], [70.2, 45.0], [70.3, 45.0], [70.4, 45.0], [70.5, 45.0], [70.6, 45.0], [70.7, 45.0], [70.8, 45.0], [70.9, 45.0], [71.0, 45.0], [71.1, 45.0], [71.2, 45.0], [71.3, 45.0], [71.4, 45.0], [71.5, 45.0], [71.6, 45.0], [71.7, 45.0], [71.8, 45.0], [71.9, 45.0], [72.0, 45.0], [72.1, 45.0], [72.2, 45.0], [72.3, 45.0], [72.4, 45.0], [72.5, 45.0], [72.6, 45.0], [72.7, 45.0], [72.8, 45.0], [72.9, 45.0], [73.0, 45.0], [73.1, 45.0], [73.2, 45.0], [73.3, 45.0], [73.4, 45.0], [73.5, 45.0], [73.6, 46.0], [73.7, 46.0], [73.8, 46.0], [73.9, 46.0], [74.0, 46.0], [74.1, 46.0], [74.2, 46.0], [74.3, 46.0], [74.4, 46.0], [74.5, 46.0], [74.6, 46.0], [74.7, 46.0], [74.8, 46.0], [74.9, 46.0], [75.0, 46.0], [75.1, 46.0], [75.2, 46.0], [75.3, 46.0], [75.4, 46.0], [75.5, 46.0], [75.6, 46.0], [75.7, 46.0], [75.8, 46.0], [75.9, 46.0], [76.0, 46.0], [76.1, 46.0], [76.2, 46.0], [76.3, 46.0], [76.4, 46.0], [76.5, 46.0], [76.6, 46.0], [76.7, 46.0], [76.8, 46.0], [76.9, 46.0], [77.0, 46.0], [77.1, 46.0], [77.2, 46.0], [77.3, 46.0], [77.4, 46.0], [77.5, 46.0], [77.6, 46.0], [77.7, 47.0], [77.8, 47.0], [77.9, 47.0], [78.0, 47.0], [78.1, 47.0], [78.2, 47.0], [78.3, 47.0], [78.4, 47.0], [78.5, 47.0], [78.6, 47.0], [78.7, 47.0], [78.8, 47.0], [78.9, 47.0], [79.0, 47.0], [79.1, 47.0], [79.2, 47.0], [79.3, 47.0], [79.4, 47.0], [79.5, 47.0], [79.6, 47.0], [79.7, 47.0], [79.8, 47.0], [79.9, 47.0], [80.0, 47.0], [80.1, 47.0], [80.2, 47.0], [80.3, 47.0], [80.4, 47.0], [80.5, 47.0], [80.6, 47.0], [80.7, 47.0], [80.8, 48.0], [80.9, 48.0], [81.0, 48.0], [81.1, 48.0], [81.2, 48.0], [81.3, 48.0], [81.4, 48.0], [81.5, 48.0], [81.6, 48.0], [81.7, 48.0], [81.8, 48.0], [81.9, 48.0], [82.0, 48.0], [82.1, 48.0], [82.2, 48.0], [82.3, 48.0], [82.4, 48.0], [82.5, 48.0], [82.6, 48.0], [82.7, 48.0], [82.8, 48.0], [82.9, 48.0], [83.0, 48.0], [83.1, 48.0], [83.2, 48.0], [83.3, 49.0], [83.4, 49.0], [83.5, 49.0], [83.6, 49.0], [83.7, 49.0], [83.8, 49.0], [83.9, 49.0], [84.0, 49.0], [84.1, 49.0], [84.2, 49.0], [84.3, 49.0], [84.4, 49.0], [84.5, 49.0], [84.6, 49.0], [84.7, 49.0], [84.8, 49.0], [84.9, 49.0], [85.0, 49.0], [85.1, 50.0], [85.2, 50.0], [85.3, 50.0], [85.4, 50.0], [85.5, 50.0], [85.6, 50.0], [85.7, 50.0], [85.8, 50.0], [85.9, 50.0], [86.0, 50.0], [86.1, 50.0], [86.2, 50.0], [86.3, 50.0], [86.4, 50.0], [86.5, 51.0], [86.6, 51.0], [86.7, 51.0], [86.8, 51.0], [86.9, 51.0], [87.0, 51.0], [87.1, 51.0], [87.2, 51.0], [87.3, 51.0], [87.4, 51.0], [87.5, 51.0], [87.6, 51.0], [87.7, 51.0], [87.8, 52.0], [87.9, 52.0], [88.0, 52.0], [88.1, 52.0], [88.2, 52.0], [88.3, 52.0], [88.4, 52.0], [88.5, 52.0], [88.6, 52.0], [88.7, 53.0], [88.8, 53.0], [88.9, 53.0], [89.0, 53.0], [89.1, 53.0], [89.2, 53.0], [89.3, 53.0], [89.4, 53.0], [89.5, 53.0], [89.6, 54.0], [89.7, 54.0], [89.8, 54.0], [89.9, 54.0], [90.0, 54.0], [90.1, 54.0], [90.2, 54.0], [90.3, 55.0], [90.4, 55.0], [90.5, 55.0], [90.6, 55.0], [90.7, 55.0], [90.8, 55.0], [90.9, 55.0], [91.0, 56.0], [91.1, 56.0], [91.2, 56.0], [91.3, 56.0], [91.4, 56.0], [91.5, 56.0], [91.6, 56.0], [91.7, 57.0], [91.8, 57.0], [91.9, 57.0], [92.0, 57.0], [92.1, 57.0], [92.2, 57.0], [92.3, 58.0], [92.4, 58.0], [92.5, 58.0], [92.6, 58.0], [92.7, 58.0], [92.8, 59.0], [92.9, 59.0], [93.0, 59.0], [93.1, 59.0], [93.2, 59.0], [93.3, 60.0], [93.4, 60.0], [93.5, 60.0], [93.6, 60.0], [93.7, 60.0], [93.8, 61.0], [93.9, 61.0], [94.0, 61.0], [94.1, 61.0], [94.2, 62.0], [94.3, 62.0], [94.4, 62.0], [94.5, 62.0], [94.6, 63.0], [94.7, 63.0], [94.8, 63.0], [94.9, 64.0], [95.0, 64.0], [95.1, 64.0], [95.2, 65.0], [95.3, 65.0], [95.4, 65.0], [95.5, 66.0], [95.6, 66.0], [95.7, 67.0], [95.8, 67.0], [95.9, 67.0], [96.0, 68.0], [96.1, 68.0], [96.2, 69.0], [96.3, 69.0], [96.4, 70.0], [96.5, 70.0], [96.6, 71.0], [96.7, 72.0], [96.8, 72.0], [96.9, 73.0], [97.0, 74.0], [97.1, 75.0], [97.2, 76.0], [97.3, 77.0], [97.4, 78.0], [97.5, 79.0], [97.6, 80.0], [97.7, 81.0], [97.8, 83.0], [97.9, 84.0], [98.0, 85.0], [98.1, 87.0], [98.2, 89.0], [98.3, 90.0], [98.4, 91.0], [98.5, 93.0], [98.6, 97.0], [98.7, 100.0], [98.8, 102.0], [98.9, 106.0], [99.0, 108.0], [99.1, 115.0], [99.2, 120.0], [99.3, 125.0], [99.4, 132.0], [99.5, 152.0], [99.6, 203.0], [99.7, 743.0], [99.8, 1765.0], [99.9, 2001.0], [100.0, 3801.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 11844.0, "series": [{"data": [[600.0, 562.0], [700.0, 656.0], [800.0, 695.0], [900.0, 767.0], [1000.0, 706.0], [1100.0, 682.0], [1200.0, 671.0], [1300.0, 651.0], [1400.0, 575.0], [1500.0, 522.0], [1600.0, 450.0], [1700.0, 488.0], [1800.0, 440.0], [1900.0, 405.0], [2000.0, 336.0], [2100.0, 314.0], [2200.0, 301.0], [2300.0, 235.0], [2400.0, 205.0], [2500.0, 205.0], [2600.0, 161.0], [2800.0, 135.0], [2700.0, 154.0], [2900.0, 119.0], [3000.0, 103.0], [3100.0, 82.0], [3300.0, 67.0], [3200.0, 70.0], [3400.0, 69.0], [3500.0, 55.0], [3700.0, 46.0], [3600.0, 46.0], [3800.0, 26.0], [3900.0, 40.0], [4000.0, 35.0], [4100.0, 30.0], [4300.0, 23.0], [4200.0, 23.0], [4400.0, 29.0], [4500.0, 27.0], [4600.0, 18.0], [4700.0, 14.0], [4800.0, 8.0], [5100.0, 6.0], [4900.0, 6.0], [5000.0, 6.0], [5200.0, 7.0], [5300.0, 8.0], [5600.0, 3.0], [5400.0, 3.0], [5800.0, 3.0], [5700.0, 2.0], [6000.0, 1.0], [6100.0, 2.0], [5900.0, 1.0], [6200.0, 1.0], [6500.0, 1.0], [6600.0, 2.0], [6400.0, 1.0], [7000.0, 2.0], [7500.0, 1.0], [8100.0, 1.0], [8500.0, 1.0], [100.0, 9.0], [200.0, 31.0], [300.0, 48.0], [400.0, 208.0], [500.0, 400.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 11844.0], [600.0, 2.0], [2500.0, 1.0], [700.0, 2.0], [2800.0, 1.0], [3300.0, 4.0], [3200.0, 1.0], [200.0, 7.0], [900.0, 2.0], [3700.0, 2.0], [3800.0, 1.0], [1000.0, 1.0], [1200.0, 1.0], [300.0, 2.0], [1300.0, 2.0], [1400.0, 1.0], [1500.0, 1.0], [1600.0, 2.0], [100.0, 107.0], [1700.0, 3.0], [1800.0, 3.0], [1900.0, 7.0], [2000.0, 3.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 12261.0, "series": [{"data": [[0.0, 12261.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 6381.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 5357.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 13.317105263157883, "minX": 1.74760596E12, "maxY": 24.0, "series": [{"data": [[1.7476062E12, 24.0], [1.7476065E12, 24.0], [1.7476068E12, 13.317105263157883], [1.74760614E12, 24.0], [1.74760644E12, 24.0], [1.74760674E12, 23.764672686230266], [1.74760608E12, 24.0], [1.74760638E12, 24.0], [1.74760668E12, 24.0], [1.74760602E12, 24.0], [1.74760632E12, 24.0], [1.74760662E12, 24.0], [1.74760596E12, 23.981029810298086], [1.74760626E12, 24.0], [1.74760656E12, 24.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7476068E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 28.0, "minX": 1.0, "maxY": 1613.8989616961842, "series": [{"data": [[8.0, 384.5], [2.0, 482.6666666666667], [9.0, 526.5454545454545], [10.0, 604.0], [11.0, 792.2068965517241], [12.0, 1085.0], [3.0, 410.8], [13.0, 976.5555555555553], [14.0, 840.3928571428571], [15.0, 938.7142857142858], [16.0, 1313.5882352941178], [4.0, 933.0], [1.0, 682.0], [17.0, 993.1874999999999], [18.0, 1297.125], [19.0, 1217.2666666666664], [20.0, 1414.9130434782605], [5.0, 394.49999999999994], [21.0, 1298.2372881355934], [22.0, 1588.4444444444443], [23.0, 1560.1794871794864], [24.0, 1613.8989616961842], [6.0, 578.8571428571427], [7.0, 525.3243243243242]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[23.64358333333337, 1591.2056666666656]], "isOverall": false, "label": "Create CSR-Aggregated", "isController": false}, {"data": [[8.0, 34.333333333333336], [2.0, 29.0], [9.0, 36.900000000000006], [10.0, 44.0], [11.0, 38.241379310344826], [12.0, 40.333333333333336], [3.0, 30.52], [13.0, 41.111111111111114], [14.0, 46.58620689655172], [15.0, 45.166666666666664], [16.0, 45.388888888888886], [4.0, 28.0], [1.0, 28.0], [17.0, 43.25], [18.0, 46.352941176470594], [19.0, 41.785714285714285], [20.0, 43.73333333333334], [5.0, 47.25], [21.0, 45.23728813559322], [22.0, 42.800000000000004], [23.0, 48.205128205128176], [24.0, 52.71467201674799], [6.0, 32.94285714285715], [7.0, 35.27027027027027]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}, {"data": [[23.643916666666676, 52.260416666666536]], "isOverall": false, "label": "HTTP Request - enroll-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 24.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 10951.75, "minX": 1.74760596E12, "maxY": 132705.3, "series": [{"data": [[1.7476062E12, 122672.51666666666], [1.7476065E12, 127804.36666666667], [1.7476068E12, 55953.36666666667], [1.74760614E12, 128224.21666666666], [1.74760644E12, 123871.46666666666], [1.74760674E12, 130478.78333333334], [1.74760608E12, 126816.43333333333], [1.74760638E12, 131213.55], [1.74760668E12, 127658.48333333334], [1.74760602E12, 125343.85], [1.74760632E12, 125617.0], [1.74760662E12, 127237.43333333333], [1.74760596E12, 54218.066666666666], [1.74760626E12, 127237.51666666666], [1.74760656E12, 132705.3]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7476062E12, 24723.483333333334], [1.7476065E12, 25761.266666666666], [1.7476068E12, 11272.633333333333], [1.74760614E12, 25849.816666666666], [1.74760644E12, 24960.716666666667], [1.74760674E12, 26297.366666666665], [1.74760608E12, 25554.35], [1.74760638E12, 26444.75], [1.74760668E12, 25732.65], [1.74760602E12, 25257.383333333335], [1.74760632E12, 25316.716666666667], [1.74760662E12, 25643.5], [1.74760596E12, 10951.75], [1.74760626E12, 25643.5], [1.74760656E12, 26740.116666666665]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7476068E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 40.684210526315816, "minX": 1.74760596E12, "maxY": 1672.7959183673477, "series": [{"data": [[1.7476062E12, 1672.7959183673477], [1.7476065E12, 1615.6389850057678], [1.7476068E12, 933.0552631578946], [1.74760614E12, 1608.8837744533944], [1.74760644E12, 1662.231591448931], [1.74760674E12, 1583.194130925507], [1.74760608E12, 1634.1890951276082], [1.74760638E12, 1574.180695847361], [1.74760668E12, 1604.2378752886846], [1.74760602E12, 1643.7370892018805], [1.74760632E12, 1637.3739742086746], [1.74760662E12, 1617.140046296297], [1.74760596E12, 1469.975609756097], [1.74760626E12, 1628.011574074075], [1.74760656E12, 1553.62305986696]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.7476062E12, 45.63865546218485], [1.7476065E12, 46.47350230414746], [1.7476068E12, 40.684210526315816], [1.74760614E12, 44.037887485648746], [1.74760644E12, 44.907253269916744], [1.74760674E12, 46.54288939051913], [1.74760608E12, 45.09756097560975], [1.74760638E12, 45.34792368125697], [1.74760668E12, 45.198385236447514], [1.74760602E12, 45.69095182138665], [1.74760632E12, 45.41500586166471], [1.74760662E12, 46.82870370370372], [1.74760596E12, 266.3631436314366], [1.74760626E12, 45.04050925925932], [1.74760656E12, 46.8834628190899]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7476068E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74760596E12, "maxY": 266.32791327913276, "series": [{"data": [[1.7476062E12, 0.0], [1.7476065E12, 0.0], [1.7476068E12, 0.0], [1.74760614E12, 0.0], [1.74760644E12, 0.0], [1.74760674E12, 0.0], [1.74760608E12, 0.0], [1.74760638E12, 0.0], [1.74760668E12, 0.0], [1.74760602E12, 0.0], [1.74760632E12, 0.0], [1.74760662E12, 0.0], [1.74760596E12, 0.0], [1.74760626E12, 0.0], [1.74760656E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.7476062E12, 45.626650660264154], [1.7476065E12, 46.466589861751125], [1.7476068E12, 40.681578947368436], [1.74760614E12, 44.022962112514335], [1.74760644E12, 44.90130796670635], [1.74760674E12, 46.53498871331825], [1.74760608E12, 45.077816492450644], [1.74760638E12, 45.343434343434375], [1.74760668E12, 45.190311418685134], [1.74760602E12, 45.67450058754408], [1.74760632E12, 45.40562719812427], [1.74760662E12, 46.824074074074055], [1.74760596E12, 266.32791327913276], [1.74760626E12, 45.02893518518515], [1.74760656E12, 46.879023307436206]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7476068E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74760596E12, "maxY": 36.35501355013547, "series": [{"data": [[1.7476062E12, 0.0], [1.7476065E12, 0.0], [1.7476068E12, 0.0], [1.74760614E12, 0.0], [1.74760644E12, 0.0], [1.74760674E12, 0.0], [1.74760608E12, 0.0], [1.74760638E12, 0.0], [1.74760668E12, 0.0], [1.74760602E12, 0.0], [1.74760632E12, 0.0], [1.74760662E12, 0.0], [1.74760596E12, 0.0], [1.74760626E12, 0.0], [1.74760656E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.7476062E12, 0.10564225690276131], [1.7476065E12, 0.08294930875576041], [1.7476068E12, 0.0], [1.74760614E12, 0.121699196326062], [1.74760644E12, 0.12128418549346007], [1.74760674E12, 0.06997742663656886], [1.74760608E12, 0.13240418118466893], [1.74760638E12, 0.0976430976430978], [1.74760668E12, 0.08419838523644746], [1.74760602E12, 0.18918918918918914], [1.74760632E12, 0.09964830011723344], [1.74760662E12, 0.07754629629629631], [1.74760596E12, 36.35501355013547], [1.74760626E12, 0.11458333333333344], [1.74760656E12, 0.09544950055493892]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7476068E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 27.0, "minX": 1.74760596E12, "maxY": 8528.0, "series": [{"data": [[1.7476062E12, 6048.0], [1.7476065E12, 5489.0], [1.7476068E12, 3287.0], [1.74760614E12, 5644.0], [1.74760644E12, 5205.0], [1.74760674E12, 8528.0], [1.74760608E12, 5390.0], [1.74760638E12, 6258.0], [1.74760668E12, 6694.0], [1.74760602E12, 6513.0], [1.74760632E12, 6191.0], [1.74760662E12, 7091.0], [1.74760596E12, 4509.0], [1.74760626E12, 5335.0], [1.74760656E12, 8163.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7476062E12, 2299.5], [1.7476065E12, 2248.4], [1.7476068E12, 1373.3999999999999], [1.74760614E12, 2236.7000000000003], [1.74760644E12, 2290.2000000000007], [1.74760674E12, 2153.4], [1.74760608E12, 2282.000000000001], [1.74760638E12, 2147.5], [1.74760668E12, 2148.8], [1.74760602E12, 2251.000000000001], [1.74760632E12, 2273.0999999999995], [1.74760662E12, 2212.2000000000003], [1.74760596E12, 2147.600000000002], [1.74760626E12, 2221.2000000000003], [1.74760656E12, 2123.4000000000015]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7476062E12, 4450.649999999985], [1.7476065E12, 3936.5599999999868], [1.7476068E12, 2536.5999999999995], [1.74760614E12, 4080.7099999999946], [1.74760644E12, 4109.720000000009], [1.74760674E12, 4023.6299999999987], [1.74760608E12, 4013.52], [1.74760638E12, 3933.900000000005], [1.74760668E12, 4071.760000000003], [1.74760602E12, 4266.2800000000025], [1.74760632E12, 4243.8700000000035], [1.74760662E12, 4190.71], [1.74760596E12, 3780.86], [1.74760626E12, 4456.960000000003], [1.74760656E12, 4088.5200000000013]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7476062E12, 2880.5499999999993], [1.7476065E12, 2887.399999999997], [1.7476068E12, 1805.499999999998], [1.74760614E12, 2710.699999999999], [1.74760644E12, 2824.9999999999995], [1.74760674E12, 2769.199999999999], [1.74760608E12, 2767.0], [1.74760638E12, 2661.2499999999995], [1.74760668E12, 2733.3999999999996], [1.74760602E12, 2877.0], [1.74760632E12, 2771.6499999999996], [1.74760662E12, 2693.449999999999], [1.74760596E12, 2806.2000000000007], [1.74760626E12, 2875.3999999999996], [1.74760656E12, 2717.3999999999996]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7476062E12, 36.0], [1.7476065E12, 35.0], [1.7476068E12, 27.0], [1.74760614E12, 34.0], [1.74760644E12, 36.0], [1.74760674E12, 35.0], [1.74760608E12, 35.0], [1.74760638E12, 36.0], [1.74760668E12, 36.0], [1.74760602E12, 36.0], [1.74760632E12, 36.0], [1.74760662E12, 36.0], [1.74760596E12, 37.0], [1.74760626E12, 35.0], [1.74760656E12, 36.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7476062E12, 238.0], [1.7476065E12, 166.0], [1.7476068E12, 117.0], [1.74760614E12, 112.0], [1.74760644E12, 411.0], [1.74760674E12, 290.5], [1.74760608E12, 256.0], [1.74760638E12, 255.0], [1.74760668E12, 107.0], [1.74760602E12, 370.0], [1.74760632E12, 257.0], [1.74760662E12, 280.0], [1.74760596E12, 611.0], [1.74760626E12, 241.0], [1.74760656E12, 369.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7476068E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 77.0, "minX": 1.0, "maxY": 2013.0, "series": [{"data": [[32.0, 436.0], [33.0, 104.0], [35.0, 98.0], [34.0, 407.0], [36.0, 179.5], [37.0, 435.0], [38.0, 482.5], [39.0, 456.5], [40.0, 165.5], [41.0, 437.0], [43.0, 534.5], [42.0, 270.0], [45.0, 163.0], [47.0, 85.0], [4.0, 284.5], [8.0, 674.0], [10.0, 615.0], [12.0, 91.0], [13.0, 708.0], [14.0, 274.0], [1.0, 282.0], [16.0, 117.0], [17.0, 931.0], [18.0, 905.0], [19.0, 330.0], [20.0, 547.0], [21.0, 77.0], [22.0, 114.0], [23.0, 243.0], [24.0, 111.0], [25.0, 456.0], [26.0, 81.0], [27.0, 409.0], [28.0, 345.5], [29.0, 129.0], [30.0, 100.0], [31.0, 96.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[18.0, 2013.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 47.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 2013.0, "series": [{"data": [[32.0, 0.0], [33.0, 37.0], [35.0, 36.0], [34.0, 0.0], [36.0, 35.0], [37.0, 0.0], [38.0, 0.0], [39.0, 0.0], [40.0, 37.0], [41.0, 0.0], [43.0, 40.0], [42.0, 18.5], [45.0, 37.5], [47.0, 37.0], [4.0, 14.0], [8.0, 0.0], [10.0, 0.0], [12.0, 13.5], [13.0, 0.0], [14.0, 18.0], [1.0, 0.0], [16.0, 13.5], [17.0, 0.0], [18.0, 40.0], [19.0, 28.0], [20.0, 0.0], [21.0, 28.0], [22.0, 36.0], [23.0, 0.0], [24.0, 29.0], [25.0, 0.0], [26.0, 31.5], [27.0, 0.0], [28.0, 0.0], [29.0, 34.0], [30.0, 36.0], [31.0, 36.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[18.0, 2013.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 47.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 12.316666666666666, "minX": 1.74760596E12, "maxY": 30.05, "series": [{"data": [[1.7476062E12, 27.766666666666666], [1.7476065E12, 28.916666666666668], [1.7476068E12, 12.316666666666666], [1.74760614E12, 29.0], [1.74760644E12, 28.05], [1.74760674E12, 29.483333333333334], [1.74760608E12, 28.716666666666665], [1.74760638E12, 29.7], [1.74760668E12, 28.883333333333333], [1.74760602E12, 28.383333333333333], [1.74760632E12, 28.433333333333334], [1.74760662E12, 28.8], [1.74760596E12, 12.7], [1.74760626E12, 28.8], [1.74760656E12, 30.05]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7476068E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.74760596E12, "maxY": 15.033333333333333, "series": [{"data": [[1.7476062E12, 13.883333333333333], [1.7476065E12, 14.45], [1.7476068E12, 6.333333333333333], [1.74760614E12, 14.483333333333333], [1.74760644E12, 14.033333333333333], [1.74760674E12, 14.766666666666667], [1.74760608E12, 14.366666666666667], [1.74760638E12, 14.85], [1.74760668E12, 14.433333333333334], [1.74760602E12, 14.2], [1.74760632E12, 14.216666666666667], [1.74760662E12, 14.4], [1.74760596E12, 6.15], [1.74760626E12, 14.4], [1.74760656E12, 15.033333333333333]], "isOverall": false, "label": "0", "isController": false}, {"data": [[1.7476062E12, 13.883333333333333], [1.7476065E12, 14.466666666666667], [1.7476068E12, 6.333333333333333], [1.74760614E12, 14.516666666666667], [1.74760644E12, 14.016666666666667], [1.74760674E12, 14.766666666666667], [1.74760608E12, 14.35], [1.74760638E12, 14.85], [1.74760668E12, 14.45], [1.74760602E12, 14.183333333333334], [1.74760632E12, 14.216666666666667], [1.74760662E12, 14.4], [1.74760596E12, 6.133333333333334], [1.74760626E12, 14.4], [1.74760656E12, 15.016666666666667]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.74760596E12, 0.016666666666666666]], "isOverall": false, "label": "400", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7476068E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.74760596E12, "maxY": 15.033333333333333, "series": [{"data": [[1.7476062E12, 13.883333333333333], [1.7476065E12, 14.466666666666667], [1.7476068E12, 6.333333333333333], [1.74760614E12, 14.516666666666667], [1.74760644E12, 14.016666666666667], [1.74760674E12, 14.766666666666667], [1.74760608E12, 14.35], [1.74760638E12, 14.85], [1.74760668E12, 14.45], [1.74760602E12, 14.183333333333334], [1.74760632E12, 14.216666666666667], [1.74760662E12, 14.4], [1.74760596E12, 6.133333333333334], [1.74760626E12, 14.4], [1.74760656E12, 15.016666666666667]], "isOverall": false, "label": "HTTP Request - enroll-success", "isController": false}, {"data": [[1.74760596E12, 0.016666666666666666]], "isOverall": false, "label": "HTTP Request - enroll-failure", "isController": false}, {"data": [[1.7476062E12, 13.883333333333333], [1.7476065E12, 14.45], [1.7476068E12, 6.333333333333333], [1.74760614E12, 14.483333333333333], [1.74760644E12, 14.033333333333333], [1.74760674E12, 14.766666666666667], [1.74760608E12, 14.366666666666667], [1.74760638E12, 14.85], [1.74760668E12, 14.433333333333334], [1.74760602E12, 14.2], [1.74760632E12, 14.216666666666667], [1.74760662E12, 14.4], [1.74760596E12, 6.15], [1.74760626E12, 14.4], [1.74760656E12, 15.033333333333333]], "isOverall": false, "label": "Create CSR-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7476068E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.74760596E12, "maxY": 30.05, "series": [{"data": [[1.7476062E12, 27.766666666666666], [1.7476065E12, 28.916666666666668], [1.7476068E12, 12.666666666666666], [1.74760614E12, 29.0], [1.74760644E12, 28.05], [1.74760674E12, 29.533333333333335], [1.74760608E12, 28.716666666666665], [1.74760638E12, 29.7], [1.74760668E12, 28.883333333333333], [1.74760602E12, 28.383333333333333], [1.74760632E12, 28.433333333333334], [1.74760662E12, 28.8], [1.74760596E12, 12.283333333333333], [1.74760626E12, 28.8], [1.74760656E12, 30.05]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.74760596E12, 0.016666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7476068E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

