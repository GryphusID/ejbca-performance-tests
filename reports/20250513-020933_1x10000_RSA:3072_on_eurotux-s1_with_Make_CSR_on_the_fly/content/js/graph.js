/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 27.0, "minX": 0.0, "maxY": 2889.0, "series": [{"data": [[0.0, 115.0], [0.1, 121.0], [0.2, 126.0], [0.3, 128.0], [0.4, 129.0], [0.5, 131.0], [0.6, 133.0], [0.7, 135.0], [0.8, 137.0], [0.9, 139.0], [1.0, 139.0], [1.1, 141.0], [1.2, 142.0], [1.3, 143.0], [1.4, 144.0], [1.5, 146.0], [1.6, 147.0], [1.7, 148.0], [1.8, 149.0], [1.9, 150.0], [2.0, 152.0], [2.1, 153.0], [2.2, 153.0], [2.3, 154.0], [2.4, 155.0], [2.5, 157.0], [2.6, 157.0], [2.7, 158.0], [2.8, 159.0], [2.9, 160.0], [3.0, 161.0], [3.1, 162.0], [3.2, 162.0], [3.3, 163.0], [3.4, 164.0], [3.5, 165.0], [3.6, 166.0], [3.7, 167.0], [3.8, 167.0], [3.9, 168.0], [4.0, 169.0], [4.1, 169.0], [4.2, 170.0], [4.3, 171.0], [4.4, 171.0], [4.5, 172.0], [4.6, 173.0], [4.7, 174.0], [4.8, 175.0], [4.9, 177.0], [5.0, 177.0], [5.1, 178.0], [5.2, 179.0], [5.3, 179.0], [5.4, 180.0], [5.5, 182.0], [5.6, 183.0], [5.7, 183.0], [5.8, 184.0], [5.9, 185.0], [6.0, 186.0], [6.1, 186.0], [6.2, 187.0], [6.3, 188.0], [6.4, 188.0], [6.5, 189.0], [6.6, 189.0], [6.7, 190.0], [6.8, 190.0], [6.9, 191.0], [7.0, 191.0], [7.1, 192.0], [7.2, 193.0], [7.3, 193.0], [7.4, 193.0], [7.5, 194.0], [7.6, 195.0], [7.7, 196.0], [7.8, 196.0], [7.9, 197.0], [8.0, 197.0], [8.1, 198.0], [8.2, 198.0], [8.3, 199.0], [8.4, 199.0], [8.5, 201.0], [8.6, 201.0], [8.7, 202.0], [8.8, 202.0], [8.9, 203.0], [9.0, 203.0], [9.1, 204.0], [9.2, 204.0], [9.3, 204.0], [9.4, 205.0], [9.5, 205.0], [9.6, 206.0], [9.7, 206.0], [9.8, 207.0], [9.9, 207.0], [10.0, 208.0], [10.1, 209.0], [10.2, 209.0], [10.3, 209.0], [10.4, 210.0], [10.5, 211.0], [10.6, 211.0], [10.7, 212.0], [10.8, 212.0], [10.9, 213.0], [11.0, 213.0], [11.1, 214.0], [11.2, 214.0], [11.3, 215.0], [11.4, 216.0], [11.5, 216.0], [11.6, 216.0], [11.7, 217.0], [11.8, 217.0], [11.9, 218.0], [12.0, 218.0], [12.1, 219.0], [12.2, 219.0], [12.3, 220.0], [12.4, 220.0], [12.5, 221.0], [12.6, 221.0], [12.7, 222.0], [12.8, 222.0], [12.9, 223.0], [13.0, 223.0], [13.1, 223.0], [13.2, 224.0], [13.3, 225.0], [13.4, 225.0], [13.5, 225.0], [13.6, 226.0], [13.7, 226.0], [13.8, 227.0], [13.9, 228.0], [14.0, 228.0], [14.1, 229.0], [14.2, 229.0], [14.3, 230.0], [14.4, 230.0], [14.5, 231.0], [14.6, 231.0], [14.7, 232.0], [14.8, 232.0], [14.9, 232.0], [15.0, 233.0], [15.1, 233.0], [15.2, 233.0], [15.3, 234.0], [15.4, 235.0], [15.5, 235.0], [15.6, 236.0], [15.7, 236.0], [15.8, 237.0], [15.9, 238.0], [16.0, 238.0], [16.1, 238.0], [16.2, 239.0], [16.3, 239.0], [16.4, 240.0], [16.5, 240.0], [16.6, 240.0], [16.7, 241.0], [16.8, 241.0], [16.9, 241.0], [17.0, 242.0], [17.1, 242.0], [17.2, 243.0], [17.3, 243.0], [17.4, 244.0], [17.5, 244.0], [17.6, 245.0], [17.7, 245.0], [17.8, 245.0], [17.9, 246.0], [18.0, 247.0], [18.1, 247.0], [18.2, 248.0], [18.3, 248.0], [18.4, 249.0], [18.5, 249.0], [18.6, 249.0], [18.7, 250.0], [18.8, 250.0], [18.9, 251.0], [19.0, 251.0], [19.1, 251.0], [19.2, 252.0], [19.3, 253.0], [19.4, 253.0], [19.5, 253.0], [19.6, 254.0], [19.7, 254.0], [19.8, 255.0], [19.9, 255.0], [20.0, 256.0], [20.1, 256.0], [20.2, 256.0], [20.3, 257.0], [20.4, 257.0], [20.5, 258.0], [20.6, 258.0], [20.7, 259.0], [20.8, 259.0], [20.9, 260.0], [21.0, 260.0], [21.1, 261.0], [21.2, 262.0], [21.3, 262.0], [21.4, 263.0], [21.5, 263.0], [21.6, 263.0], [21.7, 264.0], [21.8, 265.0], [21.9, 265.0], [22.0, 266.0], [22.1, 266.0], [22.2, 266.0], [22.3, 267.0], [22.4, 267.0], [22.5, 268.0], [22.6, 268.0], [22.7, 268.0], [22.8, 269.0], [22.9, 270.0], [23.0, 270.0], [23.1, 271.0], [23.2, 271.0], [23.3, 272.0], [23.4, 272.0], [23.5, 272.0], [23.6, 273.0], [23.7, 273.0], [23.8, 274.0], [23.9, 274.0], [24.0, 275.0], [24.1, 275.0], [24.2, 276.0], [24.3, 276.0], [24.4, 276.0], [24.5, 277.0], [24.6, 277.0], [24.7, 278.0], [24.8, 278.0], [24.9, 279.0], [25.0, 279.0], [25.1, 280.0], [25.2, 280.0], [25.3, 281.0], [25.4, 281.0], [25.5, 282.0], [25.6, 282.0], [25.7, 282.0], [25.8, 283.0], [25.9, 283.0], [26.0, 284.0], [26.1, 284.0], [26.2, 284.0], [26.3, 285.0], [26.4, 285.0], [26.5, 286.0], [26.6, 286.0], [26.7, 287.0], [26.8, 287.0], [26.9, 288.0], [27.0, 288.0], [27.1, 288.0], [27.2, 289.0], [27.3, 289.0], [27.4, 290.0], [27.5, 290.0], [27.6, 291.0], [27.7, 292.0], [27.8, 292.0], [27.9, 292.0], [28.0, 293.0], [28.1, 293.0], [28.2, 294.0], [28.3, 295.0], [28.4, 295.0], [28.5, 295.0], [28.6, 295.0], [28.7, 296.0], [28.8, 296.0], [28.9, 297.0], [29.0, 297.0], [29.1, 298.0], [29.2, 298.0], [29.3, 299.0], [29.4, 299.0], [29.5, 300.0], [29.6, 300.0], [29.7, 301.0], [29.8, 301.0], [29.9, 302.0], [30.0, 302.0], [30.1, 302.0], [30.2, 303.0], [30.3, 303.0], [30.4, 304.0], [30.5, 304.0], [30.6, 305.0], [30.7, 305.0], [30.8, 306.0], [30.9, 306.0], [31.0, 306.0], [31.1, 307.0], [31.2, 308.0], [31.3, 308.0], [31.4, 308.0], [31.5, 309.0], [31.6, 309.0], [31.7, 310.0], [31.8, 310.0], [31.9, 311.0], [32.0, 311.0], [32.1, 312.0], [32.2, 312.0], [32.3, 313.0], [32.4, 313.0], [32.5, 314.0], [32.6, 315.0], [32.7, 315.0], [32.8, 316.0], [32.9, 316.0], [33.0, 317.0], [33.1, 317.0], [33.2, 318.0], [33.3, 319.0], [33.4, 320.0], [33.5, 320.0], [33.6, 320.0], [33.7, 321.0], [33.8, 321.0], [33.9, 321.0], [34.0, 322.0], [34.1, 322.0], [34.2, 323.0], [34.3, 323.0], [34.4, 324.0], [34.5, 324.0], [34.6, 325.0], [34.7, 325.0], [34.8, 325.0], [34.9, 326.0], [35.0, 326.0], [35.1, 327.0], [35.2, 327.0], [35.3, 327.0], [35.4, 328.0], [35.5, 328.0], [35.6, 329.0], [35.7, 329.0], [35.8, 330.0], [35.9, 330.0], [36.0, 331.0], [36.1, 332.0], [36.2, 332.0], [36.3, 333.0], [36.4, 333.0], [36.5, 334.0], [36.6, 335.0], [36.7, 335.0], [36.8, 336.0], [36.9, 336.0], [37.0, 337.0], [37.1, 337.0], [37.2, 338.0], [37.3, 338.0], [37.4, 339.0], [37.5, 339.0], [37.6, 340.0], [37.7, 340.0], [37.8, 341.0], [37.9, 341.0], [38.0, 342.0], [38.1, 342.0], [38.2, 343.0], [38.3, 343.0], [38.4, 343.0], [38.5, 344.0], [38.6, 344.0], [38.7, 345.0], [38.8, 345.0], [38.9, 346.0], [39.0, 347.0], [39.1, 347.0], [39.2, 347.0], [39.3, 348.0], [39.4, 348.0], [39.5, 349.0], [39.6, 349.0], [39.7, 350.0], [39.8, 350.0], [39.9, 351.0], [40.0, 351.0], [40.1, 352.0], [40.2, 353.0], [40.3, 353.0], [40.4, 354.0], [40.5, 354.0], [40.6, 355.0], [40.7, 356.0], [40.8, 356.0], [40.9, 357.0], [41.0, 358.0], [41.1, 358.0], [41.2, 358.0], [41.3, 359.0], [41.4, 359.0], [41.5, 360.0], [41.6, 360.0], [41.7, 361.0], [41.8, 361.0], [41.9, 362.0], [42.0, 362.0], [42.1, 363.0], [42.2, 363.0], [42.3, 364.0], [42.4, 364.0], [42.5, 364.0], [42.6, 365.0], [42.7, 365.0], [42.8, 365.0], [42.9, 366.0], [43.0, 366.0], [43.1, 367.0], [43.2, 367.0], [43.3, 368.0], [43.4, 368.0], [43.5, 369.0], [43.6, 369.0], [43.7, 370.0], [43.8, 370.0], [43.9, 371.0], [44.0, 371.0], [44.1, 372.0], [44.2, 372.0], [44.3, 373.0], [44.4, 373.0], [44.5, 374.0], [44.6, 374.0], [44.7, 375.0], [44.8, 375.0], [44.9, 376.0], [45.0, 376.0], [45.1, 377.0], [45.2, 377.0], [45.3, 378.0], [45.4, 378.0], [45.5, 379.0], [45.6, 379.0], [45.7, 380.0], [45.8, 380.0], [45.9, 381.0], [46.0, 381.0], [46.1, 382.0], [46.2, 382.0], [46.3, 383.0], [46.4, 384.0], [46.5, 384.0], [46.6, 384.0], [46.7, 385.0], [46.8, 385.0], [46.9, 385.0], [47.0, 386.0], [47.1, 386.0], [47.2, 387.0], [47.3, 387.0], [47.4, 388.0], [47.5, 388.0], [47.6, 389.0], [47.7, 389.0], [47.8, 390.0], [47.9, 390.0], [48.0, 391.0], [48.1, 392.0], [48.2, 392.0], [48.3, 393.0], [48.4, 393.0], [48.5, 394.0], [48.6, 395.0], [48.7, 395.0], [48.8, 396.0], [48.9, 396.0], [49.0, 396.0], [49.1, 397.0], [49.2, 397.0], [49.3, 398.0], [49.4, 398.0], [49.5, 399.0], [49.6, 399.0], [49.7, 399.0], [49.8, 400.0], [49.9, 401.0], [50.0, 401.0], [50.1, 402.0], [50.2, 403.0], [50.3, 403.0], [50.4, 403.0], [50.5, 404.0], [50.6, 404.0], [50.7, 405.0], [50.8, 405.0], [50.9, 406.0], [51.0, 406.0], [51.1, 407.0], [51.2, 407.0], [51.3, 408.0], [51.4, 408.0], [51.5, 409.0], [51.6, 409.0], [51.7, 410.0], [51.8, 410.0], [51.9, 411.0], [52.0, 412.0], [52.1, 413.0], [52.2, 413.0], [52.3, 414.0], [52.4, 415.0], [52.5, 415.0], [52.6, 416.0], [52.7, 416.0], [52.8, 416.0], [52.9, 417.0], [53.0, 418.0], [53.1, 418.0], [53.2, 419.0], [53.3, 419.0], [53.4, 420.0], [53.5, 421.0], [53.6, 422.0], [53.7, 422.0], [53.8, 423.0], [53.9, 424.0], [54.0, 424.0], [54.1, 425.0], [54.2, 425.0], [54.3, 426.0], [54.4, 427.0], [54.5, 428.0], [54.6, 429.0], [54.7, 429.0], [54.8, 430.0], [54.9, 431.0], [55.0, 431.0], [55.1, 432.0], [55.2, 432.0], [55.3, 433.0], [55.4, 434.0], [55.5, 435.0], [55.6, 435.0], [55.7, 436.0], [55.8, 436.0], [55.9, 436.0], [56.0, 437.0], [56.1, 437.0], [56.2, 438.0], [56.3, 438.0], [56.4, 439.0], [56.5, 439.0], [56.6, 439.0], [56.7, 440.0], [56.8, 441.0], [56.9, 441.0], [57.0, 442.0], [57.1, 442.0], [57.2, 443.0], [57.3, 443.0], [57.4, 444.0], [57.5, 444.0], [57.6, 445.0], [57.7, 445.0], [57.8, 446.0], [57.9, 446.0], [58.0, 447.0], [58.1, 447.0], [58.2, 448.0], [58.3, 448.0], [58.4, 448.0], [58.5, 449.0], [58.6, 449.0], [58.7, 450.0], [58.8, 451.0], [58.9, 451.0], [59.0, 452.0], [59.1, 453.0], [59.2, 453.0], [59.3, 454.0], [59.4, 455.0], [59.5, 455.0], [59.6, 456.0], [59.7, 456.0], [59.8, 457.0], [59.9, 457.0], [60.0, 458.0], [60.1, 458.0], [60.2, 459.0], [60.3, 460.0], [60.4, 460.0], [60.5, 461.0], [60.6, 461.0], [60.7, 462.0], [60.8, 462.0], [60.9, 463.0], [61.0, 464.0], [61.1, 465.0], [61.2, 466.0], [61.3, 466.0], [61.4, 467.0], [61.5, 467.0], [61.6, 468.0], [61.7, 469.0], [61.8, 469.0], [61.9, 470.0], [62.0, 470.0], [62.1, 471.0], [62.2, 472.0], [62.3, 472.0], [62.4, 473.0], [62.5, 474.0], [62.6, 475.0], [62.7, 475.0], [62.8, 476.0], [62.9, 477.0], [63.0, 477.0], [63.1, 478.0], [63.2, 479.0], [63.3, 480.0], [63.4, 480.0], [63.5, 481.0], [63.6, 482.0], [63.7, 483.0], [63.8, 483.0], [63.9, 484.0], [64.0, 484.0], [64.1, 485.0], [64.2, 486.0], [64.3, 486.0], [64.4, 487.0], [64.5, 488.0], [64.6, 488.0], [64.7, 489.0], [64.8, 490.0], [64.9, 490.0], [65.0, 491.0], [65.1, 492.0], [65.2, 492.0], [65.3, 493.0], [65.4, 494.0], [65.5, 495.0], [65.6, 496.0], [65.7, 497.0], [65.8, 498.0], [65.9, 498.0], [66.0, 499.0], [66.1, 500.0], [66.2, 501.0], [66.3, 501.0], [66.4, 502.0], [66.5, 502.0], [66.6, 503.0], [66.7, 504.0], [66.8, 505.0], [66.9, 505.0], [67.0, 506.0], [67.1, 507.0], [67.2, 508.0], [67.3, 508.0], [67.4, 509.0], [67.5, 510.0], [67.6, 510.0], [67.7, 511.0], [67.8, 512.0], [67.9, 513.0], [68.0, 513.0], [68.1, 514.0], [68.2, 515.0], [68.3, 515.0], [68.4, 516.0], [68.5, 517.0], [68.6, 517.0], [68.7, 519.0], [68.8, 519.0], [68.9, 519.0], [69.0, 520.0], [69.1, 521.0], [69.2, 521.0], [69.3, 522.0], [69.4, 523.0], [69.5, 524.0], [69.6, 524.0], [69.7, 526.0], [69.8, 527.0], [69.9, 527.0], [70.0, 529.0], [70.1, 529.0], [70.2, 531.0], [70.3, 531.0], [70.4, 532.0], [70.5, 533.0], [70.6, 533.0], [70.7, 534.0], [70.8, 535.0], [70.9, 536.0], [71.0, 537.0], [71.1, 538.0], [71.2, 538.0], [71.3, 539.0], [71.4, 539.0], [71.5, 540.0], [71.6, 540.0], [71.7, 542.0], [71.8, 543.0], [71.9, 544.0], [72.0, 544.0], [72.1, 546.0], [72.2, 547.0], [72.3, 548.0], [72.4, 550.0], [72.5, 551.0], [72.6, 552.0], [72.7, 553.0], [72.8, 553.0], [72.9, 554.0], [73.0, 555.0], [73.1, 556.0], [73.2, 557.0], [73.3, 558.0], [73.4, 559.0], [73.5, 560.0], [73.6, 561.0], [73.7, 562.0], [73.8, 563.0], [73.9, 564.0], [74.0, 565.0], [74.1, 565.0], [74.2, 566.0], [74.3, 567.0], [74.4, 568.0], [74.5, 569.0], [74.6, 571.0], [74.7, 572.0], [74.8, 572.0], [74.9, 573.0], [75.0, 575.0], [75.1, 576.0], [75.2, 577.0], [75.3, 578.0], [75.4, 579.0], [75.5, 579.0], [75.6, 580.0], [75.7, 581.0], [75.8, 582.0], [75.9, 583.0], [76.0, 584.0], [76.1, 585.0], [76.2, 586.0], [76.3, 586.0], [76.4, 587.0], [76.5, 588.0], [76.6, 589.0], [76.7, 589.0], [76.8, 591.0], [76.9, 591.0], [77.0, 592.0], [77.1, 593.0], [77.2, 594.0], [77.3, 596.0], [77.4, 597.0], [77.5, 598.0], [77.6, 599.0], [77.7, 600.0], [77.8, 601.0], [77.9, 603.0], [78.0, 604.0], [78.1, 605.0], [78.2, 605.0], [78.3, 606.0], [78.4, 607.0], [78.5, 607.0], [78.6, 609.0], [78.7, 610.0], [78.8, 611.0], [78.9, 612.0], [79.0, 613.0], [79.1, 614.0], [79.2, 615.0], [79.3, 616.0], [79.4, 617.0], [79.5, 619.0], [79.6, 620.0], [79.7, 622.0], [79.8, 623.0], [79.9, 624.0], [80.0, 625.0], [80.1, 625.0], [80.2, 627.0], [80.3, 627.0], [80.4, 628.0], [80.5, 629.0], [80.6, 630.0], [80.7, 631.0], [80.8, 633.0], [80.9, 633.0], [81.0, 634.0], [81.1, 636.0], [81.2, 637.0], [81.3, 637.0], [81.4, 639.0], [81.5, 640.0], [81.6, 641.0], [81.7, 643.0], [81.8, 643.0], [81.9, 645.0], [82.0, 646.0], [82.1, 648.0], [82.2, 649.0], [82.3, 650.0], [82.4, 652.0], [82.5, 653.0], [82.6, 655.0], [82.7, 656.0], [82.8, 657.0], [82.9, 658.0], [83.0, 660.0], [83.1, 661.0], [83.2, 662.0], [83.3, 663.0], [83.4, 664.0], [83.5, 665.0], [83.6, 666.0], [83.7, 667.0], [83.8, 668.0], [83.9, 669.0], [84.0, 670.0], [84.1, 672.0], [84.2, 673.0], [84.3, 674.0], [84.4, 676.0], [84.5, 677.0], [84.6, 678.0], [84.7, 679.0], [84.8, 681.0], [84.9, 683.0], [85.0, 684.0], [85.1, 685.0], [85.2, 687.0], [85.3, 688.0], [85.4, 690.0], [85.5, 691.0], [85.6, 693.0], [85.7, 695.0], [85.8, 696.0], [85.9, 698.0], [86.0, 699.0], [86.1, 702.0], [86.2, 703.0], [86.3, 705.0], [86.4, 707.0], [86.5, 709.0], [86.6, 712.0], [86.7, 714.0], [86.8, 715.0], [86.9, 716.0], [87.0, 717.0], [87.1, 719.0], [87.2, 720.0], [87.3, 722.0], [87.4, 724.0], [87.5, 726.0], [87.6, 727.0], [87.7, 728.0], [87.8, 729.0], [87.9, 731.0], [88.0, 733.0], [88.1, 735.0], [88.2, 737.0], [88.3, 737.0], [88.4, 741.0], [88.5, 742.0], [88.6, 744.0], [88.7, 745.0], [88.8, 747.0], [88.9, 749.0], [89.0, 752.0], [89.1, 754.0], [89.2, 757.0], [89.3, 758.0], [89.4, 760.0], [89.5, 763.0], [89.6, 764.0], [89.7, 768.0], [89.8, 770.0], [89.9, 772.0], [90.0, 774.0], [90.1, 776.0], [90.2, 778.0], [90.3, 779.0], [90.4, 782.0], [90.5, 784.0], [90.6, 785.0], [90.7, 787.0], [90.8, 789.0], [90.9, 791.0], [91.0, 794.0], [91.1, 797.0], [91.2, 799.0], [91.3, 801.0], [91.4, 803.0], [91.5, 805.0], [91.6, 810.0], [91.7, 813.0], [91.8, 815.0], [91.9, 817.0], [92.0, 821.0], [92.1, 825.0], [92.2, 826.0], [92.3, 832.0], [92.4, 834.0], [92.5, 837.0], [92.6, 840.0], [92.7, 842.0], [92.8, 846.0], [92.9, 850.0], [93.0, 852.0], [93.1, 856.0], [93.2, 857.0], [93.3, 861.0], [93.4, 863.0], [93.5, 866.0], [93.6, 869.0], [93.7, 871.0], [93.8, 873.0], [93.9, 876.0], [94.0, 881.0], [94.1, 884.0], [94.2, 887.0], [94.3, 889.0], [94.4, 892.0], [94.5, 896.0], [94.6, 902.0], [94.7, 904.0], [94.8, 906.0], [94.9, 908.0], [95.0, 911.0], [95.1, 914.0], [95.2, 918.0], [95.3, 922.0], [95.4, 926.0], [95.5, 931.0], [95.6, 937.0], [95.7, 941.0], [95.8, 948.0], [95.9, 955.0], [96.0, 961.0], [96.1, 966.0], [96.2, 970.0], [96.3, 976.0], [96.4, 981.0], [96.5, 985.0], [96.6, 991.0], [96.7, 995.0], [96.8, 1001.0], [96.9, 1009.0], [97.0, 1019.0], [97.1, 1029.0], [97.2, 1033.0], [97.3, 1038.0], [97.4, 1047.0], [97.5, 1056.0], [97.6, 1064.0], [97.7, 1070.0], [97.8, 1078.0], [97.9, 1085.0], [98.0, 1095.0], [98.1, 1106.0], [98.2, 1114.0], [98.3, 1124.0], [98.4, 1140.0], [98.5, 1154.0], [98.6, 1172.0], [98.7, 1191.0], [98.8, 1221.0], [98.9, 1235.0], [99.0, 1260.0], [99.1, 1294.0], [99.2, 1312.0], [99.3, 1347.0], [99.4, 1388.0], [99.5, 1415.0], [99.6, 1444.0], [99.7, 1508.0], [99.8, 1597.0], [99.9, 1797.0], [100.0, 2889.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 27.0], [0.1, 27.0], [0.2, 28.0], [0.3, 28.0], [0.4, 28.0], [0.5, 28.0], [0.6, 28.0], [0.7, 28.0], [0.8, 28.0], [0.9, 28.0], [1.0, 28.0], [1.1, 28.0], [1.2, 28.0], [1.3, 29.0], [1.4, 29.0], [1.5, 29.0], [1.6, 29.0], [1.7, 29.0], [1.8, 29.0], [1.9, 29.0], [2.0, 29.0], [2.1, 29.0], [2.2, 29.0], [2.3, 29.0], [2.4, 29.0], [2.5, 29.0], [2.6, 29.0], [2.7, 29.0], [2.8, 29.0], [2.9, 29.0], [3.0, 29.0], [3.1, 29.0], [3.2, 29.0], [3.3, 29.0], [3.4, 29.0], [3.5, 29.0], [3.6, 29.0], [3.7, 29.0], [3.8, 29.0], [3.9, 29.0], [4.0, 29.0], [4.1, 29.0], [4.2, 29.0], [4.3, 29.0], [4.4, 29.0], [4.5, 29.0], [4.6, 29.0], [4.7, 29.0], [4.8, 30.0], [4.9, 30.0], [5.0, 30.0], [5.1, 30.0], [5.2, 30.0], [5.3, 30.0], [5.4, 30.0], [5.5, 30.0], [5.6, 30.0], [5.7, 30.0], [5.8, 30.0], [5.9, 30.0], [6.0, 30.0], [6.1, 30.0], [6.2, 30.0], [6.3, 30.0], [6.4, 30.0], [6.5, 30.0], [6.6, 30.0], [6.7, 30.0], [6.8, 30.0], [6.9, 30.0], [7.0, 30.0], [7.1, 30.0], [7.2, 30.0], [7.3, 30.0], [7.4, 30.0], [7.5, 30.0], [7.6, 30.0], [7.7, 30.0], [7.8, 30.0], [7.9, 30.0], [8.0, 30.0], [8.1, 30.0], [8.2, 30.0], [8.3, 30.0], [8.4, 30.0], [8.5, 30.0], [8.6, 30.0], [8.7, 30.0], [8.8, 30.0], [8.9, 30.0], [9.0, 30.0], [9.1, 30.0], [9.2, 30.0], [9.3, 30.0], [9.4, 30.0], [9.5, 30.0], [9.6, 30.0], [9.7, 30.0], [9.8, 30.0], [9.9, 30.0], [10.0, 30.0], [10.1, 30.0], [10.2, 30.0], [10.3, 30.0], [10.4, 30.0], [10.5, 30.0], [10.6, 30.0], [10.7, 30.0], [10.8, 30.0], [10.9, 30.0], [11.0, 30.0], [11.1, 30.0], [11.2, 30.0], [11.3, 30.0], [11.4, 30.0], [11.5, 30.0], [11.6, 30.0], [11.7, 30.0], [11.8, 30.0], [11.9, 30.0], [12.0, 30.0], [12.1, 30.0], [12.2, 30.0], [12.3, 30.0], [12.4, 30.0], [12.5, 30.0], [12.6, 30.0], [12.7, 30.0], [12.8, 30.0], [12.9, 30.0], [13.0, 30.0], [13.1, 31.0], [13.2, 31.0], [13.3, 31.0], [13.4, 31.0], [13.5, 31.0], [13.6, 31.0], [13.7, 31.0], [13.8, 31.0], [13.9, 31.0], [14.0, 31.0], [14.1, 31.0], [14.2, 31.0], [14.3, 31.0], [14.4, 31.0], [14.5, 31.0], [14.6, 31.0], [14.7, 31.0], [14.8, 31.0], [14.9, 31.0], [15.0, 31.0], [15.1, 31.0], [15.2, 31.0], [15.3, 31.0], [15.4, 31.0], [15.5, 31.0], [15.6, 31.0], [15.7, 31.0], [15.8, 31.0], [15.9, 31.0], [16.0, 31.0], [16.1, 31.0], [16.2, 31.0], [16.3, 31.0], [16.4, 31.0], [16.5, 31.0], [16.6, 31.0], [16.7, 31.0], [16.8, 31.0], [16.9, 31.0], [17.0, 31.0], [17.1, 31.0], [17.2, 31.0], [17.3, 31.0], [17.4, 31.0], [17.5, 31.0], [17.6, 31.0], [17.7, 31.0], [17.8, 31.0], [17.9, 31.0], [18.0, 31.0], [18.1, 31.0], [18.2, 31.0], [18.3, 31.0], [18.4, 31.0], [18.5, 31.0], [18.6, 31.0], [18.7, 31.0], [18.8, 31.0], [18.9, 31.0], [19.0, 31.0], [19.1, 31.0], [19.2, 31.0], [19.3, 31.0], [19.4, 31.0], [19.5, 31.0], [19.6, 31.0], [19.7, 31.0], [19.8, 31.0], [19.9, 31.0], [20.0, 31.0], [20.1, 31.0], [20.2, 31.0], [20.3, 31.0], [20.4, 31.0], [20.5, 31.0], [20.6, 31.0], [20.7, 31.0], [20.8, 31.0], [20.9, 31.0], [21.0, 31.0], [21.1, 31.0], [21.2, 31.0], [21.3, 31.0], [21.4, 31.0], [21.5, 31.0], [21.6, 31.0], [21.7, 31.0], [21.8, 31.0], [21.9, 31.0], [22.0, 31.0], [22.1, 31.0], [22.2, 31.0], [22.3, 31.0], [22.4, 31.0], [22.5, 31.0], [22.6, 31.0], [22.7, 31.0], [22.8, 31.0], [22.9, 31.0], [23.0, 31.0], [23.1, 31.0], [23.2, 31.0], [23.3, 31.0], [23.4, 31.0], [23.5, 31.0], [23.6, 31.0], [23.7, 31.0], [23.8, 31.0], [23.9, 31.0], [24.0, 31.0], [24.1, 31.0], [24.2, 31.0], [24.3, 31.0], [24.4, 31.0], [24.5, 31.0], [24.6, 31.0], [24.7, 31.0], [24.8, 31.0], [24.9, 31.0], [25.0, 31.0], [25.1, 31.0], [25.2, 31.0], [25.3, 31.0], [25.4, 31.0], [25.5, 31.0], [25.6, 31.0], [25.7, 31.0], [25.8, 31.0], [25.9, 31.0], [26.0, 31.0], [26.1, 31.0], [26.2, 31.0], [26.3, 31.0], [26.4, 31.0], [26.5, 31.0], [26.6, 31.0], [26.7, 31.0], [26.8, 31.0], [26.9, 31.0], [27.0, 31.0], [27.1, 31.0], [27.2, 31.0], [27.3, 31.0], [27.4, 31.0], [27.5, 31.0], [27.6, 31.0], [27.7, 31.0], [27.8, 31.0], [27.9, 31.0], [28.0, 31.0], [28.1, 31.0], [28.2, 31.0], [28.3, 31.0], [28.4, 31.0], [28.5, 31.0], [28.6, 31.0], [28.7, 31.0], [28.8, 31.0], [28.9, 31.0], [29.0, 31.0], [29.1, 31.0], [29.2, 31.0], [29.3, 31.0], [29.4, 31.0], [29.5, 31.0], [29.6, 31.0], [29.7, 32.0], [29.8, 32.0], [29.9, 32.0], [30.0, 32.0], [30.1, 32.0], [30.2, 32.0], [30.3, 32.0], [30.4, 32.0], [30.5, 32.0], [30.6, 32.0], [30.7, 32.0], [30.8, 32.0], [30.9, 32.0], [31.0, 32.0], [31.1, 32.0], [31.2, 32.0], [31.3, 32.0], [31.4, 32.0], [31.5, 32.0], [31.6, 32.0], [31.7, 32.0], [31.8, 32.0], [31.9, 32.0], [32.0, 32.0], [32.1, 32.0], [32.2, 32.0], [32.3, 32.0], [32.4, 32.0], [32.5, 32.0], [32.6, 32.0], [32.7, 32.0], [32.8, 32.0], [32.9, 32.0], [33.0, 32.0], [33.1, 32.0], [33.2, 32.0], [33.3, 32.0], [33.4, 32.0], [33.5, 32.0], [33.6, 32.0], [33.7, 32.0], [33.8, 32.0], [33.9, 32.0], [34.0, 32.0], [34.1, 32.0], [34.2, 32.0], [34.3, 32.0], [34.4, 32.0], [34.5, 32.0], [34.6, 32.0], [34.7, 32.0], [34.8, 32.0], [34.9, 32.0], [35.0, 32.0], [35.1, 32.0], [35.2, 32.0], [35.3, 32.0], [35.4, 32.0], [35.5, 32.0], [35.6, 32.0], [35.7, 32.0], [35.8, 32.0], [35.9, 32.0], [36.0, 32.0], [36.1, 32.0], [36.2, 32.0], [36.3, 32.0], [36.4, 32.0], [36.5, 32.0], [36.6, 32.0], [36.7, 32.0], [36.8, 32.0], [36.9, 32.0], [37.0, 32.0], [37.1, 32.0], [37.2, 32.0], [37.3, 32.0], [37.4, 32.0], [37.5, 32.0], [37.6, 32.0], [37.7, 32.0], [37.8, 32.0], [37.9, 32.0], [38.0, 32.0], [38.1, 32.0], [38.2, 32.0], [38.3, 32.0], [38.4, 32.0], [38.5, 32.0], [38.6, 32.0], [38.7, 32.0], [38.8, 32.0], [38.9, 32.0], [39.0, 32.0], [39.1, 32.0], [39.2, 32.0], [39.3, 32.0], [39.4, 32.0], [39.5, 32.0], [39.6, 32.0], [39.7, 32.0], [39.8, 32.0], [39.9, 32.0], [40.0, 32.0], [40.1, 32.0], [40.2, 32.0], [40.3, 32.0], [40.4, 32.0], [40.5, 32.0], [40.6, 32.0], [40.7, 32.0], [40.8, 32.0], [40.9, 32.0], [41.0, 32.0], [41.1, 32.0], [41.2, 32.0], [41.3, 32.0], [41.4, 32.0], [41.5, 32.0], [41.6, 32.0], [41.7, 32.0], [41.8, 32.0], [41.9, 32.0], [42.0, 32.0], [42.1, 32.0], [42.2, 32.0], [42.3, 32.0], [42.4, 32.0], [42.5, 32.0], [42.6, 32.0], [42.7, 32.0], [42.8, 32.0], [42.9, 32.0], [43.0, 32.0], [43.1, 32.0], [43.2, 32.0], [43.3, 32.0], [43.4, 32.0], [43.5, 32.0], [43.6, 32.0], [43.7, 32.0], [43.8, 32.0], [43.9, 32.0], [44.0, 32.0], [44.1, 32.0], [44.2, 32.0], [44.3, 32.0], [44.4, 32.0], [44.5, 32.0], [44.6, 32.0], [44.7, 32.0], [44.8, 32.0], [44.9, 32.0], [45.0, 32.0], [45.1, 32.0], [45.2, 32.0], [45.3, 32.0], [45.4, 32.0], [45.5, 32.0], [45.6, 32.0], [45.7, 32.0], [45.8, 32.0], [45.9, 32.0], [46.0, 32.0], [46.1, 32.0], [46.2, 32.0], [46.3, 32.0], [46.4, 32.0], [46.5, 32.0], [46.6, 32.0], [46.7, 32.0], [46.8, 32.0], [46.9, 32.0], [47.0, 32.0], [47.1, 32.0], [47.2, 32.0], [47.3, 32.0], [47.4, 32.0], [47.5, 32.0], [47.6, 32.0], [47.7, 32.0], [47.8, 32.0], [47.9, 32.0], [48.0, 32.0], [48.1, 32.0], [48.2, 32.0], [48.3, 32.0], [48.4, 32.0], [48.5, 32.0], [48.6, 32.0], [48.7, 32.0], [48.8, 32.0], [48.9, 32.0], [49.0, 32.0], [49.1, 32.0], [49.2, 32.0], [49.3, 32.0], [49.4, 32.0], [49.5, 32.0], [49.6, 32.0], [49.7, 32.0], [49.8, 32.0], [49.9, 32.0], [50.0, 32.0], [50.1, 32.0], [50.2, 32.0], [50.3, 32.0], [50.4, 32.0], [50.5, 32.0], [50.6, 32.0], [50.7, 32.0], [50.8, 32.0], [50.9, 32.0], [51.0, 32.0], [51.1, 32.0], [51.2, 32.0], [51.3, 32.0], [51.4, 32.0], [51.5, 32.0], [51.6, 32.0], [51.7, 32.0], [51.8, 32.0], [51.9, 32.0], [52.0, 32.0], [52.1, 32.0], [52.2, 33.0], [52.3, 33.0], [52.4, 33.0], [52.5, 33.0], [52.6, 33.0], [52.7, 33.0], [52.8, 33.0], [52.9, 33.0], [53.0, 33.0], [53.1, 33.0], [53.2, 33.0], [53.3, 33.0], [53.4, 33.0], [53.5, 33.0], [53.6, 33.0], [53.7, 33.0], [53.8, 33.0], [53.9, 33.0], [54.0, 33.0], [54.1, 33.0], [54.2, 33.0], [54.3, 33.0], [54.4, 33.0], [54.5, 33.0], [54.6, 33.0], [54.7, 33.0], [54.8, 33.0], [54.9, 33.0], [55.0, 33.0], [55.1, 33.0], [55.2, 33.0], [55.3, 33.0], [55.4, 33.0], [55.5, 33.0], [55.6, 33.0], [55.7, 33.0], [55.8, 33.0], [55.9, 33.0], [56.0, 33.0], [56.1, 33.0], [56.2, 33.0], [56.3, 33.0], [56.4, 33.0], [56.5, 33.0], [56.6, 33.0], [56.7, 33.0], [56.8, 33.0], [56.9, 33.0], [57.0, 33.0], [57.1, 33.0], [57.2, 33.0], [57.3, 33.0], [57.4, 33.0], [57.5, 33.0], [57.6, 33.0], [57.7, 33.0], [57.8, 33.0], [57.9, 33.0], [58.0, 33.0], [58.1, 33.0], [58.2, 33.0], [58.3, 33.0], [58.4, 33.0], [58.5, 33.0], [58.6, 33.0], [58.7, 33.0], [58.8, 33.0], [58.9, 33.0], [59.0, 33.0], [59.1, 33.0], [59.2, 33.0], [59.3, 33.0], [59.4, 33.0], [59.5, 33.0], [59.6, 33.0], [59.7, 33.0], [59.8, 33.0], [59.9, 33.0], [60.0, 33.0], [60.1, 33.0], [60.2, 33.0], [60.3, 33.0], [60.4, 33.0], [60.5, 33.0], [60.6, 33.0], [60.7, 33.0], [60.8, 33.0], [60.9, 33.0], [61.0, 33.0], [61.1, 33.0], [61.2, 33.0], [61.3, 33.0], [61.4, 33.0], [61.5, 33.0], [61.6, 33.0], [61.7, 33.0], [61.8, 33.0], [61.9, 33.0], [62.0, 33.0], [62.1, 33.0], [62.2, 33.0], [62.3, 33.0], [62.4, 33.0], [62.5, 33.0], [62.6, 33.0], [62.7, 33.0], [62.8, 33.0], [62.9, 33.0], [63.0, 33.0], [63.1, 33.0], [63.2, 33.0], [63.3, 33.0], [63.4, 33.0], [63.5, 33.0], [63.6, 33.0], [63.7, 33.0], [63.8, 33.0], [63.9, 33.0], [64.0, 33.0], [64.1, 33.0], [64.2, 33.0], [64.3, 33.0], [64.4, 33.0], [64.5, 33.0], [64.6, 33.0], [64.7, 33.0], [64.8, 33.0], [64.9, 33.0], [65.0, 33.0], [65.1, 33.0], [65.2, 33.0], [65.3, 33.0], [65.4, 33.0], [65.5, 33.0], [65.6, 33.0], [65.7, 33.0], [65.8, 33.0], [65.9, 33.0], [66.0, 33.0], [66.1, 33.0], [66.2, 33.0], [66.3, 33.0], [66.4, 33.0], [66.5, 33.0], [66.6, 33.0], [66.7, 33.0], [66.8, 33.0], [66.9, 33.0], [67.0, 33.0], [67.1, 33.0], [67.2, 33.0], [67.3, 33.0], [67.4, 33.0], [67.5, 33.0], [67.6, 33.0], [67.7, 33.0], [67.8, 33.0], [67.9, 33.0], [68.0, 33.0], [68.1, 33.0], [68.2, 33.0], [68.3, 33.0], [68.4, 33.0], [68.5, 33.0], [68.6, 33.0], [68.7, 33.0], [68.8, 33.0], [68.9, 33.0], [69.0, 33.0], [69.1, 33.0], [69.2, 33.0], [69.3, 33.0], [69.4, 33.0], [69.5, 33.0], [69.6, 33.0], [69.7, 33.0], [69.8, 33.0], [69.9, 33.0], [70.0, 33.0], [70.1, 33.0], [70.2, 33.0], [70.3, 33.0], [70.4, 33.0], [70.5, 33.0], [70.6, 33.0], [70.7, 33.0], [70.8, 33.0], [70.9, 33.0], [71.0, 33.0], [71.1, 33.0], [71.2, 33.0], [71.3, 33.0], [71.4, 33.0], [71.5, 33.0], [71.6, 33.0], [71.7, 33.0], [71.8, 33.0], [71.9, 33.0], [72.0, 33.0], [72.1, 33.0], [72.2, 33.0], [72.3, 33.0], [72.4, 33.0], [72.5, 33.0], [72.6, 33.0], [72.7, 33.0], [72.8, 34.0], [72.9, 34.0], [73.0, 34.0], [73.1, 34.0], [73.2, 34.0], [73.3, 34.0], [73.4, 34.0], [73.5, 34.0], [73.6, 34.0], [73.7, 34.0], [73.8, 34.0], [73.9, 34.0], [74.0, 34.0], [74.1, 34.0], [74.2, 34.0], [74.3, 34.0], [74.4, 34.0], [74.5, 34.0], [74.6, 34.0], [74.7, 34.0], [74.8, 34.0], [74.9, 34.0], [75.0, 34.0], [75.1, 34.0], [75.2, 34.0], [75.3, 34.0], [75.4, 34.0], [75.5, 34.0], [75.6, 34.0], [75.7, 34.0], [75.8, 34.0], [75.9, 34.0], [76.0, 34.0], [76.1, 34.0], [76.2, 34.0], [76.3, 34.0], [76.4, 34.0], [76.5, 34.0], [76.6, 34.0], [76.7, 34.0], [76.8, 34.0], [76.9, 34.0], [77.0, 34.0], [77.1, 34.0], [77.2, 34.0], [77.3, 34.0], [77.4, 34.0], [77.5, 34.0], [77.6, 34.0], [77.7, 34.0], [77.8, 34.0], [77.9, 34.0], [78.0, 34.0], [78.1, 34.0], [78.2, 34.0], [78.3, 34.0], [78.4, 34.0], [78.5, 34.0], [78.6, 34.0], [78.7, 34.0], [78.8, 34.0], [78.9, 34.0], [79.0, 34.0], [79.1, 34.0], [79.2, 34.0], [79.3, 34.0], [79.4, 34.0], [79.5, 34.0], [79.6, 34.0], [79.7, 34.0], [79.8, 34.0], [79.9, 34.0], [80.0, 34.0], [80.1, 34.0], [80.2, 34.0], [80.3, 34.0], [80.4, 34.0], [80.5, 34.0], [80.6, 34.0], [80.7, 34.0], [80.8, 34.0], [80.9, 34.0], [81.0, 34.0], [81.1, 34.0], [81.2, 34.0], [81.3, 34.0], [81.4, 34.0], [81.5, 34.0], [81.6, 34.0], [81.7, 34.0], [81.8, 34.0], [81.9, 34.0], [82.0, 34.0], [82.1, 34.0], [82.2, 34.0], [82.3, 34.0], [82.4, 34.0], [82.5, 34.0], [82.6, 34.0], [82.7, 34.0], [82.8, 34.0], [82.9, 34.0], [83.0, 34.0], [83.1, 34.0], [83.2, 34.0], [83.3, 34.0], [83.4, 34.0], [83.5, 34.0], [83.6, 34.0], [83.7, 34.0], [83.8, 34.0], [83.9, 34.0], [84.0, 34.0], [84.1, 34.0], [84.2, 34.0], [84.3, 34.0], [84.4, 34.0], [84.5, 34.0], [84.6, 34.0], [84.7, 34.0], [84.8, 34.0], [84.9, 34.0], [85.0, 34.0], [85.1, 34.0], [85.2, 34.0], [85.3, 34.0], [85.4, 34.0], [85.5, 34.0], [85.6, 34.0], [85.7, 34.0], [85.8, 34.0], [85.9, 34.0], [86.0, 34.0], [86.1, 34.0], [86.2, 34.0], [86.3, 34.0], [86.4, 34.0], [86.5, 34.0], [86.6, 34.0], [86.7, 34.0], [86.8, 34.0], [86.9, 34.0], [87.0, 34.0], [87.1, 34.0], [87.2, 34.0], [87.3, 34.0], [87.4, 34.0], [87.5, 34.0], [87.6, 34.0], [87.7, 34.0], [87.8, 35.0], [87.9, 35.0], [88.0, 35.0], [88.1, 35.0], [88.2, 35.0], [88.3, 35.0], [88.4, 35.0], [88.5, 35.0], [88.6, 35.0], [88.7, 35.0], [88.8, 35.0], [88.9, 35.0], [89.0, 35.0], [89.1, 35.0], [89.2, 35.0], [89.3, 35.0], [89.4, 35.0], [89.5, 35.0], [89.6, 35.0], [89.7, 35.0], [89.8, 35.0], [89.9, 35.0], [90.0, 35.0], [90.1, 35.0], [90.2, 35.0], [90.3, 35.0], [90.4, 35.0], [90.5, 35.0], [90.6, 35.0], [90.7, 35.0], [90.8, 35.0], [90.9, 35.0], [91.0, 35.0], [91.1, 35.0], [91.2, 35.0], [91.3, 35.0], [91.4, 35.0], [91.5, 35.0], [91.6, 35.0], [91.7, 35.0], [91.8, 35.0], [91.9, 35.0], [92.0, 35.0], [92.1, 35.0], [92.2, 35.0], [92.3, 35.0], [92.4, 35.0], [92.5, 35.0], [92.6, 35.0], [92.7, 35.0], [92.8, 35.0], [92.9, 35.0], [93.0, 35.0], [93.1, 35.0], [93.2, 35.0], [93.3, 35.0], [93.4, 35.0], [93.5, 35.0], [93.6, 35.0], [93.7, 35.0], [93.8, 35.0], [93.9, 35.0], [94.0, 35.0], [94.1, 35.0], [94.2, 35.0], [94.3, 35.0], [94.4, 35.0], [94.5, 36.0], [94.6, 36.0], [94.7, 36.0], [94.8, 36.0], [94.9, 36.0], [95.0, 36.0], [95.1, 36.0], [95.2, 36.0], [95.3, 36.0], [95.4, 36.0], [95.5, 36.0], [95.6, 36.0], [95.7, 36.0], [95.8, 36.0], [95.9, 36.0], [96.0, 36.0], [96.1, 36.0], [96.2, 36.0], [96.3, 36.0], [96.4, 36.0], [96.5, 36.0], [96.6, 36.0], [96.7, 36.0], [96.8, 36.0], [96.9, 36.0], [97.0, 36.0], [97.1, 36.0], [97.2, 36.0], [97.3, 36.0], [97.4, 36.0], [97.5, 36.0], [97.6, 37.0], [97.7, 37.0], [97.8, 37.0], [97.9, 37.0], [98.0, 37.0], [98.1, 37.0], [98.2, 37.0], [98.3, 37.0], [98.4, 37.0], [98.5, 37.0], [98.6, 37.0], [98.7, 37.0], [98.8, 37.0], [98.9, 38.0], [99.0, 38.0], [99.1, 38.0], [99.2, 38.0], [99.3, 38.0], [99.4, 38.0], [99.5, 39.0], [99.6, 39.0], [99.7, 40.0], [99.8, 40.0], [99.9, 43.0], [100.0, 259.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 9998.0, "series": [{"data": [[2100.0, 1.0], [600.0, 837.0], [700.0, 525.0], [2800.0, 1.0], [200.0, 2101.0], [800.0, 326.0], [900.0, 223.0], [1000.0, 127.0], [1100.0, 68.0], [300.0, 2030.0], [1200.0, 41.0], [1300.0, 31.0], [1400.0, 24.0], [1500.0, 12.0], [100.0, 841.0], [400.0, 1630.0], [1600.0, 6.0], [1700.0, 4.0], [1800.0, 4.0], [1900.0, 2.0], [500.0, 1164.0], [2000.0, 2.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 9998.0], [200.0, 2.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 2800.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 31.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 16616.0, "series": [{"data": [[0.0, 16616.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 3353.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 31.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.74709854E12, "maxY": 1.0, "series": [{"data": [[1.74709896E12, 1.0], [1.74709998E12, 1.0], [1.7471022E12, 1.0], [1.7471028E12, 1.0], [1.74710058E12, 1.0], [1.74710118E12, 1.0], [1.7471034E12, 1.0], [1.74710016E12, 1.0], [1.74710178E12, 1.0], [1.74709956E12, 1.0], [1.7470998E12, 1.0], [1.74710142E12, 1.0], [1.7471004E12, 1.0], [1.74710202E12, 1.0], [1.74709938E12, 1.0], [1.747101E12, 1.0], [1.74710262E12, 1.0], [1.74709878E12, 1.0], [1.7471016E12, 1.0], [1.74710322E12, 1.0], [1.74710124E12, 1.0], [1.74710286E12, 1.0], [1.74709902E12, 1.0], [1.74710346E12, 1.0], [1.74709962E12, 1.0], [1.74710184E12, 1.0], [1.7470992E12, 1.0], [1.74710022E12, 1.0], [1.74710244E12, 1.0], [1.7470986E12, 1.0], [1.74710082E12, 1.0], [1.74710304E12, 1.0], [1.74709944E12, 1.0], [1.74710046E12, 1.0], [1.74710268E12, 1.0], [1.74709884E12, 1.0], [1.74710106E12, 1.0], [1.74710328E12, 1.0], [1.74710004E12, 1.0], [1.74710166E12, 1.0], [1.74710064E12, 1.0], [1.74710226E12, 1.0], [1.74709866E12, 1.0], [1.74710028E12, 1.0], [1.7471019E12, 1.0], [1.74710088E12, 1.0], [1.7471025E12, 1.0], [1.74710148E12, 1.0], [1.7471031E12, 1.0], [1.74709926E12, 1.0], [1.74709986E12, 1.0], [1.74710208E12, 1.0], [1.74710334E12, 1.0], [1.74710172E12, 1.0], [1.7470995E12, 1.0], [1.7471001E12, 1.0], [1.74710232E12, 1.0], [1.7471007E12, 1.0], [1.74710292E12, 1.0], [1.74709968E12, 1.0], [1.74709908E12, 1.0], [1.7471013E12, 1.0], [1.74710094E12, 1.0], [1.74710316E12, 1.0], [1.74709992E12, 1.0], [1.74709932E12, 1.0], [1.74710154E12, 1.0], [1.7470989E12, 1.0], [1.74710052E12, 1.0], [1.74710214E12, 1.0], [1.74710112E12, 1.0], [1.74710274E12, 1.0], [1.74709914E12, 1.0], [1.74710076E12, 1.0], [1.74710238E12, 1.0], [1.74709854E12, 1.0], [1.74710136E12, 1.0], [1.74710298E12, 1.0], [1.74709872E12, 1.0], [1.74709974E12, 1.0], [1.74710196E12, 1.0], [1.74710034E12, 1.0], [1.74710256E12, 1.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74710346E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 32.53209999999999, "minX": 1.0, "maxY": 455.5704000000003, "series": [{"data": [[1.0, 455.5704000000003]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.0, 455.5704000000003]], "isOverall": false, "label": "Create CSR-Aggregated", "isController": false}, {"data": [[1.0, 32.53209999999999]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}, {"data": [[1.0, 32.53209999999999]], "isOverall": false, "label": "HTTP Request - enroll-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 207.31666666666666, "minX": 1.74709854E12, "maxY": 20458.233333333334, "series": [{"data": [[1.74709896E12, 18986.333333333332], [1.74709998E12, 18544.9], [1.7471022E12, 18860.283333333333], [1.7471028E12, 17367.35], [1.74710058E12, 18692.066666666666], [1.74710118E12, 17220.133333333335], [1.7471034E12, 18986.483333333334], [1.74710016E12, 18544.916666666668], [1.74710178E12, 19575.066666666666], [1.74709956E12, 18692.05], [1.7470998E12, 16631.483333333334], [1.74710142E12, 17661.7], [1.7471004E12, 18103.4], [1.74710202E12, 16631.45], [1.74709938E12, 17073.0], [1.747101E12, 18271.683333333334], [1.74710262E12, 19133.6], [1.74709878E12, 17935.016666666666], [1.7471016E12, 16631.533333333333], [1.74710322E12, 18523.616666666665], [1.74710124E12, 17514.633333333335], [1.74710286E12, 18397.583333333332], [1.74709902E12, 17514.516666666666], [1.74710346E12, 1030.2666666666667], [1.74709962E12, 19280.733333333334], [1.74710184E12, 18103.2], [1.7470992E12, 17072.983333333334], [1.74710022E12, 17808.85], [1.74710244E12, 17809.0], [1.7470986E12, 16484.266666666666], [1.74710082E12, 18397.683333333334], [1.74710304E12, 18544.866666666665], [1.74709944E12, 16189.866666666667], [1.74710046E12, 16631.5], [1.74710268E12, 18250.516666666666], [1.74709884E12, 17514.616666666665], [1.74710106E12, 18670.916666666668], [1.74710328E12, 18544.833333333332], [1.74710004E12, 17094.15], [1.74710166E12, 18271.65], [1.74710064E12, 16925.866666666665], [1.74710226E12, 17935.0], [1.74709866E12, 17073.166666666668], [1.74710028E12, 19722.25], [1.7471019E12, 17661.7], [1.74710088E12, 18397.7], [1.7471025E12, 18692.05], [1.74710148E12, 20458.233333333334], [1.7471031E12, 18544.766666666666], [1.74709926E12, 17956.033333333333], [1.74709986E12, 18397.55], [1.74710208E12, 16778.683333333334], [1.74710334E12, 18691.983333333334], [1.74710172E12, 18082.033333333333], [1.7470995E12, 18839.116666666665], [1.7471001E12, 18082.15], [1.74710232E12, 17809.066666666666], [1.7471007E12, 17808.916666666668], [1.74710292E12, 16925.85], [1.74709968E12, 18839.183333333334], [1.74709908E12, 18124.45], [1.7471013E12, 19574.983333333334], [1.74710094E12, 17220.083333333332], [1.74710316E12, 16947.083333333332], [1.74709992E12, 18397.666666666668], [1.74709932E12, 19722.383333333335], [1.74710154E12, 18692.05], [1.7470989E12, 17514.466666666667], [1.74710052E12, 17661.766666666666], [1.74710214E12, 18839.166666666668], [1.74710112E12, 18544.8], [1.74710274E12, 17956.15], [1.74709914E12, 17640.616666666665], [1.74710076E12, 17956.15], [1.74710238E12, 18103.333333333332], [1.74709854E12, 6770.383333333333], [1.74710136E12, 19575.166666666668], [1.74710298E12, 18250.45], [1.74709872E12, 17830.05], [1.74709974E12, 18103.35], [1.74710196E12, 18250.533333333333], [1.74710034E12, 18103.316666666666], [1.74710256E12, 17220.216666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74709896E12, 3820.55], [1.74709998E12, 3731.7], [1.7471022E12, 3790.9333333333334], [1.7471028E12, 3494.766666666667], [1.74710058E12, 3761.3166666666666], [1.74710118E12, 3465.15], [1.7471034E12, 3820.55], [1.74710016E12, 3731.7], [1.74710178E12, 3939.016666666667], [1.74709956E12, 3761.3166666666666], [1.7470998E12, 3346.6833333333334], [1.74710142E12, 3554.0], [1.7471004E12, 3642.85], [1.74710202E12, 3346.6833333333334], [1.74709938E12, 3435.5333333333333], [1.747101E12, 3672.4666666666667], [1.74710262E12, 3850.1666666666665], [1.74709878E12, 3613.233333333333], [1.7471016E12, 3346.6833333333334], [1.74710322E12, 3731.7], [1.74710124E12, 3524.383333333333], [1.74710286E12, 3702.0833333333335], [1.74709902E12, 3524.383333333333], [1.74710346E12, 207.31666666666666], [1.74709962E12, 3879.7833333333333], [1.74710184E12, 3642.85], [1.7470992E12, 3435.5333333333333], [1.74710022E12, 3583.616666666667], [1.74710244E12, 3583.616666666667], [1.7470986E12, 3317.0666666666666], [1.74710082E12, 3702.0833333333335], [1.74710304E12, 3731.7], [1.74709944E12, 3257.8333333333335], [1.74710046E12, 3346.6833333333334], [1.74710268E12, 3672.4666666666667], [1.74709884E12, 3524.383333333333], [1.74710106E12, 3761.3166666666666], [1.74710328E12, 3731.7], [1.74710004E12, 3435.5333333333333], [1.74710166E12, 3672.4666666666667], [1.74710064E12, 3405.9166666666665], [1.74710226E12, 3613.233333333333], [1.74709866E12, 3435.5333333333333], [1.74710028E12, 3968.633333333333], [1.7471019E12, 3554.0], [1.74710088E12, 3702.0833333333335], [1.7471025E12, 3761.3166666666666], [1.74710148E12, 4116.716666666666], [1.7471031E12, 3731.7], [1.74709926E12, 3613.233333333333], [1.74709986E12, 3702.0833333333335], [1.74710208E12, 3376.3], [1.74710334E12, 3761.3166666666666], [1.74710172E12, 3642.85], [1.7470995E12, 3790.9333333333334], [1.7471001E12, 3642.85], [1.74710232E12, 3583.616666666667], [1.7471007E12, 3583.616666666667], [1.74710292E12, 3405.9166666666665], [1.74709968E12, 3790.9333333333334], [1.74709908E12, 3642.85], [1.7471013E12, 3939.016666666667], [1.74710094E12, 3465.15], [1.74710316E12, 3405.9166666666665], [1.74709992E12, 3702.0833333333335], [1.74709932E12, 3968.633333333333], [1.74710154E12, 3761.3166666666666], [1.7470989E12, 3524.383333333333], [1.74710052E12, 3554.0], [1.74710214E12, 3790.9333333333334], [1.74710112E12, 3731.7], [1.74710274E12, 3613.233333333333], [1.74709914E12, 3554.0], [1.74710076E12, 3613.233333333333], [1.74710238E12, 3642.85], [1.74709854E12, 1362.3666666666666], [1.74710136E12, 3939.016666666667], [1.74710298E12, 3672.4666666666667], [1.74709872E12, 3583.616666666667], [1.74709974E12, 3642.85], [1.74710196E12, 3672.4666666666667], [1.74710034E12, 3642.85], [1.74710256E12, 3465.15]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74710346E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 30.859504132231404, "minX": 1.74709854E12, "maxY": 512.4272727272727, "series": [{"data": [[1.74709896E12, 430.06201550387584], [1.74709998E12, 442.62698412698404], [1.7471022E12, 433.1007751937983], [1.7471028E12, 475.813559322034], [1.74710058E12, 435.811023622047], [1.74710118E12, 476.6239316239318], [1.7471034E12, 429.565891472868], [1.74710016E12, 445.12698412698427], [1.74710178E12, 413.1428571428571], [1.74709956E12, 434.0], [1.7470998E12, 497.15044247787614], [1.74710142E12, 464.7166666666667], [1.7471004E12, 450.9837398373986], [1.74710202E12, 501.4159292035399], [1.74709938E12, 484.37931034482773], [1.747101E12, 449.352], [1.74710262E12, 430.6307692307694], [1.74709878E12, 459.82644628099183], [1.7471016E12, 497.84070796460173], [1.74710322E12, 444.88000000000005], [1.74710124E12, 474.1092436974791], [1.74710286E12, 446.5039999999999], [1.74709902E12, 467.9411764705883], [1.74710346E12, 479.28571428571433], [1.74709962E12, 427.28244274809134], [1.74710184E12, 455.8861788617886], [1.7470992E12, 484.6379310344828], [1.74710022E12, 461.7190082644628], [1.74710244E12, 461.91735537190095], [1.7470986E12, 499.62500000000017], [1.74710082E12, 450.90399999999994], [1.74710304E12, 441.9047619047619], [1.74709944E12, 512.4272727272727], [1.74710046E12, 502.2831858407081], [1.74710268E12, 447.57258064516105], [1.74709884E12, 472.109243697479], [1.74710106E12, 443.2777777777779], [1.74710328E12, 443.05555555555543], [1.74710004E12, 484.2307692307692], [1.74710166E12, 450.74399999999997], [1.74710064E12, 492.6260869565218], [1.74710226E12, 461.9256198347106], [1.74709866E12, 467.2844827586207], [1.74710028E12, 414.51492537313436], [1.7471019E12, 472.34166666666675], [1.74710088E12, 442.74399999999997], [1.7471025E12, 441.2362204724409], [1.74710148E12, 400.21582733812954], [1.7471031E12, 445.03174603174614], [1.74709926E12, 458.68032786885243], [1.74709986E12, 441.304], [1.74710208E12, 491.2192982456141], [1.74710334E12, 440.77165354330714], [1.74710172E12, 457.3360655737705], [1.7470995E12, 437.6484375000001], [1.7471001E12, 455.7049180327866], [1.74710232E12, 460.6942148760329], [1.7471007E12, 462.8347107438016], [1.74710292E12, 487.4173913043477], [1.74709968E12, 433.43750000000006], [1.74709908E12, 457.5322580645161], [1.7471013E12, 416.42857142857156], [1.74710094E12, 479.3333333333335], [1.74710316E12, 485.8793103448276], [1.74709992E12, 449.5679999999999], [1.74709932E12, 411.2089552238805], [1.74710154E12, 437.8897637795276], [1.7470989E12, 464.7310924369748], [1.74710052E12, 468.6416666666667], [1.74710214E12, 437.5781249999998], [1.74710112E12, 441.8174603174605], [1.74710274E12, 462.4590163934426], [1.74709914E12, 468.3445378151261], [1.74710076E12, 456.5983606557375], [1.74710238E12, 457.8780487804879], [1.74709854E12, 499.17391304347825], [1.74710136E12, 418.5714285714287], [1.74710298E12, 451.1370967741936], [1.74709872E12, 472.27868852459034], [1.74709974E12, 456.72357723577227], [1.74710196E12, 449.61290322580646], [1.74710034E12, 455.0487804878049], [1.74710256E12, 480.7863247863248]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74709896E12, 33.736434108527135], [1.74709998E12, 32.484126984126966], [1.7471022E12, 32.218750000000014], [1.7471028E12, 31.34745762711864], [1.74710058E12, 32.244094488188985], [1.74710118E12, 32.34188034188034], [1.7471034E12, 33.55038759689925], [1.74710016E12, 32.06349206349206], [1.74710178E12, 32.300751879699234], [1.74709956E12, 33.08661417322836], [1.7470998E12, 32.681415929203524], [1.74710142E12, 33.34166666666667], [1.7471004E12, 31.406504065040647], [1.74710202E12, 31.46017699115043], [1.74709938E12, 33.05172413793103], [1.747101E12, 33.298387096774185], [1.74710262E12, 31.06153846153845], [1.74709878E12, 32.66393442622948], [1.7471016E12, 32.26548672566373], [1.74710322E12, 31.404761904761905], [1.74710124E12, 33.159663865546214], [1.74710286E12, 32.072], [1.74709902E12, 33.43697478991598], [1.74710346E12, 31.714285714285715], [1.74709962E12, 32.46564885496185], [1.74710184E12, 32.21138211382114], [1.7470992E12, 32.61206896551725], [1.74710022E12, 32.44628099173554], [1.74710244E12, 30.859504132231404], [1.7470986E12, 34.964285714285715], [1.74710082E12, 31.464000000000002], [1.74710304E12, 32.817460317460316], [1.74709944E12, 32.49090909090909], [1.74710046E12, 31.628318584070783], [1.74710268E12, 32.49193548387097], [1.74709884E12, 32.58823529411766], [1.74710106E12, 32.10236220472441], [1.74710328E12, 32.16666666666667], [1.74710004E12, 31.577586206896544], [1.74710166E12, 31.524193548387093], [1.74710064E12, 32.313043478260866], [1.74710226E12, 31.5983606557377], [1.74709866E12, 34.04310344827583], [1.74710028E12, 32.97014925373135], [1.7471019E12, 32.008333333333326], [1.74710088E12, 32.34400000000001], [1.7471025E12, 31.685039370078744], [1.74710148E12, 32.66187050359709], [1.7471031E12, 32.39682539682539], [1.74709926E12, 33.3688524590164], [1.74709986E12, 33.11999999999999], [1.74710208E12, 31.58771929824561], [1.74710334E12, 32.314960629921266], [1.74710172E12, 32.60162601626015], [1.7470995E12, 32.64843749999999], [1.7471001E12, 32.63414634146343], [1.74710232E12, 32.80991735537193], [1.7471007E12, 32.371900826446286], [1.74710292E12, 32.8521739130435], [1.74709968E12, 32.64843749999999], [1.74709908E12, 32.552845528455286], [1.7471013E12, 32.78947368421051], [1.74710094E12, 34.09401709401711], [1.74710316E12, 32.19130434782608], [1.74709992E12, 32.66400000000001], [1.74709932E12, 33.22388059701491], [1.74710154E12, 32.14960629921261], [1.7470989E12, 33.21008403361345], [1.74710052E12, 31.78333333333334], [1.74710214E12, 32.375], [1.74710112E12, 32.04761904761904], [1.74710274E12, 31.836065573770497], [1.74709914E12, 31.674999999999997], [1.74710076E12, 32.65573770491804], [1.74710238E12, 32.26829268292682], [1.74709854E12, 43.76086956521739], [1.74710136E12, 32.729323308270665], [1.74710298E12, 32.685483870967744], [1.74709872E12, 33.545454545454525], [1.74709974E12, 33.479674796747965], [1.74710196E12, 32.161290322580655], [1.74710034E12, 32.48780487804878], [1.74710256E12, 32.316239316239326]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74710346E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74709854E12, "maxY": 43.71739130434783, "series": [{"data": [[1.74709896E12, 0.0], [1.74709998E12, 0.0], [1.7471022E12, 0.0], [1.7471028E12, 0.0], [1.74710058E12, 0.0], [1.74710118E12, 0.0], [1.7471034E12, 0.0], [1.74710016E12, 0.0], [1.74710178E12, 0.0], [1.74709956E12, 0.0], [1.7470998E12, 0.0], [1.74710142E12, 0.0], [1.7471004E12, 0.0], [1.74710202E12, 0.0], [1.74709938E12, 0.0], [1.747101E12, 0.0], [1.74710262E12, 0.0], [1.74709878E12, 0.0], [1.7471016E12, 0.0], [1.74710322E12, 0.0], [1.74710124E12, 0.0], [1.74710286E12, 0.0], [1.74709902E12, 0.0], [1.74710346E12, 0.0], [1.74709962E12, 0.0], [1.74710184E12, 0.0], [1.7470992E12, 0.0], [1.74710022E12, 0.0], [1.74710244E12, 0.0], [1.7470986E12, 0.0], [1.74710082E12, 0.0], [1.74710304E12, 0.0], [1.74709944E12, 0.0], [1.74710046E12, 0.0], [1.74710268E12, 0.0], [1.74709884E12, 0.0], [1.74710106E12, 0.0], [1.74710328E12, 0.0], [1.74710004E12, 0.0], [1.74710166E12, 0.0], [1.74710064E12, 0.0], [1.74710226E12, 0.0], [1.74709866E12, 0.0], [1.74710028E12, 0.0], [1.7471019E12, 0.0], [1.74710088E12, 0.0], [1.7471025E12, 0.0], [1.74710148E12, 0.0], [1.7471031E12, 0.0], [1.74709926E12, 0.0], [1.74709986E12, 0.0], [1.74710208E12, 0.0], [1.74710334E12, 0.0], [1.74710172E12, 0.0], [1.7470995E12, 0.0], [1.7471001E12, 0.0], [1.74710232E12, 0.0], [1.7471007E12, 0.0], [1.74710292E12, 0.0], [1.74709968E12, 0.0], [1.74709908E12, 0.0], [1.7471013E12, 0.0], [1.74710094E12, 0.0], [1.74710316E12, 0.0], [1.74709992E12, 0.0], [1.74709932E12, 0.0], [1.74710154E12, 0.0], [1.7470989E12, 0.0], [1.74710052E12, 0.0], [1.74710214E12, 0.0], [1.74710112E12, 0.0], [1.74710274E12, 0.0], [1.74709914E12, 0.0], [1.74710076E12, 0.0], [1.74710238E12, 0.0], [1.74709854E12, 0.0], [1.74710136E12, 0.0], [1.74710298E12, 0.0], [1.74709872E12, 0.0], [1.74709974E12, 0.0], [1.74710196E12, 0.0], [1.74710034E12, 0.0], [1.74710256E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74709896E12, 33.720930232558146], [1.74709998E12, 32.468253968253975], [1.7471022E12, 32.21093749999998], [1.7471028E12, 31.34745762711864], [1.74710058E12, 32.228346456692925], [1.74710118E12, 32.34188034188034], [1.7471034E12, 33.53488372093024], [1.74710016E12, 32.06349206349206], [1.74710178E12, 32.28571428571427], [1.74709956E12, 33.08661417322836], [1.7470998E12, 32.6637168141593], [1.74710142E12, 33.34166666666667], [1.7471004E12, 31.406504065040647], [1.74710202E12, 31.46017699115043], [1.74709938E12, 33.02586206896551], [1.747101E12, 33.282258064516135], [1.74710262E12, 31.06153846153845], [1.74709878E12, 32.66393442622948], [1.7471016E12, 32.25663716814159], [1.74710322E12, 31.396825396825395], [1.74710124E12, 33.151260504201694], [1.74710286E12, 32.072], [1.74709902E12, 33.42857142857144], [1.74710346E12, 31.714285714285715], [1.74709962E12, 32.45801526717559], [1.74710184E12, 32.21138211382114], [1.7470992E12, 32.59482758620692], [1.74710022E12, 32.42148760330581], [1.74710244E12, 30.834710743801658], [1.7470986E12, 34.92857142857143], [1.74710082E12, 31.455999999999996], [1.74710304E12, 32.801587301587276], [1.74709944E12, 32.4818181818182], [1.74710046E12, 31.61061946902655], [1.74710268E12, 32.49193548387097], [1.74709884E12, 32.554621848739494], [1.74710106E12, 32.09448818897637], [1.74710328E12, 32.16666666666667], [1.74710004E12, 31.560344827586203], [1.74710166E12, 31.508064516129036], [1.74710064E12, 32.30434782608698], [1.74710226E12, 31.5983606557377], [1.74709866E12, 33.99999999999999], [1.74710028E12, 32.96268656716416], [1.7471019E12, 32.008333333333326], [1.74710088E12, 32.34400000000001], [1.7471025E12, 31.677165354330704], [1.74710148E12, 32.66187050359709], [1.7471031E12, 32.39682539682539], [1.74709926E12, 33.352459016393446], [1.74709986E12, 33.10400000000001], [1.74710208E12, 31.58771929824561], [1.74710334E12, 32.30708661417322], [1.74710172E12, 32.60162601626015], [1.7470995E12, 32.64062499999999], [1.7471001E12, 32.61788617886177], [1.74710232E12, 32.80991735537193], [1.7471007E12, 32.355371900826434], [1.74710292E12, 32.834782608695654], [1.74709968E12, 32.64843749999999], [1.74709908E12, 32.53658536585367], [1.7471013E12, 32.781954887218056], [1.74710094E12, 34.09401709401711], [1.74710316E12, 32.19130434782608], [1.74709992E12, 32.647999999999996], [1.74709932E12, 33.20895522388061], [1.74710154E12, 32.14173228346455], [1.7470989E12, 33.21008403361345], [1.74710052E12, 31.775], [1.74710214E12, 32.3671875], [1.74710112E12, 32.031746031746025], [1.74710274E12, 31.81147540983607], [1.74709914E12, 31.674999999999997], [1.74710076E12, 32.65573770491804], [1.74710238E12, 32.26016260162603], [1.74709854E12, 43.71739130434783], [1.74710136E12, 32.70676691729322], [1.74710298E12, 32.685483870967744], [1.74709872E12, 33.52892561983471], [1.74709974E12, 33.447154471544714], [1.74710196E12, 32.161290322580655], [1.74710034E12, 32.47967479674797], [1.74710256E12, 32.307692307692314]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74710346E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74709854E12, "maxY": 4.195652173913044, "series": [{"data": [[1.74709896E12, 0.0], [1.74709998E12, 0.0], [1.7471022E12, 0.0], [1.7471028E12, 0.0], [1.74710058E12, 0.0], [1.74710118E12, 0.0], [1.7471034E12, 0.0], [1.74710016E12, 0.0], [1.74710178E12, 0.0], [1.74709956E12, 0.0], [1.7470998E12, 0.0], [1.74710142E12, 0.0], [1.7471004E12, 0.0], [1.74710202E12, 0.0], [1.74709938E12, 0.0], [1.747101E12, 0.0], [1.74710262E12, 0.0], [1.74709878E12, 0.0], [1.7471016E12, 0.0], [1.74710322E12, 0.0], [1.74710124E12, 0.0], [1.74710286E12, 0.0], [1.74709902E12, 0.0], [1.74710346E12, 0.0], [1.74709962E12, 0.0], [1.74710184E12, 0.0], [1.7470992E12, 0.0], [1.74710022E12, 0.0], [1.74710244E12, 0.0], [1.7470986E12, 0.0], [1.74710082E12, 0.0], [1.74710304E12, 0.0], [1.74709944E12, 0.0], [1.74710046E12, 0.0], [1.74710268E12, 0.0], [1.74709884E12, 0.0], [1.74710106E12, 0.0], [1.74710328E12, 0.0], [1.74710004E12, 0.0], [1.74710166E12, 0.0], [1.74710064E12, 0.0], [1.74710226E12, 0.0], [1.74709866E12, 0.0], [1.74710028E12, 0.0], [1.7471019E12, 0.0], [1.74710088E12, 0.0], [1.7471025E12, 0.0], [1.74710148E12, 0.0], [1.7471031E12, 0.0], [1.74709926E12, 0.0], [1.74709986E12, 0.0], [1.74710208E12, 0.0], [1.74710334E12, 0.0], [1.74710172E12, 0.0], [1.7470995E12, 0.0], [1.7471001E12, 0.0], [1.74710232E12, 0.0], [1.7471007E12, 0.0], [1.74710292E12, 0.0], [1.74709968E12, 0.0], [1.74709908E12, 0.0], [1.7471013E12, 0.0], [1.74710094E12, 0.0], [1.74710316E12, 0.0], [1.74709992E12, 0.0], [1.74709932E12, 0.0], [1.74710154E12, 0.0], [1.7470989E12, 0.0], [1.74710052E12, 0.0], [1.74710214E12, 0.0], [1.74710112E12, 0.0], [1.74710274E12, 0.0], [1.74709914E12, 0.0], [1.74710076E12, 0.0], [1.74710238E12, 0.0], [1.74709854E12, 0.0], [1.74710136E12, 0.0], [1.74710298E12, 0.0], [1.74709872E12, 0.0], [1.74709974E12, 0.0], [1.74710196E12, 0.0], [1.74710034E12, 0.0], [1.74710256E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74709896E12, 0.031007751937984503], [1.74709998E12, 0.031746031746031744], [1.7471022E12, 0.023437500000000003], [1.7471028E12, 0.02542372881355932], [1.74710058E12, 0.03149606299212599], [1.74710118E12, 0.03418803418803418], [1.7471034E12, 0.023255813953488386], [1.74710016E12, 0.023809523809523815], [1.74710178E12, 0.02255639097744361], [1.74709956E12, 0.02362204724409449], [1.7470998E12, 0.035398230088495575], [1.74710142E12, 0.03333333333333333], [1.7471004E12, 0.03252032520325203], [1.74710202E12, 0.026548672566371685], [1.74709938E12, 0.034482758620689655], [1.747101E12, 0.02419354838709678], [1.74710262E12, 0.030769230769230767], [1.74709878E12, 0.04918032786885246], [1.7471016E12, 0.02654867256637169], [1.74710322E12, 0.023809523809523822], [1.74710124E12, 0.03361344537815125], [1.74710286E12, 0.024], [1.74709902E12, 0.033613445378151266], [1.74710346E12, 0.4285714285714286], [1.74709962E12, 0.030534351145038174], [1.74710184E12, 0.024390243902439025], [1.7470992E12, 0.03448275862068966], [1.74710022E12, 0.024793388429752067], [1.74710244E12, 0.024793388429752063], [1.7470986E12, 0.07142857142857144], [1.74710082E12, 0.032], [1.74710304E12, 0.02380952380952381], [1.74709944E12, 0.03636363636363636], [1.74710046E12, 0.026548672566371685], [1.74710268E12, 0.024193548387096774], [1.74709884E12, 0.04201680672268906], [1.74710106E12, 0.03149606299212599], [1.74710328E12, 0.031746031746031786], [1.74710004E12, 0.025862068965517244], [1.74710166E12, 0.02419354838709677], [1.74710064E12, 0.026086956521739132], [1.74710226E12, 0.024590163934426226], [1.74709866E12, 0.05172413793103449], [1.74710028E12, 0.029850746268656723], [1.7471019E12, 0.03333333333333333], [1.74710088E12, 0.03200000000000001], [1.7471025E12, 0.02362204724409449], [1.74710148E12, 0.0287769784172662], [1.7471031E12, 0.023809523809523808], [1.74709926E12, 0.03278688524590164], [1.74709986E12, 0.03200000000000001], [1.74710208E12, 0.03508771929824561], [1.74710334E12, 0.015748031496063013], [1.74710172E12, 0.024390243902439022], [1.7470995E12, 0.03125000000000001], [1.7471001E12, 0.024390243902439025], [1.74710232E12, 0.024793388429752063], [1.7471007E12, 0.033057851239669415], [1.74710292E12, 0.02608695652173913], [1.74709968E12, 0.023437500000000003], [1.74709908E12, 0.032520325203252036], [1.7471013E12, 0.022556390977443615], [1.74710094E12, 0.03418803418803418], [1.74710316E12, 0.0], [1.74709992E12, 0.03200000000000001], [1.74709932E12, 0.029850746268656723], [1.74710154E12, 0.031496062992126], [1.7470989E12, 0.042016806722689044], [1.74710052E12, 0.033333333333333326], [1.74710214E12, 0.03125000000000001], [1.74710112E12, 0.02380952380952381], [1.74710274E12, 0.02459016393442623], [1.74709914E12, 0.03333333333333334], [1.74710076E12, 0.032786885245901634], [1.74710238E12, 0.024390243902439025], [1.74709854E12, 4.195652173913044], [1.74710136E12, 0.030075187969924817], [1.74710298E12, 0.024193548387096774], [1.74709872E12, 0.041322314049586764], [1.74709974E12, 0.032520325203252036], [1.74710196E12, 0.03225806451612904], [1.74710034E12, 0.024390243902439025], [1.74710256E12, 0.025641025641025644]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74710346E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 27.0, "minX": 1.74709854E12, "maxY": 2889.0, "series": [{"data": [[1.74709896E12, 969.0], [1.74709998E12, 1099.0], [1.7471022E12, 1216.0], [1.7471028E12, 1399.0], [1.74710058E12, 1428.0], [1.74710118E12, 1286.0], [1.7471034E12, 1425.0], [1.74710016E12, 982.0], [1.74710178E12, 1728.0], [1.74709956E12, 1094.0], [1.7470998E12, 1954.0], [1.74710142E12, 1934.0], [1.7471004E12, 1490.0], [1.74710202E12, 1624.0], [1.74709938E12, 1413.0], [1.747101E12, 1429.0], [1.74710262E12, 1260.0], [1.74709878E12, 1245.0], [1.7471016E12, 1215.0], [1.74710322E12, 1309.0], [1.74710124E12, 1510.0], [1.74710286E12, 1838.0], [1.74709902E12, 1085.0], [1.74710346E12, 1092.0], [1.74709962E12, 1150.0], [1.74710184E12, 1457.0], [1.7470992E12, 1274.0], [1.74710022E12, 1401.0], [1.74710244E12, 1797.0], [1.7470986E12, 1614.0], [1.74710082E12, 1571.0], [1.74710304E12, 1582.0], [1.74709944E12, 2166.0], [1.74710046E12, 1836.0], [1.74710268E12, 1034.0], [1.74709884E12, 2889.0], [1.74710106E12, 1638.0], [1.74710328E12, 1468.0], [1.74710004E12, 1168.0], [1.74710166E12, 1158.0], [1.74710064E12, 1412.0], [1.74710226E12, 1757.0], [1.74709866E12, 1367.0], [1.74710028E12, 1574.0], [1.7471019E12, 1451.0], [1.74710088E12, 1189.0], [1.7471025E12, 1486.0], [1.74710148E12, 1124.0], [1.7471031E12, 1611.0], [1.74709926E12, 1498.0], [1.74709986E12, 1415.0], [1.74710208E12, 1302.0], [1.74710334E12, 1858.0], [1.74710172E12, 1483.0], [1.7470995E12, 1395.0], [1.7471001E12, 1597.0], [1.74710232E12, 1244.0], [1.7471007E12, 1372.0], [1.74710292E12, 1124.0], [1.74709968E12, 1433.0], [1.74709908E12, 1542.0], [1.7471013E12, 1386.0], [1.74710094E12, 1007.0], [1.74710316E12, 1442.0], [1.74709992E12, 1077.0], [1.74709932E12, 979.0], [1.74710154E12, 1709.0], [1.7470989E12, 1508.0], [1.74710052E12, 1239.0], [1.74710214E12, 1288.0], [1.74710112E12, 1806.0], [1.74710274E12, 1175.0], [1.74709914E12, 1295.0], [1.74710076E12, 1608.0], [1.74710238E12, 1106.0], [1.74709854E12, 1512.0], [1.74710136E12, 1500.0], [1.74710298E12, 1349.0], [1.74709872E12, 2024.0], [1.74709974E12, 1440.0], [1.74710196E12, 2038.0], [1.74710034E12, 1584.0], [1.74710256E12, 1592.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.74709896E12, 627.0], [1.74709998E12, 609.8000000000002], [1.7471022E12, 577.8000000000002], [1.7471028E12, 638.6], [1.74710058E12, 596.0], [1.74710118E12, 639.0], [1.7471034E12, 547.8], [1.74710016E12, 643.7], [1.74710178E12, 546.7], [1.74709956E12, 559.0], [1.7470998E12, 686.0000000000003], [1.74710142E12, 644.7], [1.7471004E12, 655.6], [1.74710202E12, 682.2000000000004], [1.74709938E12, 608.2], [1.747101E12, 595.0], [1.74710262E12, 603.6000000000001], [1.74709878E12, 604.1999999999998], [1.7471016E12, 662.4000000000001], [1.74710322E12, 621.4000000000002], [1.74710124E12, 668.5], [1.74710286E12, 590.4000000000002], [1.74709902E12, 623.3], [1.74710346E12, 882.0], [1.74709962E12, 601.1], [1.74710184E12, 605.7], [1.7470992E12, 673.3000000000002], [1.74710022E12, 663.7000000000002], [1.74710244E12, 603.8000000000002], [1.7470986E12, 718.5], [1.74710082E12, 647.5000000000001], [1.74710304E12, 606.4000000000001], [1.74709944E12, 693.0], [1.74710046E12, 685.6], [1.74710268E12, 595.3], [1.74709884E12, 636.3999999999999], [1.74710106E12, 593.1999999999999], [1.74710328E12, 603.6000000000001], [1.74710004E12, 674.0], [1.74710166E12, 644.0], [1.74710064E12, 691.8], [1.74710226E12, 607.6], [1.74709866E12, 639.7000000000002], [1.74710028E12, 557.6999999999999], [1.7471019E12, 633.8], [1.74710088E12, 635.9], [1.7471025E12, 595.0], [1.74710148E12, 528.2], [1.7471031E12, 655.2000000000005], [1.74709926E12, 625.5], [1.74709986E12, 644.3000000000001], [1.74710208E12, 680.8], [1.74710334E12, 599.0], [1.74710172E12, 632.8], [1.7470995E12, 617.5000000000002], [1.7471001E12, 642.6], [1.74710232E12, 614.0000000000002], [1.7471007E12, 624.8000000000001], [1.74710292E12, 703.7], [1.74709968E12, 599.7], [1.74709908E12, 627.6], [1.7471013E12, 538.6], [1.74710094E12, 674.0], [1.74710316E12, 739.8000000000002], [1.74709992E12, 626.4000000000001], [1.74709932E12, 540.5999999999999], [1.74710154E12, 615.0], [1.7470989E12, 622.3], [1.74710052E12, 661.9], [1.74710214E12, 583.9000000000001], [1.74710112E12, 584.4000000000001], [1.74710274E12, 592.0], [1.74709914E12, 677.0], [1.74710076E12, 639.0], [1.74710238E12, 647.8000000000001], [1.74709854E12, 705.5], [1.74710136E12, 596.6000000000001], [1.74710298E12, 640.4], [1.74709872E12, 608.4], [1.74709974E12, 646.2], [1.74710196E12, 589.0], [1.74710034E12, 622.3], [1.74710256E12, 680.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.74709896E12, 869.8800000000017], [1.74709998E12, 1012.9699999999999], [1.7471022E12, 1032.8599999999983], [1.7471028E12, 1011.8299999999998], [1.74710058E12, 1079.9499999999996], [1.74710118E12, 1140.2000000000019], [1.7471034E12, 1207.3400000000042], [1.74710016E12, 967.47], [1.74710178E12, 1056.139999999999], [1.74709956E12, 998.1499999999994], [1.7470998E12, 1247.029999999998], [1.74710142E12, 1099.1100000000001], [1.7471004E12, 1155.73], [1.74710202E12, 1284.6399999999994], [1.74709938E12, 1309.579999999999], [1.747101E12, 1153.5], [1.74710262E12, 929.1899999999997], [1.74709878E12, 1157.64], [1.7471016E12, 1101.4699999999996], [1.74710322E12, 1049.8399999999997], [1.74710124E12, 1302.5399999999984], [1.74710286E12, 1425.5300000000009], [1.74709902E12, 1042.27], [1.74710346E12, 1092.0], [1.74709962E12, 996.8900000000009], [1.74710184E12, 1377.25], [1.7470992E12, 1109.7899999999995], [1.74710022E12, 1238.619999999999], [1.74710244E12, 1360.9099999999996], [1.7470986E12, 1253.25], [1.74710082E12, 1159.800000000001], [1.74710304E12, 980.3499999999999], [1.74709944E12, 1352.2299999999982], [1.74710046E12, 1318.4099999999978], [1.74710268E12, 923.6799999999994], [1.74709884E12, 1246.4199999999983], [1.74710106E12, 1098.4600000000005], [1.74710328E12, 1172.9899999999998], [1.74710004E12, 1099.9399999999994], [1.74710166E12, 1086.0], [1.74710064E12, 1190.9699999999998], [1.74710226E12, 1267.1600000000003], [1.74709866E12, 1281.209999999998], [1.74710028E12, 1221.8200000000006], [1.7471019E12, 1327.7800000000009], [1.74710088E12, 1001.0000000000009], [1.7471025E12, 1179.8499999999997], [1.74710148E12, 995.0399999999995], [1.7471031E12, 1050.53], [1.74709926E12, 1204.250000000002], [1.74709986E12, 1163.920000000001], [1.74710208E12, 1200.8600000000006], [1.74710334E12, 1049.6499999999996], [1.74710172E12, 1158.54], [1.7470995E12, 1303.45], [1.7471001E12, 1157.0799999999988], [1.74710232E12, 1137.3999999999999], [1.7471007E12, 1138.6799999999998], [1.74710292E12, 1064.36], [1.74709968E12, 1166.4100000000012], [1.74709908E12, 1182.9600000000032], [1.7471013E12, 1138.4399999999957], [1.74710094E12, 983.3000000000002], [1.74710316E12, 1334.0000000000002], [1.74709992E12, 1015.9100000000005], [1.74709932E12, 946.6800000000001], [1.74710154E12, 1065.3499999999988], [1.7470989E12, 1284.5499999999977], [1.74710052E12, 1002.54], [1.74710214E12, 1153.930000000001], [1.74710112E12, 997.9599999999997], [1.74710274E12, 1100.4], [1.74709914E12, 1104.1999999999998], [1.74710076E12, 1245.5], [1.74710238E12, 998.37], [1.74709854E12, 1512.0], [1.74710136E12, 1193.5699999999947], [1.74710298E12, 1034.4299999999992], [1.74709872E12, 1492.5600000000004], [1.74709974E12, 1215.43], [1.74710196E12, 1444.1299999999967], [1.74710034E12, 1246.4800000000002], [1.74710256E12, 1412.0000000000002]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.74709896E12, 734.15], [1.74709998E12, 720.1999999999999], [1.7471022E12, 774.6999999999998], [1.7471028E12, 804.7499999999999], [1.74710058E12, 719.25], [1.74710118E12, 840.75], [1.7471034E12, 716.15], [1.74710016E12, 769.8999999999999], [1.74710178E12, 714.5999999999995], [1.74709956E12, 731.75], [1.7470998E12, 836.7999999999993], [1.74710142E12, 757.6999999999997], [1.7471004E12, 781.3], [1.74710202E12, 963.949999999999], [1.74709938E12, 902.35], [1.747101E12, 748.0], [1.74710262E12, 758.3999999999999], [1.74709878E12, 841.1999999999999], [1.7471016E12, 884.899999999999], [1.74710322E12, 789.7999999999992], [1.74710124E12, 812.3499999999999], [1.74710286E12, 744.3499999999999], [1.74709902E12, 761.9499999999977], [1.74710346E12, 1092.0], [1.74709962E12, 708.7499999999999], [1.74710184E12, 719.3], [1.7470992E12, 795.9999999999999], [1.74710022E12, 771.7], [1.74710244E12, 775.4499999999998], [1.7470986E12, 903.75], [1.74710082E12, 786.45], [1.74710304E12, 729.0999999999999], [1.74709944E12, 905.2499999999995], [1.74710046E12, 806.8499999999998], [1.74710268E12, 734.7499999999999], [1.74709884E12, 849.3], [1.74710106E12, 798.8999999999993], [1.74710328E12, 736.0], [1.74710004E12, 825.9999999999998], [1.74710166E12, 838.0], [1.74710064E12, 860.4999999999999], [1.74710226E12, 798.0], [1.74709866E12, 859.2499999999999], [1.74710028E12, 677.8499999999999], [1.7471019E12, 859.2499999999993], [1.74710088E12, 778.5499999999997], [1.7471025E12, 748.75], [1.74710148E12, 694.1500000000001], [1.7471031E12, 774.4499999999999], [1.74709926E12, 750.25], [1.74709986E12, 750.8499999999999], [1.74710208E12, 867.0], [1.74710334E12, 784.25], [1.74710172E12, 833.4999999999991], [1.7470995E12, 788.3999999999996], [1.7471001E12, 821.6999999999998], [1.74710232E12, 764.0], [1.7471007E12, 779.9499999999998], [1.74710292E12, 840.4999999999999], [1.74709968E12, 741.1999999999998], [1.74709908E12, 713.9999999999998], [1.7471013E12, 688.4499999999997], [1.74710094E12, 775.25], [1.74710316E12, 811.7999999999995], [1.74709992E12, 796.25], [1.74709932E12, 731.0499999999995], [1.74710154E12, 831.0], [1.7470989E12, 729.6499999999997], [1.74710052E12, 782.2999999999998], [1.74710214E12, 747.4499999999995], [1.74710112E12, 737.0999999999999], [1.74710274E12, 869.5], [1.74709914E12, 851.0], [1.74710076E12, 835.25], [1.74710238E12, 823.0999999999988], [1.74709854E12, 831.8499999999997], [1.74710136E12, 726.599999999999], [1.74710298E12, 769.4499999999994], [1.74709872E12, 815.8], [1.74709974E12, 874.0], [1.74710196E12, 781.9999999999997], [1.74710034E12, 758.2499999999999], [1.74710256E12, 863.5]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.74709896E12, 30.0], [1.74709998E12, 29.0], [1.7471022E12, 29.0], [1.7471028E12, 27.0], [1.74710058E12, 27.0], [1.74710118E12, 28.0], [1.7471034E12, 29.0], [1.74710016E12, 29.0], [1.74710178E12, 29.0], [1.74709956E12, 29.0], [1.7470998E12, 29.0], [1.74710142E12, 29.0], [1.7471004E12, 29.0], [1.74710202E12, 27.0], [1.74709938E12, 28.0], [1.747101E12, 30.0], [1.74710262E12, 28.0], [1.74709878E12, 29.0], [1.7471016E12, 29.0], [1.74710322E12, 28.0], [1.74710124E12, 29.0], [1.74710286E12, 27.0], [1.74709902E12, 30.0], [1.74710346E12, 30.0], [1.74709962E12, 28.0], [1.74710184E12, 29.0], [1.7470992E12, 28.0], [1.74710022E12, 29.0], [1.74710244E12, 27.0], [1.7470986E12, 32.0], [1.74710082E12, 29.0], [1.74710304E12, 29.0], [1.74709944E12, 28.0], [1.74710046E12, 27.0], [1.74710268E12, 27.0], [1.74709884E12, 29.0], [1.74710106E12, 28.0], [1.74710328E12, 27.0], [1.74710004E12, 28.0], [1.74710166E12, 28.0], [1.74710064E12, 30.0], [1.74710226E12, 28.0], [1.74709866E12, 31.0], [1.74710028E12, 30.0], [1.7471019E12, 28.0], [1.74710088E12, 28.0], [1.7471025E12, 27.0], [1.74710148E12, 29.0], [1.7471031E12, 29.0], [1.74709926E12, 29.0], [1.74709986E12, 30.0], [1.74710208E12, 28.0], [1.74710334E12, 28.0], [1.74710172E12, 29.0], [1.7470995E12, 28.0], [1.7471001E12, 28.0], [1.74710232E12, 30.0], [1.7471007E12, 28.0], [1.74710292E12, 29.0], [1.74709968E12, 28.0], [1.74709908E12, 29.0], [1.7471013E12, 29.0], [1.74710094E12, 31.0], [1.74710316E12, 27.0], [1.74709992E12, 28.0], [1.74709932E12, 29.0], [1.74710154E12, 27.0], [1.7470989E12, 28.0], [1.74710052E12, 28.0], [1.74710214E12, 29.0], [1.74710112E12, 28.0], [1.74710274E12, 28.0], [1.74709914E12, 27.0], [1.74710076E12, 28.0], [1.74710238E12, 28.0], [1.74709854E12, 30.0], [1.74710136E12, 28.0], [1.74710298E12, 28.0], [1.74709872E12, 30.0], [1.74709974E12, 29.0], [1.74710196E12, 27.0], [1.74710034E12, 29.0], [1.74710256E12, 27.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.74709896E12, 91.0], [1.74709998E12, 98.5], [1.7471022E12, 138.0], [1.7471028E12, 112.0], [1.74710058E12, 89.5], [1.74710118E12, 79.0], [1.7471034E12, 81.0], [1.74710016E12, 82.0], [1.74710178E12, 94.5], [1.74709956E12, 79.5], [1.7470998E12, 97.0], [1.74710142E12, 86.5], [1.7471004E12, 81.5], [1.74710202E12, 89.0], [1.74709938E12, 83.5], [1.747101E12, 141.0], [1.74710262E12, 85.5], [1.74709878E12, 43.0], [1.7471016E12, 95.0], [1.74710322E12, 35.0], [1.74710124E12, 92.5], [1.74710286E12, 88.0], [1.74709902E12, 100.5], [1.74710346E12, 99.0], [1.74709962E12, 96.5], [1.74710184E12, 90.0], [1.7470992E12, 86.5], [1.74710022E12, 88.5], [1.74710244E12, 81.5], [1.7470986E12, 88.0], [1.74710082E12, 106.0], [1.74710304E12, 79.5], [1.74709944E12, 83.5], [1.74710046E12, 97.5], [1.74710268E12, 88.5], [1.74709884E12, 80.5], [1.74710106E12, 38.0], [1.74710328E12, 87.0], [1.74710004E12, 137.0], [1.74710166E12, 127.0], [1.74710064E12, 103.0], [1.74710226E12, 36.0], [1.74709866E12, 87.0], [1.74710028E12, 83.0], [1.7471019E12, 91.0], [1.74710088E12, 80.5], [1.7471025E12, 80.5], [1.74710148E12, 84.5], [1.7471031E12, 90.0], [1.74709926E12, 85.0], [1.74709986E12, 81.5], [1.74710208E12, 77.0], [1.74710334E12, 77.5], [1.74710172E12, 37.0], [1.7470995E12, 82.0], [1.7471001E12, 37.0], [1.74710232E12, 86.5], [1.7471007E12, 83.0], [1.74710292E12, 85.0], [1.74709968E12, 78.0], [1.74709908E12, 145.0], [1.7471013E12, 88.5], [1.74710094E12, 78.5], [1.74710316E12, 121.0], [1.74709992E12, 84.0], [1.74709932E12, 89.0], [1.74710154E12, 84.0], [1.7470989E12, 83.0], [1.74710052E12, 77.0], [1.74710214E12, 88.0], [1.74710112E12, 88.0], [1.74710274E12, 95.5], [1.74709914E12, 39.0], [1.74710076E12, 79.5], [1.74710238E12, 81.5], [1.74709854E12, 189.5], [1.74710136E12, 85.5], [1.74710298E12, 91.0], [1.74709872E12, 129.0], [1.74709974E12, 89.0], [1.74710196E12, 91.0], [1.74710034E12, 83.0], [1.74710256E12, 87.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74710346E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 37.0, "minX": 1.0, "maxY": 515.5, "series": [{"data": [[2.0, 138.0], [4.0, 100.0], [1.0, 515.5], [8.0, 79.0], [9.0, 89.0], [5.0, 83.0], [6.0, 84.5], [3.0, 163.5], [7.0, 37.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 9.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 28.0, "series": [{"data": [[2.0, 14.0], [4.0, 13.5], [1.0, 15.0], [8.0, 14.0], [9.0, 15.0], [5.0, 13.5], [6.0, 13.5], [3.0, 0.0], [7.0, 28.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 9.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 0.21666666666666667, "minX": 1.74709854E12, "maxY": 4.633333333333334, "series": [{"data": [[1.74709896E12, 4.3], [1.74709998E12, 4.2], [1.7471022E12, 4.283333333333333], [1.7471028E12, 3.933333333333333], [1.74710058E12, 4.233333333333333], [1.74710118E12, 3.9], [1.7471034E12, 4.3], [1.74710016E12, 4.2], [1.74710178E12, 4.433333333333334], [1.74709956E12, 4.233333333333333], [1.7470998E12, 3.7666666666666666], [1.74710142E12, 4.0], [1.7471004E12, 4.1], [1.74710202E12, 3.7666666666666666], [1.74709938E12, 3.8666666666666667], [1.747101E12, 4.15], [1.74710262E12, 4.333333333333333], [1.74709878E12, 4.05], [1.7471016E12, 3.7666666666666666], [1.74710322E12, 4.183333333333334], [1.74710124E12, 3.966666666666667], [1.74710286E12, 4.166666666666667], [1.74709902E12, 3.966666666666667], [1.74710346E12, 0.21666666666666667], [1.74709962E12, 4.366666666666666], [1.74710184E12, 4.1], [1.7470992E12, 3.8666666666666667], [1.74710022E12, 4.033333333333333], [1.74710244E12, 4.033333333333333], [1.7470986E12, 3.7333333333333334], [1.74710082E12, 4.166666666666667], [1.74710304E12, 4.2], [1.74709944E12, 3.6666666666666665], [1.74710046E12, 3.7666666666666666], [1.74710268E12, 4.133333333333334], [1.74709884E12, 3.966666666666667], [1.74710106E12, 4.216666666666667], [1.74710328E12, 4.2], [1.74710004E12, 3.8833333333333333], [1.74710166E12, 4.15], [1.74710064E12, 3.8333333333333335], [1.74710226E12, 4.05], [1.74709866E12, 3.8666666666666667], [1.74710028E12, 4.466666666666667], [1.7471019E12, 4.0], [1.74710088E12, 4.166666666666667], [1.7471025E12, 4.233333333333333], [1.74710148E12, 4.633333333333334], [1.7471031E12, 4.2], [1.74709926E12, 4.066666666666666], [1.74709986E12, 4.166666666666667], [1.74710208E12, 3.8], [1.74710334E12, 4.233333333333333], [1.74710172E12, 4.083333333333333], [1.7470995E12, 4.266666666666667], [1.7471001E12, 4.083333333333333], [1.74710232E12, 4.033333333333333], [1.7471007E12, 4.033333333333333], [1.74710292E12, 3.8333333333333335], [1.74709968E12, 4.266666666666667], [1.74709908E12, 4.116666666666666], [1.7471013E12, 4.433333333333334], [1.74710094E12, 3.9], [1.74710316E12, 3.85], [1.74709992E12, 4.166666666666667], [1.74709932E12, 4.466666666666667], [1.74710154E12, 4.233333333333333], [1.7470989E12, 3.966666666666667], [1.74710052E12, 4.0], [1.74710214E12, 4.266666666666667], [1.74710112E12, 4.2], [1.74710274E12, 4.066666666666666], [1.74709914E12, 3.9833333333333334], [1.74710076E12, 4.066666666666666], [1.74710238E12, 4.1], [1.74709854E12, 1.55], [1.74710136E12, 4.433333333333334], [1.74710298E12, 4.133333333333334], [1.74709872E12, 4.05], [1.74709974E12, 4.1], [1.74710196E12, 4.133333333333334], [1.74710034E12, 4.1], [1.74710256E12, 3.9]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74710346E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.74709854E12, "maxY": 2.316666666666667, "series": [{"data": [[1.74709896E12, 2.15], [1.74709998E12, 2.1], [1.7471022E12, 2.15], [1.7471028E12, 1.9666666666666666], [1.74710058E12, 2.1166666666666667], [1.74710118E12, 1.95], [1.7471034E12, 2.15], [1.74710016E12, 2.1], [1.74710178E12, 2.216666666666667], [1.74709956E12, 2.1166666666666667], [1.7470998E12, 1.8833333333333333], [1.74710142E12, 2.0], [1.7471004E12, 2.05], [1.74710202E12, 1.8833333333333333], [1.74709938E12, 1.9333333333333333], [1.747101E12, 2.0833333333333335], [1.74710262E12, 2.1666666666666665], [1.74709878E12, 2.0166666666666666], [1.7471016E12, 1.8833333333333333], [1.74710322E12, 2.0833333333333335], [1.74710124E12, 1.9833333333333334], [1.74710286E12, 2.0833333333333335], [1.74709902E12, 1.9833333333333334], [1.74710346E12, 0.11666666666666667], [1.74709962E12, 2.183333333333333], [1.74710184E12, 2.05], [1.7470992E12, 1.9333333333333333], [1.74710022E12, 2.0166666666666666], [1.74710244E12, 2.0166666666666666], [1.7470986E12, 1.8666666666666667], [1.74710082E12, 2.0833333333333335], [1.74710304E12, 2.1], [1.74709944E12, 1.8333333333333333], [1.74710046E12, 1.8833333333333333], [1.74710268E12, 2.066666666666667], [1.74709884E12, 1.9833333333333334], [1.74710106E12, 2.1], [1.74710328E12, 2.1], [1.74710004E12, 1.95], [1.74710166E12, 2.0833333333333335], [1.74710064E12, 1.9166666666666667], [1.74710226E12, 2.0166666666666666], [1.74709866E12, 1.9333333333333333], [1.74710028E12, 2.2333333333333334], [1.7471019E12, 2.0], [1.74710088E12, 2.0833333333333335], [1.7471025E12, 2.1166666666666667], [1.74710148E12, 2.316666666666667], [1.7471031E12, 2.1], [1.74709926E12, 2.033333333333333], [1.74709986E12, 2.0833333333333335], [1.74710208E12, 1.9], [1.74710334E12, 2.1166666666666667], [1.74710172E12, 2.033333333333333], [1.7470995E12, 2.1333333333333333], [1.7471001E12, 2.033333333333333], [1.74710232E12, 2.0166666666666666], [1.7471007E12, 2.0166666666666666], [1.74710292E12, 1.9166666666666667], [1.74709968E12, 2.1333333333333333], [1.74709908E12, 2.066666666666667], [1.7471013E12, 2.216666666666667], [1.74710094E12, 1.95], [1.74710316E12, 1.9333333333333333], [1.74709992E12, 2.0833333333333335], [1.74709932E12, 2.2333333333333334], [1.74710154E12, 2.1166666666666667], [1.7470989E12, 1.9833333333333334], [1.74710052E12, 2.0], [1.74710214E12, 2.1333333333333333], [1.74710112E12, 2.1], [1.74710274E12, 2.033333333333333], [1.74709914E12, 1.9833333333333334], [1.74710076E12, 2.033333333333333], [1.74710238E12, 2.05], [1.74709854E12, 0.7666666666666667], [1.74710136E12, 2.216666666666667], [1.74710298E12, 2.066666666666667], [1.74709872E12, 2.033333333333333], [1.74709974E12, 2.05], [1.74710196E12, 2.066666666666667], [1.74710034E12, 2.05], [1.74710256E12, 1.95]], "isOverall": false, "label": "0", "isController": false}, {"data": [[1.74709896E12, 2.15], [1.74709998E12, 2.1], [1.7471022E12, 2.1333333333333333], [1.7471028E12, 1.9666666666666666], [1.74710058E12, 2.1166666666666667], [1.74710118E12, 1.95], [1.7471034E12, 2.15], [1.74710016E12, 2.1], [1.74710178E12, 2.216666666666667], [1.74709956E12, 2.1166666666666667], [1.7470998E12, 1.8833333333333333], [1.74710142E12, 2.0], [1.7471004E12, 2.05], [1.74710202E12, 1.8833333333333333], [1.74709938E12, 1.9333333333333333], [1.747101E12, 2.066666666666667], [1.74710262E12, 2.1666666666666665], [1.74709878E12, 2.033333333333333], [1.7471016E12, 1.8833333333333333], [1.74710322E12, 2.1], [1.74710124E12, 1.9833333333333334], [1.74710286E12, 2.0833333333333335], [1.74709902E12, 1.9833333333333334], [1.74710346E12, 0.11666666666666667], [1.74709962E12, 2.183333333333333], [1.74710184E12, 2.05], [1.7470992E12, 1.9333333333333333], [1.74710022E12, 2.0166666666666666], [1.74710244E12, 2.0166666666666666], [1.7470986E12, 1.8666666666666667], [1.74710082E12, 2.0833333333333335], [1.74710304E12, 2.1], [1.74709944E12, 1.8333333333333333], [1.74710046E12, 1.8833333333333333], [1.74710268E12, 2.066666666666667], [1.74709884E12, 1.9833333333333334], [1.74710106E12, 2.1166666666666667], [1.74710328E12, 2.1], [1.74710004E12, 1.9333333333333333], [1.74710166E12, 2.066666666666667], [1.74710064E12, 1.9166666666666667], [1.74710226E12, 2.033333333333333], [1.74709866E12, 1.9333333333333333], [1.74710028E12, 2.2333333333333334], [1.7471019E12, 2.0], [1.74710088E12, 2.0833333333333335], [1.7471025E12, 2.1166666666666667], [1.74710148E12, 2.316666666666667], [1.7471031E12, 2.1], [1.74709926E12, 2.033333333333333], [1.74709986E12, 2.0833333333333335], [1.74710208E12, 1.9], [1.74710334E12, 2.1166666666666667], [1.74710172E12, 2.05], [1.7470995E12, 2.1333333333333333], [1.7471001E12, 2.05], [1.74710232E12, 2.0166666666666666], [1.7471007E12, 2.0166666666666666], [1.74710292E12, 1.9166666666666667], [1.74709968E12, 2.1333333333333333], [1.74709908E12, 2.05], [1.7471013E12, 2.216666666666667], [1.74710094E12, 1.95], [1.74710316E12, 1.9166666666666667], [1.74709992E12, 2.0833333333333335], [1.74709932E12, 2.2333333333333334], [1.74710154E12, 2.1166666666666667], [1.7470989E12, 1.9833333333333334], [1.74710052E12, 2.0], [1.74710214E12, 2.1333333333333333], [1.74710112E12, 2.1], [1.74710274E12, 2.033333333333333], [1.74709914E12, 2.0], [1.74710076E12, 2.033333333333333], [1.74710238E12, 2.05], [1.74709854E12, 0.7666666666666667], [1.74710136E12, 2.216666666666667], [1.74710298E12, 2.066666666666667], [1.74709872E12, 2.0166666666666666], [1.74709974E12, 2.05], [1.74710196E12, 2.066666666666667], [1.74710034E12, 2.05], [1.74710256E12, 1.95]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74710346E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.11666666666666667, "minX": 1.74709854E12, "maxY": 2.316666666666667, "series": [{"data": [[1.74709896E12, 2.15], [1.74709998E12, 2.1], [1.7471022E12, 2.1333333333333333], [1.7471028E12, 1.9666666666666666], [1.74710058E12, 2.1166666666666667], [1.74710118E12, 1.95], [1.7471034E12, 2.15], [1.74710016E12, 2.1], [1.74710178E12, 2.216666666666667], [1.74709956E12, 2.1166666666666667], [1.7470998E12, 1.8833333333333333], [1.74710142E12, 2.0], [1.7471004E12, 2.05], [1.74710202E12, 1.8833333333333333], [1.74709938E12, 1.9333333333333333], [1.747101E12, 2.066666666666667], [1.74710262E12, 2.1666666666666665], [1.74709878E12, 2.033333333333333], [1.7471016E12, 1.8833333333333333], [1.74710322E12, 2.1], [1.74710124E12, 1.9833333333333334], [1.74710286E12, 2.0833333333333335], [1.74709902E12, 1.9833333333333334], [1.74710346E12, 0.11666666666666667], [1.74709962E12, 2.183333333333333], [1.74710184E12, 2.05], [1.7470992E12, 1.9333333333333333], [1.74710022E12, 2.0166666666666666], [1.74710244E12, 2.0166666666666666], [1.7470986E12, 1.8666666666666667], [1.74710082E12, 2.0833333333333335], [1.74710304E12, 2.1], [1.74709944E12, 1.8333333333333333], [1.74710046E12, 1.8833333333333333], [1.74710268E12, 2.066666666666667], [1.74709884E12, 1.9833333333333334], [1.74710106E12, 2.1166666666666667], [1.74710328E12, 2.1], [1.74710004E12, 1.9333333333333333], [1.74710166E12, 2.066666666666667], [1.74710064E12, 1.9166666666666667], [1.74710226E12, 2.033333333333333], [1.74709866E12, 1.9333333333333333], [1.74710028E12, 2.2333333333333334], [1.7471019E12, 2.0], [1.74710088E12, 2.0833333333333335], [1.7471025E12, 2.1166666666666667], [1.74710148E12, 2.316666666666667], [1.7471031E12, 2.1], [1.74709926E12, 2.033333333333333], [1.74709986E12, 2.0833333333333335], [1.74710208E12, 1.9], [1.74710334E12, 2.1166666666666667], [1.74710172E12, 2.05], [1.7470995E12, 2.1333333333333333], [1.7471001E12, 2.05], [1.74710232E12, 2.0166666666666666], [1.7471007E12, 2.0166666666666666], [1.74710292E12, 1.9166666666666667], [1.74709968E12, 2.1333333333333333], [1.74709908E12, 2.05], [1.7471013E12, 2.216666666666667], [1.74710094E12, 1.95], [1.74710316E12, 1.9166666666666667], [1.74709992E12, 2.0833333333333335], [1.74709932E12, 2.2333333333333334], [1.74710154E12, 2.1166666666666667], [1.7470989E12, 1.9833333333333334], [1.74710052E12, 2.0], [1.74710214E12, 2.1333333333333333], [1.74710112E12, 2.1], [1.74710274E12, 2.033333333333333], [1.74709914E12, 2.0], [1.74710076E12, 2.033333333333333], [1.74710238E12, 2.05], [1.74709854E12, 0.7666666666666667], [1.74710136E12, 2.216666666666667], [1.74710298E12, 2.066666666666667], [1.74709872E12, 2.0166666666666666], [1.74709974E12, 2.05], [1.74710196E12, 2.066666666666667], [1.74710034E12, 2.05], [1.74710256E12, 1.95]], "isOverall": false, "label": "HTTP Request - enroll-success", "isController": false}, {"data": [[1.74709896E12, 2.15], [1.74709998E12, 2.1], [1.7471022E12, 2.15], [1.7471028E12, 1.9666666666666666], [1.74710058E12, 2.1166666666666667], [1.74710118E12, 1.95], [1.7471034E12, 2.15], [1.74710016E12, 2.1], [1.74710178E12, 2.216666666666667], [1.74709956E12, 2.1166666666666667], [1.7470998E12, 1.8833333333333333], [1.74710142E12, 2.0], [1.7471004E12, 2.05], [1.74710202E12, 1.8833333333333333], [1.74709938E12, 1.9333333333333333], [1.747101E12, 2.0833333333333335], [1.74710262E12, 2.1666666666666665], [1.74709878E12, 2.0166666666666666], [1.7471016E12, 1.8833333333333333], [1.74710322E12, 2.0833333333333335], [1.74710124E12, 1.9833333333333334], [1.74710286E12, 2.0833333333333335], [1.74709902E12, 1.9833333333333334], [1.74710346E12, 0.11666666666666667], [1.74709962E12, 2.183333333333333], [1.74710184E12, 2.05], [1.7470992E12, 1.9333333333333333], [1.74710022E12, 2.0166666666666666], [1.74710244E12, 2.0166666666666666], [1.7470986E12, 1.8666666666666667], [1.74710082E12, 2.0833333333333335], [1.74710304E12, 2.1], [1.74709944E12, 1.8333333333333333], [1.74710046E12, 1.8833333333333333], [1.74710268E12, 2.066666666666667], [1.74709884E12, 1.9833333333333334], [1.74710106E12, 2.1], [1.74710328E12, 2.1], [1.74710004E12, 1.95], [1.74710166E12, 2.0833333333333335], [1.74710064E12, 1.9166666666666667], [1.74710226E12, 2.0166666666666666], [1.74709866E12, 1.9333333333333333], [1.74710028E12, 2.2333333333333334], [1.7471019E12, 2.0], [1.74710088E12, 2.0833333333333335], [1.7471025E12, 2.1166666666666667], [1.74710148E12, 2.316666666666667], [1.7471031E12, 2.1], [1.74709926E12, 2.033333333333333], [1.74709986E12, 2.0833333333333335], [1.74710208E12, 1.9], [1.74710334E12, 2.1166666666666667], [1.74710172E12, 2.033333333333333], [1.7470995E12, 2.1333333333333333], [1.7471001E12, 2.033333333333333], [1.74710232E12, 2.0166666666666666], [1.7471007E12, 2.0166666666666666], [1.74710292E12, 1.9166666666666667], [1.74709968E12, 2.1333333333333333], [1.74709908E12, 2.066666666666667], [1.7471013E12, 2.216666666666667], [1.74710094E12, 1.95], [1.74710316E12, 1.9333333333333333], [1.74709992E12, 2.0833333333333335], [1.74709932E12, 2.2333333333333334], [1.74710154E12, 2.1166666666666667], [1.7470989E12, 1.9833333333333334], [1.74710052E12, 2.0], [1.74710214E12, 2.1333333333333333], [1.74710112E12, 2.1], [1.74710274E12, 2.033333333333333], [1.74709914E12, 1.9833333333333334], [1.74710076E12, 2.033333333333333], [1.74710238E12, 2.05], [1.74709854E12, 0.7666666666666667], [1.74710136E12, 2.216666666666667], [1.74710298E12, 2.066666666666667], [1.74709872E12, 2.033333333333333], [1.74709974E12, 2.05], [1.74710196E12, 2.066666666666667], [1.74710034E12, 2.05], [1.74710256E12, 1.95]], "isOverall": false, "label": "Create CSR-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74710346E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.23333333333333334, "minX": 1.74709854E12, "maxY": 4.633333333333334, "series": [{"data": [[1.74709896E12, 4.3], [1.74709998E12, 4.2], [1.7471022E12, 4.283333333333333], [1.7471028E12, 3.933333333333333], [1.74710058E12, 4.233333333333333], [1.74710118E12, 3.9], [1.7471034E12, 4.3], [1.74710016E12, 4.2], [1.74710178E12, 4.433333333333334], [1.74709956E12, 4.233333333333333], [1.7470998E12, 3.7666666666666666], [1.74710142E12, 4.0], [1.7471004E12, 4.1], [1.74710202E12, 3.7666666666666666], [1.74709938E12, 3.8666666666666667], [1.747101E12, 4.15], [1.74710262E12, 4.333333333333333], [1.74709878E12, 4.05], [1.7471016E12, 3.7666666666666666], [1.74710322E12, 4.183333333333334], [1.74710124E12, 3.966666666666667], [1.74710286E12, 4.166666666666667], [1.74709902E12, 3.966666666666667], [1.74710346E12, 0.23333333333333334], [1.74709962E12, 4.366666666666666], [1.74710184E12, 4.1], [1.7470992E12, 3.8666666666666667], [1.74710022E12, 4.033333333333333], [1.74710244E12, 4.033333333333333], [1.7470986E12, 3.7333333333333334], [1.74710082E12, 4.166666666666667], [1.74710304E12, 4.2], [1.74709944E12, 3.6666666666666665], [1.74710046E12, 3.7666666666666666], [1.74710268E12, 4.133333333333334], [1.74709884E12, 3.966666666666667], [1.74710106E12, 4.216666666666667], [1.74710328E12, 4.2], [1.74710004E12, 3.8833333333333333], [1.74710166E12, 4.15], [1.74710064E12, 3.8333333333333335], [1.74710226E12, 4.05], [1.74709866E12, 3.8666666666666667], [1.74710028E12, 4.466666666666667], [1.7471019E12, 4.0], [1.74710088E12, 4.166666666666667], [1.7471025E12, 4.233333333333333], [1.74710148E12, 4.633333333333334], [1.7471031E12, 4.2], [1.74709926E12, 4.066666666666666], [1.74709986E12, 4.166666666666667], [1.74710208E12, 3.8], [1.74710334E12, 4.233333333333333], [1.74710172E12, 4.083333333333333], [1.7470995E12, 4.266666666666667], [1.7471001E12, 4.083333333333333], [1.74710232E12, 4.033333333333333], [1.7471007E12, 4.033333333333333], [1.74710292E12, 3.8333333333333335], [1.74709968E12, 4.266666666666667], [1.74709908E12, 4.116666666666666], [1.7471013E12, 4.433333333333334], [1.74710094E12, 3.9], [1.74710316E12, 3.85], [1.74709992E12, 4.166666666666667], [1.74709932E12, 4.466666666666667], [1.74710154E12, 4.233333333333333], [1.7470989E12, 3.966666666666667], [1.74710052E12, 4.0], [1.74710214E12, 4.266666666666667], [1.74710112E12, 4.2], [1.74710274E12, 4.066666666666666], [1.74709914E12, 3.9833333333333334], [1.74710076E12, 4.066666666666666], [1.74710238E12, 4.1], [1.74709854E12, 1.5333333333333334], [1.74710136E12, 4.433333333333334], [1.74710298E12, 4.133333333333334], [1.74709872E12, 4.05], [1.74709974E12, 4.1], [1.74710196E12, 4.133333333333334], [1.74710034E12, 4.1], [1.74710256E12, 3.9]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74710346E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

