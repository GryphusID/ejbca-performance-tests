/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 10.0, "minX": 0.0, "maxY": 5694.0, "series": [{"data": [[0.0, 10.0], [0.1, 11.0], [0.2, 20.0], [0.3, 35.0], [0.4, 39.0], [0.5, 40.0], [0.6, 42.0], [0.7, 43.0], [0.8, 44.0], [0.9, 45.0], [1.0, 46.0], [1.1, 47.0], [1.2, 47.0], [1.3, 47.0], [1.4, 48.0], [1.5, 48.0], [1.6, 49.0], [1.7, 50.0], [1.8, 50.0], [1.9, 50.0], [2.0, 51.0], [2.1, 51.0], [2.2, 51.0], [2.3, 51.0], [2.4, 52.0], [2.5, 52.0], [2.6, 52.0], [2.7, 52.0], [2.8, 52.0], [2.9, 52.0], [3.0, 53.0], [3.1, 53.0], [3.2, 53.0], [3.3, 53.0], [3.4, 54.0], [3.5, 54.0], [3.6, 54.0], [3.7, 54.0], [3.8, 54.0], [3.9, 54.0], [4.0, 55.0], [4.1, 55.0], [4.2, 55.0], [4.3, 55.0], [4.4, 55.0], [4.5, 55.0], [4.6, 55.0], [4.7, 55.0], [4.8, 56.0], [4.9, 56.0], [5.0, 56.0], [5.1, 56.0], [5.2, 56.0], [5.3, 56.0], [5.4, 56.0], [5.5, 56.0], [5.6, 56.0], [5.7, 56.0], [5.8, 57.0], [5.9, 57.0], [6.0, 57.0], [6.1, 57.0], [6.2, 57.0], [6.3, 57.0], [6.4, 57.0], [6.5, 57.0], [6.6, 58.0], [6.7, 58.0], [6.8, 58.0], [6.9, 58.0], [7.0, 58.0], [7.1, 58.0], [7.2, 58.0], [7.3, 58.0], [7.4, 58.0], [7.5, 58.0], [7.6, 59.0], [7.7, 59.0], [7.8, 59.0], [7.9, 59.0], [8.0, 59.0], [8.1, 59.0], [8.2, 59.0], [8.3, 59.0], [8.4, 59.0], [8.5, 59.0], [8.6, 59.0], [8.7, 59.0], [8.8, 59.0], [8.9, 60.0], [9.0, 60.0], [9.1, 60.0], [9.2, 60.0], [9.3, 60.0], [9.4, 60.0], [9.5, 60.0], [9.6, 60.0], [9.7, 60.0], [9.8, 60.0], [9.9, 60.0], [10.0, 60.0], [10.1, 60.0], [10.2, 60.0], [10.3, 60.0], [10.4, 60.0], [10.5, 60.0], [10.6, 61.0], [10.7, 61.0], [10.8, 61.0], [10.9, 61.0], [11.0, 61.0], [11.1, 61.0], [11.2, 61.0], [11.3, 61.0], [11.4, 61.0], [11.5, 61.0], [11.6, 62.0], [11.7, 62.0], [11.8, 62.0], [11.9, 62.0], [12.0, 62.0], [12.1, 62.0], [12.2, 62.0], [12.3, 62.0], [12.4, 62.0], [12.5, 62.0], [12.6, 62.0], [12.7, 62.0], [12.8, 62.0], [12.9, 62.0], [13.0, 62.0], [13.1, 63.0], [13.2, 63.0], [13.3, 63.0], [13.4, 63.0], [13.5, 63.0], [13.6, 63.0], [13.7, 63.0], [13.8, 63.0], [13.9, 63.0], [14.0, 63.0], [14.1, 63.0], [14.2, 63.0], [14.3, 63.0], [14.4, 63.0], [14.5, 63.0], [14.6, 63.0], [14.7, 63.0], [14.8, 63.0], [14.9, 63.0], [15.0, 63.0], [15.1, 63.0], [15.2, 63.0], [15.3, 63.0], [15.4, 64.0], [15.5, 64.0], [15.6, 64.0], [15.7, 64.0], [15.8, 64.0], [15.9, 64.0], [16.0, 64.0], [16.1, 64.0], [16.2, 64.0], [16.3, 64.0], [16.4, 64.0], [16.5, 64.0], [16.6, 64.0], [16.7, 64.0], [16.8, 64.0], [16.9, 64.0], [17.0, 64.0], [17.1, 64.0], [17.2, 64.0], [17.3, 64.0], [17.4, 64.0], [17.5, 64.0], [17.6, 64.0], [17.7, 64.0], [17.8, 64.0], [17.9, 65.0], [18.0, 65.0], [18.1, 65.0], [18.2, 65.0], [18.3, 65.0], [18.4, 65.0], [18.5, 65.0], [18.6, 65.0], [18.7, 65.0], [18.8, 65.0], [18.9, 65.0], [19.0, 65.0], [19.1, 65.0], [19.2, 65.0], [19.3, 66.0], [19.4, 66.0], [19.5, 66.0], [19.6, 66.0], [19.7, 66.0], [19.8, 66.0], [19.9, 66.0], [20.0, 66.0], [20.1, 66.0], [20.2, 66.0], [20.3, 66.0], [20.4, 66.0], [20.5, 66.0], [20.6, 66.0], [20.7, 66.0], [20.8, 66.0], [20.9, 66.0], [21.0, 66.0], [21.1, 66.0], [21.2, 66.0], [21.3, 66.0], [21.4, 66.0], [21.5, 66.0], [21.6, 66.0], [21.7, 66.0], [21.8, 67.0], [21.9, 67.0], [22.0, 67.0], [22.1, 67.0], [22.2, 67.0], [22.3, 67.0], [22.4, 67.0], [22.5, 67.0], [22.6, 67.0], [22.7, 67.0], [22.8, 67.0], [22.9, 67.0], [23.0, 67.0], [23.1, 67.0], [23.2, 67.0], [23.3, 67.0], [23.4, 67.0], [23.5, 67.0], [23.6, 67.0], [23.7, 67.0], [23.8, 67.0], [23.9, 67.0], [24.0, 67.0], [24.1, 67.0], [24.2, 67.0], [24.3, 67.0], [24.4, 67.0], [24.5, 67.0], [24.6, 67.0], [24.7, 67.0], [24.8, 67.0], [24.9, 67.0], [25.0, 67.0], [25.1, 67.0], [25.2, 67.0], [25.3, 67.0], [25.4, 68.0], [25.5, 68.0], [25.6, 68.0], [25.7, 68.0], [25.8, 68.0], [25.9, 68.0], [26.0, 68.0], [26.1, 68.0], [26.2, 68.0], [26.3, 68.0], [26.4, 68.0], [26.5, 68.0], [26.6, 68.0], [26.7, 68.0], [26.8, 68.0], [26.9, 68.0], [27.0, 68.0], [27.1, 68.0], [27.2, 68.0], [27.3, 68.0], [27.4, 68.0], [27.5, 68.0], [27.6, 68.0], [27.7, 68.0], [27.8, 68.0], [27.9, 68.0], [28.0, 68.0], [28.1, 68.0], [28.2, 68.0], [28.3, 68.0], [28.4, 68.0], [28.5, 68.0], [28.6, 68.0], [28.7, 69.0], [28.8, 69.0], [28.9, 69.0], [29.0, 69.0], [29.1, 69.0], [29.2, 69.0], [29.3, 69.0], [29.4, 69.0], [29.5, 69.0], [29.6, 69.0], [29.7, 69.0], [29.8, 69.0], [29.9, 69.0], [30.0, 69.0], [30.1, 69.0], [30.2, 69.0], [30.3, 69.0], [30.4, 70.0], [30.5, 70.0], [30.6, 70.0], [30.7, 70.0], [30.8, 70.0], [30.9, 70.0], [31.0, 70.0], [31.1, 70.0], [31.2, 70.0], [31.3, 70.0], [31.4, 70.0], [31.5, 70.0], [31.6, 70.0], [31.7, 70.0], [31.8, 70.0], [31.9, 70.0], [32.0, 70.0], [32.1, 70.0], [32.2, 70.0], [32.3, 70.0], [32.4, 70.0], [32.5, 70.0], [32.6, 70.0], [32.7, 70.0], [32.8, 70.0], [32.9, 70.0], [33.0, 70.0], [33.1, 71.0], [33.2, 71.0], [33.3, 71.0], [33.4, 71.0], [33.5, 71.0], [33.6, 71.0], [33.7, 71.0], [33.8, 71.0], [33.9, 71.0], [34.0, 71.0], [34.1, 71.0], [34.2, 71.0], [34.3, 71.0], [34.4, 71.0], [34.5, 71.0], [34.6, 71.0], [34.7, 71.0], [34.8, 71.0], [34.9, 71.0], [35.0, 71.0], [35.1, 71.0], [35.2, 71.0], [35.3, 71.0], [35.4, 71.0], [35.5, 71.0], [35.6, 71.0], [35.7, 71.0], [35.8, 71.0], [35.9, 71.0], [36.0, 71.0], [36.1, 71.0], [36.2, 71.0], [36.3, 71.0], [36.4, 71.0], [36.5, 71.0], [36.6, 71.0], [36.7, 71.0], [36.8, 71.0], [36.9, 71.0], [37.0, 71.0], [37.1, 71.0], [37.2, 71.0], [37.3, 71.0], [37.4, 72.0], [37.5, 72.0], [37.6, 72.0], [37.7, 72.0], [37.8, 72.0], [37.9, 72.0], [38.0, 72.0], [38.1, 72.0], [38.2, 72.0], [38.3, 72.0], [38.4, 72.0], [38.5, 72.0], [38.6, 72.0], [38.7, 72.0], [38.8, 72.0], [38.9, 72.0], [39.0, 72.0], [39.1, 72.0], [39.2, 72.0], [39.3, 72.0], [39.4, 72.0], [39.5, 72.0], [39.6, 72.0], [39.7, 72.0], [39.8, 72.0], [39.9, 72.0], [40.0, 72.0], [40.1, 72.0], [40.2, 72.0], [40.3, 72.0], [40.4, 72.0], [40.5, 72.0], [40.6, 72.0], [40.7, 72.0], [40.8, 72.0], [40.9, 72.0], [41.0, 72.0], [41.1, 72.0], [41.2, 72.0], [41.3, 72.0], [41.4, 73.0], [41.5, 73.0], [41.6, 73.0], [41.7, 73.0], [41.8, 73.0], [41.9, 73.0], [42.0, 73.0], [42.1, 73.0], [42.2, 73.0], [42.3, 73.0], [42.4, 73.0], [42.5, 73.0], [42.6, 73.0], [42.7, 73.0], [42.8, 73.0], [42.9, 73.0], [43.0, 73.0], [43.1, 73.0], [43.2, 73.0], [43.3, 74.0], [43.4, 74.0], [43.5, 74.0], [43.6, 74.0], [43.7, 74.0], [43.8, 74.0], [43.9, 74.0], [44.0, 74.0], [44.1, 74.0], [44.2, 74.0], [44.3, 74.0], [44.4, 74.0], [44.5, 74.0], [44.6, 74.0], [44.7, 74.0], [44.8, 74.0], [44.9, 74.0], [45.0, 74.0], [45.1, 74.0], [45.2, 74.0], [45.3, 74.0], [45.4, 74.0], [45.5, 74.0], [45.6, 74.0], [45.7, 74.0], [45.8, 74.0], [45.9, 74.0], [46.0, 74.0], [46.1, 74.0], [46.2, 74.0], [46.3, 75.0], [46.4, 75.0], [46.5, 75.0], [46.6, 75.0], [46.7, 75.0], [46.8, 75.0], [46.9, 75.0], [47.0, 75.0], [47.1, 75.0], [47.2, 75.0], [47.3, 75.0], [47.4, 75.0], [47.5, 75.0], [47.6, 75.0], [47.7, 75.0], [47.8, 75.0], [47.9, 75.0], [48.0, 75.0], [48.1, 75.0], [48.2, 75.0], [48.3, 75.0], [48.4, 75.0], [48.5, 75.0], [48.6, 75.0], [48.7, 75.0], [48.8, 75.0], [48.9, 75.0], [49.0, 75.0], [49.1, 75.0], [49.2, 75.0], [49.3, 75.0], [49.4, 75.0], [49.5, 75.0], [49.6, 75.0], [49.7, 75.0], [49.8, 75.0], [49.9, 75.0], [50.0, 75.0], [50.1, 75.0], [50.2, 75.0], [50.3, 75.0], [50.4, 75.0], [50.5, 75.0], [50.6, 75.0], [50.7, 75.0], [50.8, 75.0], [50.9, 76.0], [51.0, 76.0], [51.1, 76.0], [51.2, 76.0], [51.3, 76.0], [51.4, 76.0], [51.5, 76.0], [51.6, 76.0], [51.7, 76.0], [51.8, 76.0], [51.9, 76.0], [52.0, 76.0], [52.1, 76.0], [52.2, 76.0], [52.3, 76.0], [52.4, 76.0], [52.5, 76.0], [52.6, 76.0], [52.7, 76.0], [52.8, 76.0], [52.9, 76.0], [53.0, 76.0], [53.1, 76.0], [53.2, 76.0], [53.3, 76.0], [53.4, 76.0], [53.5, 76.0], [53.6, 76.0], [53.7, 76.0], [53.8, 76.0], [53.9, 76.0], [54.0, 76.0], [54.1, 76.0], [54.2, 76.0], [54.3, 76.0], [54.4, 76.0], [54.5, 76.0], [54.6, 76.0], [54.7, 76.0], [54.8, 76.0], [54.9, 77.0], [55.0, 77.0], [55.1, 77.0], [55.2, 77.0], [55.3, 77.0], [55.4, 77.0], [55.5, 77.0], [55.6, 77.0], [55.7, 77.0], [55.8, 77.0], [55.9, 77.0], [56.0, 77.0], [56.1, 77.0], [56.2, 77.0], [56.3, 77.0], [56.4, 77.0], [56.5, 77.0], [56.6, 77.0], [56.7, 77.0], [56.8, 77.0], [56.9, 77.0], [57.0, 78.0], [57.1, 78.0], [57.2, 78.0], [57.3, 78.0], [57.4, 78.0], [57.5, 78.0], [57.6, 78.0], [57.7, 78.0], [57.8, 78.0], [57.9, 78.0], [58.0, 78.0], [58.1, 78.0], [58.2, 78.0], [58.3, 78.0], [58.4, 78.0], [58.5, 78.0], [58.6, 78.0], [58.7, 78.0], [58.8, 78.0], [58.9, 78.0], [59.0, 78.0], [59.1, 78.0], [59.2, 78.0], [59.3, 78.0], [59.4, 78.0], [59.5, 78.0], [59.6, 78.0], [59.7, 78.0], [59.8, 78.0], [59.9, 78.0], [60.0, 78.0], [60.1, 78.0], [60.2, 78.0], [60.3, 79.0], [60.4, 79.0], [60.5, 79.0], [60.6, 79.0], [60.7, 79.0], [60.8, 79.0], [60.9, 79.0], [61.0, 79.0], [61.1, 79.0], [61.2, 79.0], [61.3, 79.0], [61.4, 79.0], [61.5, 79.0], [61.6, 79.0], [61.7, 79.0], [61.8, 79.0], [61.9, 79.0], [62.0, 79.0], [62.1, 79.0], [62.2, 79.0], [62.3, 79.0], [62.4, 79.0], [62.5, 79.0], [62.6, 79.0], [62.7, 79.0], [62.8, 79.0], [62.9, 79.0], [63.0, 79.0], [63.1, 79.0], [63.2, 79.0], [63.3, 79.0], [63.4, 79.0], [63.5, 79.0], [63.6, 79.0], [63.7, 79.0], [63.8, 79.0], [63.9, 79.0], [64.0, 79.0], [64.1, 79.0], [64.2, 79.0], [64.3, 79.0], [64.4, 80.0], [64.5, 80.0], [64.6, 80.0], [64.7, 80.0], [64.8, 80.0], [64.9, 80.0], [65.0, 80.0], [65.1, 80.0], [65.2, 80.0], [65.3, 80.0], [65.4, 80.0], [65.5, 80.0], [65.6, 80.0], [65.7, 80.0], [65.8, 80.0], [65.9, 80.0], [66.0, 80.0], [66.1, 80.0], [66.2, 80.0], [66.3, 80.0], [66.4, 80.0], [66.5, 80.0], [66.6, 80.0], [66.7, 80.0], [66.8, 80.0], [66.9, 80.0], [67.0, 80.0], [67.1, 80.0], [67.2, 80.0], [67.3, 80.0], [67.4, 80.0], [67.5, 80.0], [67.6, 80.0], [67.7, 80.0], [67.8, 80.0], [67.9, 80.0], [68.0, 80.0], [68.1, 80.0], [68.2, 81.0], [68.3, 81.0], [68.4, 81.0], [68.5, 81.0], [68.6, 81.0], [68.7, 81.0], [68.8, 81.0], [68.9, 81.0], [69.0, 81.0], [69.1, 81.0], [69.2, 81.0], [69.3, 81.0], [69.4, 81.0], [69.5, 81.0], [69.6, 81.0], [69.7, 81.0], [69.8, 81.0], [69.9, 81.0], [70.0, 81.0], [70.1, 82.0], [70.2, 82.0], [70.3, 82.0], [70.4, 82.0], [70.5, 82.0], [70.6, 82.0], [70.7, 82.0], [70.8, 82.0], [70.9, 82.0], [71.0, 82.0], [71.1, 82.0], [71.2, 82.0], [71.3, 82.0], [71.4, 82.0], [71.5, 82.0], [71.6, 82.0], [71.7, 82.0], [71.8, 82.0], [71.9, 82.0], [72.0, 82.0], [72.1, 82.0], [72.2, 82.0], [72.3, 82.0], [72.4, 82.0], [72.5, 82.0], [72.6, 83.0], [72.7, 83.0], [72.8, 83.0], [72.9, 83.0], [73.0, 83.0], [73.1, 83.0], [73.2, 83.0], [73.3, 83.0], [73.4, 83.0], [73.5, 83.0], [73.6, 83.0], [73.7, 83.0], [73.8, 83.0], [73.9, 83.0], [74.0, 83.0], [74.1, 83.0], [74.2, 83.0], [74.3, 83.0], [74.4, 83.0], [74.5, 83.0], [74.6, 83.0], [74.7, 83.0], [74.8, 83.0], [74.9, 83.0], [75.0, 83.0], [75.1, 83.0], [75.2, 83.0], [75.3, 83.0], [75.4, 83.0], [75.5, 83.0], [75.6, 83.0], [75.7, 83.0], [75.8, 83.0], [75.9, 83.0], [76.0, 83.0], [76.1, 83.0], [76.2, 84.0], [76.3, 84.0], [76.4, 84.0], [76.5, 84.0], [76.6, 84.0], [76.7, 84.0], [76.8, 84.0], [76.9, 84.0], [77.0, 84.0], [77.1, 84.0], [77.2, 84.0], [77.3, 84.0], [77.4, 84.0], [77.5, 84.0], [77.6, 84.0], [77.7, 84.0], [77.8, 84.0], [77.9, 84.0], [78.0, 84.0], [78.1, 84.0], [78.2, 84.0], [78.3, 84.0], [78.4, 84.0], [78.5, 84.0], [78.6, 84.0], [78.7, 84.0], [78.8, 84.0], [78.9, 84.0], [79.0, 84.0], [79.1, 84.0], [79.2, 84.0], [79.3, 84.0], [79.4, 84.0], [79.5, 84.0], [79.6, 84.0], [79.7, 85.0], [79.8, 85.0], [79.9, 85.0], [80.0, 85.0], [80.1, 85.0], [80.2, 85.0], [80.3, 85.0], [80.4, 85.0], [80.5, 85.0], [80.6, 85.0], [80.7, 85.0], [80.8, 85.0], [80.9, 85.0], [81.0, 85.0], [81.1, 85.0], [81.2, 85.0], [81.3, 85.0], [81.4, 86.0], [81.5, 86.0], [81.6, 86.0], [81.7, 86.0], [81.8, 86.0], [81.9, 86.0], [82.0, 86.0], [82.1, 86.0], [82.2, 86.0], [82.3, 86.0], [82.4, 86.0], [82.5, 86.0], [82.6, 86.0], [82.7, 86.0], [82.8, 86.0], [82.9, 86.0], [83.0, 86.0], [83.1, 86.0], [83.2, 86.0], [83.3, 86.0], [83.4, 87.0], [83.5, 87.0], [83.6, 87.0], [83.7, 87.0], [83.8, 87.0], [83.9, 87.0], [84.0, 87.0], [84.1, 87.0], [84.2, 87.0], [84.3, 87.0], [84.4, 87.0], [84.5, 87.0], [84.6, 87.0], [84.7, 87.0], [84.8, 87.0], [84.9, 87.0], [85.0, 87.0], [85.1, 87.0], [85.2, 87.0], [85.3, 87.0], [85.4, 87.0], [85.5, 87.0], [85.6, 87.0], [85.7, 87.0], [85.8, 87.0], [85.9, 87.0], [86.0, 88.0], [86.1, 88.0], [86.2, 88.0], [86.3, 88.0], [86.4, 88.0], [86.5, 88.0], [86.6, 88.0], [86.7, 88.0], [86.8, 88.0], [86.9, 88.0], [87.0, 88.0], [87.1, 88.0], [87.2, 88.0], [87.3, 88.0], [87.4, 88.0], [87.5, 88.0], [87.6, 88.0], [87.7, 88.0], [87.8, 88.0], [87.9, 88.0], [88.0, 88.0], [88.1, 88.0], [88.2, 88.0], [88.3, 89.0], [88.4, 89.0], [88.5, 89.0], [88.6, 89.0], [88.7, 89.0], [88.8, 89.0], [88.9, 89.0], [89.0, 89.0], [89.1, 89.0], [89.2, 90.0], [89.3, 90.0], [89.4, 90.0], [89.5, 90.0], [89.6, 90.0], [89.7, 90.0], [89.8, 90.0], [89.9, 90.0], [90.0, 90.0], [90.1, 90.0], [90.2, 90.0], [90.3, 90.0], [90.4, 90.0], [90.5, 90.0], [90.6, 91.0], [90.7, 91.0], [90.8, 91.0], [90.9, 91.0], [91.0, 91.0], [91.1, 91.0], [91.2, 91.0], [91.3, 91.0], [91.4, 91.0], [91.5, 91.0], [91.6, 91.0], [91.7, 91.0], [91.8, 91.0], [91.9, 91.0], [92.0, 91.0], [92.1, 91.0], [92.2, 91.0], [92.3, 92.0], [92.4, 92.0], [92.5, 92.0], [92.6, 92.0], [92.7, 92.0], [92.8, 92.0], [92.9, 92.0], [93.0, 92.0], [93.1, 92.0], [93.2, 92.0], [93.3, 92.0], [93.4, 92.0], [93.5, 92.0], [93.6, 92.0], [93.7, 93.0], [93.8, 93.0], [93.9, 93.0], [94.0, 93.0], [94.1, 93.0], [94.2, 93.0], [94.3, 94.0], [94.4, 94.0], [94.5, 94.0], [94.6, 94.0], [94.7, 94.0], [94.8, 94.0], [94.9, 94.0], [95.0, 95.0], [95.1, 95.0], [95.2, 95.0], [95.3, 95.0], [95.4, 95.0], [95.5, 95.0], [95.6, 95.0], [95.7, 95.0], [95.8, 95.0], [95.9, 95.0], [96.0, 96.0], [96.1, 96.0], [96.2, 96.0], [96.3, 96.0], [96.4, 96.0], [96.5, 96.0], [96.6, 96.0], [96.7, 96.0], [96.8, 97.0], [96.9, 97.0], [97.0, 97.0], [97.1, 97.0], [97.2, 98.0], [97.3, 98.0], [97.4, 98.0], [97.5, 98.0], [97.6, 99.0], [97.7, 99.0], [97.8, 99.0], [97.9, 99.0], [98.0, 99.0], [98.1, 99.0], [98.2, 100.0], [98.3, 100.0], [98.4, 100.0], [98.5, 100.0], [98.6, 101.0], [98.7, 101.0], [98.8, 102.0], [98.9, 103.0], [99.0, 104.0], [99.1, 104.0], [99.2, 104.0], [99.3, 106.0], [99.4, 107.0], [99.5, 108.0], [99.6, 109.0], [99.7, 112.0], [99.8, 116.0], [99.9, 120.0], [100.0, 153.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 962.0], [0.1, 1037.0], [0.2, 1076.0], [0.3, 1122.0], [0.4, 1140.0], [0.5, 1173.0], [0.6, 1182.0], [0.7, 1192.0], [0.8, 1205.0], [0.9, 1215.0], [1.0, 1226.0], [1.1, 1236.0], [1.2, 1245.0], [1.3, 1257.0], [1.4, 1272.0], [1.5, 1283.0], [1.6, 1292.0], [1.7, 1299.0], [1.8, 1310.0], [1.9, 1318.0], [2.0, 1324.0], [2.1, 1332.0], [2.2, 1337.0], [2.3, 1342.0], [2.4, 1349.0], [2.5, 1352.0], [2.6, 1359.0], [2.7, 1361.0], [2.8, 1365.0], [2.9, 1369.0], [3.0, 1372.0], [3.1, 1376.0], [3.2, 1380.0], [3.3, 1383.0], [3.4, 1390.0], [3.5, 1400.0], [3.6, 1403.0], [3.7, 1409.0], [3.8, 1412.0], [3.9, 1415.0], [4.0, 1419.0], [4.1, 1422.0], [4.2, 1426.0], [4.3, 1428.0], [4.4, 1431.0], [4.5, 1434.0], [4.6, 1439.0], [4.7, 1443.0], [4.8, 1446.0], [4.9, 1450.0], [5.0, 1453.0], [5.1, 1456.0], [5.2, 1460.0], [5.3, 1462.0], [5.4, 1464.0], [5.5, 1468.0], [5.6, 1473.0], [5.7, 1476.0], [5.8, 1478.0], [5.9, 1480.0], [6.0, 1484.0], [6.1, 1487.0], [6.2, 1488.0], [6.3, 1493.0], [6.4, 1496.0], [6.5, 1497.0], [6.6, 1500.0], [6.7, 1502.0], [6.8, 1504.0], [6.9, 1509.0], [7.0, 1511.0], [7.1, 1514.0], [7.2, 1516.0], [7.3, 1519.0], [7.4, 1521.0], [7.5, 1525.0], [7.6, 1527.0], [7.7, 1528.0], [7.8, 1532.0], [7.9, 1534.0], [8.0, 1536.0], [8.1, 1539.0], [8.2, 1541.0], [8.3, 1543.0], [8.4, 1545.0], [8.5, 1548.0], [8.6, 1551.0], [8.7, 1552.0], [8.8, 1556.0], [8.9, 1558.0], [9.0, 1560.0], [9.1, 1562.0], [9.2, 1564.0], [9.3, 1566.0], [9.4, 1569.0], [9.5, 1571.0], [9.6, 1574.0], [9.7, 1576.0], [9.8, 1580.0], [9.9, 1581.0], [10.0, 1585.0], [10.1, 1587.0], [10.2, 1588.0], [10.3, 1589.0], [10.4, 1591.0], [10.5, 1594.0], [10.6, 1595.0], [10.7, 1596.0], [10.8, 1599.0], [10.9, 1601.0], [11.0, 1603.0], [11.1, 1604.0], [11.2, 1607.0], [11.3, 1608.0], [11.4, 1610.0], [11.5, 1612.0], [11.6, 1615.0], [11.7, 1617.0], [11.8, 1618.0], [11.9, 1620.0], [12.0, 1623.0], [12.1, 1624.0], [12.2, 1627.0], [12.3, 1629.0], [12.4, 1631.0], [12.5, 1634.0], [12.6, 1636.0], [12.7, 1638.0], [12.8, 1641.0], [12.9, 1644.0], [13.0, 1645.0], [13.1, 1647.0], [13.2, 1648.0], [13.3, 1650.0], [13.4, 1651.0], [13.5, 1652.0], [13.6, 1655.0], [13.7, 1656.0], [13.8, 1657.0], [13.9, 1658.0], [14.0, 1659.0], [14.1, 1660.0], [14.2, 1661.0], [14.3, 1663.0], [14.4, 1664.0], [14.5, 1665.0], [14.6, 1667.0], [14.7, 1668.0], [14.8, 1671.0], [14.9, 1672.0], [15.0, 1673.0], [15.1, 1675.0], [15.2, 1676.0], [15.3, 1677.0], [15.4, 1679.0], [15.5, 1680.0], [15.6, 1682.0], [15.7, 1684.0], [15.8, 1685.0], [15.9, 1687.0], [16.0, 1688.0], [16.1, 1691.0], [16.2, 1692.0], [16.3, 1693.0], [16.4, 1694.0], [16.5, 1696.0], [16.6, 1699.0], [16.7, 1700.0], [16.8, 1701.0], [16.9, 1703.0], [17.0, 1704.0], [17.1, 1707.0], [17.2, 1708.0], [17.3, 1710.0], [17.4, 1711.0], [17.5, 1712.0], [17.6, 1715.0], [17.7, 1716.0], [17.8, 1718.0], [17.9, 1720.0], [18.0, 1720.0], [18.1, 1721.0], [18.2, 1723.0], [18.3, 1724.0], [18.4, 1725.0], [18.5, 1726.0], [18.6, 1728.0], [18.7, 1729.0], [18.8, 1730.0], [18.9, 1732.0], [19.0, 1733.0], [19.1, 1734.0], [19.2, 1735.0], [19.3, 1737.0], [19.4, 1737.0], [19.5, 1740.0], [19.6, 1742.0], [19.7, 1743.0], [19.8, 1744.0], [19.9, 1746.0], [20.0, 1746.0], [20.1, 1748.0], [20.2, 1751.0], [20.3, 1752.0], [20.4, 1754.0], [20.5, 1755.0], [20.6, 1756.0], [20.7, 1758.0], [20.8, 1760.0], [20.9, 1760.0], [21.0, 1762.0], [21.1, 1763.0], [21.2, 1764.0], [21.3, 1766.0], [21.4, 1767.0], [21.5, 1770.0], [21.6, 1771.0], [21.7, 1771.0], [21.8, 1772.0], [21.9, 1774.0], [22.0, 1776.0], [22.1, 1777.0], [22.2, 1778.0], [22.3, 1780.0], [22.4, 1780.0], [22.5, 1781.0], [22.6, 1783.0], [22.7, 1784.0], [22.8, 1786.0], [22.9, 1788.0], [23.0, 1789.0], [23.1, 1790.0], [23.2, 1792.0], [23.3, 1794.0], [23.4, 1795.0], [23.5, 1797.0], [23.6, 1798.0], [23.7, 1800.0], [23.8, 1801.0], [23.9, 1802.0], [24.0, 1804.0], [24.1, 1805.0], [24.2, 1807.0], [24.3, 1807.0], [24.4, 1808.0], [24.5, 1809.0], [24.6, 1810.0], [24.7, 1811.0], [24.8, 1812.0], [24.9, 1814.0], [25.0, 1815.0], [25.1, 1817.0], [25.2, 1818.0], [25.3, 1820.0], [25.4, 1821.0], [25.5, 1822.0], [25.6, 1824.0], [25.7, 1826.0], [25.8, 1828.0], [25.9, 1829.0], [26.0, 1830.0], [26.1, 1831.0], [26.2, 1832.0], [26.3, 1833.0], [26.4, 1835.0], [26.5, 1836.0], [26.6, 1837.0], [26.7, 1839.0], [26.8, 1840.0], [26.9, 1842.0], [27.0, 1843.0], [27.1, 1844.0], [27.2, 1844.0], [27.3, 1846.0], [27.4, 1848.0], [27.5, 1849.0], [27.6, 1850.0], [27.7, 1851.0], [27.8, 1852.0], [27.9, 1853.0], [28.0, 1855.0], [28.1, 1856.0], [28.2, 1857.0], [28.3, 1859.0], [28.4, 1860.0], [28.5, 1861.0], [28.6, 1863.0], [28.7, 1864.0], [28.8, 1864.0], [28.9, 1865.0], [29.0, 1867.0], [29.1, 1868.0], [29.2, 1869.0], [29.3, 1870.0], [29.4, 1871.0], [29.5, 1872.0], [29.6, 1873.0], [29.7, 1874.0], [29.8, 1876.0], [29.9, 1876.0], [30.0, 1878.0], [30.1, 1879.0], [30.2, 1881.0], [30.3, 1883.0], [30.4, 1884.0], [30.5, 1884.0], [30.6, 1885.0], [30.7, 1886.0], [30.8, 1888.0], [30.9, 1888.0], [31.0, 1889.0], [31.1, 1891.0], [31.2, 1892.0], [31.3, 1894.0], [31.4, 1895.0], [31.5, 1896.0], [31.6, 1897.0], [31.7, 1900.0], [31.8, 1900.0], [31.9, 1901.0], [32.0, 1903.0], [32.1, 1904.0], [32.2, 1905.0], [32.3, 1906.0], [32.4, 1908.0], [32.5, 1909.0], [32.6, 1910.0], [32.7, 1911.0], [32.8, 1912.0], [32.9, 1913.0], [33.0, 1914.0], [33.1, 1916.0], [33.2, 1916.0], [33.3, 1919.0], [33.4, 1920.0], [33.5, 1920.0], [33.6, 1921.0], [33.7, 1923.0], [33.8, 1924.0], [33.9, 1924.0], [34.0, 1926.0], [34.1, 1927.0], [34.2, 1928.0], [34.3, 1928.0], [34.4, 1931.0], [34.5, 1931.0], [34.6, 1932.0], [34.7, 1932.0], [34.8, 1934.0], [34.9, 1935.0], [35.0, 1936.0], [35.1, 1939.0], [35.2, 1940.0], [35.3, 1941.0], [35.4, 1942.0], [35.5, 1943.0], [35.6, 1944.0], [35.7, 1944.0], [35.8, 1945.0], [35.9, 1947.0], [36.0, 1947.0], [36.1, 1948.0], [36.2, 1949.0], [36.3, 1950.0], [36.4, 1952.0], [36.5, 1953.0], [36.6, 1955.0], [36.7, 1956.0], [36.8, 1957.0], [36.9, 1958.0], [37.0, 1959.0], [37.1, 1960.0], [37.2, 1961.0], [37.3, 1963.0], [37.4, 1964.0], [37.5, 1965.0], [37.6, 1966.0], [37.7, 1968.0], [37.8, 1968.0], [37.9, 1969.0], [38.0, 1971.0], [38.1, 1971.0], [38.2, 1973.0], [38.3, 1974.0], [38.4, 1975.0], [38.5, 1976.0], [38.6, 1977.0], [38.7, 1978.0], [38.8, 1980.0], [38.9, 1980.0], [39.0, 1982.0], [39.1, 1982.0], [39.2, 1983.0], [39.3, 1984.0], [39.4, 1985.0], [39.5, 1987.0], [39.6, 1987.0], [39.7, 1988.0], [39.8, 1988.0], [39.9, 1989.0], [40.0, 1991.0], [40.1, 1992.0], [40.2, 1992.0], [40.3, 1993.0], [40.4, 1996.0], [40.5, 1996.0], [40.6, 1997.0], [40.7, 1999.0], [40.8, 1999.0], [40.9, 2000.0], [41.0, 2001.0], [41.1, 2003.0], [41.2, 2004.0], [41.3, 2005.0], [41.4, 2008.0], [41.5, 2009.0], [41.6, 2010.0], [41.7, 2011.0], [41.8, 2012.0], [41.9, 2012.0], [42.0, 2014.0], [42.1, 2015.0], [42.2, 2016.0], [42.3, 2016.0], [42.4, 2018.0], [42.5, 2019.0], [42.6, 2020.0], [42.7, 2020.0], [42.8, 2021.0], [42.9, 2023.0], [43.0, 2024.0], [43.1, 2025.0], [43.2, 2027.0], [43.3, 2028.0], [43.4, 2028.0], [43.5, 2030.0], [43.6, 2031.0], [43.7, 2032.0], [43.8, 2033.0], [43.9, 2034.0], [44.0, 2035.0], [44.1, 2036.0], [44.2, 2037.0], [44.3, 2038.0], [44.4, 2039.0], [44.5, 2040.0], [44.6, 2042.0], [44.7, 2043.0], [44.8, 2044.0], [44.9, 2044.0], [45.0, 2045.0], [45.1, 2047.0], [45.2, 2048.0], [45.3, 2048.0], [45.4, 2050.0], [45.5, 2051.0], [45.6, 2052.0], [45.7, 2053.0], [45.8, 2055.0], [45.9, 2056.0], [46.0, 2057.0], [46.1, 2059.0], [46.2, 2060.0], [46.3, 2062.0], [46.4, 2063.0], [46.5, 2064.0], [46.6, 2066.0], [46.7, 2066.0], [46.8, 2068.0], [46.9, 2068.0], [47.0, 2070.0], [47.1, 2071.0], [47.2, 2072.0], [47.3, 2073.0], [47.4, 2073.0], [47.5, 2075.0], [47.6, 2075.0], [47.7, 2076.0], [47.8, 2078.0], [47.9, 2080.0], [48.0, 2080.0], [48.1, 2082.0], [48.2, 2083.0], [48.3, 2083.0], [48.4, 2084.0], [48.5, 2085.0], [48.6, 2086.0], [48.7, 2087.0], [48.8, 2088.0], [48.9, 2089.0], [49.0, 2090.0], [49.1, 2091.0], [49.2, 2093.0], [49.3, 2095.0], [49.4, 2095.0], [49.5, 2096.0], [49.6, 2097.0], [49.7, 2098.0], [49.8, 2099.0], [49.9, 2100.0], [50.0, 2102.0], [50.1, 2103.0], [50.2, 2104.0], [50.3, 2104.0], [50.4, 2106.0], [50.5, 2107.0], [50.6, 2108.0], [50.7, 2109.0], [50.8, 2111.0], [50.9, 2112.0], [51.0, 2113.0], [51.1, 2114.0], [51.2, 2116.0], [51.3, 2116.0], [51.4, 2117.0], [51.5, 2118.0], [51.6, 2119.0], [51.7, 2120.0], [51.8, 2121.0], [51.9, 2122.0], [52.0, 2123.0], [52.1, 2124.0], [52.2, 2126.0], [52.3, 2127.0], [52.4, 2128.0], [52.5, 2128.0], [52.6, 2129.0], [52.7, 2131.0], [52.8, 2131.0], [52.9, 2132.0], [53.0, 2133.0], [53.1, 2134.0], [53.2, 2136.0], [53.3, 2136.0], [53.4, 2138.0], [53.5, 2140.0], [53.6, 2140.0], [53.7, 2141.0], [53.8, 2143.0], [53.9, 2144.0], [54.0, 2144.0], [54.1, 2145.0], [54.2, 2147.0], [54.3, 2148.0], [54.4, 2148.0], [54.5, 2150.0], [54.6, 2151.0], [54.7, 2152.0], [54.8, 2154.0], [54.9, 2155.0], [55.0, 2156.0], [55.1, 2157.0], [55.2, 2159.0], [55.3, 2160.0], [55.4, 2160.0], [55.5, 2161.0], [55.6, 2164.0], [55.7, 2164.0], [55.8, 2165.0], [55.9, 2167.0], [56.0, 2169.0], [56.1, 2171.0], [56.2, 2172.0], [56.3, 2172.0], [56.4, 2173.0], [56.5, 2175.0], [56.6, 2176.0], [56.7, 2177.0], [56.8, 2178.0], [56.9, 2179.0], [57.0, 2180.0], [57.1, 2182.0], [57.2, 2183.0], [57.3, 2183.0], [57.4, 2184.0], [57.5, 2185.0], [57.6, 2187.0], [57.7, 2188.0], [57.8, 2189.0], [57.9, 2190.0], [58.0, 2191.0], [58.1, 2193.0], [58.2, 2195.0], [58.3, 2196.0], [58.4, 2197.0], [58.5, 2199.0], [58.6, 2201.0], [58.7, 2202.0], [58.8, 2203.0], [58.9, 2204.0], [59.0, 2204.0], [59.1, 2205.0], [59.2, 2207.0], [59.3, 2208.0], [59.4, 2209.0], [59.5, 2211.0], [59.6, 2212.0], [59.7, 2213.0], [59.8, 2215.0], [59.9, 2216.0], [60.0, 2217.0], [60.1, 2219.0], [60.2, 2220.0], [60.3, 2220.0], [60.4, 2221.0], [60.5, 2222.0], [60.6, 2223.0], [60.7, 2224.0], [60.8, 2224.0], [60.9, 2225.0], [61.0, 2225.0], [61.1, 2227.0], [61.2, 2228.0], [61.3, 2228.0], [61.4, 2229.0], [61.5, 2231.0], [61.6, 2231.0], [61.7, 2232.0], [61.8, 2233.0], [61.9, 2235.0], [62.0, 2236.0], [62.1, 2236.0], [62.2, 2237.0], [62.3, 2238.0], [62.4, 2239.0], [62.5, 2240.0], [62.6, 2242.0], [62.7, 2244.0], [62.8, 2245.0], [62.9, 2246.0], [63.0, 2247.0], [63.1, 2248.0], [63.2, 2249.0], [63.3, 2251.0], [63.4, 2252.0], [63.5, 2253.0], [63.6, 2255.0], [63.7, 2256.0], [63.8, 2257.0], [63.9, 2258.0], [64.0, 2259.0], [64.1, 2260.0], [64.2, 2260.0], [64.3, 2262.0], [64.4, 2263.0], [64.5, 2264.0], [64.6, 2265.0], [64.7, 2267.0], [64.8, 2268.0], [64.9, 2269.0], [65.0, 2272.0], [65.1, 2272.0], [65.2, 2274.0], [65.3, 2275.0], [65.4, 2276.0], [65.5, 2278.0], [65.6, 2279.0], [65.7, 2280.0], [65.8, 2280.0], [65.9, 2281.0], [66.0, 2283.0], [66.1, 2284.0], [66.2, 2286.0], [66.3, 2287.0], [66.4, 2288.0], [66.5, 2288.0], [66.6, 2289.0], [66.7, 2291.0], [66.8, 2292.0], [66.9, 2292.0], [67.0, 2294.0], [67.1, 2295.0], [67.2, 2296.0], [67.3, 2297.0], [67.4, 2298.0], [67.5, 2299.0], [67.6, 2300.0], [67.7, 2302.0], [67.8, 2303.0], [67.9, 2304.0], [68.0, 2305.0], [68.1, 2307.0], [68.2, 2307.0], [68.3, 2309.0], [68.4, 2310.0], [68.5, 2311.0], [68.6, 2312.0], [68.7, 2313.0], [68.8, 2314.0], [68.9, 2315.0], [69.0, 2316.0], [69.1, 2318.0], [69.2, 2319.0], [69.3, 2320.0], [69.4, 2323.0], [69.5, 2324.0], [69.6, 2324.0], [69.7, 2326.0], [69.8, 2327.0], [69.9, 2328.0], [70.0, 2329.0], [70.1, 2332.0], [70.2, 2333.0], [70.3, 2334.0], [70.4, 2336.0], [70.5, 2337.0], [70.6, 2339.0], [70.7, 2340.0], [70.8, 2340.0], [70.9, 2341.0], [71.0, 2343.0], [71.1, 2344.0], [71.2, 2347.0], [71.3, 2348.0], [71.4, 2349.0], [71.5, 2350.0], [71.6, 2351.0], [71.7, 2352.0], [71.8, 2353.0], [71.9, 2356.0], [72.0, 2357.0], [72.1, 2359.0], [72.2, 2360.0], [72.3, 2361.0], [72.4, 2362.0], [72.5, 2364.0], [72.6, 2364.0], [72.7, 2365.0], [72.8, 2368.0], [72.9, 2368.0], [73.0, 2370.0], [73.1, 2372.0], [73.2, 2372.0], [73.3, 2374.0], [73.4, 2375.0], [73.5, 2376.0], [73.6, 2379.0], [73.7, 2379.0], [73.8, 2381.0], [73.9, 2384.0], [74.0, 2385.0], [74.1, 2386.0], [74.2, 2388.0], [74.3, 2388.0], [74.4, 2389.0], [74.5, 2391.0], [74.6, 2392.0], [74.7, 2392.0], [74.8, 2393.0], [74.9, 2395.0], [75.0, 2396.0], [75.1, 2400.0], [75.2, 2401.0], [75.3, 2403.0], [75.4, 2404.0], [75.5, 2405.0], [75.6, 2407.0], [75.7, 2408.0], [75.8, 2409.0], [75.9, 2411.0], [76.0, 2412.0], [76.1, 2414.0], [76.2, 2416.0], [76.3, 2417.0], [76.4, 2418.0], [76.5, 2420.0], [76.6, 2421.0], [76.7, 2423.0], [76.8, 2424.0], [76.9, 2425.0], [77.0, 2427.0], [77.1, 2428.0], [77.2, 2430.0], [77.3, 2432.0], [77.4, 2434.0], [77.5, 2435.0], [77.6, 2436.0], [77.7, 2439.0], [77.8, 2440.0], [77.9, 2441.0], [78.0, 2443.0], [78.1, 2444.0], [78.2, 2446.0], [78.3, 2448.0], [78.4, 2449.0], [78.5, 2452.0], [78.6, 2453.0], [78.7, 2455.0], [78.8, 2456.0], [78.9, 2456.0], [79.0, 2458.0], [79.1, 2460.0], [79.2, 2460.0], [79.3, 2463.0], [79.4, 2464.0], [79.5, 2466.0], [79.6, 2467.0], [79.7, 2468.0], [79.8, 2470.0], [79.9, 2472.0], [80.0, 2473.0], [80.1, 2476.0], [80.2, 2477.0], [80.3, 2478.0], [80.4, 2480.0], [80.5, 2481.0], [80.6, 2483.0], [80.7, 2484.0], [80.8, 2486.0], [80.9, 2488.0], [81.0, 2492.0], [81.1, 2493.0], [81.2, 2495.0], [81.3, 2497.0], [81.4, 2500.0], [81.5, 2501.0], [81.6, 2504.0], [81.7, 2504.0], [81.8, 2507.0], [81.9, 2509.0], [82.0, 2512.0], [82.1, 2513.0], [82.2, 2515.0], [82.3, 2516.0], [82.4, 2518.0], [82.5, 2520.0], [82.6, 2523.0], [82.7, 2524.0], [82.8, 2525.0], [82.9, 2527.0], [83.0, 2528.0], [83.1, 2529.0], [83.2, 2533.0], [83.3, 2535.0], [83.4, 2536.0], [83.5, 2539.0], [83.6, 2540.0], [83.7, 2541.0], [83.8, 2543.0], [83.9, 2544.0], [84.0, 2546.0], [84.1, 2548.0], [84.2, 2550.0], [84.3, 2553.0], [84.4, 2556.0], [84.5, 2557.0], [84.6, 2560.0], [84.7, 2562.0], [84.8, 2564.0], [84.9, 2566.0], [85.0, 2568.0], [85.1, 2571.0], [85.2, 2573.0], [85.3, 2575.0], [85.4, 2578.0], [85.5, 2580.0], [85.6, 2582.0], [85.7, 2584.0], [85.8, 2586.0], [85.9, 2588.0], [86.0, 2591.0], [86.1, 2593.0], [86.2, 2596.0], [86.3, 2600.0], [86.4, 2602.0], [86.5, 2604.0], [86.6, 2605.0], [86.7, 2607.0], [86.8, 2609.0], [86.9, 2612.0], [87.0, 2614.0], [87.1, 2616.0], [87.2, 2618.0], [87.3, 2620.0], [87.4, 2624.0], [87.5, 2627.0], [87.6, 2630.0], [87.7, 2632.0], [87.8, 2634.0], [87.9, 2636.0], [88.0, 2639.0], [88.1, 2643.0], [88.2, 2644.0], [88.3, 2648.0], [88.4, 2650.0], [88.5, 2652.0], [88.6, 2655.0], [88.7, 2657.0], [88.8, 2660.0], [88.9, 2661.0], [89.0, 2664.0], [89.1, 2667.0], [89.2, 2668.0], [89.3, 2671.0], [89.4, 2675.0], [89.5, 2677.0], [89.6, 2680.0], [89.7, 2683.0], [89.8, 2685.0], [89.9, 2688.0], [90.0, 2692.0], [90.1, 2697.0], [90.2, 2702.0], [90.3, 2705.0], [90.4, 2708.0], [90.5, 2711.0], [90.6, 2712.0], [90.7, 2715.0], [90.8, 2719.0], [90.9, 2724.0], [91.0, 2727.0], [91.1, 2730.0], [91.2, 2732.0], [91.3, 2735.0], [91.4, 2739.0], [91.5, 2742.0], [91.6, 2746.0], [91.7, 2748.0], [91.8, 2752.0], [91.9, 2756.0], [92.0, 2761.0], [92.1, 2765.0], [92.2, 2768.0], [92.3, 2771.0], [92.4, 2774.0], [92.5, 2780.0], [92.6, 2782.0], [92.7, 2785.0], [92.8, 2792.0], [92.9, 2795.0], [93.0, 2798.0], [93.1, 2803.0], [93.2, 2808.0], [93.3, 2812.0], [93.4, 2819.0], [93.5, 2821.0], [93.6, 2826.0], [93.7, 2828.0], [93.8, 2831.0], [93.9, 2836.0], [94.0, 2840.0], [94.1, 2844.0], [94.2, 2849.0], [94.3, 2854.0], [94.4, 2858.0], [94.5, 2861.0], [94.6, 2864.0], [94.7, 2869.0], [94.8, 2873.0], [94.9, 2880.0], [95.0, 2889.0], [95.1, 2896.0], [95.2, 2899.0], [95.3, 2903.0], [95.4, 2909.0], [95.5, 2916.0], [95.6, 2920.0], [95.7, 2923.0], [95.8, 2930.0], [95.9, 2936.0], [96.0, 2939.0], [96.1, 2946.0], [96.2, 2949.0], [96.3, 2956.0], [96.4, 2963.0], [96.5, 2965.0], [96.6, 2972.0], [96.7, 2977.0], [96.8, 2986.0], [96.9, 3000.0], [97.0, 3004.0], [97.1, 3019.0], [97.2, 3029.0], [97.3, 3040.0], [97.4, 3049.0], [97.5, 3058.0], [97.6, 3069.0], [97.7, 3080.0], [97.8, 3088.0], [97.9, 3104.0], [98.0, 3108.0], [98.1, 3120.0], [98.2, 3134.0], [98.3, 3144.0], [98.4, 3160.0], [98.5, 3175.0], [98.6, 3196.0], [98.7, 3220.0], [98.8, 3233.0], [98.9, 3262.0], [99.0, 3291.0], [99.1, 3310.0], [99.2, 3332.0], [99.3, 3359.0], [99.4, 3398.0], [99.5, 3471.0], [99.6, 3521.0], [99.7, 4690.0], [99.8, 4981.0], [99.9, 5219.0], [100.0, 5694.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 9817.0, "series": [{"data": [[0.0, 9817.0], [100.0, 183.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[900.0, 3.0], [1000.0, 21.0], [1100.0, 51.0], [1200.0, 95.0], [1300.0, 179.0], [1400.0, 307.0], [1500.0, 426.0], [1600.0, 583.0], [1700.0, 704.0], [1800.0, 800.0], [1900.0, 912.0], [2000.0, 900.0], [2100.0, 876.0], [2200.0, 894.0], [2300.0, 759.0], [2400.0, 629.0], [2500.0, 490.0], [2600.0, 384.0], [2800.0, 218.0], [2700.0, 290.0], [2900.0, 167.0], [3000.0, 98.0], [3100.0, 75.0], [3200.0, 43.0], [3300.0, 36.0], [3400.0, 15.0], [3500.0, 8.0], [3700.0, 1.0], [3600.0, 3.0], [3800.0, 1.0], [4600.0, 2.0], [4400.0, 1.0], [4700.0, 2.0], [4800.0, 4.0], [4900.0, 5.0], [5000.0, 5.0], [5100.0, 2.0], [5200.0, 6.0], [5300.0, 3.0], [5400.0, 1.0], [5600.0, 1.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 5600.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 662.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 10000.0, "series": [{"data": [[0.0, 10000.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 662.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 9338.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 2.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 30.592592592592595, "minX": 1.74601194E12, "maxY": 32.0, "series": [{"data": [[1.74601212E12, 32.0], [1.74601242E12, 32.0], [1.74601206E12, 32.0], [1.74601236E12, 32.0], [1.74601266E12, 30.592592592592595], [1.746012E12, 32.0], [1.7460123E12, 32.0], [1.7460126E12, 32.0], [1.74601194E12, 31.045662100456628], [1.74601224E12, 32.0], [1.74601254E12, 32.0], [1.74601218E12, 32.0], [1.74601248E12, 32.0]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74601266E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 10.0, "minX": 3.0, "maxY": 2661.0, "series": [{"data": [[32.0, 75.35413322632434], [12.0, 19.833333333333336], [13.0, 35.85714285714286], [15.0, 26.0], [17.0, 52.0], [18.0, 33.666666666666664], [19.0, 20.0], [20.0, 13.0], [21.0, 11.0], [22.0, 11.0], [23.0, 11.0], [24.0, 12.0], [25.0, 10.0], [26.0, 10.0], [27.0, 10.0], [28.0, 10.0], [29.0, 11.0], [30.0, 10.0], [31.0, 35.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[31.95809999999998, 75.1887999999997]], "isOverall": false, "label": "Create CSR-Aggregated", "isController": false}, {"data": [[32.0, 2130.0183569064116], [3.0, 1236.6666666666667], [4.0, 1018.0], [5.0, 1424.0], [6.0, 1787.0], [7.0, 1543.0], [8.0, 1812.0], [9.0, 2210.0], [10.0, 1999.0], [11.0, 1987.0], [12.0, 1569.0], [13.0, 2403.0], [14.0, 1783.0], [15.0, 1373.0], [16.0, 2661.0], [17.0, 2457.0], [18.0, 1932.0], [19.0, 2103.0], [20.0, 2274.0], [21.0, 1897.0], [22.0, 2483.0], [23.0, 2249.0], [24.0, 2058.0], [25.0, 2024.0], [26.0, 1466.0], [27.0, 1240.0], [28.0, 1928.0], [29.0, 1487.0], [30.0, 1365.0], [31.0, 2090.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}, {"data": [[31.95069999999999, 2129.048500000002]], "isOverall": false, "label": "HTTP Request - enroll-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 32.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2908.0666666666666, "minX": 1.74601194E12, "maxY": 51958.833333333336, "series": [{"data": [[1.74601212E12, 51511.6], [1.74601242E12, 50926.333333333336], [1.74601206E12, 51467.416666666664], [1.74601236E12, 51212.566666666666], [1.74601266E12, 10972.416666666666], [1.746012E12, 51958.833333333336], [1.7460123E12, 51276.26666666667], [1.7460126E12, 50523.36666666667], [1.74601194E12, 12095.966666666667], [1.74601224E12, 51388.583333333336], [1.74601254E12, 50738.4], [1.74601218E12, 50642.083333333336], [1.74601248E12, 50646.95]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74601212E12, 13399.266666666666], [1.74601242E12, 13246.566666666668], [1.74601206E12, 13385.433333333332], [1.74601236E12, 13323.566666666668], [1.74601266E12, 2908.0666666666666], [1.746012E12, 13520.266666666666], [1.7460123E12, 13337.333333333334], [1.7460126E12, 13140.2], [1.74601194E12, 3090.3], [1.74601224E12, 13369.5], [1.74601254E12, 13201.6], [1.74601218E12, 13171.5], [1.74601248E12, 13170.466666666667]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74601266E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 71.66874999999999, "minX": 1.74601194E12, "maxY": 2548.4433497536947, "series": [{"data": [[1.74601212E12, 75.96136363636353], [1.74601242E12, 74.8482758620688], [1.74601206E12, 75.65493757094221], [1.74601236E12, 75.94279176201378], [1.74601266E12, 71.66874999999999], [1.746012E12, 76.13559322033905], [1.7460123E12, 75.24315068493158], [1.7460126E12, 74.86458333333327], [1.74601194E12, 72.19574468085105], [1.74601224E12, 74.40364880273644], [1.74601254E12, 74.93526011560692], [1.74601218E12, 75.37182448036957], [1.74601248E12, 75.13956170703574]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74601212E12, 2099.395454545457], [1.74601242E12, 2122.7471264367787], [1.74601206E12, 2103.3799772468724], [1.74601236E12, 2122.2605714285664], [1.74601266E12, 2083.869109947643], [1.746012E12, 2093.274774774774], [1.7460123E12, 2118.1004566210063], [1.7460126E12, 2135.2711471610683], [1.74601194E12, 2548.4433497536947], [1.74601224E12, 2113.0205011389544], [1.74601254E12, 2144.701268742789], [1.74601218E12, 2137.872832369943], [1.74601248E12, 2143.4150289017307]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74601266E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74601194E12, "maxY": 2548.4039408866997, "series": [{"data": [[1.74601212E12, 0.0], [1.74601242E12, 0.0], [1.74601206E12, 0.0], [1.74601236E12, 0.0], [1.74601266E12, 0.0], [1.746012E12, 0.0], [1.7460123E12, 0.0], [1.7460126E12, 0.0], [1.74601194E12, 0.0], [1.74601224E12, 0.0], [1.74601254E12, 0.0], [1.74601218E12, 0.0], [1.74601248E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74601212E12, 2099.3795454545457], [1.74601242E12, 2122.73448275862], [1.74601206E12, 2103.3617747440244], [1.74601236E12, 2122.2514285714287], [1.74601266E12, 2083.848167539268], [1.746012E12, 2093.251126126127], [1.7460123E12, 2118.0890410958914], [1.7460126E12, 2135.2607184241037], [1.74601194E12, 2548.4039408866997], [1.74601224E12, 2113.011389521639], [1.74601254E12, 2144.6885813148792], [1.74601218E12, 2137.849710982664], [1.74601248E12, 2143.409248554914]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74601266E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74601194E12, "maxY": 84.23645320197045, "series": [{"data": [[1.74601212E12, 0.0], [1.74601242E12, 0.0], [1.74601206E12, 0.0], [1.74601236E12, 0.0], [1.74601266E12, 0.0], [1.746012E12, 0.0], [1.7460123E12, 0.0], [1.7460126E12, 0.0], [1.74601194E12, 0.0], [1.74601224E12, 0.0], [1.74601254E12, 0.0], [1.74601218E12, 0.0], [1.74601248E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74601212E12, 0.30340909090909074], [1.74601242E12, 0.2528735632183908], [1.74601206E12, 0.3174061433447099], [1.74601236E12, 0.26742857142857135], [1.74601266E12, 0.05235602094240833], [1.746012E12, 0.4234234234234232], [1.7460123E12, 0.5616438356164385], [1.7460126E12, 0.22016222479721903], [1.74601194E12, 84.23645320197045], [1.74601224E12, 0.26993166287015924], [1.74601254E12, 0.38985005767012676], [1.74601218E12, 0.28208092485549147], [1.74601248E12, 0.26936416184971107]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74601266E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 10.0, "minX": 1.74601194E12, "maxY": 5694.0, "series": [{"data": [[1.74601212E12, 3819.0], [1.74601242E12, 3445.0], [1.74601206E12, 3514.0], [1.74601236E12, 3572.0], [1.74601266E12, 3252.0], [1.746012E12, 3342.0], [1.7460123E12, 3443.0], [1.7460126E12, 3620.0], [1.74601194E12, 5694.0], [1.74601224E12, 3299.0], [1.74601254E12, 3500.0], [1.74601218E12, 3512.0], [1.74601248E12, 3552.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.74601212E12, 2461.8], [1.74601242E12, 2482.0], [1.74601206E12, 2446.7000000000003], [1.74601236E12, 2470.0], [1.74601266E12, 2556.4], [1.746012E12, 2444.6000000000004], [1.7460123E12, 2438.1000000000004], [1.7460126E12, 2498.2], [1.74601194E12, 2735.100000000001], [1.74601224E12, 2447.4], [1.74601254E12, 2480.7], [1.74601218E12, 2500.8], [1.74601248E12, 2491.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.74601212E12, 3045.39], [1.74601242E12, 3046.029999999999], [1.74601206E12, 3065.7999999999975], [1.74601236E12, 3195.5], [1.74601266E12, 3081.96], [1.746012E12, 3016.2799999999997], [1.7460123E12, 3032.3400000000006], [1.7460126E12, 3135.6000000000004], [1.74601194E12, 5341.81], [1.74601224E12, 2968.7200000000007], [1.74601254E12, 3134.720000000001], [1.74601218E12, 3158.7200000000003], [1.74601248E12, 3116.0300000000007]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.74601212E12, 2713.95], [1.74601242E12, 2703.699999999999], [1.74601206E12, 2640.0], [1.74601236E12, 2731.5], [1.74601266E12, 2735.0], [1.746012E12, 2633.3], [1.7460123E12, 2635.0], [1.7460126E12, 2747.2], [1.74601194E12, 4974.349999999999], [1.74601224E12, 2644.7999999999993], [1.74601254E12, 2700.4499999999994], [1.74601218E12, 2728.7999999999993], [1.74601248E12, 2721.0499999999997]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.74601212E12, 30.0], [1.74601242E12, 35.0], [1.74601206E12, 39.0], [1.74601236E12, 19.0], [1.74601266E12, 46.0], [1.746012E12, 35.0], [1.7460123E12, 28.0], [1.7460126E12, 37.0], [1.74601194E12, 10.0], [1.74601224E12, 38.0], [1.74601254E12, 43.0], [1.74601218E12, 38.0], [1.74601248E12, 34.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.74601212E12, 552.0], [1.74601242E12, 588.0], [1.74601206E12, 110.0], [1.74601236E12, 1057.0], [1.74601266E12, 1381.0], [1.746012E12, 1037.0], [1.7460123E12, 590.0], [1.7460126E12, 105.0], [1.74601194E12, 101.0], [1.74601224E12, 1032.0], [1.74601254E12, 1036.0], [1.74601218E12, 125.0], [1.74601248E12, 119.5]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74601266E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 80.0, "minX": 4.0, "maxY": 4587.5, "series": [{"data": [[33.0, 106.0], [32.0, 114.0], [34.0, 1314.5], [35.0, 568.5], [37.0, 1210.0], [36.0, 111.0], [39.0, 108.0], [38.0, 735.0], [41.0, 116.0], [40.0, 1442.5], [42.0, 655.5], [43.0, 103.0], [44.0, 815.0], [46.0, 755.0], [47.0, 1464.0], [60.0, 141.5], [4.0, 4587.5], [8.0, 1774.0], [13.0, 84.0], [14.0, 627.5], [15.0, 83.0], [16.0, 88.5], [17.0, 80.0], [18.0, 632.0], [19.0, 120.0], [20.0, 574.0], [21.0, 738.0], [22.0, 99.5], [23.0, 96.0], [24.0, 552.0], [25.0, 127.0], [26.0, 108.0], [27.0, 1214.0], [28.0, 972.5], [29.0, 1245.0], [30.0, 105.0], [31.0, 1213.0]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 60.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 4.0, "maxY": 4587.5, "series": [{"data": [[33.0, 0.0], [32.0, 0.0], [34.0, 1314.5], [35.0, 518.5], [37.0, 1210.0], [36.0, 0.0], [39.0, 0.0], [38.0, 679.0], [41.0, 0.0], [40.0, 1442.5], [42.0, 610.0], [43.0, 0.0], [44.0, 767.5], [46.0, 706.0], [47.0, 1464.0], [60.0, 0.0], [4.0, 4587.5], [8.0, 1774.0], [13.0, 0.0], [14.0, 583.5], [15.0, 0.0], [16.0, 0.0], [17.0, 0.0], [18.0, 583.0], [19.0, 0.0], [20.0, 522.0], [21.0, 678.0], [22.0, 0.0], [23.0, 0.0], [24.0, 492.0], [25.0, 0.0], [26.0, 0.0], [27.0, 1214.0], [28.0, 972.5], [29.0, 1245.0], [30.0, 0.0], [31.0, 1212.5]], "isOverall": false, "label": "Successes", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 60.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 5.316666666666666, "minX": 1.74601194E12, "maxY": 29.55, "series": [{"data": [[1.74601212E12, 29.333333333333332], [1.74601242E12, 29.0], [1.74601206E12, 29.333333333333332], [1.74601236E12, 29.15], [1.74601266E12, 5.316666666666666], [1.746012E12, 29.55], [1.7460123E12, 29.2], [1.7460126E12, 28.783333333333335], [1.74601194E12, 7.833333333333333], [1.74601224E12, 29.25], [1.74601254E12, 28.866666666666667], [1.74601218E12, 28.85], [1.74601248E12, 28.866666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74601266E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 2.6666666666666665, "minX": 1.74601194E12, "maxY": 14.8, "series": [{"data": [[1.74601212E12, 14.666666666666666], [1.74601242E12, 14.5], [1.74601206E12, 14.683333333333334], [1.74601236E12, 14.566666666666666], [1.74601266E12, 2.6666666666666665], [1.746012E12, 14.75], [1.7460123E12, 14.6], [1.7460126E12, 14.4], [1.74601194E12, 3.9166666666666665], [1.74601224E12, 14.616666666666667], [1.74601254E12, 14.416666666666666], [1.74601218E12, 14.433333333333334], [1.74601248E12, 14.45]], "isOverall": false, "label": "0", "isController": false}, {"data": [[1.74601212E12, 14.666666666666666], [1.74601242E12, 14.5], [1.74601206E12, 14.65], [1.74601236E12, 14.583333333333334], [1.74601266E12, 3.183333333333333], [1.746012E12, 14.8], [1.7460123E12, 14.6], [1.7460126E12, 14.383333333333333], [1.74601194E12, 3.3833333333333333], [1.74601224E12, 14.633333333333333], [1.74601254E12, 14.45], [1.74601218E12, 14.416666666666666], [1.74601248E12, 14.416666666666666]], "isOverall": false, "label": "201", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.74601266E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 2.6666666666666665, "minX": 1.74601194E12, "maxY": 14.8, "series": [{"data": [[1.74601212E12, 14.666666666666666], [1.74601242E12, 14.5], [1.74601206E12, 14.65], [1.74601236E12, 14.583333333333334], [1.74601266E12, 3.183333333333333], [1.746012E12, 14.8], [1.7460123E12, 14.6], [1.7460126E12, 14.383333333333333], [1.74601194E12, 3.3833333333333333], [1.74601224E12, 14.633333333333333], [1.74601254E12, 14.45], [1.74601218E12, 14.416666666666666], [1.74601248E12, 14.416666666666666]], "isOverall": false, "label": "HTTP Request - enroll-success", "isController": false}, {"data": [[1.74601212E12, 14.666666666666666], [1.74601242E12, 14.5], [1.74601206E12, 14.683333333333334], [1.74601236E12, 14.566666666666666], [1.74601266E12, 2.6666666666666665], [1.746012E12, 14.75], [1.7460123E12, 14.6], [1.7460126E12, 14.4], [1.74601194E12, 3.9166666666666665], [1.74601224E12, 14.616666666666667], [1.74601254E12, 14.416666666666666], [1.74601218E12, 14.433333333333334], [1.74601248E12, 14.45]], "isOverall": false, "label": "Create CSR-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74601266E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 5.85, "minX": 1.74601194E12, "maxY": 29.55, "series": [{"data": [[1.74601212E12, 29.333333333333332], [1.74601242E12, 29.0], [1.74601206E12, 29.333333333333332], [1.74601236E12, 29.15], [1.74601266E12, 5.85], [1.746012E12, 29.55], [1.7460123E12, 29.2], [1.7460126E12, 28.783333333333335], [1.74601194E12, 7.3], [1.74601224E12, 29.25], [1.74601254E12, 28.866666666666667], [1.74601218E12, 28.85], [1.74601248E12, 28.866666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.74601266E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

