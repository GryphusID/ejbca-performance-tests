/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 28.0, "minX": 0.0, "maxY": 14246.0, "series": [{"data": [[0.0, 130.0], [0.1, 202.0], [0.2, 261.0], [0.3, 301.0], [0.4, 336.0], [0.5, 376.0], [0.6, 393.0], [0.7, 422.0], [0.8, 439.0], [0.9, 449.0], [1.0, 462.0], [1.1, 468.0], [1.2, 481.0], [1.3, 492.0], [1.4, 498.0], [1.5, 509.0], [1.6, 518.0], [1.7, 525.0], [1.8, 529.0], [1.9, 535.0], [2.0, 539.0], [2.1, 545.0], [2.2, 551.0], [2.3, 558.0], [2.4, 564.0], [2.5, 571.0], [2.6, 577.0], [2.7, 581.0], [2.8, 588.0], [2.9, 598.0], [3.0, 604.0], [3.1, 610.0], [3.2, 615.0], [3.3, 619.0], [3.4, 624.0], [3.5, 630.0], [3.6, 636.0], [3.7, 641.0], [3.8, 645.0], [3.9, 650.0], [4.0, 653.0], [4.1, 660.0], [4.2, 663.0], [4.3, 667.0], [4.4, 672.0], [4.5, 677.0], [4.6, 681.0], [4.7, 685.0], [4.8, 691.0], [4.9, 695.0], [5.0, 701.0], [5.1, 704.0], [5.2, 707.0], [5.3, 711.0], [5.4, 717.0], [5.5, 721.0], [5.6, 725.0], [5.7, 730.0], [5.8, 734.0], [5.9, 737.0], [6.0, 743.0], [6.1, 747.0], [6.2, 750.0], [6.3, 755.0], [6.4, 757.0], [6.5, 760.0], [6.6, 762.0], [6.7, 767.0], [6.8, 772.0], [6.9, 774.0], [7.0, 779.0], [7.1, 783.0], [7.2, 786.0], [7.3, 789.0], [7.4, 793.0], [7.5, 798.0], [7.6, 802.0], [7.7, 804.0], [7.8, 806.0], [7.9, 809.0], [8.0, 812.0], [8.1, 815.0], [8.2, 821.0], [8.3, 824.0], [8.4, 826.0], [8.5, 830.0], [8.6, 833.0], [8.7, 836.0], [8.8, 839.0], [8.9, 845.0], [9.0, 847.0], [9.1, 850.0], [9.2, 853.0], [9.3, 856.0], [9.4, 858.0], [9.5, 862.0], [9.6, 866.0], [9.7, 870.0], [9.8, 873.0], [9.9, 876.0], [10.0, 878.0], [10.1, 881.0], [10.2, 885.0], [10.3, 889.0], [10.4, 892.0], [10.5, 895.0], [10.6, 897.0], [10.7, 900.0], [10.8, 904.0], [10.9, 908.0], [11.0, 911.0], [11.1, 912.0], [11.2, 915.0], [11.3, 917.0], [11.4, 920.0], [11.5, 924.0], [11.6, 928.0], [11.7, 931.0], [11.8, 934.0], [11.9, 937.0], [12.0, 939.0], [12.1, 942.0], [12.2, 945.0], [12.3, 949.0], [12.4, 951.0], [12.5, 954.0], [12.6, 958.0], [12.7, 960.0], [12.8, 963.0], [12.9, 965.0], [13.0, 968.0], [13.1, 970.0], [13.2, 973.0], [13.3, 976.0], [13.4, 979.0], [13.5, 982.0], [13.6, 984.0], [13.7, 987.0], [13.8, 989.0], [13.9, 991.0], [14.0, 995.0], [14.1, 997.0], [14.2, 1000.0], [14.3, 1003.0], [14.4, 1007.0], [14.5, 1009.0], [14.6, 1012.0], [14.7, 1015.0], [14.8, 1017.0], [14.9, 1020.0], [15.0, 1023.0], [15.1, 1026.0], [15.2, 1028.0], [15.3, 1031.0], [15.4, 1034.0], [15.5, 1038.0], [15.6, 1040.0], [15.7, 1042.0], [15.8, 1046.0], [15.9, 1049.0], [16.0, 1050.0], [16.1, 1053.0], [16.2, 1055.0], [16.3, 1058.0], [16.4, 1062.0], [16.5, 1064.0], [16.6, 1066.0], [16.7, 1070.0], [16.8, 1073.0], [16.9, 1074.0], [17.0, 1076.0], [17.1, 1078.0], [17.2, 1081.0], [17.3, 1084.0], [17.4, 1087.0], [17.5, 1089.0], [17.6, 1092.0], [17.7, 1096.0], [17.8, 1099.0], [17.9, 1103.0], [18.0, 1104.0], [18.1, 1107.0], [18.2, 1110.0], [18.3, 1112.0], [18.4, 1115.0], [18.5, 1118.0], [18.6, 1120.0], [18.7, 1123.0], [18.8, 1126.0], [18.9, 1128.0], [19.0, 1131.0], [19.1, 1133.0], [19.2, 1136.0], [19.3, 1138.0], [19.4, 1140.0], [19.5, 1142.0], [19.6, 1144.0], [19.7, 1145.0], [19.8, 1148.0], [19.9, 1150.0], [20.0, 1152.0], [20.1, 1155.0], [20.2, 1156.0], [20.3, 1160.0], [20.4, 1163.0], [20.5, 1166.0], [20.6, 1168.0], [20.7, 1170.0], [20.8, 1173.0], [20.9, 1176.0], [21.0, 1179.0], [21.1, 1181.0], [21.2, 1184.0], [21.3, 1187.0], [21.4, 1190.0], [21.5, 1192.0], [21.6, 1194.0], [21.7, 1198.0], [21.8, 1200.0], [21.9, 1203.0], [22.0, 1206.0], [22.1, 1207.0], [22.2, 1211.0], [22.3, 1213.0], [22.4, 1215.0], [22.5, 1218.0], [22.6, 1220.0], [22.7, 1224.0], [22.8, 1226.0], [22.9, 1228.0], [23.0, 1232.0], [23.1, 1236.0], [23.2, 1238.0], [23.3, 1240.0], [23.4, 1242.0], [23.5, 1245.0], [23.6, 1248.0], [23.7, 1250.0], [23.8, 1253.0], [23.9, 1256.0], [24.0, 1259.0], [24.1, 1262.0], [24.2, 1263.0], [24.3, 1265.0], [24.4, 1269.0], [24.5, 1272.0], [24.6, 1273.0], [24.7, 1275.0], [24.8, 1278.0], [24.9, 1280.0], [25.0, 1282.0], [25.1, 1284.0], [25.2, 1286.0], [25.3, 1288.0], [25.4, 1291.0], [25.5, 1294.0], [25.6, 1296.0], [25.7, 1299.0], [25.8, 1301.0], [25.9, 1303.0], [26.0, 1305.0], [26.1, 1308.0], [26.2, 1310.0], [26.3, 1313.0], [26.4, 1316.0], [26.5, 1318.0], [26.6, 1319.0], [26.7, 1323.0], [26.8, 1326.0], [26.9, 1327.0], [27.0, 1330.0], [27.1, 1333.0], [27.2, 1335.0], [27.3, 1337.0], [27.4, 1340.0], [27.5, 1342.0], [27.6, 1344.0], [27.7, 1347.0], [27.8, 1351.0], [27.9, 1353.0], [28.0, 1355.0], [28.1, 1358.0], [28.2, 1359.0], [28.3, 1362.0], [28.4, 1364.0], [28.5, 1366.0], [28.6, 1369.0], [28.7, 1372.0], [28.8, 1375.0], [28.9, 1377.0], [29.0, 1380.0], [29.1, 1383.0], [29.2, 1386.0], [29.3, 1390.0], [29.4, 1391.0], [29.5, 1394.0], [29.6, 1397.0], [29.7, 1400.0], [29.8, 1403.0], [29.9, 1406.0], [30.0, 1408.0], [30.1, 1409.0], [30.2, 1411.0], [30.3, 1414.0], [30.4, 1415.0], [30.5, 1418.0], [30.6, 1422.0], [30.7, 1425.0], [30.8, 1429.0], [30.9, 1431.0], [31.0, 1435.0], [31.1, 1438.0], [31.2, 1441.0], [31.3, 1444.0], [31.4, 1449.0], [31.5, 1451.0], [31.6, 1454.0], [31.7, 1456.0], [31.8, 1460.0], [31.9, 1462.0], [32.0, 1465.0], [32.1, 1467.0], [32.2, 1471.0], [32.3, 1474.0], [32.4, 1477.0], [32.5, 1480.0], [32.6, 1482.0], [32.7, 1486.0], [32.8, 1487.0], [32.9, 1490.0], [33.0, 1493.0], [33.1, 1496.0], [33.2, 1498.0], [33.3, 1501.0], [33.4, 1504.0], [33.5, 1507.0], [33.6, 1509.0], [33.7, 1511.0], [33.8, 1514.0], [33.9, 1516.0], [34.0, 1519.0], [34.1, 1521.0], [34.2, 1525.0], [34.3, 1527.0], [34.4, 1530.0], [34.5, 1533.0], [34.6, 1537.0], [34.7, 1540.0], [34.8, 1542.0], [34.9, 1545.0], [35.0, 1547.0], [35.1, 1550.0], [35.2, 1553.0], [35.3, 1556.0], [35.4, 1559.0], [35.5, 1563.0], [35.6, 1566.0], [35.7, 1568.0], [35.8, 1571.0], [35.9, 1573.0], [36.0, 1575.0], [36.1, 1578.0], [36.2, 1581.0], [36.3, 1583.0], [36.4, 1586.0], [36.5, 1589.0], [36.6, 1591.0], [36.7, 1594.0], [36.8, 1596.0], [36.9, 1599.0], [37.0, 1601.0], [37.1, 1603.0], [37.2, 1605.0], [37.3, 1609.0], [37.4, 1611.0], [37.5, 1614.0], [37.6, 1617.0], [37.7, 1619.0], [37.8, 1622.0], [37.9, 1624.0], [38.0, 1627.0], [38.1, 1629.0], [38.2, 1631.0], [38.3, 1634.0], [38.4, 1637.0], [38.5, 1639.0], [38.6, 1641.0], [38.7, 1643.0], [38.8, 1645.0], [38.9, 1648.0], [39.0, 1651.0], [39.1, 1653.0], [39.2, 1657.0], [39.3, 1659.0], [39.4, 1662.0], [39.5, 1666.0], [39.6, 1669.0], [39.7, 1673.0], [39.8, 1675.0], [39.9, 1679.0], [40.0, 1682.0], [40.1, 1684.0], [40.2, 1686.0], [40.3, 1690.0], [40.4, 1692.0], [40.5, 1695.0], [40.6, 1698.0], [40.7, 1700.0], [40.8, 1702.0], [40.9, 1706.0], [41.0, 1708.0], [41.1, 1710.0], [41.2, 1712.0], [41.3, 1716.0], [41.4, 1719.0], [41.5, 1722.0], [41.6, 1725.0], [41.7, 1727.0], [41.8, 1730.0], [41.9, 1732.0], [42.0, 1735.0], [42.1, 1738.0], [42.2, 1740.0], [42.3, 1743.0], [42.4, 1744.0], [42.5, 1748.0], [42.6, 1751.0], [42.7, 1753.0], [42.8, 1757.0], [42.9, 1760.0], [43.0, 1762.0], [43.1, 1764.0], [43.2, 1767.0], [43.3, 1769.0], [43.4, 1772.0], [43.5, 1776.0], [43.6, 1779.0], [43.7, 1782.0], [43.8, 1785.0], [43.9, 1788.0], [44.0, 1790.0], [44.1, 1794.0], [44.2, 1796.0], [44.3, 1799.0], [44.4, 1802.0], [44.5, 1804.0], [44.6, 1808.0], [44.7, 1811.0], [44.8, 1814.0], [44.9, 1816.0], [45.0, 1819.0], [45.1, 1822.0], [45.2, 1824.0], [45.3, 1827.0], [45.4, 1830.0], [45.5, 1832.0], [45.6, 1835.0], [45.7, 1839.0], [45.8, 1842.0], [45.9, 1844.0], [46.0, 1846.0], [46.1, 1849.0], [46.2, 1853.0], [46.3, 1856.0], [46.4, 1859.0], [46.5, 1862.0], [46.6, 1864.0], [46.7, 1867.0], [46.8, 1870.0], [46.9, 1873.0], [47.0, 1876.0], [47.1, 1879.0], [47.2, 1882.0], [47.3, 1885.0], [47.4, 1889.0], [47.5, 1892.0], [47.6, 1895.0], [47.7, 1898.0], [47.8, 1902.0], [47.9, 1905.0], [48.0, 1909.0], [48.1, 1912.0], [48.2, 1914.0], [48.3, 1917.0], [48.4, 1919.0], [48.5, 1921.0], [48.6, 1925.0], [48.7, 1927.0], [48.8, 1931.0], [48.9, 1934.0], [49.0, 1937.0], [49.1, 1942.0], [49.2, 1945.0], [49.3, 1947.0], [49.4, 1951.0], [49.5, 1955.0], [49.6, 1957.0], [49.7, 1961.0], [49.8, 1964.0], [49.9, 1967.0], [50.0, 1969.0], [50.1, 1974.0], [50.2, 1978.0], [50.3, 1981.0], [50.4, 1985.0], [50.5, 1987.0], [50.6, 1990.0], [50.7, 1994.0], [50.8, 1997.0], [50.9, 2001.0], [51.0, 2005.0], [51.1, 2009.0], [51.2, 2011.0], [51.3, 2014.0], [51.4, 2017.0], [51.5, 2020.0], [51.6, 2023.0], [51.7, 2028.0], [51.8, 2032.0], [51.9, 2038.0], [52.0, 2042.0], [52.1, 2046.0], [52.2, 2051.0], [52.3, 2055.0], [52.4, 2058.0], [52.5, 2061.0], [52.6, 2063.0], [52.7, 2067.0], [52.8, 2071.0], [52.9, 2073.0], [53.0, 2077.0], [53.1, 2081.0], [53.2, 2084.0], [53.3, 2088.0], [53.4, 2093.0], [53.5, 2095.0], [53.6, 2098.0], [53.7, 2100.0], [53.8, 2103.0], [53.9, 2107.0], [54.0, 2111.0], [54.1, 2114.0], [54.2, 2118.0], [54.3, 2121.0], [54.4, 2123.0], [54.5, 2126.0], [54.6, 2131.0], [54.7, 2134.0], [54.8, 2137.0], [54.9, 2140.0], [55.0, 2144.0], [55.1, 2147.0], [55.2, 2150.0], [55.3, 2153.0], [55.4, 2155.0], [55.5, 2159.0], [55.6, 2162.0], [55.7, 2166.0], [55.8, 2170.0], [55.9, 2172.0], [56.0, 2175.0], [56.1, 2179.0], [56.2, 2182.0], [56.3, 2185.0], [56.4, 2188.0], [56.5, 2192.0], [56.6, 2196.0], [56.7, 2198.0], [56.8, 2202.0], [56.9, 2209.0], [57.0, 2213.0], [57.1, 2217.0], [57.2, 2220.0], [57.3, 2222.0], [57.4, 2228.0], [57.5, 2231.0], [57.6, 2236.0], [57.7, 2240.0], [57.8, 2244.0], [57.9, 2247.0], [58.0, 2251.0], [58.1, 2255.0], [58.2, 2260.0], [58.3, 2262.0], [58.4, 2267.0], [58.5, 2270.0], [58.6, 2272.0], [58.7, 2275.0], [58.8, 2278.0], [58.9, 2281.0], [59.0, 2283.0], [59.1, 2287.0], [59.2, 2292.0], [59.3, 2294.0], [59.4, 2297.0], [59.5, 2300.0], [59.6, 2303.0], [59.7, 2306.0], [59.8, 2309.0], [59.9, 2313.0], [60.0, 2317.0], [60.1, 2319.0], [60.2, 2323.0], [60.3, 2325.0], [60.4, 2328.0], [60.5, 2333.0], [60.6, 2335.0], [60.7, 2340.0], [60.8, 2345.0], [60.9, 2349.0], [61.0, 2353.0], [61.1, 2356.0], [61.2, 2361.0], [61.3, 2364.0], [61.4, 2369.0], [61.5, 2375.0], [61.6, 2381.0], [61.7, 2385.0], [61.8, 2390.0], [61.9, 2395.0], [62.0, 2399.0], [62.1, 2403.0], [62.2, 2406.0], [62.3, 2410.0], [62.4, 2414.0], [62.5, 2418.0], [62.6, 2421.0], [62.7, 2424.0], [62.8, 2428.0], [62.9, 2432.0], [63.0, 2437.0], [63.1, 2441.0], [63.2, 2444.0], [63.3, 2448.0], [63.4, 2452.0], [63.5, 2457.0], [63.6, 2461.0], [63.7, 2464.0], [63.8, 2468.0], [63.9, 2472.0], [64.0, 2477.0], [64.1, 2479.0], [64.2, 2483.0], [64.3, 2485.0], [64.4, 2491.0], [64.5, 2496.0], [64.6, 2502.0], [64.7, 2506.0], [64.8, 2509.0], [64.9, 2514.0], [65.0, 2517.0], [65.1, 2522.0], [65.2, 2527.0], [65.3, 2533.0], [65.4, 2541.0], [65.5, 2545.0], [65.6, 2550.0], [65.7, 2554.0], [65.8, 2557.0], [65.9, 2563.0], [66.0, 2567.0], [66.1, 2573.0], [66.2, 2575.0], [66.3, 2580.0], [66.4, 2587.0], [66.5, 2595.0], [66.6, 2599.0], [66.7, 2602.0], [66.8, 2605.0], [66.9, 2609.0], [67.0, 2612.0], [67.1, 2619.0], [67.2, 2623.0], [67.3, 2629.0], [67.4, 2635.0], [67.5, 2639.0], [67.6, 2643.0], [67.7, 2649.0], [67.8, 2654.0], [67.9, 2657.0], [68.0, 2662.0], [68.1, 2667.0], [68.2, 2671.0], [68.3, 2677.0], [68.4, 2680.0], [68.5, 2685.0], [68.6, 2688.0], [68.7, 2694.0], [68.8, 2697.0], [68.9, 2701.0], [69.0, 2704.0], [69.1, 2711.0], [69.2, 2715.0], [69.3, 2721.0], [69.4, 2724.0], [69.5, 2728.0], [69.6, 2733.0], [69.7, 2737.0], [69.8, 2743.0], [69.9, 2746.0], [70.0, 2751.0], [70.1, 2755.0], [70.2, 2762.0], [70.3, 2766.0], [70.4, 2771.0], [70.5, 2775.0], [70.6, 2780.0], [70.7, 2783.0], [70.8, 2787.0], [70.9, 2794.0], [71.0, 2799.0], [71.1, 2804.0], [71.2, 2808.0], [71.3, 2812.0], [71.4, 2818.0], [71.5, 2822.0], [71.6, 2827.0], [71.7, 2833.0], [71.8, 2839.0], [71.9, 2842.0], [72.0, 2847.0], [72.1, 2852.0], [72.2, 2860.0], [72.3, 2864.0], [72.4, 2867.0], [72.5, 2871.0], [72.6, 2876.0], [72.7, 2881.0], [72.8, 2887.0], [72.9, 2893.0], [73.0, 2898.0], [73.1, 2902.0], [73.2, 2906.0], [73.3, 2913.0], [73.4, 2916.0], [73.5, 2920.0], [73.6, 2924.0], [73.7, 2927.0], [73.8, 2932.0], [73.9, 2937.0], [74.0, 2941.0], [74.1, 2946.0], [74.2, 2955.0], [74.3, 2958.0], [74.4, 2965.0], [74.5, 2967.0], [74.6, 2972.0], [74.7, 2976.0], [74.8, 2983.0], [74.9, 2987.0], [75.0, 2992.0], [75.1, 2999.0], [75.2, 3004.0], [75.3, 3010.0], [75.4, 3015.0], [75.5, 3020.0], [75.6, 3026.0], [75.7, 3032.0], [75.8, 3039.0], [75.9, 3044.0], [76.0, 3052.0], [76.1, 3058.0], [76.2, 3065.0], [76.3, 3072.0], [76.4, 3077.0], [76.5, 3083.0], [76.6, 3087.0], [76.7, 3093.0], [76.8, 3100.0], [76.9, 3103.0], [77.0, 3107.0], [77.1, 3116.0], [77.2, 3122.0], [77.3, 3131.0], [77.4, 3137.0], [77.5, 3142.0], [77.6, 3146.0], [77.7, 3151.0], [77.8, 3156.0], [77.9, 3161.0], [78.0, 3166.0], [78.1, 3174.0], [78.2, 3179.0], [78.3, 3185.0], [78.4, 3191.0], [78.5, 3195.0], [78.6, 3202.0], [78.7, 3210.0], [78.8, 3218.0], [78.9, 3223.0], [79.0, 3227.0], [79.1, 3234.0], [79.2, 3238.0], [79.3, 3245.0], [79.4, 3250.0], [79.5, 3255.0], [79.6, 3262.0], [79.7, 3267.0], [79.8, 3275.0], [79.9, 3283.0], [80.0, 3287.0], [80.1, 3295.0], [80.2, 3302.0], [80.3, 3307.0], [80.4, 3314.0], [80.5, 3319.0], [80.6, 3324.0], [80.7, 3330.0], [80.8, 3336.0], [80.9, 3340.0], [81.0, 3348.0], [81.1, 3355.0], [81.2, 3366.0], [81.3, 3372.0], [81.4, 3381.0], [81.5, 3387.0], [81.6, 3395.0], [81.7, 3404.0], [81.8, 3412.0], [81.9, 3422.0], [82.0, 3433.0], [82.1, 3438.0], [82.2, 3446.0], [82.3, 3455.0], [82.4, 3463.0], [82.5, 3472.0], [82.6, 3481.0], [82.7, 3488.0], [82.8, 3494.0], [82.9, 3498.0], [83.0, 3508.0], [83.1, 3517.0], [83.2, 3525.0], [83.3, 3531.0], [83.4, 3537.0], [83.5, 3544.0], [83.6, 3552.0], [83.7, 3558.0], [83.8, 3566.0], [83.9, 3576.0], [84.0, 3584.0], [84.1, 3593.0], [84.2, 3602.0], [84.3, 3612.0], [84.4, 3623.0], [84.5, 3629.0], [84.6, 3635.0], [84.7, 3644.0], [84.8, 3651.0], [84.9, 3658.0], [85.0, 3665.0], [85.1, 3672.0], [85.2, 3681.0], [85.3, 3689.0], [85.4, 3698.0], [85.5, 3708.0], [85.6, 3716.0], [85.7, 3729.0], [85.8, 3738.0], [85.9, 3744.0], [86.0, 3760.0], [86.1, 3769.0], [86.2, 3780.0], [86.3, 3789.0], [86.4, 3803.0], [86.5, 3812.0], [86.6, 3822.0], [86.7, 3837.0], [86.8, 3846.0], [86.9, 3860.0], [87.0, 3868.0], [87.1, 3880.0], [87.2, 3893.0], [87.3, 3906.0], [87.4, 3919.0], [87.5, 3929.0], [87.6, 3938.0], [87.7, 3948.0], [87.8, 3964.0], [87.9, 3971.0], [88.0, 3975.0], [88.1, 3986.0], [88.2, 3994.0], [88.3, 4006.0], [88.4, 4016.0], [88.5, 4024.0], [88.6, 4035.0], [88.7, 4044.0], [88.8, 4057.0], [88.9, 4071.0], [89.0, 4086.0], [89.1, 4100.0], [89.2, 4111.0], [89.3, 4131.0], [89.4, 4143.0], [89.5, 4149.0], [89.6, 4161.0], [89.7, 4172.0], [89.8, 4187.0], [89.9, 4204.0], [90.0, 4218.0], [90.1, 4229.0], [90.2, 4237.0], [90.3, 4247.0], [90.4, 4262.0], [90.5, 4276.0], [90.6, 4288.0], [90.7, 4302.0], [90.8, 4318.0], [90.9, 4331.0], [91.0, 4343.0], [91.1, 4361.0], [91.2, 4375.0], [91.3, 4394.0], [91.4, 4413.0], [91.5, 4427.0], [91.6, 4445.0], [91.7, 4462.0], [91.8, 4473.0], [91.9, 4494.0], [92.0, 4522.0], [92.1, 4536.0], [92.2, 4555.0], [92.3, 4571.0], [92.4, 4581.0], [92.5, 4609.0], [92.6, 4625.0], [92.7, 4639.0], [92.8, 4657.0], [92.9, 4681.0], [93.0, 4690.0], [93.1, 4708.0], [93.2, 4723.0], [93.3, 4739.0], [93.4, 4753.0], [93.5, 4775.0], [93.6, 4803.0], [93.7, 4820.0], [93.8, 4841.0], [93.9, 4864.0], [94.0, 4882.0], [94.1, 4905.0], [94.2, 4929.0], [94.3, 4966.0], [94.4, 4986.0], [94.5, 5009.0], [94.6, 5025.0], [94.7, 5049.0], [94.8, 5076.0], [94.9, 5098.0], [95.0, 5120.0], [95.1, 5164.0], [95.2, 5215.0], [95.3, 5252.0], [95.4, 5276.0], [95.5, 5301.0], [95.6, 5330.0], [95.7, 5366.0], [95.8, 5382.0], [95.9, 5423.0], [96.0, 5446.0], [96.1, 5503.0], [96.2, 5525.0], [96.3, 5558.0], [96.4, 5583.0], [96.5, 5622.0], [96.6, 5657.0], [96.7, 5693.0], [96.8, 5725.0], [96.9, 5787.0], [97.0, 5827.0], [97.1, 5876.0], [97.2, 5926.0], [97.3, 5960.0], [97.4, 6013.0], [97.5, 6075.0], [97.6, 6124.0], [97.7, 6183.0], [97.8, 6235.0], [97.9, 6298.0], [98.0, 6373.0], [98.1, 6445.0], [98.2, 6494.0], [98.3, 6541.0], [98.4, 6630.0], [98.5, 6680.0], [98.6, 6781.0], [98.7, 6866.0], [98.8, 6973.0], [98.9, 7057.0], [99.0, 7164.0], [99.1, 7275.0], [99.2, 7467.0], [99.3, 7674.0], [99.4, 7845.0], [99.5, 8064.0], [99.6, 8330.0], [99.7, 8750.0], [99.8, 9236.0], [99.9, 10041.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 28.0], [0.1, 30.0], [0.2, 32.0], [0.3, 35.0], [0.4, 36.0], [0.5, 36.0], [0.6, 36.0], [0.7, 36.0], [0.8, 37.0], [0.9, 37.0], [1.0, 37.0], [1.1, 37.0], [1.2, 37.0], [1.3, 37.0], [1.4, 37.0], [1.5, 37.0], [1.6, 37.0], [1.7, 37.0], [1.8, 38.0], [1.9, 38.0], [2.0, 38.0], [2.1, 38.0], [2.2, 38.0], [2.3, 38.0], [2.4, 38.0], [2.5, 38.0], [2.6, 38.0], [2.7, 38.0], [2.8, 38.0], [2.9, 38.0], [3.0, 38.0], [3.1, 38.0], [3.2, 38.0], [3.3, 38.0], [3.4, 38.0], [3.5, 38.0], [3.6, 38.0], [3.7, 38.0], [3.8, 38.0], [3.9, 38.0], [4.0, 38.0], [4.1, 38.0], [4.2, 38.0], [4.3, 39.0], [4.4, 39.0], [4.5, 39.0], [4.6, 39.0], [4.7, 39.0], [4.8, 39.0], [4.9, 39.0], [5.0, 39.0], [5.1, 39.0], [5.2, 39.0], [5.3, 39.0], [5.4, 39.0], [5.5, 39.0], [5.6, 39.0], [5.7, 39.0], [5.8, 39.0], [5.9, 39.0], [6.0, 39.0], [6.1, 39.0], [6.2, 39.0], [6.3, 39.0], [6.4, 39.0], [6.5, 39.0], [6.6, 39.0], [6.7, 39.0], [6.8, 39.0], [6.9, 39.0], [7.0, 39.0], [7.1, 39.0], [7.2, 39.0], [7.3, 39.0], [7.4, 39.0], [7.5, 40.0], [7.6, 40.0], [7.7, 40.0], [7.8, 40.0], [7.9, 40.0], [8.0, 40.0], [8.1, 40.0], [8.2, 40.0], [8.3, 40.0], [8.4, 40.0], [8.5, 40.0], [8.6, 40.0], [8.7, 40.0], [8.8, 40.0], [8.9, 40.0], [9.0, 40.0], [9.1, 40.0], [9.2, 40.0], [9.3, 40.0], [9.4, 40.0], [9.5, 40.0], [9.6, 40.0], [9.7, 40.0], [9.8, 40.0], [9.9, 40.0], [10.0, 40.0], [10.1, 40.0], [10.2, 40.0], [10.3, 40.0], [10.4, 40.0], [10.5, 40.0], [10.6, 40.0], [10.7, 40.0], [10.8, 40.0], [10.9, 40.0], [11.0, 40.0], [11.1, 40.0], [11.2, 40.0], [11.3, 40.0], [11.4, 40.0], [11.5, 40.0], [11.6, 40.0], [11.7, 40.0], [11.8, 40.0], [11.9, 41.0], [12.0, 41.0], [12.1, 41.0], [12.2, 41.0], [12.3, 41.0], [12.4, 41.0], [12.5, 41.0], [12.6, 41.0], [12.7, 41.0], [12.8, 41.0], [12.9, 41.0], [13.0, 41.0], [13.1, 41.0], [13.2, 41.0], [13.3, 41.0], [13.4, 41.0], [13.5, 41.0], [13.6, 41.0], [13.7, 41.0], [13.8, 41.0], [13.9, 41.0], [14.0, 41.0], [14.1, 41.0], [14.2, 41.0], [14.3, 41.0], [14.4, 41.0], [14.5, 41.0], [14.6, 41.0], [14.7, 41.0], [14.8, 41.0], [14.9, 41.0], [15.0, 41.0], [15.1, 41.0], [15.2, 41.0], [15.3, 41.0], [15.4, 41.0], [15.5, 41.0], [15.6, 41.0], [15.7, 41.0], [15.8, 41.0], [15.9, 41.0], [16.0, 41.0], [16.1, 41.0], [16.2, 41.0], [16.3, 41.0], [16.4, 41.0], [16.5, 41.0], [16.6, 41.0], [16.7, 41.0], [16.8, 41.0], [16.9, 41.0], [17.0, 42.0], [17.1, 42.0], [17.2, 42.0], [17.3, 42.0], [17.4, 42.0], [17.5, 42.0], [17.6, 42.0], [17.7, 42.0], [17.8, 42.0], [17.9, 42.0], [18.0, 42.0], [18.1, 42.0], [18.2, 42.0], [18.3, 42.0], [18.4, 42.0], [18.5, 42.0], [18.6, 42.0], [18.7, 42.0], [18.8, 42.0], [18.9, 42.0], [19.0, 42.0], [19.1, 42.0], [19.2, 42.0], [19.3, 42.0], [19.4, 42.0], [19.5, 42.0], [19.6, 42.0], [19.7, 42.0], [19.8, 42.0], [19.9, 42.0], [20.0, 42.0], [20.1, 42.0], [20.2, 42.0], [20.3, 42.0], [20.4, 42.0], [20.5, 42.0], [20.6, 42.0], [20.7, 42.0], [20.8, 42.0], [20.9, 42.0], [21.0, 42.0], [21.1, 42.0], [21.2, 42.0], [21.3, 42.0], [21.4, 42.0], [21.5, 42.0], [21.6, 42.0], [21.7, 42.0], [21.8, 42.0], [21.9, 42.0], [22.0, 42.0], [22.1, 42.0], [22.2, 42.0], [22.3, 42.0], [22.4, 42.0], [22.5, 42.0], [22.6, 42.0], [22.7, 43.0], [22.8, 43.0], [22.9, 43.0], [23.0, 43.0], [23.1, 43.0], [23.2, 43.0], [23.3, 43.0], [23.4, 43.0], [23.5, 43.0], [23.6, 43.0], [23.7, 43.0], [23.8, 43.0], [23.9, 43.0], [24.0, 43.0], [24.1, 43.0], [24.2, 43.0], [24.3, 43.0], [24.4, 43.0], [24.5, 43.0], [24.6, 43.0], [24.7, 43.0], [24.8, 43.0], [24.9, 43.0], [25.0, 43.0], [25.1, 43.0], [25.2, 43.0], [25.3, 43.0], [25.4, 43.0], [25.5, 43.0], [25.6, 43.0], [25.7, 43.0], [25.8, 43.0], [25.9, 43.0], [26.0, 43.0], [26.1, 43.0], [26.2, 43.0], [26.3, 43.0], [26.4, 43.0], [26.5, 43.0], [26.6, 43.0], [26.7, 43.0], [26.8, 43.0], [26.9, 43.0], [27.0, 43.0], [27.1, 43.0], [27.2, 43.0], [27.3, 43.0], [27.4, 43.0], [27.5, 43.0], [27.6, 43.0], [27.7, 43.0], [27.8, 43.0], [27.9, 43.0], [28.0, 43.0], [28.1, 43.0], [28.2, 43.0], [28.3, 43.0], [28.4, 43.0], [28.5, 43.0], [28.6, 43.0], [28.7, 43.0], [28.8, 43.0], [28.9, 43.0], [29.0, 43.0], [29.1, 43.0], [29.2, 43.0], [29.3, 44.0], [29.4, 44.0], [29.5, 44.0], [29.6, 44.0], [29.7, 44.0], [29.8, 44.0], [29.9, 44.0], [30.0, 44.0], [30.1, 44.0], [30.2, 44.0], [30.3, 44.0], [30.4, 44.0], [30.5, 44.0], [30.6, 44.0], [30.7, 44.0], [30.8, 44.0], [30.9, 44.0], [31.0, 44.0], [31.1, 44.0], [31.2, 44.0], [31.3, 44.0], [31.4, 44.0], [31.5, 44.0], [31.6, 44.0], [31.7, 44.0], [31.8, 44.0], [31.9, 44.0], [32.0, 44.0], [32.1, 44.0], [32.2, 44.0], [32.3, 44.0], [32.4, 44.0], [32.5, 44.0], [32.6, 44.0], [32.7, 44.0], [32.8, 44.0], [32.9, 44.0], [33.0, 44.0], [33.1, 44.0], [33.2, 44.0], [33.3, 44.0], [33.4, 44.0], [33.5, 44.0], [33.6, 44.0], [33.7, 44.0], [33.8, 44.0], [33.9, 44.0], [34.0, 44.0], [34.1, 44.0], [34.2, 44.0], [34.3, 44.0], [34.4, 44.0], [34.5, 44.0], [34.6, 44.0], [34.7, 44.0], [34.8, 44.0], [34.9, 44.0], [35.0, 44.0], [35.1, 44.0], [35.2, 44.0], [35.3, 44.0], [35.4, 44.0], [35.5, 44.0], [35.6, 44.0], [35.7, 44.0], [35.8, 44.0], [35.9, 44.0], [36.0, 44.0], [36.1, 44.0], [36.2, 44.0], [36.3, 44.0], [36.4, 44.0], [36.5, 44.0], [36.6, 44.0], [36.7, 44.0], [36.8, 44.0], [36.9, 44.0], [37.0, 44.0], [37.1, 44.0], [37.2, 44.0], [37.3, 44.0], [37.4, 44.0], [37.5, 44.0], [37.6, 44.0], [37.7, 45.0], [37.8, 45.0], [37.9, 45.0], [38.0, 45.0], [38.1, 45.0], [38.2, 45.0], [38.3, 45.0], [38.4, 45.0], [38.5, 45.0], [38.6, 45.0], [38.7, 45.0], [38.8, 45.0], [38.9, 45.0], [39.0, 45.0], [39.1, 45.0], [39.2, 45.0], [39.3, 45.0], [39.4, 45.0], [39.5, 45.0], [39.6, 45.0], [39.7, 45.0], [39.8, 45.0], [39.9, 45.0], [40.0, 45.0], [40.1, 45.0], [40.2, 45.0], [40.3, 45.0], [40.4, 45.0], [40.5, 45.0], [40.6, 45.0], [40.7, 45.0], [40.8, 45.0], [40.9, 45.0], [41.0, 45.0], [41.1, 45.0], [41.2, 45.0], [41.3, 45.0], [41.4, 45.0], [41.5, 45.0], [41.6, 45.0], [41.7, 45.0], [41.8, 45.0], [41.9, 45.0], [42.0, 45.0], [42.1, 45.0], [42.2, 45.0], [42.3, 45.0], [42.4, 45.0], [42.5, 45.0], [42.6, 45.0], [42.7, 45.0], [42.8, 45.0], [42.9, 45.0], [43.0, 45.0], [43.1, 45.0], [43.2, 45.0], [43.3, 45.0], [43.4, 45.0], [43.5, 45.0], [43.6, 45.0], [43.7, 45.0], [43.8, 45.0], [43.9, 45.0], [44.0, 45.0], [44.1, 45.0], [44.2, 45.0], [44.3, 45.0], [44.4, 46.0], [44.5, 46.0], [44.6, 46.0], [44.7, 46.0], [44.8, 46.0], [44.9, 46.0], [45.0, 46.0], [45.1, 46.0], [45.2, 46.0], [45.3, 46.0], [45.4, 46.0], [45.5, 46.0], [45.6, 46.0], [45.7, 46.0], [45.8, 46.0], [45.9, 46.0], [46.0, 46.0], [46.1, 46.0], [46.2, 46.0], [46.3, 46.0], [46.4, 46.0], [46.5, 46.0], [46.6, 46.0], [46.7, 46.0], [46.8, 46.0], [46.9, 46.0], [47.0, 46.0], [47.1, 46.0], [47.2, 46.0], [47.3, 46.0], [47.4, 46.0], [47.5, 46.0], [47.6, 46.0], [47.7, 46.0], [47.8, 46.0], [47.9, 46.0], [48.0, 46.0], [48.1, 46.0], [48.2, 46.0], [48.3, 46.0], [48.4, 46.0], [48.5, 46.0], [48.6, 46.0], [48.7, 46.0], [48.8, 46.0], [48.9, 47.0], [49.0, 47.0], [49.1, 47.0], [49.2, 47.0], [49.3, 47.0], [49.4, 47.0], [49.5, 47.0], [49.6, 47.0], [49.7, 47.0], [49.8, 47.0], [49.9, 47.0], [50.0, 47.0], [50.1, 47.0], [50.2, 47.0], [50.3, 47.0], [50.4, 47.0], [50.5, 47.0], [50.6, 47.0], [50.7, 47.0], [50.8, 47.0], [50.9, 47.0], [51.0, 47.0], [51.1, 47.0], [51.2, 47.0], [51.3, 47.0], [51.4, 47.0], [51.5, 47.0], [51.6, 47.0], [51.7, 47.0], [51.8, 47.0], [51.9, 47.0], [52.0, 47.0], [52.1, 47.0], [52.2, 47.0], [52.3, 47.0], [52.4, 48.0], [52.5, 48.0], [52.6, 48.0], [52.7, 48.0], [52.8, 48.0], [52.9, 48.0], [53.0, 48.0], [53.1, 48.0], [53.2, 48.0], [53.3, 48.0], [53.4, 48.0], [53.5, 48.0], [53.6, 48.0], [53.7, 48.0], [53.8, 48.0], [53.9, 48.0], [54.0, 48.0], [54.1, 48.0], [54.2, 48.0], [54.3, 48.0], [54.4, 48.0], [54.5, 48.0], [54.6, 48.0], [54.7, 48.0], [54.8, 48.0], [54.9, 48.0], [55.0, 48.0], [55.1, 48.0], [55.2, 48.0], [55.3, 48.0], [55.4, 48.0], [55.5, 48.0], [55.6, 48.0], [55.7, 48.0], [55.8, 48.0], [55.9, 48.0], [56.0, 48.0], [56.1, 48.0], [56.2, 48.0], [56.3, 48.0], [56.4, 48.0], [56.5, 48.0], [56.6, 49.0], [56.7, 49.0], [56.8, 49.0], [56.9, 49.0], [57.0, 49.0], [57.1, 49.0], [57.2, 49.0], [57.3, 49.0], [57.4, 49.0], [57.5, 49.0], [57.6, 49.0], [57.7, 49.0], [57.8, 49.0], [57.9, 49.0], [58.0, 49.0], [58.1, 49.0], [58.2, 49.0], [58.3, 49.0], [58.4, 49.0], [58.5, 49.0], [58.6, 49.0], [58.7, 49.0], [58.8, 49.0], [58.9, 49.0], [59.0, 49.0], [59.1, 49.0], [59.2, 49.0], [59.3, 49.0], [59.4, 49.0], [59.5, 49.0], [59.6, 49.0], [59.7, 49.0], [59.8, 49.0], [59.9, 49.0], [60.0, 49.0], [60.1, 49.0], [60.2, 49.0], [60.3, 49.0], [60.4, 49.0], [60.5, 49.0], [60.6, 49.0], [60.7, 49.0], [60.8, 49.0], [60.9, 49.0], [61.0, 49.0], [61.1, 49.0], [61.2, 49.0], [61.3, 49.0], [61.4, 49.0], [61.5, 49.0], [61.6, 49.0], [61.7, 49.0], [61.8, 50.0], [61.9, 50.0], [62.0, 50.0], [62.1, 50.0], [62.2, 50.0], [62.3, 50.0], [62.4, 50.0], [62.5, 50.0], [62.6, 50.0], [62.7, 50.0], [62.8, 50.0], [62.9, 50.0], [63.0, 50.0], [63.1, 50.0], [63.2, 50.0], [63.3, 50.0], [63.4, 50.0], [63.5, 50.0], [63.6, 50.0], [63.7, 50.0], [63.8, 50.0], [63.9, 50.0], [64.0, 50.0], [64.1, 50.0], [64.2, 50.0], [64.3, 50.0], [64.4, 50.0], [64.5, 50.0], [64.6, 50.0], [64.7, 50.0], [64.8, 50.0], [64.9, 50.0], [65.0, 50.0], [65.1, 50.0], [65.2, 50.0], [65.3, 50.0], [65.4, 50.0], [65.5, 50.0], [65.6, 50.0], [65.7, 50.0], [65.8, 50.0], [65.9, 50.0], [66.0, 50.0], [66.1, 50.0], [66.2, 50.0], [66.3, 50.0], [66.4, 50.0], [66.5, 50.0], [66.6, 50.0], [66.7, 50.0], [66.8, 50.0], [66.9, 50.0], [67.0, 50.0], [67.1, 50.0], [67.2, 50.0], [67.3, 50.0], [67.4, 50.0], [67.5, 50.0], [67.6, 50.0], [67.7, 50.0], [67.8, 50.0], [67.9, 50.0], [68.0, 50.0], [68.1, 50.0], [68.2, 50.0], [68.3, 51.0], [68.4, 51.0], [68.5, 51.0], [68.6, 51.0], [68.7, 51.0], [68.8, 51.0], [68.9, 51.0], [69.0, 51.0], [69.1, 51.0], [69.2, 51.0], [69.3, 51.0], [69.4, 51.0], [69.5, 51.0], [69.6, 51.0], [69.7, 51.0], [69.8, 51.0], [69.9, 51.0], [70.0, 51.0], [70.1, 51.0], [70.2, 51.0], [70.3, 51.0], [70.4, 51.0], [70.5, 51.0], [70.6, 51.0], [70.7, 51.0], [70.8, 51.0], [70.9, 51.0], [71.0, 51.0], [71.1, 51.0], [71.2, 51.0], [71.3, 51.0], [71.4, 51.0], [71.5, 51.0], [71.6, 51.0], [71.7, 51.0], [71.8, 51.0], [71.9, 51.0], [72.0, 51.0], [72.1, 51.0], [72.2, 51.0], [72.3, 51.0], [72.4, 51.0], [72.5, 51.0], [72.6, 51.0], [72.7, 51.0], [72.8, 51.0], [72.9, 51.0], [73.0, 51.0], [73.1, 51.0], [73.2, 51.0], [73.3, 51.0], [73.4, 51.0], [73.5, 52.0], [73.6, 52.0], [73.7, 52.0], [73.8, 52.0], [73.9, 52.0], [74.0, 52.0], [74.1, 52.0], [74.2, 52.0], [74.3, 52.0], [74.4, 52.0], [74.5, 52.0], [74.6, 52.0], [74.7, 52.0], [74.8, 52.0], [74.9, 52.0], [75.0, 52.0], [75.1, 52.0], [75.2, 52.0], [75.3, 52.0], [75.4, 52.0], [75.5, 52.0], [75.6, 52.0], [75.7, 52.0], [75.8, 52.0], [75.9, 52.0], [76.0, 52.0], [76.1, 52.0], [76.2, 52.0], [76.3, 52.0], [76.4, 52.0], [76.5, 52.0], [76.6, 52.0], [76.7, 52.0], [76.8, 52.0], [76.9, 52.0], [77.0, 52.0], [77.1, 52.0], [77.2, 52.0], [77.3, 52.0], [77.4, 52.0], [77.5, 52.0], [77.6, 52.0], [77.7, 52.0], [77.8, 52.0], [77.9, 53.0], [78.0, 53.0], [78.1, 53.0], [78.2, 53.0], [78.3, 53.0], [78.4, 53.0], [78.5, 53.0], [78.6, 53.0], [78.7, 53.0], [78.8, 53.0], [78.9, 53.0], [79.0, 53.0], [79.1, 53.0], [79.2, 53.0], [79.3, 53.0], [79.4, 53.0], [79.5, 53.0], [79.6, 53.0], [79.7, 53.0], [79.8, 53.0], [79.9, 53.0], [80.0, 53.0], [80.1, 53.0], [80.2, 53.0], [80.3, 53.0], [80.4, 53.0], [80.5, 53.0], [80.6, 53.0], [80.7, 53.0], [80.8, 53.0], [80.9, 53.0], [81.0, 53.0], [81.1, 53.0], [81.2, 53.0], [81.3, 53.0], [81.4, 53.0], [81.5, 53.0], [81.6, 54.0], [81.7, 54.0], [81.8, 54.0], [81.9, 54.0], [82.0, 54.0], [82.1, 54.0], [82.2, 54.0], [82.3, 54.0], [82.4, 54.0], [82.5, 54.0], [82.6, 54.0], [82.7, 54.0], [82.8, 54.0], [82.9, 54.0], [83.0, 54.0], [83.1, 54.0], [83.2, 54.0], [83.3, 54.0], [83.4, 54.0], [83.5, 54.0], [83.6, 54.0], [83.7, 54.0], [83.8, 54.0], [83.9, 54.0], [84.0, 54.0], [84.1, 54.0], [84.2, 54.0], [84.3, 54.0], [84.4, 54.0], [84.5, 54.0], [84.6, 55.0], [84.7, 55.0], [84.8, 55.0], [84.9, 55.0], [85.0, 55.0], [85.1, 55.0], [85.2, 55.0], [85.3, 55.0], [85.4, 55.0], [85.5, 55.0], [85.6, 55.0], [85.7, 55.0], [85.8, 55.0], [85.9, 55.0], [86.0, 55.0], [86.1, 55.0], [86.2, 55.0], [86.3, 55.0], [86.4, 56.0], [86.5, 56.0], [86.6, 56.0], [86.7, 56.0], [86.8, 56.0], [86.9, 56.0], [87.0, 56.0], [87.1, 56.0], [87.2, 56.0], [87.3, 56.0], [87.4, 56.0], [87.5, 56.0], [87.6, 56.0], [87.7, 56.0], [87.8, 57.0], [87.9, 57.0], [88.0, 57.0], [88.1, 57.0], [88.2, 57.0], [88.3, 57.0], [88.4, 57.0], [88.5, 57.0], [88.6, 57.0], [88.7, 57.0], [88.8, 58.0], [88.9, 58.0], [89.0, 58.0], [89.1, 58.0], [89.2, 58.0], [89.3, 58.0], [89.4, 58.0], [89.5, 58.0], [89.6, 59.0], [89.7, 59.0], [89.8, 59.0], [89.9, 59.0], [90.0, 59.0], [90.1, 59.0], [90.2, 60.0], [90.3, 60.0], [90.4, 60.0], [90.5, 60.0], [90.6, 60.0], [90.7, 61.0], [90.8, 61.0], [90.9, 61.0], [91.0, 61.0], [91.1, 61.0], [91.2, 62.0], [91.3, 62.0], [91.4, 62.0], [91.5, 62.0], [91.6, 62.0], [91.7, 62.0], [91.8, 63.0], [91.9, 63.0], [92.0, 63.0], [92.1, 64.0], [92.2, 64.0], [92.3, 64.0], [92.4, 64.0], [92.5, 64.0], [92.6, 65.0], [92.7, 65.0], [92.8, 65.0], [92.9, 65.0], [93.0, 66.0], [93.1, 66.0], [93.2, 66.0], [93.3, 66.0], [93.4, 67.0], [93.5, 67.0], [93.6, 67.0], [93.7, 68.0], [93.8, 68.0], [93.9, 68.0], [94.0, 68.0], [94.1, 69.0], [94.2, 69.0], [94.3, 69.0], [94.4, 70.0], [94.5, 70.0], [94.6, 71.0], [94.7, 71.0], [94.8, 71.0], [94.9, 72.0], [95.0, 73.0], [95.1, 73.0], [95.2, 74.0], [95.3, 74.0], [95.4, 74.0], [95.5, 75.0], [95.6, 75.0], [95.7, 76.0], [95.8, 77.0], [95.9, 77.0], [96.0, 78.0], [96.1, 78.0], [96.2, 79.0], [96.3, 80.0], [96.4, 80.0], [96.5, 81.0], [96.6, 82.0], [96.7, 83.0], [96.8, 84.0], [96.9, 85.0], [97.0, 86.0], [97.1, 86.0], [97.2, 87.0], [97.3, 89.0], [97.4, 90.0], [97.5, 92.0], [97.6, 94.0], [97.7, 96.0], [97.8, 100.0], [97.9, 103.0], [98.0, 105.0], [98.1, 109.0], [98.2, 111.0], [98.3, 116.0], [98.4, 120.0], [98.5, 126.0], [98.6, 133.0], [98.7, 152.0], [98.8, 1004.0], [98.9, 2623.0], [99.0, 4198.0], [99.1, 4658.0], [99.2, 5184.0], [99.3, 6441.0], [99.4, 6674.0], [99.5, 6925.0], [99.6, 7439.0], [99.7, 9078.0], [99.8, 9342.0], [99.9, 11644.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 15646.0, "series": [{"data": [[100.0, 15.0], [200.0, 32.0], [300.0, 51.0], [400.0, 131.0], [500.0, 237.0], [600.0, 332.0], [700.0, 408.0], [800.0, 504.0], [900.0, 560.0], [1000.0, 581.0], [1100.0, 636.0], [1200.0, 631.0], [1300.0, 629.0], [1400.0, 573.0], [1500.0, 593.0], [1600.0, 596.0], [1700.0, 581.0], [1800.0, 546.0], [1900.0, 502.0], [2000.0, 449.0], [2100.0, 493.0], [2300.0, 407.0], [2200.0, 437.0], [2400.0, 406.0], [2500.0, 328.0], [2600.0, 364.0], [2700.0, 342.0], [2800.0, 323.0], [2900.0, 332.0], [3000.0, 269.0], [3100.0, 279.0], [3300.0, 235.0], [3200.0, 262.0], [3400.0, 203.0], [3500.0, 201.0], [3600.0, 198.0], [3700.0, 156.0], [3800.0, 140.0], [3900.0, 160.0], [4000.0, 134.0], [4300.0, 102.0], [4100.0, 125.0], [4200.0, 128.0], [4600.0, 98.0], [4500.0, 87.0], [4400.0, 97.0], [4700.0, 82.0], [4800.0, 77.0], [4900.0, 62.0], [5100.0, 43.0], [5000.0, 72.0], [5300.0, 55.0], [5200.0, 50.0], [5400.0, 41.0], [5600.0, 46.0], [5500.0, 56.0], [5700.0, 31.0], [5800.0, 34.0], [5900.0, 37.0], [6100.0, 33.0], [6000.0, 30.0], [6300.0, 22.0], [6200.0, 23.0], [6600.0, 25.0], [6400.0, 26.0], [6500.0, 27.0], [6800.0, 21.0], [6700.0, 13.0], [6900.0, 16.0], [7000.0, 14.0], [7100.0, 14.0], [7400.0, 10.0], [7200.0, 14.0], [7300.0, 10.0], [7500.0, 9.0], [7600.0, 4.0], [7900.0, 6.0], [7800.0, 9.0], [7700.0, 10.0], [8100.0, 7.0], [8000.0, 7.0], [8400.0, 7.0], [8300.0, 5.0], [8200.0, 5.0], [8500.0, 6.0], [8700.0, 3.0], [9000.0, 3.0], [8800.0, 3.0], [9100.0, 3.0], [9200.0, 2.0], [8900.0, 3.0], [9600.0, 2.0], [9300.0, 5.0], [9700.0, 1.0], [9400.0, 3.0], [9500.0, 1.0], [10000.0, 2.0], [9900.0, 3.0], [10200.0, 2.0], [10100.0, 1.0], [10500.0, 1.0], [10600.0, 1.0], [10700.0, 1.0], [10800.0, 3.0], [11000.0, 1.0], [10900.0, 1.0], [11400.0, 2.0], [12300.0, 1.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[0.0, 15646.0], [600.0, 1.0], [800.0, 1.0], [1000.0, 1.0], [1300.0, 2.0], [1500.0, 1.0], [1900.0, 1.0], [2000.0, 1.0], [2200.0, 3.0], [2300.0, 1.0], [2400.0, 3.0], [2500.0, 2.0], [2600.0, 4.0], [3400.0, 1.0], [3500.0, 2.0], [3700.0, 1.0], [3600.0, 1.0], [3800.0, 1.0], [3900.0, 1.0], [4000.0, 4.0], [4200.0, 2.0], [4100.0, 3.0], [4500.0, 6.0], [4600.0, 6.0], [4400.0, 4.0], [4700.0, 5.0], [4800.0, 2.0], [4900.0, 2.0], [5000.0, 4.0], [5100.0, 1.0], [5500.0, 1.0], [5800.0, 2.0], [5700.0, 1.0], [6000.0, 1.0], [5900.0, 1.0], [6100.0, 1.0], [6200.0, 4.0], [6300.0, 2.0], [6500.0, 6.0], [6600.0, 10.0], [6400.0, 6.0], [6700.0, 7.0], [6900.0, 2.0], [6800.0, 4.0], [7000.0, 6.0], [7100.0, 2.0], [7400.0, 3.0], [7300.0, 3.0], [7200.0, 3.0], [7600.0, 1.0], [7900.0, 1.0], [7800.0, 1.0], [8000.0, 1.0], [8400.0, 1.0], [8700.0, 1.0], [9200.0, 8.0], [9100.0, 5.0], [9000.0, 4.0], [8900.0, 5.0], [8800.0, 1.0], [9300.0, 3.0], [9400.0, 5.0], [9500.0, 2.0], [9700.0, 1.0], [9600.0, 2.0], [9800.0, 2.0], [10000.0, 1.0], [11200.0, 1.0], [11600.0, 1.0], [11700.0, 3.0], [12000.0, 2.0], [12200.0, 4.0], [12300.0, 1.0], [14000.0, 3.0], [14100.0, 1.0], [14200.0, 1.0], [100.0, 158.0], [300.0, 1.0], [400.0, 1.0]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 14200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 34.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 16038.0, "series": [{"data": [[0.0, 16038.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 5096.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 10832.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 34.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 14.595006934812771, "minX": 1.74719154E12, "maxY": 32.0, "series": [{"data": [[1.74719154E12, 31.824324324324326], [1.7471922E12, 32.0], [1.74719184E12, 32.0], [1.7471919E12, 32.0], [1.7471928E12, 14.595006934812771], [1.7471925E12, 32.0], [1.74719196E12, 32.0], [1.7471916E12, 32.0], [1.74719262E12, 32.0], [1.74719166E12, 32.0], [1.74719256E12, 32.0], [1.74719226E12, 32.0], [1.74719268E12, 32.0], [1.74719238E12, 32.0], [1.74719232E12, 32.0], [1.74719172E12, 32.0], [1.74719202E12, 32.0], [1.74719178E12, 32.0], [1.74719244E12, 32.0], [1.74719214E12, 32.0], [1.74719208E12, 32.0], [1.74719274E12, 29.715585203153406]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7471928E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 30.75, "minX": 1.0, "maxY": 2366.0386172118847, "series": [{"data": [[32.0, 2366.0386172118847], [2.0, 215.5], [3.0, 545.8333333333334], [4.0, 310.3333333333333], [5.0, 445.5], [6.0, 509.7894736842105], [7.0, 689.8571428571428], [8.0, 553.6666666666666], [9.0, 770.4285714285713], [10.0, 694.7666666666665], [11.0, 771.1538461538463], [12.0, 861.5625], [13.0, 811.3333333333334], [14.0, 1085.3939393939395], [15.0, 1243.34375], [16.0, 1044.1764705882356], [1.0, 456.2222222222222], [17.0, 1121.6363636363637], [18.0, 1533.0000000000002], [19.0, 818.0], [20.0, 1200.7407407407406], [21.0, 1364.3188405797102], [22.0, 1402.6000000000001], [23.0, 1070.0], [24.0, 1801.2553191489362], [25.0, 1734.818181818182], [26.0, 1662.615384615385], [27.0, 1551.153846153846], [28.0, 1913.2016806722688], [29.0, 1991.6106194690274], [30.0, 2065.0512820512818], [31.0, 2341.1397058823522]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[31.488937499999945, 2323.1794375000013]], "isOverall": false, "label": "Create CSR-Aggregated", "isController": false}, {"data": [[32.0, 135.43705226850716], [2.0, 30.75], [3.0, 32.14285714285714], [4.0, 32.333333333333336], [5.0, 37.5], [6.0, 34.77777777777778], [7.0, 34.555555555555564], [8.0, 38.0], [9.0, 34.285714285714285], [10.0, 37.800000000000004], [11.0, 38.92307692307692], [12.0, 40.0], [13.0, 56.666666666666664], [14.0, 48.235294117647065], [15.0, 49.2], [16.0, 43.29411764705882], [1.0, 31.666666666666668], [17.0, 43.18181818181819], [18.0, 50.083333333333336], [19.0, 41.0], [20.0, 46.703703703703695], [21.0, 43.2608695652174], [22.0, 43.16000000000001], [23.0, 45.0], [24.0, 49.4468085106383], [25.0, 51.30769230769231], [26.0, 43.238095238095234], [27.0, 54.94736842105263], [28.0, 44.24166666666666], [29.0, 46.95495495495495], [30.0, 45.900000000000006], [31.0, 47.42537313432835]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}, {"data": [[31.48968749999997, 130.223125000001]], "isOverall": false, "label": "HTTP Request - enroll-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 32.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1721.8666666666666, "minX": 1.74719154E12, "maxY": 135178.46666666667, "series": [{"data": [[1.74719154E12, 8485.466666666667], [1.7471922E12, 129772.5], [1.74719184E12, 102359.15], [1.7471919E12, 106921.86666666667], [1.7471928E12, 53140.666666666664], [1.7471925E12, 109259.13333333333], [1.74719196E12, 107512.6], [1.7471916E12, 87395.03333333334], [1.74719262E12, 118223.0], [1.74719166E12, 129583.68333333333], [1.74719256E12, 110794.95], [1.74719226E12, 109405.96666666666], [1.74719268E12, 105596.55], [1.74719238E12, 108711.78333333334], [1.74719232E12, 106332.95], [1.74719172E12, 135178.46666666667], [1.74719202E12, 120031.6], [1.74719178E12, 120473.55], [1.74719244E12, 105891.96666666666], [1.74719214E12, 128111.38333333333], [1.74719208E12, 127710.36666666667], [1.74719274E12, 121377.0]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.74719154E12, 1721.8666666666666], [1.7471922E12, 26155.583333333332], [1.74719184E12, 20634.683333333334], [1.7471919E12, 21553.0], [1.7471928E12, 10713.716666666667], [1.7471925E12, 22029.466666666667], [1.74719196E12, 21672.966666666667], [1.7471916E12, 18437.45], [1.74719262E12, 23841.183333333334], [1.74719166E12, 26126.666666666668], [1.74719256E12, 22326.133333333335], [1.74719226E12, 22058.783333333333], [1.74719268E12, 21285.75], [1.74719238E12, 21910.2], [1.74719232E12, 21434.333333333332], [1.74719172E12, 27253.5], [1.74719202E12, 24196.683333333334], [1.74719178E12, 24285.833333333332], [1.74719244E12, 21345.883333333335], [1.74719214E12, 25830.1], [1.74719208E12, 25740.05], [1.74719274E12, 24462.833333333332]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7471928E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 42.18005540166203, "minX": 1.74719154E12, "maxY": 6262.55172413793, "series": [{"data": [[1.74719154E12, 802.5666666666666], [1.7471922E12, 2134.3106575963748], [1.74719184E12, 2708.136690647479], [1.7471919E12, 2594.0826446280994], [1.7471928E12, 1035.1277777777777], [1.7471925E12, 2524.693657219972], [1.74719196E12, 2582.8410958904115], [1.7471916E12, 1875.4331641285962], [1.74719262E12, 2341.827715355809], [1.74719166E12, 2117.6928327645046], [1.74719256E12, 2533.7453580901847], [1.74719226E12, 2531.0161725067396], [1.74719268E12, 2635.1324965132508], [1.74719238E12, 2535.358592692826], [1.74719232E12, 2611.023545706369], [1.74719172E12, 2050.354416575792], [1.74719202E12, 2323.4331288343546], [1.74719178E12, 2272.998777506111], [1.74719244E12, 2620.293463143256], [1.74719214E12, 2139.528193325668], [1.74719208E12, 2178.9331797235013], [1.74719274E12, 2147.740606060606]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74719154E12, 6262.55172413793], [1.7471922E12, 45.56072644721913], [1.74719184E12, 51.89928057553954], [1.7471919E12, 53.5013774104683], [1.7471928E12, 42.18005540166203], [1.7471925E12, 51.35444743935314], [1.74719196E12, 51.82465753424661], [1.7471916E12, 1558.6956521739125], [1.74719262E12, 47.51307596513069], [1.74719166E12, 46.921590909090924], [1.74719256E12, 48.860372340425585], [1.74719226E12, 52.01615074024227], [1.74719268E12, 53.29288702928869], [1.74719238E12, 49.73848238482384], [1.74719232E12, 52.463988919667614], [1.74719172E12, 45.59368191721134], [1.74719202E12, 47.787730061349684], [1.74719178E12, 47.40709046454772], [1.74719244E12, 52.21418636995828], [1.74719214E12, 46.97241379310346], [1.74719208E12, 46.86159169550169], [1.74719274E12, 48.455097087378654]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7471928E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74719154E12, "maxY": 6262.534482758622, "series": [{"data": [[1.74719154E12, 0.0], [1.7471922E12, 0.0], [1.74719184E12, 0.0], [1.7471919E12, 0.0], [1.7471928E12, 0.0], [1.7471925E12, 0.0], [1.74719196E12, 0.0], [1.7471916E12, 0.0], [1.74719262E12, 0.0], [1.74719166E12, 0.0], [1.74719256E12, 0.0], [1.74719226E12, 0.0], [1.74719268E12, 0.0], [1.74719238E12, 0.0], [1.74719232E12, 0.0], [1.74719172E12, 0.0], [1.74719202E12, 0.0], [1.74719178E12, 0.0], [1.74719244E12, 0.0], [1.74719214E12, 0.0], [1.74719208E12, 0.0], [1.74719274E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74719154E12, 6262.534482758622], [1.7471922E12, 45.46651532349603], [1.74719184E12, 51.88920863309353], [1.7471919E12, 53.48484848484849], [1.7471928E12, 42.17728531855954], [1.7471925E12, 51.35040431266857], [1.74719196E12, 51.813698630136976], [1.7471916E12, 1558.6714975845405], [1.74719262E12, 47.50933997509341], [1.74719166E12, 46.903409090909086], [1.74719256E12, 48.85505319148932], [1.74719226E12, 52.0134589502019], [1.74719268E12, 53.28730822873079], [1.74719238E12, 49.72764227642274], [1.74719232E12, 52.459833795013864], [1.74719172E12, 45.57734204793023], [1.74719202E12, 47.784049079754574], [1.74719178E12, 47.392420537897316], [1.74719244E12, 52.2030598052851], [1.74719214E12, 46.96666666666666], [1.74719208E12, 46.85582468281424], [1.74719274E12, 48.44660194174757]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7471928E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.74719154E12, "maxY": 311.5862068965518, "series": [{"data": [[1.74719154E12, 0.0], [1.7471922E12, 0.0], [1.74719184E12, 0.0], [1.7471919E12, 0.0], [1.7471928E12, 0.0], [1.7471925E12, 0.0], [1.74719196E12, 0.0], [1.7471916E12, 0.0], [1.74719262E12, 0.0], [1.74719166E12, 0.0], [1.74719256E12, 0.0], [1.74719226E12, 0.0], [1.74719268E12, 0.0], [1.74719238E12, 0.0], [1.74719232E12, 0.0], [1.74719172E12, 0.0], [1.74719202E12, 0.0], [1.74719178E12, 0.0], [1.74719244E12, 0.0], [1.74719214E12, 0.0], [1.74719208E12, 0.0], [1.74719274E12, 0.0]], "isOverall": false, "label": "Create CSR", "isController": false}, {"data": [[1.74719154E12, 311.5862068965518], [1.7471922E12, 0.08513053348467654], [1.74719184E12, 0.181294964028777], [1.7471919E12, 0.18457300275482097], [1.7471928E12, 0.09972299168975067], [1.7471925E12, 0.13881401617250694], [1.74719196E12, 0.14383561643835627], [1.7471916E12, 0.3896940418679552], [1.74719262E12, 0.13574097135740967], [1.74719166E12, 0.1693181818181818], [1.74719256E12, 0.15558510638297873], [1.74719226E12, 0.10767160161507404], [1.74719268E12, 0.13389121338912133], [1.74719238E12, 0.10975609756097571], [1.74719232E12, 0.13296398891966757], [1.74719172E12, 0.1318082788671024], [1.74719202E12, 0.10306748466257673], [1.74719178E12, 0.1662591687041565], [1.74719244E12, 0.15577190542420052], [1.74719214E12, 0.12413793103448281], [1.74719208E12, 0.09803921568627451], [1.74719274E12, 0.12742718446601953]], "isOverall": false, "label": "HTTP Request - enroll", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7471928E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 28.0, "minX": 1.74719154E12, "maxY": 14246.0, "series": [{"data": [[1.74719154E12, 11644.0], [1.7471922E12, 9944.0], [1.74719184E12, 10058.0], [1.7471919E12, 11089.0], [1.7471928E12, 4220.0], [1.7471925E12, 11463.0], [1.74719196E12, 10869.0], [1.7471916E12, 14246.0], [1.74719262E12, 10731.0], [1.74719166E12, 8173.0], [1.74719256E12, 10977.0], [1.74719226E12, 12321.0], [1.74719268E12, 9511.0], [1.74719238E12, 11467.0], [1.74719232E12, 10513.0], [1.74719172E12, 8466.0], [1.74719202E12, 8330.0], [1.74719178E12, 9656.0], [1.74719244E12, 10222.0], [1.74719214E12, 8315.0], [1.74719208E12, 9477.0], [1.74719274E12, 9034.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.74719154E12, 8327.700000000006], [1.7471922E12, 2931.2000000000003], [1.74719184E12, 3895.500000000005], [1.7471919E12, 3658.4], [1.7471928E12, 1541.0000000000018], [1.7471925E12, 3554.6000000000004], [1.74719196E12, 3755.700000000001], [1.7471916E12, 4322.0], [1.74719262E12, 3269.0], [1.74719166E12, 2968.0], [1.74719256E12, 3523.8999999999996], [1.74719226E12, 3512.0000000000005], [1.74719268E12, 3661.5], [1.74719238E12, 3529.2], [1.74719232E12, 3713.0], [1.74719172E12, 2830.8000000000006], [1.74719202E12, 3244.8], [1.74719178E12, 3179.2999999999993], [1.74719244E12, 3683.6000000000035], [1.74719214E12, 3012.0], [1.74719208E12, 3101.0000000000005], [1.74719274E12, 3080.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.74719154E12, 10891.069999999989], [1.7471922E12, 5810.959999999999], [1.74719184E12, 7446.859999999988], [1.7471919E12, 6874.270000000001], [1.7471928E12, 2695.9199999999996], [1.7471925E12, 6959.680000000006], [1.74719196E12, 6566.9300000000185], [1.7471916E12, 11763.400000000003], [1.74719262E12, 6269.800000000004], [1.74719166E12, 5143.000000000004], [1.74719256E12, 7201.070000000006], [1.74719226E12, 7115.42000000001], [1.74719268E12, 6826.700000000005], [1.74719238E12, 6859.52], [1.74719232E12, 7047.549999999999], [1.74719172E12, 4820.159999999998], [1.74719202E12, 5650.360000000008], [1.74719178E12, 6252.309999999996], [1.74719244E12, 6765.519999999997], [1.74719214E12, 5496.599999999992], [1.74719208E12, 5601.799999999997], [1.74719274E12, 5628.0]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.74719154E12, 9276.7], [1.7471922E12, 3959.0], [1.74719184E12, 4994.300000000001], [1.7471919E12, 4780.3499999999985], [1.7471928E12, 1867.6], [1.7471925E12, 4534.2], [1.74719196E12, 4709.95], [1.7471916E12, 6611.75], [1.74719262E12, 4093.75], [1.74719166E12, 3558.0], [1.74719256E12, 4865.65], [1.74719226E12, 4442.0], [1.74719268E12, 4751.75], [1.74719238E12, 4671.499999999998], [1.74719232E12, 4727.0], [1.74719172E12, 3679.7999999999993], [1.74719202E12, 4041.7999999999993], [1.74719178E12, 4102.249999999993], [1.74719244E12, 4825.65], [1.74719214E12, 3811.0], [1.74719208E12, 3907.7999999999993], [1.74719274E12, 3915.5]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.74719154E12, 176.0], [1.7471922E12, 36.0], [1.74719184E12, 35.0], [1.7471919E12, 37.0], [1.7471928E12, 28.0], [1.7471925E12, 35.0], [1.74719196E12, 36.0], [1.7471916E12, 37.0], [1.74719262E12, 35.0], [1.74719166E12, 36.0], [1.74719256E12, 34.0], [1.74719226E12, 36.0], [1.74719268E12, 36.0], [1.74719238E12, 36.0], [1.74719232E12, 36.0], [1.74719172E12, 35.0], [1.74719202E12, 35.0], [1.74719178E12, 35.0], [1.74719244E12, 35.0], [1.74719214E12, 36.0], [1.74719208E12, 37.0], [1.74719274E12, 37.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.74719154E12, 985.5], [1.7471922E12, 380.0], [1.74719184E12, 318.5], [1.7471919E12, 269.0], [1.7471928E12, 89.0], [1.7471925E12, 130.0], [1.74719196E12, 291.5], [1.7471916E12, 834.0], [1.74719262E12, 123.0], [1.74719166E12, 178.0], [1.74719256E12, 422.0], [1.74719226E12, 133.0], [1.74719268E12, 295.5], [1.74719238E12, 432.0], [1.74719232E12, 292.5], [1.74719172E12, 118.0], [1.74719202E12, 277.5], [1.74719178E12, 284.0], [1.74719244E12, 214.0], [1.74719214E12, 165.0], [1.74719208E12, 378.0], [1.74719274E12, 274.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7471928E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 80.0, "minX": 1.0, "maxY": 13032.5, "series": [{"data": [[2.0, 936.0], [32.0, 94.5], [33.0, 328.0], [35.0, 117.0], [34.0, 107.0], [36.0, 614.0], [37.0, 383.5], [39.0, 443.0], [38.0, 322.5], [41.0, 450.0], [40.0, 109.0], [43.0, 138.0], [42.0, 555.5], [44.0, 356.5], [45.0, 84.0], [3.0, 582.0], [51.0, 837.0], [4.0, 158.5], [5.0, 918.5], [6.0, 561.5], [7.0, 693.0], [8.0, 1140.5], [9.0, 953.5], [10.0, 1937.0], [11.0, 1344.0], [12.0, 742.0], [13.0, 517.0], [14.0, 570.0], [15.0, 456.0], [1.0, 1010.0], [16.0, 277.5], [17.0, 104.0], [18.0, 649.0], [19.0, 80.0], [20.0, 624.0], [21.0, 467.0], [22.0, 157.5], [23.0, 422.0], [24.0, 524.0], [25.0, 571.5], [26.0, 332.0], [27.0, 122.0], [28.0, 250.0], [29.0, 419.0], [30.0, 121.0], [31.0, 104.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[18.0, 4043.0], [9.0, 8907.0], [10.0, 2077.0], [5.0, 6848.0], [20.0, 4616.0], [21.0, 8187.5], [25.0, 13032.5], [13.0, 6445.0], [14.0, 5598.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 51.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 13032.5, "series": [{"data": [[2.0, 0.0], [32.0, 37.5], [33.0, 0.0], [35.0, 37.0], [34.0, 37.0], [36.0, 0.0], [37.0, 0.0], [39.0, 0.0], [38.0, 18.0], [41.0, 0.0], [40.0, 38.5], [43.0, 37.0], [42.0, 0.0], [44.0, 19.5], [45.0, 37.0], [3.0, 0.0], [51.0, 0.0], [4.0, 15.5], [5.0, 0.0], [6.0, 0.0], [7.0, 0.0], [8.0, 0.0], [9.0, 0.0], [10.0, 52.0], [11.0, 0.0], [12.0, 0.0], [13.0, 35.0], [14.0, 18.0], [15.0, 0.0], [1.0, 0.0], [16.0, 18.0], [17.0, 37.5], [18.0, 0.0], [19.0, 38.0], [20.0, 38.0], [21.0, 35.0], [22.0, 0.0], [23.0, 32.0], [24.0, 36.0], [25.0, 0.0], [26.0, 0.0], [27.0, 35.0], [28.0, 0.0], [29.0, 0.0], [30.0, 36.5], [31.0, 37.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[18.0, 4043.0], [9.0, 8907.0], [10.0, 2077.0], [5.0, 6848.0], [20.0, 4616.0], [21.0, 8187.5], [25.0, 13032.5], [13.0, 6445.0], [14.0, 5598.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 51.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 3.0, "minX": 1.74719154E12, "maxY": 30.583333333333332, "series": [{"data": [[1.74719154E12, 3.0], [1.7471922E12, 29.383333333333333], [1.74719184E12, 23.166666666666668], [1.7471919E12, 24.2], [1.7471928E12, 11.616666666666667], [1.7471925E12, 24.716666666666665], [1.74719196E12, 24.333333333333332], [1.7471916E12, 20.183333333333334], [1.74719262E12, 26.733333333333334], [1.74719166E12, 29.333333333333332], [1.74719256E12, 25.1], [1.74719226E12, 24.75], [1.74719268E12, 23.9], [1.74719238E12, 24.616666666666667], [1.74719232E12, 24.066666666666666], [1.74719172E12, 30.583333333333332], [1.74719202E12, 27.166666666666668], [1.74719178E12, 27.266666666666666], [1.74719244E12, 23.966666666666665], [1.74719214E12, 28.983333333333334], [1.74719208E12, 28.916666666666668], [1.74719274E12, 27.35]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7471928E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.74719154E12, "maxY": 15.3, "series": [{"data": [[1.74719154E12, 1.5], [1.7471922E12, 14.7], [1.74719184E12, 11.583333333333334], [1.7471919E12, 12.1], [1.7471928E12, 6.0], [1.7471925E12, 12.35], [1.74719196E12, 12.166666666666666], [1.7471916E12, 9.85], [1.74719262E12, 13.35], [1.74719166E12, 14.65], [1.74719256E12, 12.566666666666666], [1.74719226E12, 12.366666666666667], [1.74719268E12, 11.95], [1.74719238E12, 12.316666666666666], [1.74719232E12, 12.033333333333333], [1.74719172E12, 15.283333333333333], [1.74719202E12, 13.583333333333334], [1.74719178E12, 13.633333333333333], [1.74719244E12, 11.983333333333333], [1.74719214E12, 14.483333333333333], [1.74719208E12, 14.466666666666667], [1.74719274E12, 13.75]], "isOverall": false, "label": "0", "isController": false}, {"data": [[1.74719154E12, 0.8666666666666667], [1.7471922E12, 14.683333333333334], [1.74719184E12, 11.583333333333334], [1.7471919E12, 12.1], [1.7471928E12, 6.016666666666667], [1.7471925E12, 12.366666666666667], [1.74719196E12, 12.166666666666666], [1.7471916E12, 9.883333333333333], [1.74719262E12, 13.383333333333333], [1.74719166E12, 14.666666666666666], [1.74719256E12, 12.533333333333333], [1.74719226E12, 12.383333333333333], [1.74719268E12, 11.95], [1.74719238E12, 12.3], [1.74719232E12, 12.033333333333333], [1.74719172E12, 15.3], [1.74719202E12, 13.583333333333334], [1.74719178E12, 13.633333333333333], [1.74719244E12, 11.983333333333333], [1.74719214E12, 14.5], [1.74719208E12, 14.45], [1.74719274E12, 13.733333333333333]], "isOverall": false, "label": "201", "isController": false}, {"data": [[1.74719154E12, 0.1], [1.7471916E12, 0.4666666666666667]], "isOverall": false, "label": "400", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7471928E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.74719154E12, "maxY": 15.3, "series": [{"data": [[1.74719154E12, 0.8666666666666667], [1.7471922E12, 14.683333333333334], [1.74719184E12, 11.583333333333334], [1.7471919E12, 12.1], [1.7471928E12, 6.016666666666667], [1.7471925E12, 12.366666666666667], [1.74719196E12, 12.166666666666666], [1.7471916E12, 9.883333333333333], [1.74719262E12, 13.383333333333333], [1.74719166E12, 14.666666666666666], [1.74719256E12, 12.533333333333333], [1.74719226E12, 12.383333333333333], [1.74719268E12, 11.95], [1.74719238E12, 12.3], [1.74719232E12, 12.033333333333333], [1.74719172E12, 15.3], [1.74719202E12, 13.583333333333334], [1.74719178E12, 13.633333333333333], [1.74719244E12, 11.983333333333333], [1.74719214E12, 14.5], [1.74719208E12, 14.45], [1.74719274E12, 13.733333333333333]], "isOverall": false, "label": "HTTP Request - enroll-success", "isController": false}, {"data": [[1.74719154E12, 0.1], [1.7471916E12, 0.4666666666666667]], "isOverall": false, "label": "HTTP Request - enroll-failure", "isController": false}, {"data": [[1.74719154E12, 1.5], [1.7471922E12, 14.7], [1.74719184E12, 11.583333333333334], [1.7471919E12, 12.1], [1.7471928E12, 6.0], [1.7471925E12, 12.35], [1.74719196E12, 12.166666666666666], [1.7471916E12, 9.85], [1.74719262E12, 13.35], [1.74719166E12, 14.65], [1.74719256E12, 12.566666666666666], [1.74719226E12, 12.366666666666667], [1.74719268E12, 11.95], [1.74719238E12, 12.316666666666666], [1.74719232E12, 12.033333333333333], [1.74719172E12, 15.283333333333333], [1.74719202E12, 13.583333333333334], [1.74719178E12, 13.633333333333333], [1.74719244E12, 11.983333333333333], [1.74719214E12, 14.483333333333333], [1.74719208E12, 14.466666666666667], [1.74719274E12, 13.75]], "isOverall": false, "label": "Create CSR-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7471928E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.1, "minX": 1.74719154E12, "maxY": 30.583333333333332, "series": [{"data": [[1.74719154E12, 2.3666666666666667], [1.7471922E12, 29.383333333333333], [1.74719184E12, 23.166666666666668], [1.7471919E12, 24.2], [1.7471928E12, 12.016666666666667], [1.7471925E12, 24.716666666666665], [1.74719196E12, 24.333333333333332], [1.7471916E12, 19.733333333333334], [1.74719262E12, 26.733333333333334], [1.74719166E12, 29.316666666666666], [1.74719256E12, 25.1], [1.74719226E12, 24.75], [1.74719268E12, 23.9], [1.74719238E12, 24.616666666666667], [1.74719232E12, 24.066666666666666], [1.74719172E12, 30.583333333333332], [1.74719202E12, 27.166666666666668], [1.74719178E12, 27.266666666666666], [1.74719244E12, 23.966666666666665], [1.74719214E12, 28.983333333333334], [1.74719208E12, 28.916666666666668], [1.74719274E12, 27.483333333333334]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.74719154E12, 0.1], [1.7471916E12, 0.4666666666666667]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7471928E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 3600000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

